<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Markdown代码折叠与收起</title>
      <link href="/2019/06/16/Markdown%E4%BB%A3%E7%A0%81%E6%8A%98%E5%8F%A0%E4%B8%8E%E6%94%B6%E8%B5%B7/"/>
      <url>/2019/06/16/Markdown%E4%BB%A3%E7%A0%81%E6%8A%98%E5%8F%A0%E4%B8%8E%E6%94%B6%E8%B5%B7/</url>
      <content type="html"><![CDATA[<h1 id="Markdown代码折叠与收起"><a href="#Markdown代码折叠与收起" class="headerlink" title="Markdown代码折叠与收起"></a>Markdown代码折叠与收起</h1><p>介绍：有的时候，代码太长，全部展开显得很臃肿，所以我们可以采用代码折叠的方式。</p><a id="more"></a><p>Markdown很方便，但基本语法有些不足：比如无法使用折叠语法，无法让文字有不同的颜色。<br>这些功能可以实现，不过需要使用 html 语法进行扩展。这篇文章主要是整理一下这些技巧，方便更好的使用。</p><h2 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h2><p>折叠语法：<code>&lt;details&gt;</code> 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>点击时的区域标题：点击查看详细内容<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - 测试 测试测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>title，value，callBack可以缺省<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>details</code>：折叠语法标签<br><code>summary</code>：折叠语法展示的摘要<br><code>pre</code>：以原有格式显示元素内的文字是已经格式化的文本<br><code>code</code>：指定代码范例<br><code>blockcode</code>：表示程序的代码块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>点击时的区域标题<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  \`\`\`</span><br><span class="line">  echo "hello shell"</span><br><span class="line">  echo "hello python"</span><br><span class="line">  \`\`\`</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><details><br>  <summary>点击时的区域标题：点击查看详细内容</summary><br>  <p> - 测试 测试测试</p><br>  <pre><code>title，value，callBack可以缺省</code></pre><br></details><details><br>  <summary>点击时的区域标题</summary><br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"hello shell"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello python"</span></span><br></pre></td></tr></table></figure><br><br></details><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://guoflight.github.io/posts/28189/" target="_blank" rel="noopener">https://guoflight.github.io/posts/28189/</a><br><a href="https://www.cnblogs.com/buwuliao/p/9578918.html" target="_blank" rel="noopener">https://www.cnblogs.com/buwuliao/p/9578918.html</a></p>]]></content>
      
      <categories>
          
          <category> Markdown笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown代码折叠与收起 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python数据类型</title>
      <link href="/2019/05/18/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/05/18/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h1><a id="more"></a><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>什么是数据？为何要有多种类型的数据？<br>数据即变量的值，如：<code>age=18</code>，<code>18</code>则是我们保存的数据。<br>变量是用来反映/保持状态以及状态变化的，毫无疑问针对不同的状态就应该用不同类型的数据去标识。</p><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p><code>整型</code>和<code>浮点型</code>统称为数字类型</p><h3 id="int整型"><a href="#int整型" class="headerlink" title="int整型"></a>int整型</h3><p>用于标识：年龄，等级，身份证号，QQ号，个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># int（整型）</span></span><br><span class="line">在<span class="number">32</span>位机器上，整数的位数为<span class="number">32</span>位，取值范围为<span class="number">-2</span>**<span class="number">31</span>～<span class="number">2</span>**<span class="number">31</span><span class="number">-1</span>，即 <span class="number">-2147483648</span>～<span class="number">2147483647</span></span><br><span class="line">在<span class="number">64</span>位系统上，整数的位数为<span class="number">64</span>位，取值范围为<span class="number">-2</span>**<span class="number">63</span>～<span class="number">2</span>**<span class="number">63</span><span class="number">-1</span>，即 <span class="number">-9223372036854775808</span>～<span class="number">9223372036854775807</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># long（长整型）</span></span><br><span class="line">跟C语言不同，Python 的长整数没有指定位宽，即：Python没有限制长整数数值的大小，但实际上由于机器内存有限，我们使用的长整数数值不可能无限大。</span><br><span class="line">注意：自从 Python2<span class="number">.2</span> 起，如果整数发生溢出，Python 会自动将整数数据转换为长整数，所以如今在长整数数据后面不加字母 L 也不会导致严重后果了。</span><br><span class="line">注意：在 Python3 里不再有 long 类型了，全都是int</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a= <span class="number">2</span>**<span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)    <span class="comment"># type()是查看数据类型的方法</span></span><br><span class="line">&lt;type <span class="string">'long'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">2</span>**<span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(b)</span><br><span class="line">&lt;type <span class="string">'int'</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># complex复数型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">1</span><span class="number">-2j</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.imag</span><br><span class="line"><span class="number">-2.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.real</span><br><span class="line"><span class="number">1.0</span></span><br></pre></td></tr></table></figure><p>定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># int整型</span></span><br><span class="line">age=<span class="number">10</span>  <span class="comment"># age=int(10)</span></span><br><span class="line"></span><br><span class="line">print(id(age))</span><br><span class="line"><span class="number">9462848</span></span><br><span class="line"></span><br><span class="line">print(type(age))</span><br><span class="line">int</span><br><span class="line"></span><br><span class="line">print(age)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="float浮点型"><a href="#float浮点型" class="headerlink" title="float浮点型"></a>float浮点型</h3><p>用于标识：工资，身高，体重<br>定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">salary=<span class="number">3.1</span>  <span class="comment"># salary=float(3.1)</span></span><br><span class="line"></span><br><span class="line">print(id(salary))</span><br><span class="line"><span class="number">140185593323832</span></span><br><span class="line"></span><br><span class="line">print(type(salary))</span><br><span class="line">float</span><br><span class="line"></span><br><span class="line">print(salary)</span><br><span class="line"><span class="number">3.1</span></span><br></pre></td></tr></table></figure><h3 id="str字符串"><a href="#str字符串" class="headerlink" title="str字符串"></a>str字符串</h3><p>在 Python 中，加了引号的字符就是字符串类型，Python 并没有字符类型<br>用于标识：描述性的内容，如姓名，性别，国籍，种族<br>定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">'zhangsan'</span>  <span class="comment"># name=str('zhangsan')</span></span><br></pre></td></tr></table></figure><p>单引号、双引号、多引号有什么区别？<br>单双引号没有任何区别，只有下面这种情况，需要考虑单双的配合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">"My name is zhangsan, I'm 18 years old!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多引号什么作用？作用就是多行字符串必须用多引号</span></span><br><span class="line">msg = <span class="string">'''</span></span><br><span class="line"><span class="string">今天我想写首小诗，</span></span><br><span class="line"><span class="string">歌颂我的同桌，</span></span><br><span class="line"><span class="string">你看他那乌黑的短发，</span></span><br><span class="line"><span class="string">好像一只炸毛鸡。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(msg)</span><br></pre></td></tr></table></figure><p>字符串拼接（只能在字符串之间进行，且只能相加或相乘）<br>数字可以进行加减乘除等运算，字符串呢？也能，但只能进行”相加”和”相乘”运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=<span class="string">'zhangsan'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age=<span class="string">'18'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name+age  <span class="comment"># 相加其实就是简单拼接</span></span><br><span class="line"><span class="string">'zhangsan18'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name*<span class="number">5</span> </span><br><span class="line"><span class="string">'zhangsanzhangsanzhangsanzhangsanzhangsan'</span></span><br></pre></td></tr></table></figure><p>注意1：字符串相加的效率不高<br><code>字符串1</code>+<code>字符串3</code>，并不会在<code>字符串1</code>的基础上加<code>字符串2</code>，而是申请一个全新的<code>内存空间</code>存入<code>字符串1</code>和<code>字符串3</code>，相当于<code>字符串1</code>与<code>字符串3</code>的空间被<code>复制</code>了一次。<br>注意2：只能<code>字符串加字符串</code>，不能<code>字符串加其他类型</code></p>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python数据类型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python内存管理</title>
      <link href="/2019/05/18/Python%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2019/05/18/Python%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="Python内存管理"><a href="#Python内存管理" class="headerlink" title="Python内存管理"></a>Python内存管理</h1><a id="more"></a><p>变量存哪了？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim p1.py</span><br><span class="line">x = 10</span><br></pre></td></tr></table></figure><p>当我们在<code>p1.py</code>中定义一个变量<code>x=10</code>，那么计算机把这个<code>变量值10</code>存放在哪里了呢？<br>回顾计算机的三大核心组件为：CPU、内存和硬盘。一定不是CPU，那是存放在内存还是硬盘中了呢？<br>再回顾变量运行的三个过程，如果我们没有使用Python解释器运行<code>p1.py</code>这个文件，那么<code>x=10</code>很明显只是很普通的四个字符<code>x、=、1、0</code>。而只有Python解释器运行了这个文件，那字符进入了内存，才会有变量这个概念。也就是说<code>变量是存放在内存当中</code>的。</p><p>变量存放在内存中这句话太宽泛了，我们把它具体化。现在想象我们在学校（电脑内存）里上课，学校每开一个班，学校都会开辟一个教室给这个班级上课用（存放变量值10），而班级的门牌号则是（变量名x）。也就是说，对于电脑内存这个大内存，每定义一个变量就会在这个大内存中开辟一个小空间，小空间内存放变量值10，然后内存给这个小空间一个变量名x（门牌号），x指向10。</p><h2 id="Python垃圾回收机制"><a href="#Python垃圾回收机制" class="headerlink" title="Python垃圾回收机制"></a>Python垃圾回收机制</h2><p>对于<code>p1.py</code>，如果我们再加上一段代码<code>x=11</code>，大内存会开辟另一个小空间存储<code>变量值11</code>，把变量值绑定另一个门牌号x，但是由于之前有x，所以大内存会解除x与10的连接，让x与11连接。这个时候10由于没有了门牌号，所以成为了Python眼中的垃圾，Python就会处理这个垃圾，释放10的内存占用，这就是Python的垃圾回收机制。而其他语言需要手动把10的内存占用释放掉。</p><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>从上述的解释我们可以知道只要某个变量值绑定着门牌号，就不是垃圾，反之变量值没有绑定着门牌号，这个变量值就是垃圾，Python就会自动清理这个垃圾。这里我们对于这个门牌号给定一个专业的解释，在Python中这个门牌号被称作引用计数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">257</span>  <span class="comment"># 257 引用计数加1为1</span></span><br><span class="line">y = x    <span class="comment"># 257 引用计数加1为2</span></span><br><span class="line">x = <span class="number">258</span>  <span class="comment"># 257 引用计数减1为1；258引用计数加1为1</span></span><br><span class="line"><span class="keyword">del</span> y    <span class="comment"># 257 引用计数减1为0，触发Python垃圾回收机制，Python清理257的内存占用</span></span><br></pre></td></tr></table></figure><p>上述代码就是一个引用计数加减的过程。</p><h2 id="小整数池"><a href="#小整数池" class="headerlink" title="小整数池"></a>小整数池</h2><p>对于引用计数，需要注意的是：Python实现<code>int</code>的时候有个小整数池。为了避免因创建相同的值而重复申请内存空间所带来的效率问题，Python解释器会在启动时创建出小整数池，范围是<code>[-5,256]</code>，该范围内的小整数对象是全局解释器范围内被重复使用，永远不会被回收。</p><p>在PyCharm中运行Python程序时，PyCharm出于对性能的考虑，会扩大小整数池的范围，其他的字符串等不可变类型也都包含在内一便采用相同的方式处理了，我们只需要记住这是一种优化机制，至于范围到底多大，无需细究。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span>   <span class="comment"># 10引用计数加1为1</span></span><br><span class="line">y = x    <span class="comment"># 10引用计数加1为2</span></span><br><span class="line">z = <span class="number">10</span>   <span class="comment"># 10引用计数加1为3</span></span><br><span class="line">x = <span class="number">11</span>   <span class="comment"># 10引用计数减1为2；11引用计数加1为1</span></span><br><span class="line"><span class="keyword">del</span> y    <span class="comment"># 10引用计数减1为1</span></span><br><span class="line"><span class="keyword">del</span> z    <span class="comment"># 10引用计数减1为0，但不触发Python垃圾回收机制，因为10数据Python小整数池内的数，会在Python解释器关闭前一直存在</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python内存管理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python定义变量的三个特征</title>
      <link href="/2019/05/17/Python%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%89%E4%B8%AA%E7%89%B9%E5%BE%81/"/>
      <url>/2019/05/17/Python%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%89%E4%B8%AA%E7%89%B9%E5%BE%81/</url>
      <content type="html"><![CDATA[<h1 id="Python定义变量的三个特征"><a href="#Python定义变量的三个特征" class="headerlink" title="Python定义变量的三个特征"></a>Python定义变量的三个特征</h1><a id="more"></a><h2 id="定义变量的三个特征"><a href="#定义变量的三个特征" class="headerlink" title="定义变量的三个特征"></a>定义变量的三个特征</h2><p>对于每个变量，Python都提供了这三个方法分别获取变量的三个特征，其中python的内置功能<code>id()</code>，内存地址不一样，则<code>id()</code>后打印的结果不一样，因为每一个变量值都有其内存地址，而<code>id</code>是用来反映变量值在内存中的位置，内存地址不同则<code>id</code>不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取变量的变量值</span></span><br><span class="line">print(x)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取变量的id，可以理解成变量在内存中的地址</span></span><br><span class="line">print(id(x))</span><br><span class="line"><span class="number">9462848</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取变量的数据类型</span></span><br><span class="line">print(type(x))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="变量比较"><a href="#变量比较" class="headerlink" title="变量比较"></a>变量比较</h2><h3 id="判断变量值是否相等用"><a href="#判断变量值是否相等用" class="headerlink" title="判断变量值是否相等用"></a>判断变量值是否相等用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name1=<span class="string">'张三'</span></span><br><span class="line">name2=<span class="string">'李四'</span></span><br><span class="line"></span><br><span class="line">print(name1==name2)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="判断变量id是否相等"><a href="#判断变量id是否相等" class="headerlink" title="判断变量id是否相等"></a>判断变量id是否相等</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">11</span></span><br><span class="line">y = x</span><br><span class="line">z = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">print(x == y)  <span class="comment"># True</span></span><br><span class="line">print(x <span class="keyword">is</span> y)  <span class="comment"># True</span></span><br><span class="line">print(x <span class="keyword">is</span> z)  <span class="comment"># True，整数池的原因</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">257</span></span><br><span class="line">z = <span class="number">257</span></span><br><span class="line"></span><br><span class="line">print(x <span class="keyword">is</span> z)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>从上述的打印消息可以看出<br><code>id</code>相等的变量，<code>值</code>一定相等，指向的是同一个内存地址<br><code>值</code>相等的变量，<code>id</code>不一定相等</p><p>其中在第一次打印<code>print(x is z)</code>的时候就触发了上一章讲的整数池。这可以理解成Python的优化机制，<code>11</code>的值本身不大，并且由于我们快速的再一次使用了<code>11</code>，再由于申请内存空间需要计算机开销，因此Python让<code>x</code>和<code>z</code>都指向同一个<code>11</code>。因为存不是目的，取才是目的，这样进行优化的话并不会影响程序的运行。</p>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python定义变量的三个特征 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python变量</title>
      <link href="/2019/05/16/Python%E5%8F%98%E9%87%8F/"/>
      <url>/2019/05/16/Python%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h1 id="Python变量"><a href="#Python变量" class="headerlink" title="Python变量"></a>Python变量</h1><a id="more"></a><h2 id="什么是变量？（掌握）"><a href="#什么是变量？（掌握）" class="headerlink" title="什么是变量？（掌握）"></a>什么是变量？（掌握）</h2><p>变量即变化的量，核心是“变”与“量”二字，变即变化，量即衡量状态。</p><p>计算机通过记录状态去识别，这就是量的概念。</p><ul><li>变：现实世界中的状态是会发生改变的。</li><li>量：记录现实世界中的状态，让计算机能够像人一样去识别世间万物。<br>今年可能175cm，明年可能就是180cm了，那这种状态是不是会发生变化。</li></ul><h2 id="为什么要有变量？（掌握）"><a href="#为什么要有变量？（掌握）" class="headerlink" title="为什么要有变量？（掌握）"></a>为什么要有变量？（掌握）</h2><p>程序执行的本质就是一系列状态的变化，变是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是保存下来程序执行时状态以及状态的变化。<br>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">英雄的等级为1，打怪升级（变）为10</span><br><span class="line">僵尸的存活状态True，被植物打死了，于是变为False</span><br><span class="line">人的名字为张三，也可以修改为张叁</span><br></pre></td></tr></table></figure><h2 id="定义变量（掌握）"><a href="#定义变量（掌握）" class="headerlink" title="定义变量（掌握）"></a>定义变量（掌握）</h2><p>变量名（相当于门牌号，指向值所在的空间），等号，变量值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'张三'</span></span><br><span class="line">gender = <span class="string">'male'</span></span><br><span class="line">age = 30</span><br><span class="line">height = 175</span><br><span class="line">weight = 130</span><br></pre></td></tr></table></figure><h2 id="变量的组成（掌握）"><a href="#变量的组成（掌握）" class="headerlink" title="变量的组成（掌握）"></a>变量的组成（掌握）</h2><ol><li>变量名：变量名用来引用变量值，凡是需要用变量值，都需要通过变量名</li><li>赋值符号：赋值</li><li>变量值：存放数据，用来记录现实世界中的某种状态</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name  <span class="comment"># 报错，无任何意义</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = 30</span><br><span class="line">height = 175</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(age)     <span class="comment"># 30</span></span><br><span class="line"><span class="built_in">print</span>(height)  <span class="comment"># 175</span></span><br></pre></td></tr></table></figure><h2 id="变量名的命名规范"><a href="#变量名的命名规范" class="headerlink" title="变量名的命名规范"></a>变量名的命名规范</h2><p>如果对于一个变量，想怎么命名就怎么命名，那样没有任何问题，顶多就是老板检查代码后，第二天就不用去公司了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sfasfewfasdfa=<span class="string">'张三'</span></span><br><span class="line"><span class="built_in">print</span>(sfasfewfasdfa)  <span class="comment"># '张三'</span></span><br></pre></td></tr></table></figure><p>定义一个变量就是在记录现实世界中的的状态，<code>存不是目的，取才是目的</code>。<br>变量的命名应该满足以下三个规范</p><ol><li>变量的命名应该能反映变量值所描述的状态，不可用中文</li><li>变量名必须用<code>字母</code>，<code>数字</code>，<code>下划线</code>组合，变量名的<code>第一个字符不能是数字</code></li><li>关键字不能声明为变量名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'exec'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'print'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><h2 id="变量名的两种方式（了解）"><a href="#变量名的两种方式（了解）" class="headerlink" title="变量名的两种方式（了解）"></a>变量名的两种方式（了解）</h2><h3 id="驼峰体"><a href="#驼峰体" class="headerlink" title="驼峰体"></a>驼峰体</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AgeOfZhangsan = <span class="number">30</span></span><br><span class="line">print(AgeOfZhangsan)  <span class="comment"># 30</span></span><br></pre></td></tr></table></figure><h3 id="下划线（推荐使用）"><a href="#下划线（推荐使用）" class="headerlink" title="下划线（推荐使用）"></a>下划线（推荐使用）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age_of_zhangsan = <span class="number">30</span></span><br><span class="line">print(age_of_zhangsan)  <span class="comment"># 30</span></span><br></pre></td></tr></table></figure><p>以上两种变量名的风格，推荐使用下划线的方式。</p><p>定义变量会有：id，type，value</p><ol><li><code>==</code>比较的是<code>value</code></li><li><code>is</code>比较的是<code>id</code></li></ol><p><strong>强调</strong></p><ol><li><code>id</code>相同，意味着<code>type</code>和<code>value</code>必定相同</li><li><code>value</code>相同<code>type</code>肯定相同，但<code>id</code>可能不同，如下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x=<span class="string">'Info Zhangsan:18'</span></span><br><span class="line">&gt;&gt;&gt; y=<span class="string">'Info Zhangsan:18'</span></span><br><span class="line">&gt;&gt;&gt; id(x)</span><br><span class="line">4376607152</span><br><span class="line">&gt;&gt;&gt; id(y)</span><br><span class="line">4376607408</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; x == y</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; x is y</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h2 id="常量（掌握）"><a href="#常量（掌握）" class="headerlink" title="常量（掌握）"></a>常量（掌握）</h2><p>变量是变化的量，常量则是不变的量。<br>Python中没有使用语法强制定义常量，也就是说，Python中定义常量本质上就是变量。<br>如果非要定义常量，变量名必须全大写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AGE_OF_ZHANGSAN = <span class="number">30</span></span><br><span class="line">print(AGE_OF_ZHANGSAN)  <span class="comment"># 30</span></span><br></pre></td></tr></table></figure><p>如果是常量，那就没必要更改，所以Python就只制定了一个规范，而没指定常量的语法。<br>而在C语言中有专门的常量定义语法，<code>const int age = 19;</code>，一旦定义<code>age</code>为常量，更改<code>age</code>即会报错。</p><h2 id="注释（掌握）"><a href="#注释（掌握）" class="headerlink" title="注释（掌握）"></a>注释（掌握）</h2><p>当把变量理解透了，就已经进入了编程的世界。随着学习的深入，用不了多久，就可以写复杂的上千甚至上万行的代码了，有些代码花了很久写出来，过了些天再回去看，发现竟然看不懂了，这很正常了。另外，以后在工作中会发现，一个项目多数是由几个甚至几十个开发人员一起做，要调用别人写的代码，别人也要用你的，如果代码不加注释，自己都看不懂，更别说别人了，这产会很麻烦。所以为了避免这种尴尬的事情发生，一定要增加代码的可读性。代码注释分单行和多行注释，单行注释用<code>#</code>，多行注释可以用<code>三对单/双引号</code>，使用三引号注释可以换行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">三单引号注释</span></span><br><span class="line"><span class="string">三单引号注释</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">三双引号多行注释</span></span><br><span class="line"><span class="string">三双引号多行注释</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="注释的原则"><a href="#注释的原则" class="headerlink" title="注释的原则"></a>注释的原则</h2><ol><li>不用全部加注释，只需要在自己觉得重要或不好理解的部分加注释即可</li><li>注释可以用中文或英文，但不要用拼音</li></ol><h2 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>掌握 -&gt; 熟悉 -&gt; 了解</p><ul><li>掌握：倒背如流</li><li>熟悉：正背如流</li><li>了解：看到能够想起</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.cnblogs.com/linhaifeng/articles/7133167.html" target="_blank" rel="noopener">http://www.cnblogs.com/linhaifeng/articles/7133167.html</a><br><a href="https://www.cnblogs.com/nickchen121/p/10722738.html" target="_blank" rel="noopener">https://www.cnblogs.com/nickchen121/p/10722738.html</a></p>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python变量 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>grep显示前后几行信息</title>
      <link href="/2019/04/29/grep%E6%98%BE%E7%A4%BA%E5%89%8D%E5%90%8E%E5%87%A0%E8%A1%8C%E4%BF%A1%E6%81%AF/"/>
      <url>/2019/04/29/grep%E6%98%BE%E7%A4%BA%E5%89%8D%E5%90%8E%E5%87%A0%E8%A1%8C%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<h1 id="grep显示前后几行信息"><a href="#grep显示前后几行信息" class="headerlink" title="grep显示前后几行信息"></a>grep显示前后几行信息</h1><a id="more"></a><h2 id="显示foo及前5行"><a href="#显示foo及前5行" class="headerlink" title="显示foo及前5行"></a>显示foo及前5行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -B 5 foo file</span><br></pre></td></tr></table></figure><h2 id="显示foo及后5行"><a href="#显示foo及后5行" class="headerlink" title="显示foo及后5行"></a>显示foo及后5行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -A 5 foo file</span><br></pre></td></tr></table></figure><h2 id="显示-file-文件里匹配-foo-字串那行以及上下5行"><a href="#显示-file-文件里匹配-foo-字串那行以及上下5行" class="headerlink" title="显示 file 文件里匹配 foo 字串那行以及上下5行"></a>显示 file 文件里匹配 foo 字串那行以及上下5行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -C 5 foo file</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> grep笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grep显示前后几行信息 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Chrony 设置服务器集群系统时间同步</title>
      <link href="/2019/01/25/Chrony%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"/>
      <url>/2019/01/25/Chrony%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/</url>
      <content type="html"><![CDATA[<h1 id="Chrony-设置服务器集群系统时间同步"><a href="#Chrony-设置服务器集群系统时间同步" class="headerlink" title="Chrony 设置服务器集群系统时间同步"></a>Chrony 设置服务器集群系统时间同步</h1><blockquote><p>RHEL7/CentOS7 新的 NTP 对时服务 Chrony</p></blockquote><a id="more"></a><h2 id="什么是Chrony？"><a href="#什么是Chrony？" class="headerlink" title="什么是Chrony？"></a>什么是Chrony？</h2><p>Chrony 是一个开源的自由软件，CentOS7/RHEL7 操作系统，已经是默认服务，默认配置文件在 <code>/etc/chrony.conf</code> 它能保持系统时间与时间服务器（NTP）同步，让时间始终保持同步。相对于 NTP 时间同步软件，占据很大优势。其用法也很简单。Chrony 应用本身已经有几年了，它其实是网络时间协议的 (NTP) 的另一种实现。一直以来众多发行版里标配的都是 ntpd 对时服务，自 CentOS7/RHEL7 起，Chrony 做为了发行版里的标配服务，不过老的 ntpd 服务依旧在 CentOS7/RHEL7 里可以找到。</p><h2 id="Chrony-两个核心组件"><a href="#Chrony-两个核心组件" class="headerlink" title="Chrony 两个核心组件"></a>Chrony 两个核心组件</h2><blockquote><p>Chrony 可以同时做为 NTP 服务的客户端和服务端。默认安装完后有两个程序 <code>chronyd</code> 和 <code>chronyc</code>。</p><p>chronyd（主程序文件）<br>是守护 daemon 进程程序，主要用于调整内核中运行的系统时间和时间服务器同步。它确定计算机增减时间的比率，并对此进行调整补偿。</p><p>chronyc（工具程序）<br>一个交互式命令行工具，提供一个用户界面，用于监控性能并进行多样化的配置。它可以在chronyd实例控制的计算机上工作，也可以在一台不同的远程计算机上工作。</p></blockquote><p><strong> OS环境 </strong></p><blockquote><p>10.28.204.65 客户端<br>10.28.204.66 服务端<br>CentOS Linux release 7.6.1810 (Core)</p></blockquote><h2 id="安装-Chrony"><a href="#安装-Chrony" class="headerlink" title="安装 Chrony"></a>安装 Chrony</h2><blockquote><p>系统默认已经安装，如未安装，请执行以下命令安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install chrony</span><br></pre></td></tr></table></figure><h2 id="启动并加入开机自启动"><a href="#启动并加入开机自启动" class="headerlink" title="启动并加入开机自启动"></a>启动并加入开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl start chronyd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd.service</span><br><span class="line">systemctl -l status chronyd.service</span><br><span class="line">systemctl stop chronyd.service</span><br><span class="line"><span class="comment"># 设置开机自启，默认是enable的</span></span><br><span class="line">systemctl restart chronyd.service</span><br></pre></td></tr></table></figure><h2 id="防火墙-Firewalld-设置"><a href="#防火墙-Firewalld-设置" class="headerlink" title="防火墙 Firewalld 设置"></a>防火墙 Firewalld 设置</h2><blockquote><p>因 NTP 使用 123/UDP 端口协议，所以允许 NTP 服务即可</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-service=ntp --permanent</span><br><span class="line">firewall-cmd --add-port=123/udp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="配置-Chrony"><a href="#配置-Chrony" class="headerlink" title="配置 Chrony"></a>配置 Chrony</h2><blockquote><p>以下是系统默认配置文件，对此加以说明</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/chrony.conf</span><br><span class="line"><span class="comment"># 使用pool.ntp.org项目中的公共服务器。以server开，理论上你想添加多少时间服务器都可以。</span></span><br><span class="line"><span class="comment"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line">server 0.cn.pool.ntp.org iburst minpoll 4 maxpoll 10</span><br><span class="line">server 1.cn.pool.ntp.org iburst minpoll 4 maxpoll 10</span><br><span class="line">server 2.cn.pool.ntp.org iburst minpoll 4 maxpoll 10</span><br><span class="line">server 3.cn.pool.ntp.org iburst minpoll 4 maxpoll 10</span><br><span class="line"></span><br><span class="line">server ntp1.aliyun.com iburst minpoll 4 maxpoll 10</span><br><span class="line">server ntp2.aliyun.com iburst minpoll 4 maxpoll 10</span><br><span class="line">server ntp3.aliyun.com iburst minpoll 4 maxpoll 10</span><br><span class="line">server ntp4.aliyun.com iburst minpoll 4 maxpoll 10</span><br><span class="line">server ntp5.aliyun.com iburst minpoll 4 maxpoll 10</span><br><span class="line">server ntp6.aliyun.com iburst minpoll 4 maxpoll 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据实际时间计算出服务器增减时间的比率，然后记录到一个文件中，在系统重启后为系统做出最佳时间补偿调整。</span></span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"></span><br><span class="line"><span class="comment"># chronyd根据需求减慢或加速时间调整，</span></span><br><span class="line"><span class="comment"># 在某些情况下系统时钟可能漂移过快，导致时间调整用时过长。</span></span><br><span class="line"><span class="comment"># 该指令强制chronyd调整时期，大于某个阀值时步进调整系统时钟。</span></span><br><span class="line"><span class="comment"># 只有在因chronyd启动时间超过指定的限制时（可使用负值来禁用限制）没有更多时钟更新时才生效。</span></span><br><span class="line">makestep 1.0 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将启用一个内核模式，在该模式中，系统时间每11分钟会拷贝到实时时钟（RTC）。</span></span><br><span class="line">rtcsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable hardware timestamping on all interfaces that support it.</span></span><br><span class="line"><span class="comment"># 通过使用hwtimestamp指令启用硬件时间戳</span></span><br><span class="line"><span class="comment">#hwtimestamp eth0</span></span><br><span class="line"><span class="comment">#hwtimestamp eth1</span></span><br><span class="line"><span class="comment">#hwtimestamp *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Increase the minimum number of selectable sources required to adjust</span></span><br><span class="line"><span class="comment"># the system clock.</span></span><br><span class="line"><span class="comment">#minsources 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一台主机、子网，或者网络以允许或拒绝NTP连接到扮演时钟服务器的机器</span></span><br><span class="line">allow 192.168.0.0/16</span><br><span class="line"><span class="comment">#deny 192.168/16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Serve time even if not synchronized to a time source.</span></span><br><span class="line"><span class="comment"># 即使自己未能通过网络时间服务器同步到时间，也允许将本地时间作为标准时间授时给其它客户端</span></span><br><span class="line"><span class="built_in">local</span> stratum 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定包含NTP验证密钥的文件。</span></span><br><span class="line"><span class="comment">#keyfile /etc/chrony.keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志文件的目录。</span></span><br><span class="line">logdir /var/<span class="built_in">log</span>/chrony</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select which information is logged.</span></span><br><span class="line"><span class="comment">#log measurements statistics tracking</span></span><br></pre></td></tr></table></figure><h2 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h2><h3 id="查看当前系统时区"><a href="#查看当前系统时区" class="headerlink" title="查看当前系统时区"></a>查看当前系统时区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">timedatectl</span><br><span class="line">      Local time: Fri 2018-2-29 13:31:04 CST</span><br><span class="line">  Universal time: Fri 2018-2-29 05:31:04 UTC</span><br><span class="line">        RTC time: Fri 2018-2-29 08:17:20</span><br><span class="line">       Time zone: Asia/Shanghai (CST, +0800)</span><br><span class="line">     NTP enabled: yes</span><br><span class="line">NTP synchronized: yes</span><br><span class="line"> RTC <span class="keyword">in</span> <span class="built_in">local</span> TZ: no</span><br><span class="line">      DST active: n/a</span><br></pre></td></tr></table></figure><blockquote><p>如果你当前的时区不正确，请按照以下操作设置。</p></blockquote><h3 id="查看所有可用的时区"><a href="#查看所有可用的时区" class="headerlink" title="查看所有可用的时区"></a>查看所有可用的时区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl list-timezones</span><br></pre></td></tr></table></figure><blockquote><p>筛选式查看在亚洲 <code>S</code> 开的上海可用时区</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">timedatectl list-timezones |  grep  -E <span class="string">"Asia/S.*"</span></span><br><span class="line">Asia/Sakhalin</span><br><span class="line">Asia/Samarkand</span><br><span class="line">Asia/Seoul</span><br><span class="line">Asia/Shanghai</span><br><span class="line">Asia/Singapore</span><br><span class="line">Asia/Srednekolymsk</span><br></pre></td></tr></table></figure><blockquote><p>设置当前系统为 Asia/Shanghai 上海时区</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><blockquote><p>设置完时区后，强制同步下系统时钟</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chronyc -<span class="selector-tag">a</span> makestep</span><br><span class="line"><span class="number">200</span> OK</span><br></pre></td></tr></table></figure><h2 id="服务器集群之间的系统时间同步"><a href="#服务器集群之间的系统时间同步" class="headerlink" title="服务器集群之间的系统时间同步"></a>服务器集群之间的系统时间同步</h2><p>在生产环境中，其网络都是内网结构，那么内网如何保证服务器之间的时间同步呢？其实这个问题很简单，只需要搭建一台内网时间服务器，然后让所有计算机都到服务端（<code>10.28.204.66</code>）去同步时间即可。</p><blockquote><p>具体操作：在服务端注释以下内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br></pre></td></tr></table></figure><blockquote><p>并添加以下内容：表示与本机同步时间</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server 10.28.204.66 iburst</span><br></pre></td></tr></table></figure><blockquote><p>这样我们需求的一台内网时间服务器已经配置完毕。<br>同样在客户端注释掉其他 <code>server</code>，并在客户端 <code>10.28.204.65</code> 添加以下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server 10.28.204.66 iburst</span><br></pre></td></tr></table></figure><blockquote><p>到此已经完成系统时间的同步。如有多台机器，操作也是如此。</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查 时间同步 详细源状态</span></span><br><span class="line">chronyc sources</span><br><span class="line">chronyc sources -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 时间同步源服务器 状态</span></span><br><span class="line">chronyc sourcestats</span><br><span class="line">chronyc sourcestats -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置硬件时间</span></span><br><span class="line"><span class="comment"># 硬件时间默认为UTC</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-local-rtc 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用NTP时间同步</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-ntp yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过直接执行 chronyc 命令来修改设置</span></span><br><span class="line"><span class="comment"># 检查NTP访问是否对特定主机可用</span></span><br><span class="line">chronyc accheck</span><br><span class="line"><span class="comment"># 该命令会显示有多少NTP源在线/离线</span></span><br><span class="line">chronyc activity</span><br><span class="line"><span class="comment"># 手动添加一台新的NTP服务器</span></span><br><span class="line">chronyc add server</span><br><span class="line"><span class="comment"># 在客户端报告已访问到服务器</span></span><br><span class="line">chronyc clients</span><br><span class="line"><span class="comment"># 手动移除NTP服务器或对等服务器</span></span><br><span class="line">chronyc delete</span><br><span class="line"><span class="comment"># 手动设置守护进程时间</span></span><br><span class="line">chronyc settime</span><br><span class="line"><span class="comment"># 校准时间服务器，显示系统时间信息</span></span><br><span class="line">chronyc tracking</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他时间设置相关指令</span></span><br><span class="line"><span class="comment"># 查看日期时间、时区及NTP状态</span></span><br><span class="line">timedatectl</span><br><span class="line"><span class="comment"># 查看时区列表</span></span><br><span class="line">timedatectl list-timezones</span><br><span class="line"><span class="comment"># 修改时区</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br><span class="line"><span class="comment"># 修改日期时间</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-time <span class="string">"2015-01-21 11:50:00"</span>  <span class="comment"># 可以只修改其中一个</span></span><br><span class="line"><span class="comment"># 开启NTP</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-ntp <span class="literal">true</span>/flase</span><br></pre></td></tr></table></figure><blockquote><p>还有另一个有趣的命令 <code>system-config-date</code>，在 rhel7/centos7 里也给了我们一个可以图形化配置chrony 服务的工具 。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install system-config-date</span><br></pre></td></tr></table></figure><blockquote><p>安装完成后运行 <code>system-config-date</code> 命令，界面如下</p></blockquote><p><img src="https://i.loli.net/2019/01/25/5c4aa385e3206.png" alt="system-config-date.png"></p><blockquote><p> 最后需要注意的是，配置完 <code>/etc/chrony.conf</code> 后，需重启 chrony 服务，否则可能会不生效。</p></blockquote><h2 id="Chrony的优势"><a href="#Chrony的优势" class="headerlink" title="Chrony的优势"></a>Chrony的优势</h2><p>Chrony 的优势包括：</p><ul><li>更快的同步只需要数分钟而非数小时时间，从而最大程度减少了时间和频率误差，这对于并非全天 24 小时运行的台式计算机或系统而言非常有用。</li><li>能够更好地响应时钟频率的快速变化，这对于具备不稳定时钟的虚拟机或导致时钟频率发生变化的节能技术而言非常有用。</li><li>在初始同步后，它不会停止时钟，以防对需要系统时间保持单调的应用程序造成影响。</li><li>在应对临时非对称延迟时（例如，在大规模下载造成链接饱和时）提供了更好的稳定性。</li><li>无需对服务器进行定期轮询，因此具备间歇性网络连接的系统仍然可以快速同步时钟。</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://renwole.com/archives/1032" target="_blank" rel="noopener">https://renwole.com/archives/1032</a><br><a href="https://www.jianshu.com/p/dfdedfb9c59f" target="_blank" rel="noopener">https://www.jianshu.com/p/dfdedfb9c59f</a><br><a href="https://my.oschina.net/91devel/blog/2878266" target="_blank" rel="noopener">https://my.oschina.net/91devel/blog/2878266</a><br><a href="http://www.pool.ntp.org/zone/asia" target="_blank" rel="noopener">http://www.pool.ntp.org/zone/asia</a><br><a href="http://www.pool.ntp.org/zone/cn" target="_blank" rel="noopener">http://www.pool.ntp.org/zone/cn</a></p>]]></content>
      
      <categories>
          
          <category> NTP笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrony 设置服务器集群系统时间同步 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iptables防火墙NAT服务器的设置</title>
      <link href="/2019/01/20/iptables%E9%98%B2%E7%81%AB%E5%A2%99NAT%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
      <url>/2019/01/20/iptables%E9%98%B2%E7%81%AB%E5%A2%99NAT%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="iptables防火墙NAT服务器的设置"><a href="#iptables防火墙NAT服务器的设置" class="headerlink" title="iptables防火墙NAT服务器的设置"></a>iptables防火墙NAT服务器的设置</h1><a id="more"></a><h2 id="NAT-服务器的设置"><a href="#NAT-服务器的设置" class="headerlink" title="NAT 服务器的设置"></a>NAT 服务器的设置</h2><p>假设我们准备要架设一个路由器的延伸服务器，就称之为 NAT 服务器。NAT 是什么呢？简单的说，可以称它为内部 LAN 主机的  IP 分享器。</p><p><strong>NAT 的全名是 Network Address Translation</strong>，即网络地址的转换。通过字面上的意思我们来想一想，TCP/IP 的网络数据包不是有 IP 地址吗？IP 地址不是有来源与目的地吗？iptables 命令就能够修改 IP 数据包的报头数据，连目标或来源的 IP 地址都可以修改，甚至连 TCP 数据包报头的 port number 也能修改。</p><p>NAT 服务器的功能除了可以实现类似 IP 分享的功能之外</p><p><img src="https://i.loli.net/2019/01/20/5c436c2481af9.png" alt="firewall_01.png"></p><center>图：单一网络，仅有一个路由器的环境示意图</center><p>还可以达到类似 DMZ（非军事化隔离区）的功能。</p><p><img src="https://i.loli.net/2019/01/20/5c436c45c60be.png" alt="firewall_03.png"></p><center>图：架设在防火墙后端的网络服务器环境示意图</center><p>这完全取决于 NAT 是修改来源 IP 还是目标 IP。下面我们就来聊一聊此内容。</p><h2 id="什么是-NAT？SNAT？DNAT？"><a href="#什么是-NAT？SNAT？DNAT？" class="headerlink" title="什么是 NAT？SNAT？DNAT？"></a>什么是 NAT？SNAT？DNAT？</h2><p>在介绍 NAT 的实际操作之前，让我们再来看一下比较简单的数据包通过 iptables 而传送到后端主机的表与链流程。<br>参考图如下：</p><p><img src="https://i.loli.net/2019/01/20/5c436c5f62330.png" alt="iptables_04.png"></p><center>图：iptables 内建各表与链的相关性（简图）</center><p>当网络布线如 <code>单一网络</code> 的架构，若内部 LAN 有任何一台主机想要传送数据包出去时，那么这个数据包要如何通过 Linux 主机而传送出去呢？是这样的：</p><ol><li>先经过 NAT table 的 PREROUTING 链。</li><li>经由路由判断确定这个数据包是否要进入本机，若不进入本机，则下一步。</li><li>再经过 Filter table 的 FORWARD 链。</li><li>通过 NAT table 的 POSTROUTING 链，最后传送出去。</li></ol><p>NAT 服务器的重点就在于上面流程的第 1、4 步，也就是 NAT table 的两条重要的链：PREROUTING 与 POSTROUTING。那这两条链有什么重要的功能呢？重点在于修改 IP。但这两条链修改的 IP 是不一样的，<strong>POSTROUTING 修改的是来源 IP，PREROUTING 则修改的是目标 IP</strong>。由于修改的 IP 不一样，所以<strong>就称为来源 NAT (Source NAT, SNAT) 及目标 NAT (Destination NAT, DNAT)</strong>。我们先来谈一谈 IP 分享器功能的 SNAT。</p><h3 id="来源-NAT-SNAT-：修改数据包报头的来源项目"><a href="#来源-NAT-SNAT-：修改数据包报头的来源项目" class="headerlink" title="来源 NAT (SNAT)：修改数据包报头的来源项目"></a>来源 NAT (SNAT)：修改数据包报头的来源项目</h3><p>你应该有听说过 IP 路由器，它可以让家庭里的好几台主机同时通过一条 ADSL 网络连接到 Internet 上，如图 <code>单一网络</code> 中所示，那个 Linux 主机就是 IP 路由器。那么它是如何实现 IP 分享的功能呢？就是通过 NAT 表的 POSTROUTING 来处理的。假设网络布线如图 <code>单一网络</code> 所示， 那么 NAT 服务器是如何处理这个数据包的呢？</p><p>如图所示：</p><p><img src="https://i.loli.net/2019/01/20/5c436c791e576.png" alt="nat_01.png"></p><center>图：SNAT 数据包传送出去的示意图</center><p>在客户端 192.168.1.100 这台主机要连接到 <a href="http://tw.yahoo.com" target="_blank" rel="noopener">http://tw.yahoo.com</a> 去时，它的数据包报头会如何变化？</p><ol><li>客户端所发出的数据包报头中，来源会是 192.168.1.100，然后传送到 NAT 这台主机。</li><li>NAT 主机的内部接口 (192.168.1.2) 接收到这个数据包后，会主动分析报头数据，因为<strong>报头数据显示目的并非 Linux 本机，所以开始经过路由分析</strong>，将此数据包转到可以连接到 Internet 的 Public IP 处。</li><li><strong>由于 Private IP 与 Public IP 不能互通，所以 Linux 主机通过 iptables 的 NAT table 内的 POSTROUTING 链将数据包报头的来源伪装成为 Linux 的 Public IP，并且将两个不同来源 (192.168.1.100 及 Public IP) 的数据包对应写入暂存内存当中，然后将此数据包传送出去</strong>。</li></ol><p>此时 Internet 上面看到这个数据包时，都只会知道这个数据包来自 Public IP 而不知道其实是来自内部。好了，那么如果 Internet 返回数据包呢？又会怎么做？如图</p><p><img src="https://i.loli.net/2019/01/20/5c436c8e17aa3.png" alt="nat_02.png"></p><center>图：SNAT 数据包接收的示意图</center><ol><li>在 Internet 上面的主机接到这个数据包时，会将响应数据传送给那个 Public IP 的主机。</li><li>当 Linux NAT 服务器收到来自 Internet 的响应数据包后，会分析该数据包的序号，并比对刚刚记录到内存当中的数据，由于发现该数据包为后端主机之前传送出去的，<strong>因此在 NAT PREROUTING 链中，会将目标 IP 修改成为后端主机，亦即那台 192.168.1.100，然后发现目标已经不是本机 (Public IP)，所以开始通过路由分析数据包流向</strong>。</li><li>数据包会传送到 192.168.1.2 这个内部接口，然后再传送到最终目标 192.168.1.100 机器上去。</li></ol><p>经过这个流程，就可以发现，所有内部 LAN 的主机都可以通过这部 NAT 服务器连接出去，而大家在 Internet 上面看到的都是同一个 IP（就是 NAT 那台主机的 Public IP），所以，如果内部 LAN 主机没有连上不明网站的话，那么内部主机其实是具有一定程度的安全性的，因为 Internet 上的其他主机没有办法主动攻击你的 LAN 内的 PC。所以我们才会说，NAT 最简单的功能就是类似 IP 分享器。这也是 SNAT 的一种。</p><p>Tips：<br>NAT 服务器与路由器有什么不同？基本上，NAT 服务器一定是路由器，不过，NAT 服务器由于会修改 IP 报头数据，因此与单纯转递数据包的路由器不同。最常见的 IP 分享器就是一个路由器，但是这个 IP 分享器一定会有一个 Public IP 与一个 Private IP，让 LAN 内的 Private IP 可以通过 IP 分享器的 Public IP 传送出去。至于路由器通常两边都是 Public IP 或同时为 Private IP。</p><h3 id="目标-NAT-DNAT-：修改数据包报头的目标项目"><a href="#目标-NAT-DNAT-：修改数据包报头的目标项目" class="headerlink" title="目标 NAT (DNAT)：修改数据包报头的目标项目"></a>目标 NAT (DNAT)：修改数据包报头的目标项目</h3><p>SNAT 主要是应付内部 LAN 连接到 Internet 的使用方式，**DNAT 则主要用在内部主机想要架设可以让 Internet 访问的服务器。就有点类似图 <code>架设在防火墙后端的网络服务器</code> 的 DMZ 内的服务器。下面也先来谈一谈 DNAT 的运行吧。</p><p>如图所示：</p><p><img src="https://i.loli.net/2019/01/20/5c436ca1e87a7.png" alt="nat_03.png"></p><center>图：DNAT 的数据包传送示意图</center><p>假设内部主机 192.168.1.210 启动了 WWW 服务，这个服务的 port 开启在 port 80，那么 Internet 上面的主机 (61.xx.xx.xx) 要如何连接到内部服务器呢？当然，还是得要通过 Linux NAT 服务器。所以这台 Internet 上面的机器必须要连接到 NAT 的 Public IP 才行。</p><ol><li>外部主机想要连接到目的端的 WWW 服务，则必须要连接到 NAT 服务器上。</li><li>NAT 服务器已经设置好要分析出 port 80 的数据包，所以当 NAT 服务器接到这个数据包后，会将目标 IP 由 Public IP 改成 192.168.1.210，且将该数据包相关信息记录下来，等待内部服务器的响应。</li><li>上述的数据包在经过路由后，来到 Private 接口处，然后通过内部的 LAN 传送到 192.168.1.210 上。</li><li>192.186.1.210 会响应数据给 61.xx.xx.xx，这个回应当然会传送到 192.168.1.2 上去。</li><li>经过路由判断后，来到 NAT POSTROUTING 的链，然后通过第二步骤的记录，将来源 IP 由 192.168.1.210 改为 Public IP 后，就可以传送出去了。</li></ol><p>其实整个步骤几乎就等于 SNAT 的反向传送。这就是 DNAT。</p><h2 id="简单的NAT服务器：IP分享功能"><a href="#简单的NAT服务器：IP分享功能" class="headerlink" title="简单的NAT服务器：IP分享功能"></a>简单的NAT服务器：IP分享功能</h2><p>在 Linux 的 NAT 服务器服务当中，最常见的就是类似图 <code>单一网络</code> 的 IP 分享器功能。而由刚刚的介绍我们也该知道，这个 IP 分享器的功能其实就是 SNAT，作用就只是在 iptables 内的 NAT 表中，那个路由判断后的 POSTROUTING 链所做的工作就是进行 IP 的伪装。另外，需要了解的是，NAT 服务器必须要有一个 Public IP 接口，以及一个内部 LAN 连接的 Private IP 接口才行。下面的范例中，假设是这样的：</p><ul><li>外部接口使用 eth0，这个接口具有 Public IP。</li><li>内部接口使用 eth1，假设这个 IP 为 192.168.100.254。</li></ul><p>利用前面谈到的数据来设置网络参数后，务必要进行路由的检测，因为在 NAT 服务器的设置方面，最容易出错的地方就是路由。尤其是在拨号产生 ppp0 这个对外接口的环境下，这个问题最严重。一定要记住：<strong>如果 Public IP 取得的方式是拨号或 cable modem 时，对于配置文件 <code>/etc/sysconfig/network、ifcfg-eth0、ifcfg-eth1</code> 等，千万不要设置 GATEWAY</strong>，否则就会出现两个 default gateway，反而会造成问题。</p><p>编辑 iptables.rule 文件，该文件内已经含有 NAT 的脚本了。在该文件的第二部份关于 NAT 服务器的设置中，应该有看到下面这几行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i <span class="variable">$INIF</span> -j ACCEPT</span><br><span class="line"><span class="comment"># 这一行为非必要的，主要的目的是让内网 LAN 能够完全的使用 NAT 服务器资源</span></span><br><span class="line"><span class="comment"># 其中 $INIF 在本例中为 eth1 接口</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line"><span class="comment"># 这一行则是在让 Linux 具有 router 的功能</span></span><br><span class="line"></span><br><span class="line">iptables -t nat -A POSTROUTING -s <span class="variable">$innet</span> -o <span class="variable">$EXTIF</span> -j MASQUERADE</span><br><span class="line"><span class="comment"># 这一行最关键！就是加入 NAT table 数据包伪装。本例中 $innet 是 192.168.100.0/24</span></span><br><span class="line"><span class="comment"># 而 $EXTIF 则是对外界面，本例中为 eth0</span></span><br></pre></td></tr></table></figure><p>以上输出重点在 “MASQUERADE”。这个设置值就是 <strong>IP 伪装成为封包出去 (-o) 的那块设备上的 IP</strong>。以上面的例子来说，就是 <code>$EXTIF</code>，也就是 <code>eth0</code>。所以数据包来源只要来自 <code>$innet</code> （也就是内部 LAN 的其他主机） ，只要该数据包可通过 <code>eth0</code> 传送出去，那就会自动的修改 IP 的来源报头成为 <code>eth0</code> 的 Public IP。将 iptables.rule 设置好你内、外网络接口，执行 iptables.rule 后，Linux 就拥有主机防火墙以及 NAT 服务器的功能。</p><p>例题：如同上面所述的案例，那么 LAN 内的其他 PC 应该要如何设置相关的网络参数？<br>答：答案其实很简单，将 NAT 服务器作为 PC 的 GATEWAY 即可。只要记得下面的参数值即可：</p><ul><li>NETWORK 为 192.168.100.0</li><li>NETMASK 为 255.255.255.0</li><li>BROADCAST 为 192.168.100.255</li><li>IP 可以设置 192.168.100.1 ~ 192.168.100.254 之间，不可重复</li><li>网关 (Gateway) 需要设置为 192.168.100.254（NAT 服务器的 Private IP）</li><li>DNS (/etc/resolv.conf) 需设置为 168.95.1.1 (Hinet) 或 139.175.10.20 (Seed Net)，这个请依 ISP 而定</li></ul><p>事实上，除了 IP 伪装 (MASQUERADE) 之外，我们还可以直接指定修改 IP 数据包报头的来源 IP。<br>如下面这个例子：</p><p>例题：假设对外的 IP 固定为 192.168.1.100，若不想使用伪装，该如何处理？<br>答：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to-source 192.168.1.100</span><br></pre></td></tr></table></figure><p>例题：假设 NAT 服务器对外 IP 有好几个，那想要轮流使用不同的 IP 时，该如何设置？<br>假设你的 IP 范围为 192.168.1.210 ~ 192.168.1.220<br>答：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to-source 192.168.1.210-192.168.1.220</span><br></pre></td></tr></table></figure><p>这样也可以修改网络数据包的来源 IP 资料。不过，除非使用的是固定 IP，且有多个 IP 可以对外连接，否则一般使用 IP 伪装即可，不需要使用到 SNAT。当然，你也可能有自己独特的环境。</p><h2 id="iptables-的额外内核模块功能"><a href="#iptables-的额外内核模块功能" class="headerlink" title="iptables 的额外内核模块功能"></a>iptables 的额外内核模块功能</h2><p>如果在 iptables.rule 文件内的第二部分仔细观察，可能会奇怪，为何我们需要加载一些有用的模块？比如 ip_nat_ftp 及 ip_nat_irc ？这是因为很多通信协议使用的数据包传输比较特殊，尤其是 FTP 文件传输使用两个 port 来处理数据。在这里我们需要知道，iptables 提供很多好用的模块，这些模块可以辅助数据包的过滤，可以让我们节省很多 iptables 的规则拟定工作。</p><h2 id="在防火墙后端的网络服务器上做-DNAT-设置"><a href="#在防火墙后端的网络服务器上做-DNAT-设置" class="headerlink" title="在防火墙后端的网络服务器上做 DNAT 设置"></a>在防火墙后端的网络服务器上做 DNAT 设置</h2><p>既然可以做 SNAT 的 IP 分享功能，我们当然可以使用 iptables 做出 DMZ。但是再次重申，不同的服务器数据包传输的方式可能有点差异，因此，建议新手不要玩这个东西。否则很容易导致某些服务无法顺利对 <strong>Internet 提供的问题</strong>。</p><p>先来谈一谈，如果想要处理 DNAT 的功能时，iptables 要如何下达命令？另外，我们必须要知道的是，<strong>DNAT 用到的是 NAT table 的 PREROUTING 链</strong>。不要搞错了。</p><p>例题：假设内网有部主机 IP 为 192.168.100.10，该主机是可对 Internet 开放的 WWW 服务器。该如何通过 NAT 机制，将 WWW 数据包传到该主机上？<br>答：假设 Public IP 所在的接口为 eth0 ，那么规则就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to-destination 192.168.100.10:80</span><br></pre></td></tr></table></figure><p>上面例题中的 <code>-j DNAT --to-destination IP[:port]</code> 就是精髓，代表从 <code>eth0</code> 这个接口传入的，且想要使用 port 80 的服务时，将该数据包重新传递到 192.168.100.10:80 的 IP 及 port 上。可以同时修改 IP 与 port，真方便。其他还有一些较高级的 iptables 使用方式，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-j REDIRECT --to-ports &lt;port number&gt;</span><br><span class="line"><span class="comment"># 这个也挺常见的，基本上，就是进行本机上面 port 的转换</span></span><br><span class="line"><span class="comment"># 不过，特别留意的是，这个操作仅能够在 NAT table 的 PREROUTING 以及 </span></span><br><span class="line"><span class="comment"># OUTPUT 链上面实行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 范例：将要求与 80 连接的数据包转递到 8080 这个 port</span></span><br><span class="line">iptables -t nat -A PREROUTING -p tcp  --dport 80 -j REDIRECT --to-ports 8080</span><br><span class="line"><span class="comment"># 这种设置最容易在使用了非正规的 port 来进行某些 well known 的协议，</span></span><br><span class="line"><span class="comment"># 例如使用 8080 这个 port 来启动 WWW ，但是别人都以 port 80 来连接，</span></span><br><span class="line"><span class="comment"># 所以，就可以使用上面的方式来将对方对本机主机的连接传递到 8080 了</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> iptables笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables防火墙NAT服务器的设置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iptables防火墙实例</title>
      <link href="/2019/01/19/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/01/19/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="iptables防火墙实例"><a href="#iptables防火墙实例" class="headerlink" title="iptables防火墙实例"></a>iptables防火墙实例</h1><blockquote><p>推荐使用脚本来编写防火墙， 然后通过 <code>/etc/init.d/iptables save</code> 来将结果存储到 <code>/etc/sysconfig/iptables</code> 中去。而且此一特色还可以用在呼叫其他的 scripts ，可以让防火墙规则具有较为灵活的使用方式。 </p></blockquote><a id="more"></a><h2 id="规则草拟"><a href="#规则草拟" class="headerlink" title="规则草拟"></a>规则草拟</h2><p>下面介绍的这个防火墙，可以用来作为路由器上的防火墙，也可以用来作为本机的防火墙。 假设硬件连接如同下图所示， Linux 主机本身也是内部 LAN 的路由器，也就是一个简单的 IP 路由器的功能。假设目前网络接口有下面这些：</p><ul><li>外部网络使用 eth0（如果是拨号，有可能是 ppp0，请针对具体环境来设置）。</li><li>内部网络使用 eth1，且内部使用 192.168.100.0/24 这个 Class。</li><li>主机默认开放的服务有 WWW、SSH、HTTPS 等。</li></ul><p><img src="https://i.loli.net/2019/01/20/5c4367adb29cd.png" alt="centos_6_real_case.png"></p><center>图：一个局域网络的路由器架构示意图</center><p><strong>由于希望将信任网域 (LAN) 与不信任网域 (Internet) 完全分开，所以建议在 Linux 主机上面安装两块以上的实体网卡，将两块网卡接在不同的网络，这样可以避免很多问题</strong>。最重要的防火墙策略是：<strong>关闭所有的连接，仅开放特定的服务</strong>模式。 而且假设内部用户已经受过良好的训练，因此在 filter table 的 3 条链中默认策略是：</p><ul><li>INPUT 为 DROP</li><li>OUTPUT 及 FORWARD 为 ACCEPT</li></ul><p>整个防火墙流程图：</p><p><img src="https://i.loli.net/2019/01/20/5c4367f988687.png" alt="simple_firewall.png"></p><center>图：本机的防火墙规则流程示意图</center><p>原则上，内部 LAN 主机与主机本身的开放度很高，因为 OUTPUT 与 FORWARD 是完全开放的。对于小家庭的主机是这种设置可以接受的，因为内部的计算机数量不多，而且人员都是熟悉的，所以不需要特别加以控制。但是<strong>在大企业的内部，这样的规划是很不合格的，因为不能保证内部所有的人都可以按照我们的规定来使用 Network</strong>，也就是说家贼难防。因此，在这种环境下，连 OUTPUT 与 FORWARD 都需要特别加以管理才行。</p><h2 id="实际设置"><a href="#实际设置" class="headerlink" title="实际设置"></a>实际设置</h2><p>事实上，我们在设置防火墙的时候，不太可能会一个命令一个命令地输入，通常是利用 shell scripts 来帮我们实现这样的功能。下面是利用上面的流程图所规划出来的防火墙脚本，参考一下，但是需要将环境修改成适合自己的环境才行。此外，为了未来修改维护的方便，将整个 script 拆成 3 部分。</p><ul><li>iptables.rule：设置最基本的规则，包括清除防火墙规则、加载模块、设置服务可接受等。</li><li>iptables.deny：设置阻挡某些恶意主机的进入。</li><li>iptables.allow：设置允许某些自定义的后门来源主机进入。</li></ul><p>个人习惯是将这个脚本放置到 <code>/data/scripts/iptables</code> 目录下，你也可以自行放置到自己习惯的位置。那下面就来瞧瞧这个脚本是怎么写的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/scripts/iptables</span><br><span class="line"><span class="built_in">cd</span> /data/scripts/iptables</span><br><span class="line"></span><br><span class="line">vim iptables.rule</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请先输入相关参数，不要输入错误</span></span><br><span class="line">EXTIF=<span class="string">"eth0"</span>             <span class="comment"># 这个是可以连上 Public IP 的网络接口</span></span><br><span class="line">INIF=<span class="string">"eth1"</span>              <span class="comment"># 内部 LAN 的连接接口；若无则写成 INIF=""</span></span><br><span class="line">INNET=<span class="string">"192.168.100.0/24"</span> <span class="comment"># 若无内部网域接口，请填写成 INNET=""</span></span><br><span class="line"><span class="built_in">export</span> EXTIF INIF INNET</span><br><span class="line"></span><br><span class="line"><span class="comment">########################### 第一部份，针对本机的防火墙设置 ###########################</span></span><br><span class="line"><span class="comment"># 1. 先设置好内核的网络功能</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/tcp_syncookies</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> /proc/sys/net/ipv4/conf/*/&#123;rp_filter,log_martians&#125;; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"1"</span> &gt; <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> /proc/sys/net/ipv4/conf/*/&#123;accept_source_route,accept_redirects,\</span><br><span class="line">send_redirects&#125;; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"0"</span> &gt; <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 清除规则、设置默认策略及开放 lo 与相关的设置值</span></span><br><span class="line">PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin; <span class="built_in">export</span> PATH</span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line">iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 启动额外的防火墙 script 模块</span></span><br><span class="line"><span class="keyword">if</span> [ -f /data/scripts/iptables/iptables.deny ]; <span class="keyword">then</span></span><br><span class="line">    sh /data/scripts/iptables/iptables.deny</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f /data/scripts/iptables/iptables.allow ]; <span class="keyword">then</span></span><br><span class="line">    sh /data/scripts/iptables/iptables.allow</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f /data/scripts/httpd-err/iptables.http ]; <span class="keyword">then</span></span><br><span class="line">    sh /data/scripts/httpd-err/iptables.http</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 允许某些类型的 ICMP 数据包进入</span></span><br><span class="line">AICMP=<span class="string">"0 3 3/4 4 11 12 14 16 18"</span></span><br><span class="line"><span class="keyword">for</span> tyicmp <span class="keyword">in</span> <span class="variable">$AICMP</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    iptables -A INPUT -i <span class="variable">$EXTIF</span> -p icmp --icmp-type <span class="variable">$tyicmp</span> -j ACCEPT</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 允许某些服务的进入，请依照自己的环境开启</span></span><br><span class="line"><span class="comment"># iptables -A INPUT -p TCP -i $EXTIF --dport  21 --sport 1024:65534 -j ACCEPT # FTP</span></span><br><span class="line"><span class="comment"># iptables -A INPUT -p TCP -i $EXTIF --dport  22 --sport 1024:65534 -j ACCEPT # SSH</span></span><br><span class="line"><span class="comment"># iptables -A INPUT -p TCP -i $EXTIF --dport  25 --sport 1024:65534 -j ACCEPT # SMTP</span></span><br><span class="line"><span class="comment"># iptables -A INPUT -p UDP -i $EXTIF --dport  53 --sport 1024:65534 -j ACCEPT # DNS</span></span><br><span class="line"><span class="comment"># iptables -A INPUT -p TCP -i $EXTIF --dport  53 --sport 1024:65534 -j ACCEPT # DNS</span></span><br><span class="line"><span class="comment"># iptables -A INPUT -p TCP -i $EXTIF --dport  80 --sport 1024:65534 -j ACCEPT # WWW</span></span><br><span class="line"><span class="comment"># iptables -A INPUT -p TCP -i $EXTIF --dport 110 --sport 1024:65534 -j ACCEPT # POP3</span></span><br><span class="line"><span class="comment"># iptables -A INPUT -p TCP -i $EXTIF --dport 443 --sport 1024:65534 -j ACCEPT # HTTPS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################### 第二部份，针对后端主机的防火墙设置 ###########################</span></span><br><span class="line"><span class="comment"># 1. 先加载一些有用的模块</span></span><br><span class="line">modules=<span class="string">"ip_tables iptable_nat ip_nat_ftp ip_nat_irc ip_conntrack ip_conntrack_ftp ip_conntrack_irc"</span></span><br><span class="line"><span class="keyword">for</span> mod <span class="keyword">in</span> <span class="variable">$modules</span>; <span class="keyword">do</span></span><br><span class="line">    testmod=$(lsmod | grep <span class="string">"^<span class="variable">$&#123;mod&#125;</span> "</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$testmod</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">        modprobe <span class="variable">$mod</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 清除 NAT table 的规则</span></span><br><span class="line">iptables -F -t nat</span><br><span class="line">iptables -X -t nat</span><br><span class="line">iptables -Z -t nat</span><br><span class="line">iptables -t nat -P PREROUTING ACCEPT</span><br><span class="line">iptables -t nat -P POSTROUTING ACCEPT</span><br><span class="line">iptables -t nat -P OUTPUT ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 若有内部接口的存在 (双网卡) 开放成为路由器，且为 IP 路由器</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$INIF</span>"</span> != <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">    iptables -A INPUT -i <span class="variable">$INIF</span> -j ACCEPT</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$INNET</span>"</span> != <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> innet <span class="keyword">in</span> <span class="variable">$INNET</span>; <span class="keyword">do</span></span><br><span class="line">            iptables -t nat -A POSTROUTING -s <span class="variable">$innet</span> -o <span class="variable">$EXTIF</span> -j MASQUERADE</span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 如果你的 MSN 一直无法连接，或者是某些网站 OK 某些网站不 OK，</span></span><br><span class="line"><span class="comment"># 可能是 MTU 的问题，那你可以将下面这一行取消注释来启动 MTU 限制范围</span></span><br><span class="line"><span class="comment"># iptables -A FORWARD -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss \</span></span><br><span class="line"><span class="comment">#          --mss 1400:1536 -j TCPMSS --clamp-mss-to-pmtu</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. NAT 服务器后端的 LAN 内对外之服务器设置</span></span><br><span class="line"><span class="comment"># iptables -t nat -A PREROUTING -p tcp -i $EXTIF --dport 80 \</span></span><br><span class="line"><span class="comment">#          -j DNAT --to-destination 192.168.1.210:80 # WWW</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 特殊的功能，包括 Windows 远程桌面所产生的规则，假设桌面主机为 1.2.3.4</span></span><br><span class="line"><span class="comment"># iptables -t nat -A PREROUTING -p tcp -s 1.2.3.4  --dport 6000 \</span></span><br><span class="line"><span class="comment">#          -j DNAT --to-destination 192.168.100.10</span></span><br><span class="line"><span class="comment"># iptables -t nat -A PREROUTING -p tcp -s 1.2.3.4  --sport 3389 \</span></span><br><span class="line"><span class="comment">#          -j DNAT --to-destination 192.168.100.20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 最终将这些功能存储下来</span></span><br><span class="line">/etc/init.d/iptables save</span><br></pre></td></tr></table></figure><p>特别留意上面脚本的特殊字体部分，基本上，只要修改一下最上方的接口部分，就能够运作这个防火墙了。不过因为每个人的环境都不相同，因此在设置完成后，依旧需要测试一下才行。不然，出了问题可就麻烦了。再来看一下关于 <code>iptables.allow</code> 的内容。假如我要让一个 140.116.44.0/24 这个网络的所有主机来源可以进入本机主机的话，那么这个文件的内容可以写成这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim iptables.allow</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 下面是填写允许进入本机的其他网络或主机</span></span><br><span class="line">iptables -A INPUT -i <span class="variable">$EXTIF</span> -s 140.116.44.0/24 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是关于阻挡的文件设置方法</span></span><br><span class="line">vim iptables.deny</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 下面填写的是你要阻挡的那个 IP</span></span><br><span class="line">iptables -A INPUT -i <span class="variable">$EXTIF</span> -s 140.116.44.254 -j DROP</span><br><span class="line"></span><br><span class="line">chmod 700 iptables.*</span><br></pre></td></tr></table></figure><p>将这3个文件的权限设置为 700 且只属于 root 的权限后，就能够直接执行 iptables.rule 了。不过要注意的是，在上面的案例当中，默认将所有的服务通道都关闭的。所以你必须要到本机防火墙的第 5 步骤 处将一些注释 (#) 取消才行。同样地，如果有其他更多的 port 想要开启时，同样需要增加额外的规则。</p><p>不过，还是如同前面所说的，这个 firewall 仅能提供基本的安全防护，其他的相关问题还需要再测试。此外，如果希望一开机就自动执行这个 script 的话，请将这个文件的完整文件名写入 <code>/etc/rc.d/rc.local</code> 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.d/rc.local</span><br><span class="line">...(其他省略)...</span><br><span class="line"><span class="comment"># 1. Firewall</span></span><br><span class="line">/data/scripts/iptables/iptables.rule</span><br></pre></td></tr></table></figure><p>事实上，这个脚本的最下面已经加入写入防火墙默认规则文件的功能，所以只要执行一次，就拥有最正确的规则了。上述的 <code>rc.local</code> 仅是预防万一而已。上述 3 个文件请不要在 Windows 系统上面编辑后才传送到 Linux 上运行，因为 Windows 系统的换行符问题，将可能导致该文件无法执行。建议传送到 Linux 后可以利用 <code>dos2unix</code> 指令去转换换行符等，就不会有问题了</p><p>这就是一个最简单的防火墙。同时，这个防火墙还可以具有最简答的 IP 路由器的功能，也就是在 iptables.rule 这个文件中的第二部分。</p>]]></content>
      
      <categories>
          
          <category> iptables笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables防火墙实例 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iptables防火墙数据包过滤软件</title>
      <link href="/2019/01/18/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99/"/>
      <url>/2019/01/18/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<h1 id="iptables防火墙数据包过滤软件"><a href="#iptables防火墙数据包过滤软件" class="headerlink" title="iptables防火墙数据包过滤软件"></a>iptables防火墙数据包过滤软件</h1><h2 id="iptables-的表-table-与链-chain"><a href="#iptables-的表-table-与链-chain" class="headerlink" title="iptables 的表 (table) 与链 (chain)"></a>iptables 的表 (table) 与链 (chain)</h2><a id="more"></a><h3 id="Filter（过滤器）"><a href="#Filter（过滤器）" class="headerlink" title="Filter（过滤器）"></a>Filter（过滤器）</h3><p>主要跟进入 Linux 本机的数据包有关，是默认的 table。</p><ul><li>INPUT：主要与想要进入我们 Linux 本机的数据包有关。</li><li>OUTPUT：主要与我们 Linux 本机所要送出的数据包有关。</li><li>FORWARD：这个与 Linux 本机比较没有关系，他可以转递数据包到后端的计算机中，与下列 NAT 的 table 相关性较高。</li></ul><h3 id="NAT（地址转换）"><a href="#NAT（地址转换）" class="headerlink" title="NAT（地址转换）"></a>NAT（地址转换）</h3><p>是 Network Address Translation 的缩写， 这个表格主要在进行来源与目的之 IP 或 port 的转换，与 Linux 本机较无关，主要与 Linux 主机后的局域网络内计算机较有相关。</p><ul><li>PREROUTING：在进行路由判断之前所要进行的规则 (DNAT/REDIRECT)</li><li>POSTROUTING：在进行路由判断之后所要进行的规则 (SNAT/MASQUERADE)</li><li>OUTPUT：与发送出去的数据包有关</li></ul><h3 id="Mangle（破坏者）"><a href="#Mangle（破坏者）" class="headerlink" title="Mangle（破坏者）"></a>Mangle（破坏者）</h3><p>这个表格主要是与特殊的数据包的路由标志有关，早期仅有 PREROUTING 及 OUTPUT 链，不过从 kernel 2.4.18 之后加入了 INPUT 及 FORWARD 链。由于这个表格与特殊标志相关性较高，所以在我们讨论的这种单纯的环境当中，较少使用 Mangle 这个表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iptables [-t tables] [-L] [-nv]</span><br><span class="line">选项与参数：</span><br><span class="line">-t  <span class="comment"># 后面接 table ，例如 nat 或 filter ，若省略此项目，则使用默认的 filter</span></span><br><span class="line">-L  <span class="comment"># 列出目前的 table 的规则</span></span><br><span class="line">-n  <span class="comment"># 不进行 IP 与 HOSTNAME 的反查，显示信息的速度会快很多</span></span><br><span class="line">-v  <span class="comment"># 列出更多的信息，包括通过该规则的数据包总位数、相关的网络接口等</span></span><br></pre></td></tr></table></figure><h2 id="列出-filter-table-三条链的规则"><a href="#列出-filter-table-三条链的规则" class="headerlink" title="列出 filter table 三条链的规则"></a>列出 filter table 三条链的规则</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iptables -L -n</span><br><span class="line">Chain INPUT (policy ACCEPT)    <span class="comment"># 针对 INPUT 链，且默认政策为可接受</span></span><br><span class="line">target  prot opt <span class="built_in">source</span>     destination    <span class="comment"># 说明栏</span></span><br><span class="line">ACCEPT  all  --  0.0.0.0/0  0.0.0.0/0   state RELATED,ESTABLISHED  <span class="comment"># 第 1 条规则</span></span><br><span class="line">ACCEPT  icmp --  0.0.0.0/0  0.0.0.0/0                              <span class="comment"># 第 2 条规则</span></span><br><span class="line">ACCEPT  all  --  0.0.0.0/0  0.0.0.0/0                              <span class="comment"># 第 3 条规则</span></span><br><span class="line">ACCEPT  tcp  --  0.0.0.0/0  0.0.0.0/0   state NEW tcp dpt:22       <span class="comment"># 以下类推</span></span><br><span class="line">REJECT  all  --  0.0.0.0/0  0.0.0.0/0   reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)    <span class="comment"># 针对 FORWARD 链，且默认政策为可接受</span></span><br><span class="line">target  prot opt <span class="built_in">source</span>     destination</span><br><span class="line">REJECT  all  --  0.0.0.0/0  0.0.0.0/0   reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)    <span class="comment"># 针对 OUTPUT 链，且默认政策为可接受</span></span><br><span class="line">target  prot opt <span class="built_in">source</span>     destination</span><br></pre></td></tr></table></figure><h2 id="列出-nat-table-三条链的规则"><a href="#列出-nat-table-三条链的规则" class="headerlink" title="列出 nat table 三条链的规则"></a>列出 nat table 三条链的规则</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -L -n</span><br><span class="line">Chain PREROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br></pre></td></tr></table></figure><p>上面的输出结果中，每一个 Chain 就是前面提到的每个链。Chain 那一行括号里面的 policy 就是默认的策略。</p><ul><li>target：代表进行的操作，ACCEPT 是放行，而 REJECT 则是拒绝，此外，尚有 DROP (丢弃) 的项目。</li><li>prot：代表使用的数据包协议，主要有 TCP、UDP 及 ICMP 3 种数据包格式。</li><li>opt：额外的选项说明。</li><li>source：代表此规则是针对哪个 <code>来源IP</code> 进行限制。</li><li>destination：代表此规则是针对哪个 <code>目标IP</code> 进行限制。</li></ul><p>第一个范例因为没有加上 <code>-t</code> 的选项，所以默认就是 filter 这个表格内的 INPUT、OUTPUT、FORWARD 三条链的规则。<br>若针对单机来说，INPUT 与 FORWARD 算是比较重要的管制防火墙链， 所以可以发现最后一条规则的政策是 REJECT（拒绝）！虽然 INPUT 与 FORWARD 的政策是放行 (ACCEPT)， 不过最后一条规则就已经将全部的数据包都拒绝了！</p><p>这个命令的查看只是做格式化的查看，要详细解释每个规则会比较不容易。举例来说， 我们将 INPUT 的 5 条规则依据输出结果来说明一下，结果会变成：</p><ol><li>只要是数据包状态为 RELATED、ESTABLISHED 就予以接受</li><li>只要数据包协议是 icmp 类型的，就予以放行</li><li>无论任何来源 (0.0.0.0/0) 且要去任何目标的数据包，不论任何数据包格式 (prot 为 all)，一律都接受</li><li>只要是传给 port 22 的主动式连接 TCP 数据包就接受</li><li>全部的数据包信息一律拒绝</li></ol><p>还有第 3 条规则怎么会所有的数据包信息都予以接受呢？如果都接受的话，那么后续的规则根本就没有用了！ 其实那条规则只是针对每台主机都有的内部循环测试网络 (lo) 接口，如果没有列出接口，那么我们就很容易搞错。所以，建议使用 <code>iptables-save</code> 这个指令来查看防火墙规则。因为 <code>iptables-save</code> 会列出完整的防火墙规则，只是没有格式化输出而已。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">iptables-save [-t table]</span><br><span class="line">选项与参数：</span><br><span class="line">-t  <span class="comment"># 可以仅针对某些表来输出，例如仅针对 NAT 或 Filter 等</span></span><br><span class="line"></span><br><span class="line">iptables-save</span><br><span class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Fri Jul 22 15:51:52 2011</span></span><br><span class="line">*filter                       <span class="comment"># 星号开头的指的是表，这里为 Filter</span></span><br><span class="line">:INPUT ACCEPT [0:0]           <span class="comment"># 冒号开头的指的是链，3条内建的链</span></span><br><span class="line">:FORWARD ACCEPT [0:0]         <span class="comment"># 3条内建链的策略都是 ACCEPT</span></span><br><span class="line">:OUTPUT ACCEPT [680:100461]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT    <span class="comment"># 针对 INPUT 的规则</span></span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT      <span class="comment"># 这条很重要，针对本机内部接口开放</span></span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited    <span class="comment"># 针对 FORWARD 的规则</span></span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Fri Jul 22 15:51:52 2011</span></span><br></pre></td></tr></table></figure><p>上面输出结果来看，内容含有 <code>lo</code> 的那条规则当中，<code>-i lo</code> 指的就是由 <code>lo</code> 网卡进来的数据包。这样就清楚多了！因为有写到接口的关系，不像之前的 <code>iptables -L -n</code>。不过，既然这个规则不是我们想要的，那该如何修改呢？建议先删除规则再慢慢建立各个需要的规则。那如何清除规则？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">iptables [-t tables] [-FXZ]</span><br><span class="line">选项与参数：</span><br><span class="line">-F  <span class="comment"># 清除所有的已制订的规则</span></span><br><span class="line">-X  <span class="comment"># 除掉所有用户 "自定义" 的 chain (应该说的是 tables ）</span></span><br><span class="line">-Z  <span class="comment"># 将所有的 chain 的计数与流量统计都归零</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除本机防火墙 (filter) 的所有规则</span></span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br></pre></td></tr></table></figure><p>由于这三条命令会将本机防火墙的所有规则都清除，但不会改变默认策略 (policy) ， 所以如果你不是在本机使用这三行命令时，很可能会将自己挡在门外（若 INPUT 设置为 DROP 时）要注意！</p><p>一般来说，我们在重新定义防火墙的时候，都会先将规则给清除掉。我们前面说到的 <strong>防火墙的规则顺序是有特殊意义的</strong>，所以，应当先清除掉规则，然后再一条一条来设置会比较容易一些。接下来就谈谈如何定义默认策略。</p><h2 id="定义默认策略-policy"><a href="#定义默认策略-policy" class="headerlink" title="定义默认策略 (policy)"></a>定义默认策略 (policy)</h2><p>清除规则之后，接下来就是要设置规则的策略。还记得策略指的是什么吗？<strong>当数据包不在我们设置的规则之内时，则该数据包的通过与否，是以 Policy 的设置为准</strong>，在本机的默认策略中，假设对于内部的用户有信心的话， 那么 Filter 内的 INPUT 链方面可以定义的比较严格一点，而 FORWARD 与 OUTPUT 则可以制订得松一些。通常都是将 INPUT 的 policy 定义为 DROP ，其他两个则定义为 ACCEPT。 至于 NAT table 则暂时先不理会。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables [-t nat] -P [INPUT,OUTPUT,FORWARD] [ACCEPT,DROP]</span><br><span class="line">选项与参数：</span><br><span class="line">-P      <span class="comment"># 定义策略 (Policy)。注意，这个 P 为大写</span></span><br><span class="line">ACCEPT  <span class="comment"># 该数据包可接受</span></span><br><span class="line">DROP    <span class="comment"># 该数据包直接丢弃，不会让 Client 端知道为何被丢弃</span></span><br></pre></td></tr></table></figure><blockquote><p>将本机的 INPUT 设置为 DROP ，其他设置为 ACCEPT</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line">iptables-save</span><br><span class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Fri Jul 22 15:56:34 2011</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Fri Jul 22 15:56:34 2011</span></span><br><span class="line"><span class="comment"># 由于 INPUT 设置为 DROP 而又尚未有任何规则，所以上面的输出结果显示</span></span><br><span class="line"><span class="comment"># 所有的数据包都无法进入的主机，是不通的防火墙设置！(网络连接是双向的)</span></span><br></pre></td></tr></table></figure><p>看到输出的结果，INPUT 的设置被修改了，其他的 NAT table 3 条链的默认策略设置也是一样的方式。<br>例如：<br><code>iptables -t nat -P PREROUTING ACCEPT</code> 就设置了 NAT table 的 PREROUTING 链为可接受。默认策略设置完毕后，来聊一聊关于各规则的数据包基础比对设置。</p><h2 id="数据包的基础比对：IP，网络及接口设备"><a href="#数据包的基础比对：IP，网络及接口设备" class="headerlink" title="数据包的基础比对：IP，网络及接口设备"></a>数据包的基础比对：IP，网络及接口设备</h2><p>开始来进行防火墙规则的数据包比对设置。既然是因特网，那么我们就由最基础的 IP，网络及端口，亦即是 OSI 的第三层谈起，再来谈谈设备网卡的限制等等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">iptables [-AI 链名] [-io 网络接口] [-p 协议] [-s 来源IP/网域] [-d 目标IP/网域] -j [ACCEPT|DROP|REJECT|LOG]</span><br><span class="line">选项与参数：</span><br><span class="line">-AI 链名  <span class="comment"># 针对某的链进行规则的 "插入" 或 "累加"</span></span><br><span class="line">    -A   <span class="comment"># 新增加一条规则，该规则增加在原本规则的最后面。</span></span><br><span class="line">         <span class="comment"># 例如原本已经有四条规则，使用 -A 就可以加上第五条规则</span></span><br><span class="line">    -I   <span class="comment"># 插入一条规则。如果没有指定此规则的顺序，默认是插入变成第一条规则。</span></span><br><span class="line">         <span class="comment"># 例如原本有四条规则，使用 -I 则该规则变成第一条，而原本 4 条变成 2~5 条</span></span><br><span class="line">    链   <span class="comment"># 有 INPUT、OUTPUT、FORWARD 等，此链名称又与 -io 有关，请看下面</span></span><br><span class="line"></span><br><span class="line">-io 网络接口  <span class="comment"># 设置数据包进出的接口规范</span></span><br><span class="line">    -i  <span class="comment"># 数据包所进入的那个网络接口，例如 eth0、lo 等接口。需与 INPUT 链配合</span></span><br><span class="line">    -o  <span class="comment"># 数据包所传出的那个网络接口，需与 OUTPUT 链配合</span></span><br><span class="line"></span><br><span class="line">-p 协定  <span class="comment"># 设置此规则适用于哪种数据包格式</span></span><br><span class="line">        <span class="comment"># 主要的数据包格式有：tcp、udp、icmp 及 all</span></span><br><span class="line"></span><br><span class="line">-s 来源 IP/网域  <span class="comment"># 设置此规则之数据包的来源项目，可指定单纯的 IP 或包括网域，例如：</span></span><br><span class="line">   IP    <span class="comment"># 192.168.0.100</span></span><br><span class="line">   网络  <span class="comment"># 192.168.0.0/24, 192.168.0.0/255.255.255.0 均可</span></span><br><span class="line">   <span class="comment"># 若规范为 “不许” 时，则加上 “!” 即可，例如：</span></span><br><span class="line">   -s ! 192.168.100.0/24  <span class="comment"># 表示不接受 192.168.100.0/24 发来的数据包</span></span><br><span class="line"></span><br><span class="line">-d 目标 IP/网络  <span class="comment"># 同 -s ，只不过这里指的是目标的 IP 或网络</span></span><br><span class="line"></span><br><span class="line">-j  <span class="comment"># 后面接操作，主要的操作有接受(ACCEPT)、丢弃(DROP)、拒绝(REJECT)及记录(LOG)</span></span><br></pre></td></tr></table></figure><p>iptables 的基本参数就如同上面所示，仅谈到 IP 、网络与设备等的信息， 至于 TCP、UDP 数据包特有的端口 (port number) 与状态（如 SYN 标志）则在后面介绍。先让我们来看看最基础的几个规则，例如开放 lo 这个本机的接口以及某个 IP 来源。</p><blockquote><p>设定 lo 成为受信任的装置，亦即进出 lo 的封包都予以接受</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br></pre></td></tr></table></figure><p>仔细看上面并没有列出 -s、-d 等等的规则，这表示：<strong>不论数据包来自何处或去到哪里，只要是来自 lo 这个接口，就予以接受。</strong>这个概念挺重要的，就是“没有指定的项目，则表示该项目完全接受”。例如这个案例当中，关于 -s、-d 等的参数没有规定时，就代表不论什么值都会被接受。</p><p>这就是所谓的信任设备。假如主机有两张以太网卡，其中一张是对内部的网络，假设该网卡的代号为 eth1， 如果内部网络是可信任的，那么该网卡的进出数据包就通通会被接受，那就可以用 <code>iptables -A INPUT -i eth1 -j ACCEPT</code> 来将该设备设置为信任设备。不过，使用这个命令前要特别注意，因为这样等于该网卡没有任何防备了。</p><blockquote><p>只要是来自内网的 (192.168.100.0/24) 的数据包通通接受</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i eth1 -s 192.168.100.0/24 -j ACCEPT</span><br><span class="line"><span class="comment"># 由于是内网就接受，因此也可以称之为“信任网络”</span></span><br></pre></td></tr></table></figure><blockquote><p>只要是来自 192.168.100.10 就接受，但 192.168.100.230 这个“恶意”来源就丢弃</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i eth1 -s 192.168.100.10 -j ACCEPT</span><br><span class="line">iptables -A INPUT -i eth1 -s 192.168.100.230 -j DROP</span><br><span class="line"><span class="comment"># 针对单一 IP 来源，可视为信任主机或者是不信任的恶意来源</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iptables-save</span><br><span class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Fri Jul 22 16:00:43 2011</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [17:1724]</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -s 192.168.100.0/24 -i eth1 -j ACCEPT</span><br><span class="line">-A INPUT -s 192.168.100.10/32 -i eth1 -j ACCEPT</span><br><span class="line">-A INPUT -s 192.168.100.230/32 -i eth1 -j DROP</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Fri Jul 22 16:00:43 2011</span></span><br></pre></td></tr></table></figure><p>这就是最简单的防火墙规则的设置与查看方式。不过，在上面的案例中，其实也可以发现到有两条规则可能有问题，那就是上面的特殊字体圈起来的规则顺序。明明已经放行了 192.168.100.0/24，所以 192.168.100.230 的规则就不可能会被用到了！这就是防火墙设置的问题。那该怎么办？重写。那如果想要记录某个规则的记录怎么办？可以这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -s 192.168.2.200 -j LOG</span><br><span class="line">iptables -L -n</span><br><span class="line">target prot opt <span class="built_in">source</span>         destination</span><br><span class="line">LOG    all  --  192.168.2.200  0.0.0.0/0   LOG flags 0 level 4</span><br></pre></td></tr></table></figure><p>输出结果的最左边出现 LOG。只要有数据包来自 192.168.2.200 这个 IP 时，那么该数据包的相关信息就会被写入到内核日志文件，即 <code>/var/log/messages</code> 这个文件当中。<strong>然后该数据包会继续进行后续的规则比对。</strong>所以说，LOG 这个动作仅在进行记录而已，并不会影响到这个数据包的其他规则比对。接下来我们分别来看看 TCP、UDP 以及 ICMP 数据包的其他规则比对。</p><h2 id="TCP、UDP-的规则比对：针对端口设置"><a href="#TCP、UDP-的规则比对：针对端口设置" class="headerlink" title="TCP、UDP 的规则比对：针对端口设置"></a>TCP、UDP 的规则比对：针对端口设置</h2><p>网络中各种不同的数据包格式，TCP 与 UDP，比较特殊的就是那个端口 (port)，在 TCP 方面则另外有所谓的连接数据包状态，包括最常见的 SYN 主动连接的数据包格式。那么如何针对这两种数据包格式进行防火墙规则的设置呢？可以这样看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iptables [-AI 链] [-io 网络接口] [-p tcp,udp] \</span><br><span class="line">&gt; [-s 来源IP/网络] [--sport 端口范围] \</span><br><span class="line">&gt; [-d 目标IP/网络] [--dport 端口范围] -j [ACCEPT|DROP|REJECT]</span><br><span class="line">选项与参数：</span><br><span class="line">--sport 端口范围  <span class="comment"># 限制来源的端口号码，端口号码可以是连续的，例如 1024:65535</span></span><br><span class="line">--dport 端口范围  <span class="comment"># 限制目标的端口号码</span></span><br></pre></td></tr></table></figure><p>事实上就是多了 <code>--sport</code> 及 <code>--dport</code> 这两个选项，重点在 port 上面。不过需要特别注意，<strong>因为只有 TCP 与 UDP 数据包具有端口，因此要想使用 <code>--dport</code>、<code>--sport</code> 时，得要加上 <code>-p tcp</code> 或 <code>-p udp</code> 的参数才会成功。</strong>下面让我们来进行几个小测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 想要连接进入本机 port 21 的数据包都阻挡掉</span></span><br><span class="line">iptables -A INPUT -i eth0 -p tcp --dport 21 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 想连到本台主机的网上邻居 (upd port 137,138 tcp port 139,445) 就放行</span></span><br><span class="line">iptables -A INPUT -i eth0 -p udp --dport 137:138 -j ACCEPT</span><br><span class="line">iptables -A INPUT -i eth0 -p tcp --dport 139 -j ACCEPT</span><br><span class="line">iptables -A INPUT -i eth0 -p tcp --dport 445 -j ACCEPT</span><br></pre></td></tr></table></figure><p>我们不但可以利用 UDP 与 TCP 协议所拥有的端口号码来进行某些服务的开放或关闭，还可以综合处理。<br>例如，只要来自 192.168.1.0/24 的 1024:65535 端口的数据包，且想要连接到本机的 ssh port 就予以阻挡，可以这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i eth0 -p tcp -s 192.168.1.0/24 \</span><br><span class="line">&gt; --sport 1024:65534 --dport ssh -j DROP</span><br></pre></td></tr></table></figure><p>如果忘记加上 <code>-p tcp</code> 就使用了 <code>--dport</code> 时，会发生以下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`[root@www ~]<span class="comment"># iptables -A INPUT -i eth0 --dport 21 -j DROP iptables v1.4.7: unknown option `--dport' Try `iptables -h' or 'iptables --help' for more information.`</span></span><br></pre></td></tr></table></figure><p>你应该会觉得很奇怪，怎么 “–dport” 会是未知的参数 (arg) 呢？这是因为没有加上 <code>-p tcp</code> 或 <code>-p udp</code> 的缘故。这一点很重要。</p><p>除了端口之外，TCP 数据包还有特殊的标志。最常见的就是主动连接的 SYN 标志了。在 iptables 里面还支持 “–syn” 的处理方式，我们以下面的例子来说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将来自任何地方来源 port 1:1023 的主动连接到本机端的 1:1023 连接丢弃</span></span><br><span class="line">iptables -A INPUT -i eth0 -p tcp --sport 1:1023 \</span><br><span class="line">&gt; --dport 1:1023 --syn -j DROP</span><br></pre></td></tr></table></figure><p>一般来说，Client 端启用的 port 都大于 1024，而 Server 端启用的端口都小于 1023。所以我们可以丢弃来自远程的小于 1023 的端口数据的主动连接，但不适用于 FTP 的主动连接中。</p><h2 id="iptables-外挂模块：mac-与-state"><a href="#iptables-外挂模块：mac-与-state" class="headerlink" title="iptables 外挂模块：mac 与 state"></a>iptables 外挂模块：mac 与 state</h2><p>在 kernel 2.2 以前使用 <code>ipchains</code> 管理防火墙时，通常会让系统管理员相当头痛。因为 <code>ipchains</code> 没有所谓的数据包状态模块，因此我们必须要针对数据包的进、出方向进行控制。例如，如果想要连接到远程主机的 port 22 时，必须要针对两条规则来设置：</p><ul><li>本机端的 1024:65535 到远程的 port 22 必须要放行 (OUTPUT 链)。</li><li>远程主机 port 22 到本机的 1024:65535 必须放行 (INPUT 链)。</li></ul><p>这会很麻烦。因为要连接到 10 部主机的 port 22 时，假设 OUTPUT 为默认开启 (ACCEPT)， 那么久需要填写 10 行规则，让那 10 台远程主机的 port 22 可以连接到本地端主机上。如果开启全部的 port 22，则又担心某些恶意主机会主动以 port 22 连接到本地主机。同理，如果要让本地端主机可以连到外部的 port 80 (WWW 服务)，那就更不得了。<strong>因为网络连接是双向的</strong>，一个很重要的概念！</p><p>iptables 可以帮我们免除这个困扰。它可以通过一个状态模块来分析<strong>这个想要进入的数据包是否为刚刚发出去的响应，</strong>如果是刚刚发出去的响应，那么就可以予以接受放行。这样就不用考虑远程主机是否连接进来的问题了。那如何实现呢？看看下面的语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT [-m state] [--state 状态]</span><br><span class="line">选项与参数：</span><br><span class="line">-m  <span class="comment"># 一些 iptables 的外挂模块，主要常见的有：</span></span><br><span class="line">     state  <span class="comment"># 状态模块</span></span><br><span class="line">     mac    <span class="comment"># 网络卡硬件地址 (hardware address)</span></span><br><span class="line">--state  <span class="comment"># 一些封包的状态，主要有：</span></span><br><span class="line">     INVALID     <span class="comment"># 无效的数据包，例如数据破损的数据包状态</span></span><br><span class="line">     ESTABLISHED <span class="comment"># 已经连接成功的连接状态</span></span><br><span class="line">     NEW         <span class="comment"># 想要新建立连接的数据包状态</span></span><br><span class="line">     RELATED     <span class="comment"># 这个最常用！表示这个数据包是与主机发送出去的数据包有关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只要已建立连接或与已发出请求相关数据包就予以通过，不合法的数据报包就丢弃</span></span><br><span class="line">iptables -A INPUT -m state \</span><br><span class="line">&gt; --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A INPUT -m state --state INVALID -j DROP</span><br></pre></td></tr></table></figure><p>这样，iptables 就会主动分析出该数据包是否为响应状态，若是的话，就直接予以接受。这样不需要针对响应的数据包来撰写个别的防火墙规则了。下面我们继续谈一下 iptables 的另一个外挂， 那就是针对网卡来进行放行与防御：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对局域网络内的 aa:bb:cc:dd:ee:ff 主机开放其连接</span></span><br><span class="line">iptables -A INPUT -m mac --mac-source aa:bb:cc:dd:ee:ff \</span><br><span class="line">&gt; -j ACCEPT</span><br><span class="line">选项与参数：</span><br><span class="line">--mac-source  <span class="comment"># 就是来源主机的 MAC</span></span><br></pre></td></tr></table></figure><p>如果局域网当中有某些网络高手，老是可以通过修改 IP 去尝试通过路由器往外跑，那这时该怎么办？ 难道将整个局域网拒绝？并不需要的，可以通过之前谈到的 ARP 相关概念，去捕捉到那台主机的 MAC，然后通过以上这个机制，将该主机整个 DROP 掉即可。不管他改了什么 IP，除非他知道你是用网卡的 MAC 来管理，否则他是出不去的。</p><p>其实 MAC 也是可以伪装的，可以通过某些软件来修改网卡的 MAC。不过，这里我们是假设 MAC 是无法修改的情况来说明的。此外，MAC 是不能跨路由的，因此上述的案例中才特别说明是在局域网内，而不是指 Internet 外部的来源。</p><h2 id="ICMP-数据包规则的比对：针对是否响应-ping-来设计"><a href="#ICMP-数据包规则的比对：针对是否响应-ping-来设计" class="headerlink" title="ICMP 数据包规则的比对：针对是否响应 ping 来设计"></a>ICMP 数据包规则的比对：针对是否响应 ping 来设计</h2><p>在 ICMP 协议当中我们知道 ICMP 的类型很多，而且很多 ICMP 数据包的类型都是用来进行网络检测的。所以最好不要将所有的 ICMP 数据包都丢弃。如果主机不是作为路由器时，通常我们会把 ICMP type 8 (echo request) 拿掉，这样远程主机就不知道我们是否存在，也不会接受 ping 的响应。ICMP 数据包格式的处理是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT [-p icmp] [--icmp-type 类型] -j ACCEPT</span><br><span class="line">选项与参数：</span><br><span class="line">--icmp-type  <span class="comment"># 后面必须要接 ICMP 的数据包类型，也可以使用代号，</span></span><br><span class="line">              例如 8  代表 <span class="built_in">echo</span> request 的意思</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让 0,3,4,11,12,14,16,18 的 ICMP type 可以进入本机</span></span><br><span class="line">vim somefile</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">icmp_type=<span class="string">"0 3 4 11 12 14 16 18"</span></span><br><span class="line"><span class="keyword">for</span> typeicmp <span class="keyword">in</span> <span class="variable">$icmp_type</span>; <span class="keyword">do</span></span><br><span class="line">   iptables -A INPUT -i eth0 -p icmp --icmp-type <span class="variable">$typeicmp</span> -j ACCEPT</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">sh somefile</span><br></pre></td></tr></table></figure><p>这样就能够开放部分的 ICMP 数据包格式进入本机进行网络检测的工作了。不过，如果主机是作为局域网的路由器，那么建议 ICMP 数据包还是要全部放行才好，因为客户端检测网络时，常常会使用 ping 来测试到路由器的线路是否畅通。所以不要将路由器的 ICMP 关掉，会导致相关应用异常。</p><h2 id="简单的客户端防火墙设计与防火墙规则存储"><a href="#简单的客户端防火墙设计与防火墙规则存储" class="headerlink" title="简单的客户端防火墙设计与防火墙规则存储"></a>简单的客户端防火墙设计与防火墙规则存储</h2><p>经过上述的本机 iptables 语法分析后，接下来我们来想想，如果将 Linux 主机作为客户端且不提供网络服务时，应该如何设计防火墙呢？其实，只要分析一下 CentOS 默认的防火墙规则就会知道，理论上，应该要有的规则如下：</p><ol><li>规则归零：清除所有已经存在的规则 (iptables -F 等)</li><li>默认策略：除了将 INPUT 这个自定义链设为 DROP 外，其他默认为 ACCEPT。</li><li>信任本机：由于 lo 对本机来说是相当重要的，因此 lo 必须设置为信任设备。</li><li>回应数据包：让本机通过主动向外发出请求而响应的数据包可以进入本机 (ESTABLISHED、RELATED)</li><li>信任用户：这是非必要的，可在想要让本地网络的来源使用主机资源时设置。</li></ol><p>这就是最简单的防火墙，通过第 2 步骤可以阻挡所有远程的来源数据包，而通过第 4 步骤可以允许远程主机响应数据包进入主机，再让本机的 lo 这个内部循环设备放行，这样，一台 Client 专用的防火墙规则就配置好了。具体设置时，可以在某个 script 上面这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vim firewall.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin; <span class="built_in">export</span> PATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 清除规则</span></span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 设置策略</span></span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3~5. 制订各项规则</span></span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line">iptables -A INPUT -i eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment"># iptables -A INPUT -i eth0 -s 192.168.1.0/24 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 写入防火墙规则配置文件</span></span><br><span class="line">/etc/init.d/iptables save</span><br><span class="line"></span><br><span class="line">sh firewall.sh</span><br><span class="line">iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]</span><br></pre></td></tr></table></figure><p>其实防火墙也是一个服务，并可以通过 <code>chkconfig --list iptables</code> 或 <code>systemctl -l status iptables</code> 去查看。因此，若要让这次修改的各种设置在下次开机时还保存，那就需要对 <code>/etc/init.d/iptables save</code> 这个指令加参数。 因此，现在将存储的操作写入 firewall.sh 脚本中，比较单纯些。通过以上设置，现在，Linux 主机已经有相当的保护了，只是如果想要作为服务器，或者是作为路由器，那就需要自行加上某些自定义的规则。</p><p><strong>Tips:</strong> 其实，如果你对 Linux 够熟悉的话，直接去修改 <code>/etc/sysconfig/iptables</code> 然后重启 iptables 这个服务，那防火墙规则就会在开机后持续存在了。</p><h2 id="IPv4-的核心管理功能：-proc-sys-net-ipv4"><a href="#IPv4-的核心管理功能：-proc-sys-net-ipv4" class="headerlink" title="IPv4 的核心管理功能：/proc/sys/net/ipv4/"></a>IPv4 的核心管理功能：/proc/sys/net/ipv4/</h2><p>除了 iptables 这个防火墙软件之外，Linux kernel 2.6 还提供了很多内核默认的攻击阻挡机制。由于是内核的网络功能，所以相关的设置数据都是放置在 <code>/proc/sys/net/ipv4/</code> 这个目录当中。 至于该目录下各个文件的详细资料，可以参考内核的说明文件（你得要先安装 kernel-doc 软件）：</p><ul><li>/usr/share/doc/kernel-doc-2.6.32/Documentation/networking/ip-sysctl.txt<br>鸟哥的网站上也放了一份备份：</li><li>http:/linux.vbird.org/linux_server/0250simple_firewall/ip-sysctl.txt<br>有兴趣的话应该要自行去查看。我们下面来介绍几个简单的文件。</li></ul><p><strong>1. /proc/sys/net/ipv4/tcp_syncookies</strong><br>我们在前面谈到所谓的阻断式服务 (DoS) 攻击法当中的一种方式，就是利用 TCP 数据包的 SYN 三次握手原理实现的，这种方式称为 SYN Flooding。那如何预防这种方式的攻击呢？我们可以启用内核的 SYN Cookie 模块。这个 SYN Cookie 模块可以在系统用来启动随机连接的端口 (1024:65535) 即将用完时自动启动。</p><p><strong>当启动 SYN Cookie 时，主机在发送 SYN/ACK 确认数据包前，会要求 Client 端在短时间内回复一个序号，这个序号包含许多原 SYN 数据包内的信息，包括 IP、port 等。若 Client 端可以回复正确的序号，那么主机就确定该数据包为可信的，因此会发送 SYN/ACK 数据包，否则就不理会此数据包。</strong></p><p>通过这一机制可以大大降低无效的 SYN 等待端口，避免 SYN Flooding 的 DoS 攻击。那么如何启动这个模块呢？很简单，这样做即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/tcp_syncookies</span><br></pre></td></tr></table></figure><p>但是这个设置值由于违反 TCP 的三次握手（因为主机在发送 SYN/ACK 之前需要先等待 Client 的序号响应），所以可能会造成某些服务的延迟现象，例如 SMTP (Mail Server)。不过总的来说，这个设置值还是不错，<strong>只是不适合用在负载已经很高的服务器内。</strong>因为负载太高的主机有时会让内核误判遭受 SYN Flooding 的攻击。</p><p>如果是为了系统的 TCP 数据包连接优化，则可以参考 tcp_max_syn_backlog、tcp_synack_retries、tcp_abort_on_overflow 这几个设置值的意义。</p><p><strong>2. /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts</strong></p><p>阻断式服务常见的是 SYN Flooding，不过，我们知道系统其实可以接受使用 ping 的响应，而 <a href="http://cn.linux.vbird.org/linux_server/0140networkcommand.php#ping" target="_blank" rel="noopener">ping</a> 的数据包数据量可以很大。想象一个状况，如果有个搞破坏的人使用 1000 台主机传送 ping 给你的主机，而且每个 ping 都高达数百 Kbytes 时，你的网络带宽会怎样？要么就是带宽被吃光，要么系统可能会宕机。这种方式分别被称为 ping flooding（不断发 ping）及 ping of death（发送大的 ping 数据包）。</p><p>那如何避免呢？取消 ICMP 类型 8 的 ICMP 数据包回应就是了。我们可以通过防火墙来阻挡，这也是建议的方式。当然也可以让内核自动取消 ping 的响应。不过，<strong>某些局域网络内常见的服务（例如动态 IP 分配 DHCP 协议）会使用 ping 的方式来侦测是否有重复的 IP，所以最好不要取消所有的 ping 响应比较好。</strong></p><p>内核取消 ping 回应的设置值有两个，分别是 <code>/proc/sys/net/ipv4</code> 内的 icmp_echo_ignore_broadcasts（仅有 ping broadcast 地址时才取消 ping 的回应）及 icmp_echo_ignore_all（全部的 ping 都不回应）。建议设置  icmp_echo_ignore_broadcasts。可以这么做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt; \</span><br><span class="line">&gt; /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts</span><br></pre></td></tr></table></figure><p><strong>3. /proc/sys/net/ipv4/conf/网络接口/*</strong></p><p>Linux 的内核还可以针对不同的网络接口进行不一样的参数设置。网络接口的相关设置放置在 <code>/proc/sys/net/ipv4/conf/</code> 中，每个接口都以接口代号做为其代表，例如 eth0 接口的相关设置数据在 <code>/proc/sys/net/ipv4/conf/eth0/</code> 内。那么网络接口的设置数据有哪些需要注意的呢？ 大概有下面这几个：</p><ul><li><p><strong>rp_filter</strong>：称为逆向路径过滤 (Reverse Path Filtering)，可以通过分析网络接口的路由信息，配合数据包的来源地址，来分析该数据包是否为合理。举例来说，你有两张网卡，eth0 为 192.168.1.10/24，eth1 为 public IP。那么当有一个数据包自称来自 eth1，但是其 IP 来源为 192.168.1.200，那这个数据包就不合理，应予以丢弃。这个设置值建议启动。</p></li><li><p><strong>log_martians</strong>：这个设置数据可以用来启动记录不合法的 IP 来源的功能，举例来说，包括来源为 0.0.0.0、127.x.x.x、及 Class E 的 IP 都是不合法的，因为这些来源的 IP 不应该应用于 Internet。记录的数据默认放置到内核放置的日志文件 <code>/var/log/messages</code>。</p></li><li><p><strong>accept_source_route</strong>：或许某些路由器会启动这个设置值，不过目前的设备很少使用到这种来源路由，可以取消这个设置值。</p></li><li><p><strong>accept_redirects</strong>：当你在同一个实体网络内架设一台路由器，但这个实体网络有两个 IP 网络，例如 192.168.0.0/24、 192.168.1.0/24。此时 192.168.0.100 想要向 192.168.1.100 传送信息时，路由器可能会传送一个 ICMP redirect 数据包告知 192.168.0.100 直接传送数据给 192.168.1.100 即可，而不需通过路由器。因为 192.168.0.100 与 192.168.1.100 确实是在同一个实体线路上（两者可以直接互通），所以路由器会告知来源 IP 使用最短路径去传递数据。但由于那两台主机在不同的 IP 网段，所以还是无法实际传递信息。这个设置也可能会产生一些轻微的安全风险，所以建议关闭。</p></li><li><p><strong>send_redirects</strong>：与上一个类似，只是此值为发送一个 ICMP redirect 数据包。同样建议关闭。</p></li></ul><p>虽然可以使用 <code>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/conf/???/rp_filter</code> 来启动这个项目，不过，比较建议修改系统设置值，即 <code>/etc/sysctl.conf</code> 这个文件。假设我们仅有 eth0 这个以太接口，而且上述的功能要全部启动，那可以这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"><span class="comment"># Adding by VBird 2011/01/28</span></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.icmp_echo_ignore_broadcasts = 1</span><br><span class="line">net.ipv4.conf.all.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.eth0.rp_filter = 1</span><br><span class="line">net.ipv4.conf.lo.rp_filter = 1</span><br><span class="line">....(以下省略)....</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://cn.linux.vbird.org/linux_server/0250simple_firewall_3.php" target="_blank" rel="noopener">http://cn.linux.vbird.org/linux_server/0250simple_firewall_3.php</a></p>]]></content>
      
      <categories>
          
          <category> iptables笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables防火墙数据包过滤软件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django 2.x 后生成数据库表时的报错</title>
      <link href="/2019/01/11/Django-2.x%E5%90%8E%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E6%97%B6%E7%9A%84%E6%8A%A5%E9%94%99/"/>
      <url>/2019/01/11/Django-2.x%E5%90%8E%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E6%97%B6%E7%9A%84%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<h1 id="Django-2-x-后生成数据库表时的报错"><a href="#Django-2-x-后生成数据库表时的报错" class="headerlink" title="Django 2.x 后生成数据库表时的报错"></a>Django 2.x 后生成数据库表时的报错</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>使用 Ｄjango 2.1.1 的时候发现执行 makemigrations 和 migrate 是会报错，少位置参数 on_delete，查了一下是因为指定外键的方式不对。<br><code>TypeError: __init__() missing 1 required positional argument: &#39;on_delete&#39;</code></p></blockquote><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出版社</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 自增 id 主键</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 创建 varchar(64) 唯一的，不为空的字段</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>, null=<span class="keyword">False</span>, unique=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 书</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 自增 id 主键</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 创建 varchar(64) 唯一的，不为空的字段</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>, null=<span class="keyword">False</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 和出版社关联的的外键字段</span></span><br><span class="line">    publisher_id = models.ForeignKey(to=<span class="string">"Publisher"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在创建模型类关联外键时，报如下错误</p></blockquote><p><img src="https://i.loli.net/2019/01/11/5c378a8f568e0.png" alt="20190111020949.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: __init__() missing <span class="number">1</span> required positional argument: <span class="string">'on_delete'</span></span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将</span><br><span class="line">publisher_id = models.ForeignKey(to=<span class="string">"Publisher"</span>)</span><br><span class="line">改成</span><br><span class="line">publisher_id = models.ForeignKey(to=<span class="string">"Publisher"</span>, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><blockquote><p>即在外键值的后面加上 on_delete=models.CASCADE</p></blockquote><blockquote><p>原因：在 Django 2.0 后，定义外键和一对一关系的时候需要加 on_delete 选项，此参数为了避免两个表里的数据不一致问题。不然会报错</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: __init__() missing <span class="number">1</span> required positional argument: <span class="string">'on_delete'</span></span><br></pre></td></tr></table></figure><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user=models.OneToOneField(User)</span><br><span class="line">owner=models.ForeignKey(UserProfile)</span><br></pre></td></tr></table></figure><blockquote><p>需要改成</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在老版本这个参数（models.CASCADE）是默认值</span></span><br><span class="line">user=models.OneToOneField(User,on_delete=models.CASCADE)</span><br><span class="line"><span class="comment"># 在老版本这个参数（models.CASCADE）是默认值</span></span><br><span class="line">owner=models.ForeignKey(UserProfile,on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">on_delete 有 DO_NOTHING、CASCADE、PROTECT、SET_NULL、SET_DEFAULT、SET() 六个可选择的值</span><br><span class="line">DO_NOTHING   <span class="comment"># 什么都不做</span></span><br><span class="line">CASCADE      <span class="comment"># 此值设置，是级联删除</span></span><br><span class="line">PROTECT      <span class="comment"># 此值设置，是会报完整性错误</span></span><br><span class="line">SET_NULL     <span class="comment"># 此值设置，会把外键设置为null，前提是允许为null</span></span><br><span class="line">SET_DEFAULT  <span class="comment"># 此值设置，会把设置为外键的默认值</span></span><br><span class="line">SET()        <span class="comment"># 此值设置，会调用外面的值，可以是一个函数</span></span><br><span class="line"></span><br><span class="line">一般情况下使用 CASCADE 就可以了</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.cnblogs.com/phyger/p/8035253.html" target="_blank" rel="noopener">https://www.cnblogs.com/phyger/p/8035253.html</a><br><a href="https://blog.csdn.net/m0_38109046/article/details/82660038" target="_blank" rel="noopener">https://blog.csdn.net/m0_38109046/article/details/82660038</a></p>]]></content>
      
      <categories>
          
          <category> Django笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django 2.x 后生成数据库表时的报错 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kubernetes部署rook+ceph存储系统</title>
      <link href="/2019/01/07/Kubernetes%E9%83%A8%E7%BD%B2rook+ceph%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/01/07/Kubernetes%E9%83%A8%E7%BD%B2rook+ceph%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h1 id="Kubernetes部署rook-ceph存储系统"><a href="#Kubernetes部署rook-ceph存储系统" class="headerlink" title="Kubernetes部署rook+ceph存储系统"></a>Kubernetes部署rook+ceph存储系统</h1><a id="more"></a><h2 id="rook简介"><a href="#rook简介" class="headerlink" title="rook简介"></a>rook简介</h2><p>Rook官网：<a href="https://rook.io" target="_blank" rel="noopener">https://rook.io</a></p><h3 id="容器的持久化存储"><a href="#容器的持久化存储" class="headerlink" title="容器的持久化存储"></a>容器的持久化存储</h3><p>容器的持久化存储是保存容器存储状态的重要手段，存储插件会在容器里挂载一个基于网络或者其他机制的远程数据卷，使得在容器里创建的文件，实际上是保存在远程存储服务器上，或者以分布式的方式保存在多个节点上，而与当前宿主机没有任何绑定关系。这样，无论你在其他哪个宿主机上启动新的容器，都可以请求挂载指定的持久化存储卷，从而访问到数据卷里保存的内容。<br>由于 Kubernetes 本身的松耦合设计，绝大多数存储项目，比如 Ceph、GlusterFS、NFS 等，都可以为 Kubernetes 提供持久化存储能力。</p><h3 id="Ceph分布式存储系统"><a href="#Ceph分布式存储系统" class="headerlink" title="Ceph分布式存储系统"></a>Ceph分布式存储系统</h3><p>Ceph是一种高度可扩展的分布式存储解决方案，提供对象、文件和块存储。在每个存储节点上，您将找到Ceph存储对象的文件系统和Ceph OSD（对象存储守护程序）进程。在Ceph集群上，您还可以找到Ceph MON（监控）守护程序，它们确保Ceph集群保持高可用性。</p><h3 id="Rook"><a href="#Rook" class="headerlink" title="Rook"></a>Rook</h3><p>Rook 是一个开源的cloud-native storage编排, 提供平台和框架；为各种存储解决方案提供平台、框架和支持，以便与云原生环境本地集成。<br>Rook 将存储软件转变为自我管理、自我扩展和自我修复的存储服务，它通过自动化部署、引导、配置、置备、扩展、升级、迁移、灾难恢复、监控和资源管理来实现此目的。<br>Rook 使用底层云本机容器管理、调度和编排平台提供的工具来实现它自身的功能。<br>Rook 目前支持Ceph、NFS、Minio Object Store和CockroachDB。</p><p>Rook使用Kubernetes原语使Ceph存储系统能够在Kubernetes上运行。下图说明了Ceph Rook如何与Kubernetes集成：</p><p><img src="https://i.loli.net/2019/01/07/5c33112b3d5d3.png" alt="20190107164302.png"></p><p>随着Rook在Kubernetes集群中运行，Kubernetes应用程序可以挂载由Rook管理的块设备和文件系统，或者可以使用S3 / Swift API提供对象存储。Rook oprerator自动配置存储组件并监控群集，以确保存储处于可用和健康状态。<br>Rook oprerator是一个简单的容器，具有引导和监视存储集群所需的全部功能。oprerator将启动并监控ceph monitor pods和OSDs的守护进程，它提供基本的RADOS存储。oprerator通过初始化运行服务所需的pod和其他组件来管理池，对象存储（S3 / Swift）和文件系统的CRD。<br>oprerator将监视存储后台驻留程序以确保群集正常运行。Ceph mons将在必要时启动或故障转移，并在群集增长或缩小时进行其他调整。oprerator还将监视api服务请求的所需状态更改并应用更改。<br>Rook oprerator还创建了Rook agent。这些agent是在每个Kubernetes节点上部署的pod。每个agent都配置一个Flexvolume插件，该插件与Kubernetes的volume controller集成在一起。处理节点上所需的所有存储操作，例如附加网络存储设备，安装卷和格式化文件系统。</p><p><img src="https://i.loli.net/2019/01/07/5c331183ea477.png" alt="20190107164430.png"></p><p>该rook容器包括所有必需的Ceph守护进程和工具来管理和存储所有数据 - 数据路径没有变化。 rook并没有试图与Ceph保持完全的忠诚度。 许多Ceph概念（如placement groups和crush maps）都是隐藏的，因此您无需担心它们。 相反，Rook为管理员创建了一个简化的用户体验，包括物理资源，池，卷，文件系统和buckets。 同时，可以在需要时使用Ceph工具应用高级配置。<br>Rook在golang中实现。Ceph在C ++中实现，其中数据路径被高度优化。我们相信这种组合可以提供两全其美的效果。</p><h2 id="部署环境准备"><a href="#部署环境准备" class="headerlink" title="部署环境准备"></a>部署环境准备</h2><h3 id="官方参考："><a href="#官方参考：" class="headerlink" title="官方参考："></a>官方参考：</h3><p>root项目地址：<a href="https://github.com/rook/rook" target="_blank" rel="noopener">https://github.com/rook/rook</a><br>rook官方参考文档：<a href="https://rook.github.io/docs/rook/v0.9/ceph-quickstart.html" target="_blank" rel="noopener">https://rook.github.io/docs/rook/v0.9/ceph-quickstart.html</a></p><h3 id="kubernetes集群准备"><a href="#kubernetes集群准备" class="headerlink" title="kubernetes集群准备"></a>kubernetes集群准备</h3><p>kubeadm部署3节点kubernetes1.13.1集群（,master节点x1，node节点x2），集群部署参考：<br><a href="https://blog.csdn.net/networken/article/details/84991940" target="_blank" rel="noopener">https://blog.csdn.net/networken/article/details/84991940</a><br>集群节点信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.92.56 k8s-master</span><br><span class="line">192.168.92.57 k8s-node1</span><br><span class="line">192.168.92.58 k8s-node2</span><br></pre></td></tr></table></figure><p>在集群中至少有三个节点可用，满足ceph高可用要求，这里已配置master节点使其支持运行pod。</p><h3 id="rook使用存储方式"><a href="#rook使用存储方式" class="headerlink" title="rook使用存储方式"></a>rook使用存储方式</h3><p>rook默认使用所有节点的所有资源，rook operator自动在所有节点上启动OSD设备，Rook会用如下标准监控并发现可用设备：</p><ul><li>设备没有分区</li><li>设备没有格式化的文件系统</li></ul><p>Rook不会使用不满足以上标准的设备。另外也可以通过修改配置文件，指定哪些节点或者设备会被使用。</p><h3 id="添加新磁盘"><a href="#添加新磁盘" class="headerlink" title="添加新磁盘"></a>添加新磁盘</h3><p>这里在所有节点添加1块50GB的新磁盘：/dev/sdb，作为OSD盘，提供存储空间，添加完成后扫描磁盘，确保主机能够正常识别到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 扫描 SCSI总线并添加 SCSI 设备</span></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> $(ls /sys/class/scsi_host) ; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"- - -"</span> &gt; /sys/class/scsi_host/<span class="variable">$host</span>/scan; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新扫描 SCSI 总线</span></span><br><span class="line"><span class="keyword">for</span> scsi_device <span class="keyword">in</span> $(ls /sys/class/scsi_device/); <span class="keyword">do</span> <span class="built_in">echo</span> 1 &gt; /sys/class/scsi_device/<span class="variable">$scsi_device</span>/device/rescan; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已添加的磁盘，能够看到sdb说明添加成功</span></span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>本次搭建的基本原理图：</p><p><img src="https://i.loli.net/2019/01/07/5c3316ba01858.png" alt="20190107170635.png"></p><p>无另外说明，以下全部操作都在master节点执行。</p><h2 id="部署Rook-Operator"><a href="#部署Rook-Operator" class="headerlink" title="部署Rook Operator"></a>部署Rook Operator</h2><p>克隆rook github仓库到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rook/rook.git</span><br><span class="line"><span class="built_in">cd</span> rook/cluster/examples/kubernetes/ceph/</span><br></pre></td></tr></table></figure><p>执行yaml文件部署rook系统组件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ceph]$ kubectl apply -f operator.yaml</span><br><span class="line">namespace/rook-ceph-system created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/cephclusters.ceph.rook.io created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/cephfilesystems.ceph.rook.io created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/cephobjectstores.ceph.rook.io created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/cephobjectstoreusers.ceph.rook.io created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/cephblockpools.ceph.rook.io created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/volumes.rook.io created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/rook-ceph-cluster-mgmt created</span><br><span class="line">role.rbac.authorization.k8s.io/rook-ceph-system created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/rook-ceph-global created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/rook-ceph-mgr-cluster created</span><br><span class="line">serviceaccount/rook-ceph-system created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rook-ceph-system created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/rook-ceph-global created</span><br><span class="line">deployment.apps/rook-ceph-operator created</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure></p><p>如上所示，它会创建如下资源：</p><ol><li>namespace：rook-ceph-system，之后的所有rook相关的pod都会创建在该namespace下面</li><li>CRD：创建五个CRDs，.ceph.rook.io</li><li>role &amp; clusterrole：用户资源控制</li><li>serviceaccount：ServiceAccount资源，给Rook创建的Pod使用</li><li>deployment：rook-ceph-operator，部署rook ceph相关的组件</li></ol><p>部署rook-ceph-operator过程中，会触发以DaemonSet的方式在集群部署Agent和Discoverpods。<br>operator会在集群内的每个主机创建两个pod:rook-discover,rook-ceph-agent：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get pod -n rook-ceph-system  -o wide</span><br><span class="line">NAME                                  READY   STATUS    RESTARTS   AGE     IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">rook-ceph-agent-49w7t                 1/1     Running   0          7m48s   192.168.92.57   k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-agent-dpxkq                 1/1     Running   0          111s    192.168.92.58   k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-agent-wb6r8                 1/1     Running   0          7m48s   192.168.92.56   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-operator-85d64cfb99-2c78k   1/1     Running   0          9m3s    10.244.1.2      k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-discover-597sk                   1/1     Running   0          7m48s   10.244.0.4      k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-discover-7h89z                   1/1     Running   0          111s    10.244.2.2      k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-discover-hjdjt                   1/1     Running   0          7m48s   10.244.1.3      k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><h2 id="创建rook-Cluster"><a href="#创建rook-Cluster" class="headerlink" title="创建rook Cluster"></a>创建rook Cluster</h2><p>当检查到Rook operator, agent, and discover pods已经是running状态后，就可以部署roo cluster了。<br>执行yaml文件结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ceph]$ kubectl apply -f cluster.yaml </span><br><span class="line">namespace/rook-ceph created</span><br><span class="line">serviceaccount/rook-ceph-osd created</span><br><span class="line">serviceaccount/rook-ceph-mgr created</span><br><span class="line">role.rbac.authorization.k8s.io/rook-ceph-osd created</span><br><span class="line">role.rbac.authorization.k8s.io/rook-ceph-mgr-system created</span><br><span class="line">role.rbac.authorization.k8s.io/rook-ceph-mgr created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rook-ceph-cluster-mgmt created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rook-ceph-osd created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rook-ceph-mgr created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rook-ceph-mgr-system created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rook-ceph-mgr-cluster created</span><br><span class="line">cephcluster.ceph.rook.io/rook-ceph created</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>如上所示，它会创建如下资源：</p><ol><li>namespace：rook-ceph，之后的所有Ceph集群相关的pod都会创建在该namespace下</li><li>serviceaccount：ServiceAccount资源，给Ceph集群的Pod使用</li><li>role &amp; rolebinding：用户资源控制</li><li>cluster：rook-ceph，创建的Ceph集群</li></ol><p>Ceph集群部署成功后，可以查看到的pods如下，其中osd数量取决于你的节点数量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get pod -n rook-ceph -o wide</span><br><span class="line">NAME                                     READY   STATUS      RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">rook-ceph-mgr<span class="_">-a</span>-8649f78d9b-hlg7t         1/1     Running     0          3h30m   10.244.2.6   k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-mon<span class="_">-a</span>-7c7df4b5bb-984x8         1/1     Running     0          3h31m   10.244.0.5   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-mon-b-7b9bc8b6c4-8trmz         1/1     Running     0          3h31m   10.244.1.4   k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-mon-c-54b5fb5955-5dgr7         1/1     Running     0          3h30m   10.244.2.5   k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-osd-0-b9bb5df49-gt4vs          1/1     Running     0          3h29m   10.244.0.7   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-osd-1-9c6dbf797-2dg8p          1/1     Running     0          3h29m   10.244.2.8   k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-osd-2-867ddc447d-xkh7k         1/1     Running     0          3h29m   10.244.1.6   k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-osd-prepare-k8s-master-m8tvr   0/2     Completed   0          3h29m   10.244.0.6   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-osd-prepare-k8s-node1-jf7qz    0/2     Completed   1          3h29m   10.244.1.5   k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-osd-prepare-k8s-node2-tcqdl    0/2     Completed   0          3h29m   10.244.2.7   k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>可以看出部署的Ceph集群有：</p><ol><li>Ceph Monitors：默认启动三个ceph-mon，可以在cluster.yaml里配置</li><li>Ceph Mgr：默认启动一个，可以在cluster.yaml里配置</li><li>Ceph OSDs：根据cluster.yaml里的配置启动，默认在所有的可用节点上启动<br>上述Ceph组件对应kubernetes的kind是deployment：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl -n rook-ceph get deployment</span><br><span class="line">NAME              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">rook-ceph-mgr<span class="_">-a</span>   1/1     1            1           5h34m</span><br><span class="line">rook-ceph-mon<span class="_">-a</span>   1/1     1            1           5h36m</span><br><span class="line">rook-ceph-mon-b   1/1     1            1           5h35m</span><br><span class="line">rook-ceph-mon-c   1/1     1            1           5h35m</span><br><span class="line">rook-ceph-osd-0   1/1     1            1           5h34m</span><br><span class="line">rook-ceph-osd-1   1/1     1            1           5h34m</span><br><span class="line">rook-ceph-osd-2   1/1     1            1           5h34m</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><h3 id="删除Ceph集群"><a href="#删除Ceph集群" class="headerlink" title="删除Ceph集群"></a>删除Ceph集群</h3><p>如果要删除已创建的Ceph集群，可执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f cluster.yaml</span><br></pre></td></tr></table></figure><p>删除Ceph集群后，在之前部署Ceph组件节点的/var/lib/rook/目录，会遗留下Ceph集群的配置信息。<br>若之后再部署新的Ceph集群，先把之前Ceph集群的这些信息删除，不然启动monitor会失败；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat clean-rook-dir.sh</span><br><span class="line">hosts=(</span><br><span class="line">  k8s-master</span><br><span class="line">  k8s-node1</span><br><span class="line">  k8s-node2</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> <span class="variable">$&#123;hosts[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">  ssh <span class="variable">$host</span> <span class="string">"rm -rf /var/lib/rook/*"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="配置ceph-dashboard"><a href="#配置ceph-dashboard" class="headerlink" title="配置ceph dashboard"></a>配置ceph dashboard</h2><p>在cluster.yaml文件中默认已经启用了ceph dashboard，查看dashboard的service：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get service -n rook-ceph</span><br><span class="line">NAME                                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">rook-ceph-mgr                            ClusterIP   10.107.77.188    &lt;none&gt;        9283/TCP         3h33m</span><br><span class="line">rook-ceph-mgr-dashboard                  ClusterIP   10.96.135.98     &lt;none&gt;        8443/TCP         3h33m</span><br><span class="line">rook-ceph-mon<span class="_">-a</span>                          ClusterIP   10.105.153.93    &lt;none&gt;        6790/TCP         3h35m</span><br><span class="line">rook-ceph-mon-b                          ClusterIP   10.105.107.254   &lt;none&gt;        6790/TCP         3h34m</span><br><span class="line">rook-ceph-mon-c                          ClusterIP   10.104.1.238     &lt;none&gt;        6790/TCP         3h34m</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>rook-ceph-mgr-dashboard监听的端口是8443，创建nodeport类型的service以便集群外部访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f rook/cluster/examples/kubernetes/ceph/dashboard-external-https.yaml</span><br></pre></td></tr></table></figure><p>查看一下nodeport暴露的端口，这里是32483端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get service -n rook-ceph | grep dashboard</span><br><span class="line">rook-ceph-mgr-dashboard                  ClusterIP   10.96.135.98     &lt;none&gt;        8443/TCP         3h37m</span><br><span class="line">rook-ceph-mgr-dashboard-external-https   NodePort    10.97.181.103    &lt;none&gt;        8443:32483/TCP   3h29m</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>获取Dashboard的登陆账号和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ MGR_POD=`kubectl get pod -n rook-ceph | grep mgr | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">[centos@k8s-master ~]$ kubectl -n rook-ceph logs <span class="variable">$MGR_POD</span> | grep password</span><br><span class="line">2019-01-03 05:44:00.585 7fced4782700  0 log_channel(audit) <span class="built_in">log</span> [DBG] : from=<span class="string">'client.4151 10.244.1.2:0/3446600469'</span> entity=<span class="string">'client.admin'</span> cmd=[&#123;<span class="string">"username"</span>: <span class="string">"admin"</span>, <span class="string">"prefix"</span>: <span class="string">"dashboard set-login-credentials"</span>, <span class="string">"password"</span>: <span class="string">"8v2AbqHDj6"</span>, <span class="string">"target"</span>: [<span class="string">"mgr"</span>, <span class="string">""</span>], <span class="string">"format"</span>: <span class="string">"json"</span>&#125;]: dispatch</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>找到username和password字段，我这里是admin，8v2AbqHDj6<br>打开浏览器输入任意一个Node的IP+nodeport端口，这里使用master节点 ip访问：<br><a href="https://192.168.92.56:32483" target="_blank" rel="noopener">https://192.168.92.56:32483</a></p><p><img src="https://i.loli.net/2019/01/07/5c33173371d46.png" alt="20190107170853.png"></p><p>登录后界面如下：</p><p><img src="https://i.loli.net/2019/01/07/5c33177a63986.png" alt="20190107171004.png"></p><p>查看hosts状态：<br>运行了1个mgr、3个mon和3个osd</p><p><img src="https://i.loli.net/2019/01/07/5c3317cb74250.png" alt="20190107171120.png"></p><p>查看monitors状态：</p><p><img src="https://i.loli.net/2019/01/07/5c3317ff6de9c.png" alt="20190107171219.png"></p><p>查看OSD状态<br>3个osd状态正常，每个容量50GB.</p><p><img src="https://i.loli.net/2019/01/07/5c331844071f9.png" alt="20190107171326.png"></p><h2 id="部署Ceph-toolbox"><a href="#部署Ceph-toolbox" class="headerlink" title="部署Ceph toolbox"></a>部署Ceph toolbox</h2><p>默认启动的Ceph集群，是开启Ceph认证的，这样你登陆Ceph组件所在的Pod里，是没法去获取集群状态，以及执行CLI命令，这时需要部署Ceph toolbox，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f rook/cluster/examples/kubernetes/ceph/ toolbox.yaml</span><br></pre></td></tr></table></figure><p>部署成功后，pod如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ceph]$  kubectl -n rook-ceph get pods -o wide | grep ceph-tools</span><br><span class="line">rook-ceph-tools-76c7d559b6-8w7bk         1/1     Running     0          11s     192.168.92.58   k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[centos@k8s-master ceph]$</span><br></pre></td></tr></table></figure><p>然后可以登陆该pod后，执行Ceph CLI命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ceph]$ kubectl -n rook-ceph <span class="built_in">exec</span> -it rook-ceph-tools-76c7d559b6-8w7bk bash</span><br><span class="line">bash: warning: setlocale: LC_CTYPE: cannot change locale (en_US.UTF-8): No such file or directory</span><br><span class="line">bash: warning: setlocale: LC_COLLATE: cannot change locale (en_US.UTF-8): No such file or directory</span><br><span class="line">bash: warning: setlocale: LC_MESSAGES: cannot change locale (en_US.UTF-8): No such file or directory</span><br><span class="line">bash: warning: setlocale: LC_NUMERIC: cannot change locale (en_US.UTF-8): No such file or directory</span><br><span class="line">bash: warning: setlocale: LC_TIME: cannot change locale (en_US.UTF-8): No such file or directory</span><br><span class="line">[root@k8s-node2 /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>查看ceph集群状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node2 /]<span class="comment"># ceph status</span></span><br><span class="line">  cluster:</span><br><span class="line">    id:     abddff95-5fa0-47dc-a001-7fb291a42bc6</span><br><span class="line">    health: HEALTH_OK</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum c,b,a</span><br><span class="line">    mgr: a(active)</span><br><span class="line">    osd: 3 osds: 3 up, 3 <span class="keyword">in</span></span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   1 pools, 100 pgs</span><br><span class="line">    objects: 0  objects, 0 B</span><br><span class="line">    usage:   12 GiB used, 129 GiB / 141 GiB avail</span><br><span class="line">    pgs:     100 active+clean</span><br><span class="line"> </span><br><span class="line">[root@k8s-node2 /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>查看ceph配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node2 /]<span class="comment"># cd /etc/ceph/</span></span><br><span class="line">[root@k8s-node2 ceph]<span class="comment"># ll</span></span><br><span class="line">total 12</span><br><span class="line">-rw-r--r-- 1 root root 121 Jan  3 11:28 ceph.conf</span><br><span class="line">-rw-r--r-- 1 root root  62 Jan  3 11:28 keyring</span><br><span class="line">-rw-r--r-- 1 root root  92 Sep 24 18:15 rbdmap</span><br><span class="line">[root@k8s-node2 ceph]<span class="comment"># cat ceph.conf </span></span><br><span class="line">[global]</span><br><span class="line">mon_host = 10.104.1.238:6790,10.105.153.93:6790,10.105.107.254:6790</span><br><span class="line"></span><br><span class="line">[client.admin]</span><br><span class="line">keyring = /etc/ceph/keyring</span><br><span class="line">[root@k8s-node2 ceph]<span class="comment"># cat keyring</span></span><br><span class="line">[client.admin]</span><br><span class="line">key = AQBjoC1cXKJ7KBAA3ZnhWyxvyGa8+fnLFK7ykw==</span><br><span class="line">[root@k8s-node2 ceph]<span class="comment"># cat rbdmap </span></span><br><span class="line"><span class="comment"># RbdDevice             Parameters</span></span><br><span class="line"><span class="comment">#poolname/imagename     id=client,keyring=/etc/ceph/ceph.client.keyring</span></span><br><span class="line">[root@k8s-node2 ceph]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="rook提供RBD服务"><a href="#rook提供RBD服务" class="headerlink" title="rook提供RBD服务"></a>rook提供RBD服务</h2><p>rook可以提供以下3类型的存储：<br> Block: Create block storage to be consumed by a pod<br> Object: Create an object store that is accessible inside or outside the Kubernetes cluster<br> Shared File System: Create a file system to be shared across multiple pods<br>在提供（Provisioning）块存储之前，需要先创建StorageClass和存储池。K8S需要这两类资源，才能和Rook交互，进而分配持久卷（PV）。<br>在kubernetes集群里，要提供rbd块设备服务，需要有如下步骤：</p><ol><li>创建rbd-provisioner pod</li><li>创建rbd对应的storageclass</li><li>创建pvc，使用rbd对应的storageclass</li><li>创建pod使用rbd pvc</li></ol><p>通过rook创建Ceph Cluster之后，rook自身提供了rbd-provisioner服务，所以我们不需要再部署其provisioner。<br>备注：代码位置pkg/operator/ceph/provisioner/provisioner.go</p><h3 id="创建pool和StorageClass"><a href="#创建pool和StorageClass" class="headerlink" title="创建pool和StorageClass"></a>创建pool和StorageClass</h3><p>查看storageclass.yaml的配置（默认）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ vim rook/cluster/examples/kubernetes/ceph/storageclass.yaml</span><br><span class="line">apiVersion: ceph.rook.io/v1</span><br><span class="line">kind: CephBlockPool</span><br><span class="line">metadata:</span><br><span class="line">  name: replicapool</span><br><span class="line">  namespace: rook-ceph</span><br><span class="line">spec:</span><br><span class="line">  replicated:</span><br><span class="line">    size: 1</span><br><span class="line">---</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">   name: rook-ceph-block</span><br><span class="line">provisioner: ceph.rook.io/block</span><br><span class="line">parameters:</span><br><span class="line">  blockPool: replicapool</span><br><span class="line">  <span class="comment"># Specify the namespace of the rook cluster from which to create volumes.</span></span><br><span class="line">  <span class="comment"># If not specified, it will use `rook` as the default namespace of the cluster.</span></span><br><span class="line">  <span class="comment"># This is also the namespace where the cluster will be</span></span><br><span class="line">  clusterNamespace: rook-ceph</span><br><span class="line">  <span class="comment"># Specify the filesystem type of the volume. If not specified, it will use `ext4`.</span></span><br><span class="line">  fstype: xfs</span><br><span class="line">  <span class="comment"># (Optional) Specify an existing Ceph user that will be used for mounting storage with this StorageClass.</span></span><br><span class="line">  <span class="comment">#mountUser: user1</span></span><br><span class="line">  <span class="comment"># (Optional) Specify an existing Kubernetes secret name containing just one key holding the Ceph user secret.</span></span><br><span class="line">  <span class="comment"># The secret must exist in each namespace(s) where the storage will be consumed.</span></span><br><span class="line">  <span class="comment">#mountSecret: ceph-user1-secret</span></span><br></pre></td></tr></table></figure><p>配置文件中包含了一个名为replicapool的存储池，和名为rook-ceph-block的storageClass。</p><p>运行yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f /rook/cluster/examples/kubernetes/ceph/storageclass.yaml</span><br></pre></td></tr></table></figure><p>查看创建的storageclass：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get storageclass</span><br><span class="line">NAME              PROVISIONER          AGE</span><br><span class="line">rook-ceph-block   ceph.rook.io/block   171m</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure></p><p>登录ceph dashboard查看创建的存储池：</p><p><img src="https://i.loli.net/2019/01/07/5c331875b85d2.png" alt="20190107171417.png"></p><h3 id="使用存储"><a href="#使用存储" class="headerlink" title="使用存储"></a>使用存储</h3><p>以官方wordpress示例为例，创建一个经典的wordpress和mysql应用程序来使用Rook提供的块存储，这两个应用程序都将使用Rook提供的block volumes。<br>查看yaml文件配置，主要看定义的pvc和挂载volume部分，以wordpress.yaml为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ cat rook/cluster/examples/kubernetes/wordpress.yaml </span><br><span class="line">......</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: wp-pv-claim</span><br><span class="line">  labels:</span><br><span class="line">    app: wordpress</span><br><span class="line">spec:</span><br><span class="line">  storageClassName: rook-ceph-block</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 20Gi</span><br><span class="line">---</span><br><span class="line">......</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: wordpress-persistent-storage</span><br><span class="line">          mountPath: /var/www/html</span><br><span class="line">      volumes:</span><br><span class="line">      - name: wordpress-persistent-storage</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: wp-pv-claim</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>yaml文件里定义了一个名为wp-pv-claim的pvc，指定storageClassName为rook-ceph-block，申请的存储空间大小为20Gi。最后一部分创建了一个名为wordpress-persistent-storage的volume，并且指定 claimName为pvc的名称，最后将volume挂载到pod的/var/lib/mysql目录下。<br>启动mysql和wordpress：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f rook/cluster/examples/kubernetes/mysql.yaml</span><br><span class="line">kubectl apply -f rook/cluster/examples/kubernetes/wordpress.yaml</span><br></pre></td></tr></table></figure><p>这2个应用都会创建一个块存储卷，并且挂载到各自的pod中，查看声明的pvc和pv：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get pvc</span><br><span class="line">NAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE</span><br><span class="line">mysql-pv-claim   Bound    pvc-5bfbe28e-0fc9-11e9-b90d-000c291c25f3   20Gi       RWO            rook-ceph-block   32m</span><br><span class="line">wp-pv-claim      Bound    pvc-5f56c6d6-0fc9-11e9-b90d-000c291c25f3   20Gi       RWO            rook-ceph-block   32m</span><br><span class="line">[centos@k8s-master ~]$ kubectl get pv</span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                    STORAGECLASS      REASON   AGE</span><br><span class="line">pvc-5bfbe28e-0fc9-11e9-b90d-000c291c25f3   20Gi       RWO            Delete           Bound    default/mysql-pv-claim   rook-ceph-block            32m</span><br><span class="line">pvc-5f56c6d6-0fc9-11e9-b90d-000c291c25f3   20Gi       RWO            Delete           Bound    default/wp-pv-claim      rook-ceph-block            32m</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>注意：这里的pv会自动创建，当提交了包含 StorageClass 字段的 PVC 之后，Kubernetes 就会根据这个 StorageClass 创建出对应的 PV，这是用到的是Dynamic Provisioning机制来动态创建pv，PV 支持 Static 静态请求，和动态创建两种方式。<br>在Ceph集群端检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ceph]$ kubectl -n rook-ceph <span class="built_in">exec</span> -it rook-ceph-tools-76c7d559b6-8w7bk bash</span><br><span class="line">......</span><br><span class="line">[root@k8s-node2 /]<span class="comment"># rbd info -p replicapool pvc-5bfbe28e-0fc9-11e9-b90d-000c291c25f3 </span></span><br><span class="line">rbd image <span class="string">'pvc-5bfbe28e-0fc9-11e9-b90d-000c291c25f3'</span>:</span><br><span class="line">        size 20 GiB <span class="keyword">in</span> 5120 objects</span><br><span class="line">        order 22 (4 MiB objects)</span><br><span class="line">        id: 88156b8b4567</span><br><span class="line">        block_name_prefix: rbd_data.88156b8b4567</span><br><span class="line">        format: 2</span><br><span class="line">        features: layering</span><br><span class="line">        op_features: </span><br><span class="line">        flags: </span><br><span class="line">        create_timestamp: Fri Jan  4 02:35:12 2019</span><br><span class="line">[root@k8s-node2 /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>登陆 pod 检查 rbd 设备：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get pod -o wide</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE    IP            NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">wordpress-7b6c4c79bb-t5pst         1/1     Running   0          135m   10.244.1.16   k8s-node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">wordpress-mysql-6887bf844f-9pmg8   1/1     Running   0          135m   10.244.2.14   k8s-node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[centos@k8s-master ~]$ </span><br><span class="line"></span><br><span class="line">[centos@k8s-master ~]$ kubectl <span class="built_in">exec</span> -it wordpress-7b6c4c79bb-t5pst bash</span><br><span class="line">root@wordpress-7b6c4c79bb-t5pst:/var/www/html<span class="comment">#</span></span><br><span class="line">root@wordpress-7b6c4c79bb-t5pst:/var/www/html<span class="comment">#  mount | grep rbd</span></span><br><span class="line">/dev/rbd0 on /var/www/html <span class="built_in">type</span> xfs (rw,relatime,attr2,inode64,sunit=8192,swidth=8192,noquota)</span><br><span class="line">root@wordpress-7b6c4c79bb-t5pst:/var/www/html<span class="comment"># df -h</span></span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">......</span><br><span class="line">/dev/rbd0                 20G   59M   20G   1% /var/www/html</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>登录 ceph dashboard 查看创建的 images</p><p><img src="https://i.loli.net/2019/01/07/5c3318af28906.png" alt="20190107171515.png"></p><p>一旦 Wordpress 和 mysql pods 处于运行状态，获取 Wordpress 应用程序的集群IP并使用浏览器访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get svc wordpress</span><br><span class="line">NAME        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">wordpress   LoadBalancer   10.98.178.189   &lt;pending&gt;     80:30001/TCP   136m</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>访问Wordpress：</p><p><img src="https://i.loli.net/2019/01/07/5c3318e232c65.png" alt="20190107171606.png"></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://blog.csdn.net/networken/article/details/85772418" target="_blank" rel="noopener">https://blog.csdn.net/networken/article/details/85772418</a></p>]]></content>
      
      <categories>
          
          <category> Kubernetes笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes部署rook+ceph存储系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot 使用 Tomcat APR 模式</title>
      <link href="/2019/01/02/SpringBoot%E4%BD%BF%E7%94%A8TomcatAPR%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/01/02/SpringBoot%E4%BD%BF%E7%94%A8TomcatAPR%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="SpringBoot-使用-Tomcat-APR-模式"><a href="#SpringBoot-使用-Tomcat-APR-模式" class="headerlink" title="SpringBoot 使用 Tomcat APR 模式"></a>SpringBoot 使用 Tomcat APR 模式</h1><a id="more"></a><blockquote><p>SpringBoot 内置的是 Tomcat Embed 容器，就是把 Tomcat 打包成一个 jar包库 来使用，直接运行 Application 就可以启动 Web服务器。本质没有区别，默认独立的 Tomcat 性能高于 SpringBoot 内置的 Tomcat。因为独立的 Tomcat 很多都配置了 APR 模式特性，大多数比较的时候 SpringBoot 内置的 Tomcat 并没有开启这个模式。可以选择自己启动这个特性。</p></blockquote><blockquote><p>从 GitHub 上的讨论看，如果需要 TLS 支持，使用 APR 是比较好的。否则没必要使用 APR，未来 APR 在 Tomcat 10 中可能会被移除。<br><a href="https://github.com/spring-projects/spring-boot/pull/10079" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/pull/10079</a></p></blockquote><h2 id="在-Tomcat-中提供了三种方式：BIO、NIO、APR。"><a href="#在-Tomcat-中提供了三种方式：BIO、NIO、APR。" class="headerlink" title="在 Tomcat 中提供了三种方式：BIO、NIO、APR。"></a>在 Tomcat 中提供了三种方式：BIO、NIO、APR。</h2><h3 id="BIO-模式"><a href="#BIO-模式" class="headerlink" title="BIO 模式"></a>BIO 模式</h3><blockquote><p>采用 Java IO 技术，单线程处理单请求（Tomcat7以下默认）<br>Tomcat 7 以下的版本都是 BIO，就是一个请求是一个独立的线程。不能适用高并发的场景。阻塞式 I/O，采用传统的 java I/O 进行操作，该模式下每个请求都会创建一个线程，适用于并发量小的场景</p></blockquote><h3 id="NIO-模式"><a href="#NIO-模式" class="headerlink" title="NIO 模式"></a>NIO 模式</h3><blockquote><p>采用 Java NIO 技术，少量线程处理大量请求（Tomcat8以上默认）<br>Tomcat 8 以上的版本，默认都是 NIO。同步非阻塞，比传统 BIO 能更好的支持大并发，Tomcat 8.0 后默认采用该模式</p></blockquote><h3 id="APR-模式"><a href="#APR-模式" class="headerlink" title="APR 模式"></a>APR 模式</h3><blockquote><p>APR(Apache Portable Runtime)<br>采用 JNI 技术，从操作层面解决 I/O 阻塞问题，适合高并发场景<br>APR 的整体模式还是非阻塞 I/O，实现的线程模型也是按照 NIO 的标准模型实现的，<br>APR 是一种基于 JNI 形式调用http服务器的核心动态链接库来处理的文件和网络读写模式（文件读取和网络传输操作）。需要预先编译安装 APR库，现在很多高版本的 Tomcat 默认都走它了。在 Tomcat 中配置，很好配置，直接修改 protocol 就可以了。但是在 SpringBoot 中，配置是在 Java 代码中写的。<br>从官方文档 <a href="http://apr.apache.org/docs/apr/1.6/modules.html" target="_blank" rel="noopener">http://apr.apache.org/docs/apr/1.6/modules.html</a><br>可以看到 APR 根据不同操作系统，分别用 C 重写了大部分IO和系统线程操作模块，<br>这就是为什么 APR 在不改动代码的情况下能够提升。</p></blockquote><h2 id="SpringBoot-开启-APR-模式"><a href="#SpringBoot-开启-APR-模式" class="headerlink" title="SpringBoot 开启 APR 模式"></a>SpringBoot 开启 APR 模式</h2><blockquote><p>在 SpringBoot 中内嵌的 Tomcat 默认启动开启的是 NIO 模式，这里如果我们要在 Linux 内核的系统上使用 APR 模式，那么需要安装一些 lib库，可以通过 rpm -q | grep apr 来查看是否安装了 apr，如果安装了则不再需要安装。</p></blockquote><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install apr-devel gcc gcc-devel openssl openssl-devel expat-devel</span><br></pre></td></tr></table></figure><h2 id="OpenSSL-安装"><a href="#OpenSSL-安装" class="headerlink" title="OpenSSL 安装"></a>OpenSSL 安装</h2><blockquote><p>OpenSSL 需要版本大于 1.0.2，如果不使用 https openssl 也可以不安装，就是在启动的时候会报 OpenSSL 的错误，直接忽视就可以了。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OpenSSL 下载地址</span></span><br><span class="line">https://www.openssl.org/<span class="built_in">source</span>/</span><br><span class="line"></span><br><span class="line">wget -c https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1a.tar.gz</span><br></pre></td></tr></table></figure><h3 id="安装-OpenSSL"><a href="#安装-OpenSSL" class="headerlink" title="安装 OpenSSL"></a>安装 OpenSSL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf openssl-1.1.1a.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssl-1.1.1a/</span><br><span class="line">./config --prefix=/usr/<span class="built_in">local</span>/openssl</span><br><span class="line">./config -t</span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="将-openssl-的-lib-加入系统-ldconfig-中"><a href="#将-openssl-的-lib-加入系统-ldconfig-中" class="headerlink" title="将 openssl 的 lib 加入系统 ldconfig 中"></a>将 openssl 的 lib 加入系统 ldconfig 中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ld.so.conf.d/openssl.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/openssl/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载一下</span></span><br><span class="line">ldconfig -v</span><br><span class="line">ldconfig -v | grep libssl</span><br></pre></td></tr></table></figure><h3 id="查看-OpenSSL-版本"><a href="#查看-OpenSSL-版本" class="headerlink" title="查看 OpenSSL 版本"></a>查看 OpenSSL 版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/openssl/</span><br><span class="line">./bin/openssl version -a</span><br><span class="line">OpenSSL 1.1.1a  20 Nov 2018</span><br><span class="line">built on: Wed Jan  2 02:19:47 2019 UTC</span><br><span class="line">platform: linux-x86_64</span><br><span class="line">options:  bn(64,64) rc4(16x,int) des(int) idea(int) blowfish(ptr) </span><br><span class="line">compiler: gcc -fPIC -pthread -m64 -Wa,--noexecstack -Wall -O3 -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPADLOCK_ASM -DPOLY1305_ASM -DNDEBUG</span><br><span class="line">OPENSSLDIR: <span class="string">"/usr/local/openssl/ssl"</span></span><br><span class="line">ENGINESDIR: <span class="string">"/usr/local/openssl/lib/engines-1.1"</span></span><br><span class="line">Seeding <span class="built_in">source</span>: os-specific</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果遇到以下错误</span></span><br><span class="line">openssl: error <span class="keyword">while</span> loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory</span><br><span class="line">openssl: error <span class="keyword">while</span> loading shared libraries: libcrypto.so.1.1: cannot open shared object file: No such file or directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能是由于 OpenSSL 库的位置不正确造成的</span></span><br><span class="line"><span class="comment"># 做一下软链接，就好了</span></span><br><span class="line">ln -svnf /usr/<span class="built_in">local</span>/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.so.1.1</span><br><span class="line">ln -svnf /usr/<span class="built_in">local</span>/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile.d/openssl.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> OPENSSL_HOME=/usr/<span class="built_in">local</span>/openssl</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$OPENSSL_HOME</span>/bin</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> profile</span><br><span class="line">openssl version -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或把原来的命令备份一下，做个软链接</span></span><br><span class="line">ll -h /usr/bin/openssl</span><br><span class="line">mv /usr/bin/openssl&#123;,_bak&#125;</span><br><span class="line">mv /usr/include/openssl&#123;,openssl_bak&#125;</span><br><span class="line">ln -svnf /usr/<span class="built_in">local</span>/openssl/bin/openssl /usr/bin/openssl</span><br><span class="line">ln -svnf /usr/<span class="built_in">local</span>/openssl/include/openssl /usr/include/openssl</span><br></pre></td></tr></table></figure><h2 id="APR-安装"><a href="#APR-安装" class="headerlink" title="APR 安装"></a>APR 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># APR 下载地址</span></span><br><span class="line">http://apr.apache.org/download.cgi</span><br></pre></td></tr></table></figure><h3 id="安装-apr"><a href="#安装-apr" class="headerlink" title="安装 apr"></a>安装 apr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/tools/</span><br><span class="line">tar -zxvf apr-1.6.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> apr-1.6.5/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否符合安装条件并配置安装参数，检查是否缺失类库，一般来说如果安装的不是精简版系统都是能顺利通过的</span></span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/apr</span><br><span class="line"><span class="comment"># 报错信息</span></span><br><span class="line">config.status: executing libtool commands</span><br><span class="line">rm: cannot remove <span class="string">'libtoolT'</span>: No such file or directory</span><br><span class="line">config.status: executing default commands</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方法</span></span><br><span class="line"><span class="comment"># 编辑 configure 文件</span></span><br><span class="line"><span class="built_in">cd</span> apr-1.6.5/</span><br><span class="line">vim configure</span><br><span class="line">把 <span class="variable">$RM</span> <span class="string">"<span class="variable">$cfgfile</span>"</span> 这行代码注释掉</span><br><span class="line">或 把 <span class="variable">$RM</span> <span class="string">"<span class="variable">$cfgfile</span>"</span> 这行删除掉</span><br><span class="line">或 写成 <span class="variable">$RM</span> -f <span class="string">"<span class="variable">$cfgfile</span>"</span></span><br><span class="line">重新再运行 ./configure 就可以了</span><br><span class="line"></span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br><span class="line"><span class="comment"># 如果不设置安装路径，系统默认安装路径为 /usr/apr/lib</span></span><br></pre></td></tr></table></figure><h3 id="安装-apr-util"><a href="#安装-apr-util" class="headerlink" title="安装 apr-util"></a>安装 apr-util</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/tools/</span><br><span class="line">tar -zxvf apr-util-1.6.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> apr-util-1.6.1/</span><br><span class="line"><span class="comment"># 安装 apr-util 需要配置 apr路径 和 jvm路径，否则会报错找不到apr</span></span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/apr-utils \</span><br><span class="line">--with-apr=/usr/<span class="built_in">local</span>/apr</span><br><span class="line"><span class="comment"># --with-java-home=/data/jdk1.8.0_192</span></span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="安装-apr-iconv"><a href="#安装-apr-iconv" class="headerlink" title="安装 apr-iconv"></a>安装 apr-iconv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 expat 开发库</span></span><br><span class="line">yum -y install expat-devel</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /data/tools/</span><br><span class="line">tar -xvf apr-iconv-1.2.2.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> apr-iconv-1.2.2/</span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/apr-iconv \</span><br><span class="line">--with-apr=/usr/<span class="built_in">local</span>/apr</span><br><span class="line"><span class="comment"># --with-java-home=/data/jdk1.8.0_192</span></span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="安装-tomcat-native"><a href="#安装-tomcat-native" class="headerlink" title="安装 tomcat native"></a>安装 tomcat native</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 libtool 依赖库</span></span><br><span class="line">yum -y install libtool libtool-devel</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /data/tools/</span><br><span class="line">tar -zxvf apache-tomcat-8.5.37.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> apache-tomcat-8.5.37/bin/</span><br><span class="line">tar -zxvf tomcat-native.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> tomcat-native-1.2.19-src/native/</span><br><span class="line">./configure \</span><br><span class="line">--with-apr=/usr/<span class="built_in">local</span>/apr \</span><br><span class="line">--with-java-home=/data/jdk1.8.0_192 \</span><br><span class="line">--with-ssl=/usr/<span class="built_in">local</span>/openssl \</span><br><span class="line">--with-ssl=yes</span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="配置-Apr"><a href="#配置-Apr" class="headerlink" title="配置 Apr"></a>配置 Apr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/profile</span></span><br><span class="line">vim /etc/profile.d/apr.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/usr/<span class="built_in">local</span>/apr/lib</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h2 id="新增-APRConfig-类"><a href="#新增-APRConfig-类" class="headerlink" title="新增 APRConfig 类"></a>新增 APRConfig 类</h2><blockquote><p>网上大部分讲解配置tomcat apr的文章，都只是讲了如何在独立 Tomcat 服务上如何配置 apr，<br>只需要修改 server.xml 中的 connnector 的 protocol 就可以了，<br>对于 SpringBoot 会稍微复杂些，需要增加一个 apr 配置类在启动的时候修改 Embed 的 tomcat connector 网络接入协议</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">packagecom.ochain.data2chain.gateway.config;</span><br><span class="line"></span><br><span class="line">importorg.apache.catalina.LifecycleListener;</span><br><span class="line">importorg.apache.catalina.core.AprLifecycleListener;</span><br><span class="line">importorg.springframework.beans.factory.annotation.Value;</span><br><span class="line">importorg.springframework.boot.context.embedded.EmbeddedServletContainerFactory;</span><br><span class="line">importorg.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;</span><br><span class="line">importorg.springframework.context.annotation.Bean;</span><br><span class="line">importorg.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APRConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;tomcat.apr:false&#125;"</span>)</span><br><span class="line">    privateboolean enabled;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatEmbeddedServletContainerFactory container = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">        <span class="keyword">if</span>(enabled) &#123;</span><br><span class="line">            LifecycleListener arpLifecycle = <span class="keyword">new</span> AprLifecycleListener();</span><br><span class="line">            container.setProtocol(<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span>);</span><br><span class="line">            container.addContextLifecycleListeners(arpLifecycle);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.catalina.core.AprLifecycleListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APRConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// https://docs.spring.io/spring-boot/docs/1.5.6.RELEASE/reference/htmlsingle/#howto-discover-build-in-options-for-external-properties</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatEmbeddedServletContainerFactory tomcat = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">        tomcat.setProtocol(<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span>);</span><br><span class="line">        tomcat.addContextLifecycleListeners(<span class="keyword">new</span> AprLifecycleListener());</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置完启动，有可能会报错"><a href="#配置完启动，有可能会报错" class="headerlink" title="配置完启动，有可能会报错"></a>配置完启动，有可能会报错</h2><h3 id="错误问题"><a href="#错误问题" class="headerlink" title="错误问题"></a>错误问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-01-02 00:45:55,891 [main] ERROR org.apache.catalina.core.StandardService:181 - Failed to start connector [Connector[org.apache.coyote.http11.Http11AprProtocol-8080]]</span><br><span class="line">org.apache.catalina.LifecycleException: Failed to initialize component [Connector[org.apache.coyote.http11.Http11AprProtocol-8080]]</span><br></pre></td></tr></table></figure><blockquote><p>需要在启动 SpringBoot 的服务器上安装 tomcat-native 和 apr 的模块</p></blockquote><h3 id="启动-SpringBoot-系统找不到-apr-的-lib-库"><a href="#启动-SpringBoot-系统找不到-apr-的-lib-库" class="headerlink" title="启动 SpringBoot 系统找不到 apr 的 lib 库"></a>启动 SpringBoot 系统找不到 apr 的 lib 库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.context.embedded.tomcat.ConnectorStartFailedException: Connector configured tolisten onport 8080 failed tostart</span><br><span class="line">...</span><br><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TOSTART</span><br><span class="line">***************************</span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">The Tomcat connector configured tolisten onport 8080 failed tostart. Theport may already be inuse orthe connector may be misconfigured.</span><br></pre></td></tr></table></figure><h3 id="打开-debug-后查看系统日志发现真正的原因是系统找不到-apr-的-lib库"><a href="#打开-debug-后查看系统日志发现真正的原因是系统找不到-apr-的-lib库" class="headerlink" title="打开 debug 后查看系统日志发现真正的原因是系统找不到 apr 的 lib库"></a>打开 debug 后查看系统日志发现真正的原因是系统找不到 apr 的 lib库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.catalina.LifecycleException: The configured protocol [org.apache.coyote.http11.Http11AprProtocol] requires the APR/native library <span class="built_in">which</span> is not available</span><br></pre></td></tr></table></figure><blockquote><p>解决方法<br>在启动命令行中添加指定 apr库路径</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.library.path=/usr/<span class="built_in">local</span>/apr/lib -jar xxxx-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><h3 id="启动-SpringBoot"><a href="#启动-SpringBoot" class="headerlink" title="启动 SpringBoot"></a>启动 SpringBoot</h3><blockquote><p>启动成功后看到日志中输出以下内容，则表示 apr 模式启动成功</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-01-02 15:31:19,032 - Initializing ProtocolHandler [<span class="string">"http-apr-8080"</span>]</span><br><span class="line">2019-01-02 15:31:19,051 - Starting ProtocolHandler [<span class="string">"http-apr-8080"</span>]</span><br><span class="line">2019-01-02 15:31:19,080 - Tomcat started on port(s): 8080(http)</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.jianshu.com/p/f716726ba340" target="_blank" rel="noopener">https://www.jianshu.com/p/f716726ba340</a><br><a href="https://www.cnblogs.com/yueli/p/9668088.html" target="_blank" rel="noopener">https://www.cnblogs.com/yueli/p/9668088.html</a><br><a href="http://www.cnblogs.com/xing901022/p/9145914.html" target="_blank" rel="noopener">http://www.cnblogs.com/xing901022/p/9145914.html</a></p>]]></content>
      
      <categories>
          
          <category> SpringBoot笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot 使用 Tomcat APR 模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next 解决 Busuanzi 统计浏览失效</title>
      <link href="/2018/12/02/Next-%E8%A7%A3%E5%86%B3-Busuanzi-%E7%BB%9F%E8%AE%A1%E6%B5%8F%E8%A7%88%E5%A4%B1%E6%95%88/"/>
      <url>/2018/12/02/Next-%E8%A7%A3%E5%86%B3-Busuanzi-%E7%BB%9F%E8%AE%A1%E6%B5%8F%E8%A7%88%E5%A4%B1%E6%95%88/</url>
      <content type="html"><![CDATA[<h1 id="Hexo-Next-解决-Busuanzi-统计浏览失效"><a href="#Hexo-Next-解决-Busuanzi-统计浏览失效" class="headerlink" title="Hexo Next 解决 Busuanzi 统计浏览失效"></a>Hexo Next 解决 Busuanzi 统计浏览失效</h1><a id="more"></a><p>由于 busuanzi（不蒜子）的网址更新，导致了使用 Hexo Next 主题时统计浏览数失效。</p><p>不蒜子官网<br><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">http://ibruce.info/2015/04/04/busuanzi/</a></p><p>解决方法<br>到 <code>hexo</code> 的 <code>themes</code> 目录下<br>进入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next/layout/_third-party/analytics/</span><br></pre></td></tr></table></figure><p>打开 <code>busuanzi-counter.swig</code><br>将<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span></span><br></pre></td></tr></table></figure></p><p>修改为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span></span><br></pre></td></tr></table></figure></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://blog.csdn.net/ddydavie/article/details/83020549" target="_blank" rel="noopener">https://blog.csdn.net/ddydavie/article/details/83020549</a></p>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next 解决 Busuanzi 统计浏览失效 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>日志统计常用技巧</title>
      <link href="/2018/10/29/%E6%97%A5%E5%BF%97%E7%BB%9F%E8%AE%A1%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/10/29/%E6%97%A5%E5%BF%97%E7%BB%9F%E8%AE%A1%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h1 id="日志统计常用技巧"><a href="#日志统计常用技巧" class="headerlink" title="日志统计常用技巧"></a>日志统计常用技巧</h1><a id="more"></a><h2 id="按时间截取"><a href="#按时间截取" class="headerlink" title="按时间截取"></a>按时间截取</h2><blockquote><p>截取指定时间段日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/^2018-10-29 14:30/,/^2018-10-29 14:32/p'</span> server.log | more</span><br></pre></td></tr></table></figure><h2 id="按标识截取"><a href="#按标识截取" class="headerlink" title="按标识截取"></a>按标识截取</h2><blockquote><p>截取特定标识日志的内容（仅特定标识日志行、或标识附近日志行）<br>过滤包含特定标识（忽略大小写）的日志、并显示前后 10 行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep -i -A 10 -B 10 <span class="string">"error"</span> access.log | more</span><br><span class="line">grep -i -A 10 -B 10 <span class="string">"error"</span> access.log &gt; access_error.txt</span><br><span class="line"></span><br><span class="line">grep -i -C 10 <span class="string">"error"</span> access.log | more</span><br><span class="line">grep -i -C 10 <span class="string">"error"</span> access.log &gt; access_error.txt</span><br></pre></td></tr></table></figure><h2 id="按指定列截取"><a href="#按指定列截取" class="headerlink" title="按指定列截取"></a>按指定列截取</h2><blockquote><p>截取第7列为 ‘/test’ 的行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk <span class="string">'if($7=="/test"&#123;print $0&#125;'</span> | more</span><br></pre></td></tr></table></figure><h2 id="日志统计"><a href="#日志统计" class="headerlink" title="日志统计"></a>日志统计</h2><blockquote><p>分时访问量统计<br>对日志中的时间列进行拆分，根据时间格式取 YYYY-mm-DD HH:MM 部分、进行排序、汇总，即可获得每分钟的访问量统计。</p></blockquote><h3 id="按分钟汇总统计访问量"><a href="#按分钟汇总统计访问量" class="headerlink" title="按分钟汇总统计访问量"></a>按分钟汇总统计访问量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | grep <span class="string">"^2012-"</span> | awk -F\: <span class="string">'&#123;print $1" "$2":"$3&#125;'</span> | sort | uniq -c | more</span><br></pre></td></tr></table></figure><h3 id="按小时汇总统计访问量"><a href="#按小时汇总统计访问量" class="headerlink" title="按小时汇总统计访问量"></a>按小时汇总统计访问量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | grep <span class="string">"^2012-"</span> | awk -F\: <span class="string">'&#123;print $1" "$2"&#125;'</span> | sort | uniq -c | more</span><br></pre></td></tr></table></figure><h2 id="日志中的-IP-地址"><a href="#日志中的-IP-地址" class="headerlink" title="日志中的 IP 地址"></a>日志中的 IP 地址</h2><blockquote><p>Web服务器日志(Nginx)中，通常第一列为客户端IP地址，取该段值进行排序、汇总，即可得到IP:访问次数的统计。</p></blockquote><h3 id="从日志中统计-IP-访问次数"><a href="#从日志中统计-IP-访问次数" class="headerlink" title="从日志中统计 IP 访问次数"></a>从日志中统计 IP 访问次数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk <span class="string">'&#123;print $1&#125;'</span> | sort | uniq -c | more</span><br></pre></td></tr></table></figure><h3 id="统计来访唯一-IP-数"><a href="#统计来访唯一-IP-数" class="headerlink" title="统计来访唯一 IP 数"></a>统计来访唯一 IP 数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk <span class="string">'&#123;print $1&#125;'</span> | sort | uniq | wc -l</span><br></pre></td></tr></table></figure><h2 id="网络连接状态"><a href="#网络连接状态" class="headerlink" title="网络连接状态"></a>网络连接状态</h2><p>netstat 命令可获取系统当前的侦听、连接状态，包括协议、源IP:端口、目标IP:端口、连接状态信息，取关注的列进行排序、汇总，即可获得连接数、状态等统计。</p><h3 id="TCP连接数"><a href="#TCP连接数" class="headerlink" title="TCP连接数"></a>TCP连接数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">netstat -antp | grep ^tcp | awk <span class="string">'&#123;print $5&#125;'</span> | awk -F\: <span class="string">'&#123;print $1&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">      5 0.0.0.0</span><br><span class="line">      2 192.217.199.215</span><br><span class="line">      1 91.189.89.144</span><br><span class="line">      1 172.16.17.4</span><br><span class="line">      1 172.16.17.3</span><br><span class="line">      1 172.16.17.27</span><br></pre></td></tr></table></figure><h3 id="TCP-连接状态"><a href="#TCP-连接状态" class="headerlink" title="TCP 连接状态"></a>TCP 连接状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netstat -antp | grep ^tcp | awk <span class="string">'&#123;print $6&#125;'</span> | sort | uniq -c | sort -nr </span><br><span class="line">     17 ESTABLISHED</span><br><span class="line">      8 LISTEN</span><br><span class="line">      1 CLOSE_WAIT</span><br></pre></td></tr></table></figure><blockquote><p>使用 awk 的正则匹配进行过滤，减少前面的 grep 指令<br>不过 grep 的过滤处理速度似乎比 awk 的正则匹配速度更快，因此对大日志分析时可能还是先用 grep 过滤效率更高</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">time cat netstat.txt | awk <span class="string">'/^tcp/ &#123;print $6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 TIME_WAIT</span><br><span class="line">    203 ESTABLISHED</span><br><span class="line">     29 FIN_WAIT1</span><br><span class="line">     18 LISTEN</span><br><span class="line">     17 FIN_WAIT2</span><br><span class="line"></span><br><span class="line">real    0m0.017s</span><br><span class="line">user    0m0.014s</span><br><span class="line">sys 0m0.002s</span><br><span class="line"></span><br><span class="line">time cat netstat.txt | grep ^tcp | awk <span class="string">'&#123;print $6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 TIME_WAIT</span><br><span class="line">    203 ESTABLISHED</span><br><span class="line">     29 FIN_WAIT1</span><br><span class="line">     18 LISTEN</span><br><span class="line">     17 FIN_WAIT2</span><br><span class="line"></span><br><span class="line">real    0m0.008s</span><br><span class="line">user    0m0.005s</span><br><span class="line">sys 0m0.001s</span><br></pre></td></tr></table></figure><h3 id="其他-awk-匹配方式"><a href="#其他-awk-匹配方式" class="headerlink" title="其他 awk 匹配方式"></a>其他 awk 匹配方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat netstat.txt | awk <span class="string">'&#123;if($1=="tcp")print $6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 TIME_WAIT</span><br><span class="line">    203 ESTABLISHED</span><br><span class="line">     29 FIN_WAIT1</span><br><span class="line">     18 LISTEN</span><br><span class="line">     17 FIN_WAIT2</span><br><span class="line"></span><br><span class="line">cat netstat.txt | awk <span class="string">'$1=="tcp" &#123;print $6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 TIME_WAIT</span><br><span class="line">    203 ESTABLISHED</span><br><span class="line">     29 FIN_WAIT1</span><br><span class="line">     18 LISTEN</span><br><span class="line">     17 FIN_WAIT2</span><br></pre></td></tr></table></figure><h3 id="多条件匹配"><a href="#多条件匹配" class="headerlink" title="多条件匹配"></a>多条件匹配</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cat netstat.txt | awk <span class="string">'/^tcp|^udp/ &#123;print $1"-"$6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 tcp-TIME_WAIT</span><br><span class="line">    203 tcp-ESTABLISHED</span><br><span class="line">     29 tcp-FIN_WAIT1</span><br><span class="line">     18 tcp-LISTEN</span><br><span class="line">     17 tcp-FIN_WAIT2</span><br><span class="line">      4 udp-32366/rpcbind</span><br><span class="line">      4 udp--</span><br><span class="line">      3 udp-32526/rpc.statd</span><br><span class="line">      2 udp-19339/rpc.mountd</span><br><span class="line">      1 udp-ESTABLISHED</span><br><span class="line">      1 udp-38143/gmond</span><br><span class="line">      1 udp-19335/rpc.rquotad</span><br><span class="line">      1 udp-1282/portreserve</span><br><span class="line"></span><br><span class="line">cat netstat.txt | awk <span class="string">'&#123;if($1~"^tcp" || $1~"^udp")print $1"-"$6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 tcp-TIME_WAIT</span><br><span class="line">    203 tcp-ESTABLISHED</span><br><span class="line">     29 tcp-FIN_WAIT1</span><br><span class="line">     18 tcp-LISTEN</span><br><span class="line">     17 tcp-FIN_WAIT2</span><br><span class="line">      4 udp-32366/rpcbind</span><br><span class="line">      4 udp--</span><br><span class="line">      3 udp-32526/rpc.statd</span><br><span class="line">      2 udp-19339/rpc.mountd</span><br><span class="line">      1 udp-ESTABLISHED</span><br><span class="line">      1 udp-38143/gmond</span><br><span class="line">      1 udp-19335/rpc.rquotad</span><br><span class="line">      1 udp-1282/portreserve</span><br><span class="line"></span><br><span class="line">cat netstat.txt | awk <span class="string">'&#123;if($1=="tcp" &amp;&amp; $6!~"ESTABLISHED")print $6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 TIME_WAIT</span><br><span class="line">     29 FIN_WAIT1</span><br><span class="line">     18 LISTEN</span><br><span class="line">     17 FIN_WAIT2</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>示例一</strong></p><blockquote><p>扫描 gz 压缩文件，从中寻找带有 dianping_reply 的行，将改行按照[进行拆分，然后直接使用if条件进行判断，比较，最终输出想要的结果。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat access.log.tar.gz | grep <span class="string">'dianping_reply.log'</span> | awk <span class="string">'&#123;split($4,array,"[");if(array[2]&gt;="29/May/2016:00:00:26" &amp;&amp; array[2]&lt;="29/May/2016:00:01:14")&#123;print $0&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>命令解释<br><code>zcat</code>   直接读取压缩文件的内容<br><code>grep</code>   过滤特定字符的行<br><code>awk</code>    用于执行命令<br><code>split</code>  用于切分字符串</p><p><strong>示例二</strong></p><blockquote><p>过滤 <code>22/Feb/2017-18:52:59</code> 之前的日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test.log</span><br><span class="line">[22/Feb/2017-18:51:58]    api.momo.com    /api/feed    HTTP/1.1      121.0.0.1      android1.2</span><br><span class="line">[22/Feb/2017-18:51:59]    api.momo.com    /api/follow    HTTP/1.1      121.0.0.2    iphone1.1</span><br><span class="line">[22/Feb/2017-18:52:58]    api.momo.com    /api/user    HTTP/1.1      121.0.0.3    iphone1.1</span><br><span class="line">[22/Feb/2017-18:52:41]    api.momo.com    /api/feed    HTTP/1.1      121.0.0.4    android1.2</span><br><span class="line">[22/Feb/2017-18:56:30]    api.momo.com    /api/follow    HTTP/1.1      121.0.0.2    android1.2</span><br><span class="line">[22/Feb/2017-18:51:21]    api.momo.com    /api/user    HTTP/1.1      121.0.0.3    iphone1.1</span><br><span class="line">[22/Feb/2017-18:59:58]    api.momo.com    /api/user    HTTP/1.1      121.0.0.3    android1.2</span><br><span class="line">[22/Feb/2017-18:51:21]    api.momo.com    /api/feed    HTTP/1.1      121.0.0.1    iphone1.1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.log | awk <span class="string">'&#123;split($1,array,"[");split(array[2],array2,"]");if(array2[1] &gt;= "22/Feb/2017-18:52:59")&#123;print($0)&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://xstarcd.github.io/wiki/shell/logview_tips.html" target="_blank" rel="noopener">http://xstarcd.github.io/wiki/shell/logview_tips.html</a></p>]]></content>
      
      <categories>
          
          <category> Shell笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志统计常用技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shell 按时间截取日志</title>
      <link href="/2018/10/29/Shell%E6%8C%89%E6%97%B6%E9%97%B4%E6%88%AA%E5%8F%96%E6%97%A5%E5%BF%97/"/>
      <url>/2018/10/29/Shell%E6%8C%89%E6%97%B6%E9%97%B4%E6%88%AA%E5%8F%96%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<h1 id="Shell-按时间截取日志"><a href="#Shell-按时间截取日志" class="headerlink" title="Shell 按时间截取日志"></a>Shell 按时间截取日志</h1><p>截取查看某时间段内的日志</p><a id="more"></a><h2 id="sed-截取"><a href="#sed-截取" class="headerlink" title="sed 截取"></a>sed 截取</h2><blockquote><p>精确到 <code>时分秒</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/2018-10-22|10:23:44/,/2018-10-22|11:23:44/'</span> access.log &gt; 10-11_access.log</span><br></pre></td></tr></table></figure><blockquote><p>精确到小时</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/2018-10-22|10/,/2018-10-22|11/'</span> access.log &gt; 10-11_access.log</span><br></pre></td></tr></table></figure><blockquote><p><code>sed -n &#39;/开始时间/,/结束时间/&#39; 被截取日志原文件 &gt; 截取后日志新文件</code><br><code>$p</code> 显示到最后一行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看某时间段到当前的 messages 系统日志</span></span><br><span class="line">sed -n <span class="string">'/May 20 17/,$p'</span> /var/<span class="built_in">log</span>/messages | less</span><br><span class="line"></span><br><span class="line">sed -n <span class="string">'/2018-10-29 09:00:00/,$p'</span> access.log &gt; /tmp/access.log</span><br></pre></td></tr></table></figure><blockquote><p>sed 截取 10:00:00 到 现在的 catalina.out 日志内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/2018-04-11 10:[0-9][0-9]:[0-9][0-9]/,$p'</span> catalina.out | less</span><br></pre></td></tr></table></figure><blockquote><p>sed 截取 2018-04-11 这天 到 现在的 catalina.out 日志内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/2018-04-11 [0-9][0-9]:[0-9][0-9]:[0-9][0-9]/,$p'</span> catalina.out | less</span><br></pre></td></tr></table></figure><blockquote><p>sed 截取 2018-03-14 09:00:00 2018-03-14 12:00:00 的日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/2018-03-14 09:[0][0]:[0][0]/,/2018-03-14 12:[0][0]:[0][0]/p'</span> catalina.out &gt; /tmp/catalina.log</span><br></pre></td></tr></table></figure><hr><h2 id="grep-截取"><a href="#grep-截取" class="headerlink" title="grep 截取"></a>grep 截取</h2><blockquote><p>egrep 截取 13:38 到 14:00 之间的日志内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egrep <span class="string">'13:3[8-9]:[0-9][0-9]|13:[4-5][0-9]:[0-9][0-9]'</span> catalina.out | less</span><br></pre></td></tr></table></figure><blockquote><p>egrep 截取 2018-04-11 到 2018-04-12 之间的日志内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egrep <span class="string">'2018-04-11 [0-9][0-9]:[0-9][0-9]:[0-9][0-9]|2018-04-12 [0-9][0-9]:[0-9][0-9]:[0-9][0-9]'</span> catalina.out | less</span><br></pre></td></tr></table></figure><hr><p><strong>截取 Nginx 访问日志</strong></p><blockquote><p>查看 21/Jul/2014:14:37:50 到 21/Jul/2014:14:38:00 时间段内 access.log 的访问日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk <span class="string">'$4 &gt;="[21/Jul/2014:14:37:50" &amp;&amp; $4 &lt;="[21/Jul/2014:14:38:00"'</span></span><br></pre></td></tr></table></figure><h2 id="时间转换在线工具地址"><a href="#时间转换在线工具地址" class="headerlink" title="时间转换在线工具地址"></a>时间转换在线工具地址</h2><p><a href="https://tool.lu/timestamp/" target="_blank" rel="noopener">https://tool.lu/timestamp/</a></p>]]></content>
      
      <categories>
          
          <category> Shell笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell 按时间截取日志 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 详解time模块中 UTC世界时间、时间戳、字符串三者的转换</title>
      <link href="/2018/10/24/Python%E8%AF%A6%E8%A7%A3time%E6%A8%A1%E5%9D%97%E4%B8%ADUTC%E4%B8%96%E7%95%8C%E6%97%B6%E9%97%B4%E3%80%81%E6%97%B6%E9%97%B4%E6%88%B3%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%89%E8%80%85%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/10/24/Python%E8%AF%A6%E8%A7%A3time%E6%A8%A1%E5%9D%97%E4%B8%ADUTC%E4%B8%96%E7%95%8C%E6%97%B6%E9%97%B4%E3%80%81%E6%97%B6%E9%97%B4%E6%88%B3%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%89%E8%80%85%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="Python-详解time模块中-UTC世界时间、时间戳、字符串三者的转换"><a href="#Python-详解time模块中-UTC世界时间、时间戳、字符串三者的转换" class="headerlink" title="Python 详解time模块中 UTC世界时间、时间戳、字符串三者的转换"></a>Python 详解time模块中 UTC世界时间、时间戳、字符串三者的转换</h1><a id="more"></a><h2 id="本地时间-转换-为时间戳"><a href="#本地时间-转换-为时间戳" class="headerlink" title="本地时间 转换 为时间戳"></a>本地时间 转换 为时间戳</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">date_=datetime.datetime(<span class="number">2018</span>,<span class="number">6</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">55</span>,<span class="number">00</span>)</span><br><span class="line">timestamp2=time.mktime(date_.timetuple())   <span class="comment"># date_.timetuple() 将datetime 格式的转化为 time 模块的 tuple 格式</span></span><br><span class="line">print(timestamp2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳转换为本地时间</span></span><br><span class="line"></span><br><span class="line">ltime=time.localtime(<span class="number">1529112900</span>)  <span class="comment">#time.struct_time(tm_year=2018, tm_mon=6, tm_mday=16, tm_hour=9, tm_min=35, tm_sec=0, tm_wday=5, tm_yday=167, tm_isdst=0)</span></span><br><span class="line">timeStr=time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, ltime)</span><br><span class="line">print(timeStr)</span><br></pre></td></tr></table></figure><h2 id="UTCS-时间转换为时间戳-2018-07-13T16-00-00Z"><a href="#UTCS-时间转换为时间戳-2018-07-13T16-00-00Z" class="headerlink" title="UTCS 时间转换为时间戳 2018-07-13T16:00:00Z"></a>UTCS 时间转换为时间戳 2018-07-13T16:00:00Z</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">utc_to_local</span><span class="params">(utc_time_str, utc_format=<span class="string">'%Y-%m-%dT%H:%M:%SZ'</span>)</span>:</span></span><br><span class="line">    local_tz = pytz.timezone(<span class="string">'Asia/Chongqing'</span>)      <span class="comment"># 定义本地时区</span></span><br><span class="line">    local_format = <span class="string">"%Y-%m-%d %H:%M:%S"</span>              <span class="comment"># 定义本地时间format</span></span><br><span class="line"></span><br><span class="line">    utc_dt = datetime.datetime.strptime(utc_time_str, utc_format)       <span class="comment"># 讲世界时间的格式转化为 datetime.datetime 格式</span></span><br><span class="line">    local_dt = utc_dt.replace(tzinfo=pytz.utc).astimezone(local_tz)     <span class="comment"># 想将 datetime 格式添加上世界时区，然后 astimezone 切换时区：世界时区 ==&gt; 本地时区</span></span><br><span class="line">    <span class="comment"># time_str = local_dt.strftime(local_format)                         # 将 datetime 格式转化为 str—format 格式</span></span><br><span class="line">    <span class="comment"># return int(time.mktime(time.strptime(time_str, local_format)))     # 运用 mktime 方法将 date—tuple 格式的时间转化为时间戳; time.strptime() 可以得到 tuple 的时间格式</span></span><br><span class="line">    <span class="keyword">return</span> int(time.mktime(local_dt.timetuple()))                       <span class="comment"># 返回当地时间戳</span></span><br></pre></td></tr></table></figure><h2 id="本地时间转换为-UTC-传入的本地时间戳-1531411200"><a href="#本地时间转换为-UTC-传入的本地时间戳-1531411200" class="headerlink" title="本地时间转换为 UTC  传入的本地时间戳 1531411200"></a>本地时间转换为 UTC  传入的本地时间戳 1531411200</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">local_to_utc</span><span class="params">(local_ts, utc_format=<span class="string">'%Y-%m-%dT%H:%MZ'</span>)</span>:</span></span><br><span class="line">    local_tz = pytz.timezone(<span class="string">'Asia/Chongqing'</span>)    <span class="comment"># 定义本地时区</span></span><br><span class="line">    local_format = <span class="string">"%Y-%m-%d %H:%M:%S"</span>               <span class="comment"># 定义本地时间 format</span></span><br><span class="line"></span><br><span class="line">    time_str = time.strftime(local_format, time.localtime(local_ts))    <span class="comment"># 首先将本地时间戳转化为时间元组，用 strftime 格式化成字符串</span></span><br><span class="line">    dt = datetime.datetime.strptime(time_str, local_format)             <span class="comment"># 将字符串用 strptime 转为为 datetime 中 datetime 格式</span></span><br><span class="line">    local_dt = local_tz.localize(dt, is_dst=<span class="keyword">None</span>)                       <span class="comment"># 给时间添加时区，等价于 dt.replace(tzinfo=pytz.timezone('Asia/Chongqing'))</span></span><br><span class="line">    utc_dt = local_dt.astimezone(pytz.utc)                              <span class="comment"># astimezone 切换时区</span></span><br><span class="line">    <span class="keyword">return</span> utc_dt.strftime(utc_format)                                  <span class="comment"># 返回世界时间格式</span></span><br><span class="line"></span><br><span class="line">print(utc_to_local(<span class="string">'2018-07-13T16:00:00Z'</span>, utc_format=<span class="string">'%Y-%m-%dT%H:%M:%SZ'</span>))</span><br><span class="line">print(local_to_utc(<span class="number">1531411200</span>, utc_format=<span class="string">'%Y-%m-%dT%H:%MZ'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1529412900.0</span></span><br><span class="line"><span class="string">2018-06-16 09:35:00</span></span><br><span class="line"><span class="string">1531497600</span></span><br><span class="line"><span class="string">2018-07-12T16:00Z</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://blog.csdn.net/brucewong0516/article/details/81100242" target="_blank" rel="noopener">https://blog.csdn.net/brucewong0516/article/details/81100242</a></p>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 详解time模块中 UTC世界时间、时间戳、字符串三者的转换 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 软件开发的目录规范</title>
      <link href="/2018/09/24/Python%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E7%9B%AE%E5%BD%95%E8%A7%84%E8%8C%83/"/>
      <url>/2018/09/24/Python%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E7%9B%AE%E5%BD%95%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h1 id="Python-软件开发的目录规范"><a href="#Python-软件开发的目录规范" class="headerlink" title="Python 软件开发的目录规范"></a>Python 软件开发的目录规范</h1><a id="more"></a><h2 id="目录规范"><a href="#目录规范" class="headerlink" title="目录规范"></a>目录规范</h2><p><strong>项目目录规范</strong><br><img src="http://pa2bdkuiw.bkt.clouddn.com/%E7%9B%AE%E5%BD%95%E8%A7%84%E8%8C%83.png" alt="目录规范"></p><p><code>bin</code> 存放执行文件，整个程序的入口文件，比如启动功能<br><code>conf</code> 配置文件<br><code>lib</code> 存放自定义的共享库，经常使用的一些功能<br><code>core</code> 存放整个代码程序的核心逻辑<br><code>db</code> 存放数据库相关的<br><code>log</code> 日志相关的<br><code>Readme</code> 记录整个项目的描述信息</p><p><strong>项目文件规范</strong><br><img src="http://pa2bdkuiw.bkt.clouddn.com/%E7%9B%AE%E5%BD%95%E8%A7%84%E8%8C%83%E6%96%87%E4%BB%B6.png" alt="目录规范文件"></p><blockquote><p><code>src.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'注册。。。'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'支付。。。'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'转账。。。'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'提现。。。'</span>)</span><br><span class="line"></span><br><span class="line">func_dic = &#123;</span><br><span class="line">    <span class="string">'1'</span>: register,</span><br><span class="line">    <span class="string">'2'</span>: pay,</span><br><span class="line">    <span class="string">'3'</span>: transfer,</span><br><span class="line">    <span class="string">'4'</span>: withdraw</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 核心功能，和用户交互</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">"""</span></span><br><span class="line"><span class="string">        1 注册</span></span><br><span class="line"><span class="string">        2 支付</span></span><br><span class="line"><span class="string">        3 转账</span></span><br><span class="line"><span class="string">        4 提现</span></span><br><span class="line"><span class="string">        """</span>)</span><br><span class="line"></span><br><span class="line">        choice = input(<span class="string">'&gt;&gt;&gt;: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">in</span> func_dic:</span><br><span class="line">            func_dic[choice]()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'输入错误指令'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="获取项目根路径"><a href="#获取项目根路径" class="headerlink" title="获取项目根路径"></a>获取项目根路径</h2><blockquote><p>强调：只有被导入的模块才能使用 <code>.</code> 或 <code>..</code> 的语法<br>编辑 <code>start.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">r'E:\Project\core'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这样写会有问题，在程序给别人使用时，别人的路径不可能和程序开发者的目录路径一样</p></blockquote><p><strong>改进</strong></p><blockquote><p><code>__file__</code> 表示当前文件的绝对路径<br><code>abspath()</code> 规范路径格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(__file__)</span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line"><span class="comment"># sys.path.append(r'E:\Project\core')</span></span><br><span class="line"><span class="comment"># os.path.dirname()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">E:/Project/bin/start.py</span><br><span class="line">E:\Project\bin\start.py</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">print(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">E:\Project\bin</span><br><span class="line">E:\Project</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.append(BASE_DIR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> core <span class="keyword">import</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    src.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br></pre></td></tr></table></figure><h2 id="获取-db-目录文件的路径"><a href="#获取-db-目录文件的路径" class="headerlink" title="获取 db 目录文件的路径"></a>获取 <code>db</code> 目录文件的路径</h2><blockquote><p>编辑 <code>setting.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">DB_PATH = <span class="string">'%s\%s\%s'</span> % (BASE_DIR, <span class="string">'db'</span>, <span class="string">'db.txt'</span>)</span><br><span class="line"></span><br><span class="line">print(DB_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">E:\Project\db\db.txt</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这种拼接方式有缺陷，如果是 Linux 系统，<code>\</code> 右斜杠就不能用了</p></blockquote><h3 id="解决跨平台路径格式的问题"><a href="#解决跨平台路径格式的问题" class="headerlink" title="解决跨平台路径格式的问题"></a>解决跨平台路径格式的问题</h3><blockquote><p>使用 <code>os.path.join</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">DB_PATH = os.path.join(BASE_DIR, <span class="string">'db'</span>, <span class="string">'db.txt'</span>)</span><br><span class="line"></span><br><span class="line">print(DB_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">E:\Project\db\db.txt</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Linux 系统输出格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">DB_PATH = os.path.join(BASE_DIR, <span class="string">'db'</span>, <span class="string">'db.txt'</span>)</span><br><span class="line"></span><br><span class="line">print(DB_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">/data/Project/db/db.txt</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="获取-log-目录路径"><a href="#获取-log-目录路径" class="headerlink" title="获取 log 目录路径"></a>获取 <code>log</code> 目录路径</h3><blockquote><p>编辑 <code>settings.py</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOG_PATH = os.path.join(BASE_DIR, <span class="string">'log'</span>, <span class="string">'access.log'</span>)</span><br><span class="line"></span><br><span class="line">print(LOG_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">E:\Project\log\access.log</span><br></pre></td></tr></table></figure><h2 id="项目目录规范示例"><a href="#项目目录规范示例" class="headerlink" title="项目目录规范示例"></a>项目目录规范示例</h2><h3 id="项目名-core-src-py"><a href="#项目名-core-src-py" class="headerlink" title="项目名/core/src.py"></a>项目名/core/src.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> lib <span class="keyword">import</span> common</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'注册。。。'</span>)</span><br><span class="line">    uname = input(<span class="string">'用户名：'</span>).strip()</span><br><span class="line">    pwd = input(<span class="string">'密码：'</span>).strip()</span><br><span class="line">    <span class="keyword">with</span> open(settings.DB_PATH, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'%s:%s\n'</span> % (uname, pwd))</span><br><span class="line"></span><br><span class="line">    common.logger(uname)</span><br><span class="line">    print(<span class="string">'注册成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'支付。。。'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'转账。。。'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'提现。。。'</span>)</span><br><span class="line"></span><br><span class="line">func_dic = &#123;</span><br><span class="line">    <span class="string">'1'</span>: register,</span><br><span class="line">    <span class="string">'2'</span>: pay,</span><br><span class="line">    <span class="string">'3'</span>: transfer,</span><br><span class="line">    <span class="string">'4'</span>: withdraw</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 核心功能，和用户交互</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">"""</span></span><br><span class="line"><span class="string">        1 注册</span></span><br><span class="line"><span class="string">        2 支付</span></span><br><span class="line"><span class="string">        3 转账</span></span><br><span class="line"><span class="string">        4 提现</span></span><br><span class="line"><span class="string">        按 q 退出</span></span><br><span class="line"><span class="string">        """</span>)</span><br><span class="line"></span><br><span class="line">        choice = input(<span class="string">'请选择相应的操作: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">'q'</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">not</span> <span class="keyword">in</span> func_dic:</span><br><span class="line">            print(<span class="string">'输入错误指令，请重新输入'</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        func_dic[choice]()</span><br></pre></td></tr></table></figure><h3 id="项目名-conf-settings-py"><a href="#项目名-conf-settings-py" class="headerlink" title="项目名/conf/settings.py"></a>项目名/conf/settings.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">DB_PATH = os.path.join(BASE_DIR, <span class="string">'db'</span>, <span class="string">'db.txt'</span>)</span><br><span class="line">LOG_PATH = os.path.join(BASE_DIR, <span class="string">'log'</span>, <span class="string">'access.log'</span>)</span><br></pre></td></tr></table></figure><h3 id="项目名-lib-common-py"><a href="#项目名-lib-common-py" class="headerlink" title="项目名/lib/common.py"></a>项目名/lib/common.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(time.strftime('%Y-%m-%d %X'))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logger</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(settings.LOG_PATH, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'%s, %s, 注册成功\n'</span> % (time.strftime(<span class="string">'%Y-%m-%d %X'</span>, time.localtime()), msg))</span><br></pre></td></tr></table></figure><h3 id="项目名-bin-start-py"><a href="#项目名-bin-start-py" class="headerlink" title="项目名/bin/start.py"></a>项目名/bin/start.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.append(BASE_DIR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> core <span class="keyword">import</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    src.run()</span><br></pre></td></tr></table></figure><h3 id="运行-start-py"><a href="#运行-start-py" class="headerlink" title="运行 start.py"></a>运行 start.py</h3><p><img src="http://pa2bdkuiw.bkt.clouddn.com/20180925111840.png" alt="运行start"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat db.txt</span><br><span class="line">egon:<span class="number">123</span></span><br><span class="line"></span><br><span class="line">tail access.log</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-24</span> <span class="number">01</span>:<span class="number">08</span>:<span class="number">11</span>, egon, 注册成功</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 软件开发的目录规范 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 模块的使用</title>
      <link href="/2018/09/23/Python%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/09/23/Python%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="Python-模块的使用"><a href="#Python-模块的使用" class="headerlink" title="Python 模块的使用"></a>Python 模块的使用</h1><a id="more"></a><h2 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h2><h3 id="什么是模块？"><a href="#什么是模块？" class="headerlink" title="什么是模块？"></a>什么是模块？</h3><p>模块就是一组功能的集合体，我们的程序可以导入模块来复用模块里的功能。<br>模块分为三大类：</p><blockquote><ol><li>自定义模块</li><li>内置模块：<code>time</code>, <code>sys</code> 等</li><li>第三方模块</li></ol></blockquote><p>常见的场景<br>一个模块就是一个包含了一组功能的 python 文件，比如 spam.py，模块名为 spam，可以通过 import spam 使用。</p><p>模块四种表现形式<br>在 Python 中，模块的使用方式都是一样的，但其实细说的话，模块可以分为四个通用类别</p><blockquote><ol><li>使用 Python 编写的 <code>.py</code> 文件</li><li>已被编译为共享库或 DLL 的 C 或 C++ 扩展</li><li>把一系列模块组织到一起的文件夹（注：文件夹下有一个 <code>__init__.py</code> 文件，该文件夹称之为包）</li><li>使用 C 编写并链接到 python 解释器的内置模块</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time)</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;module <span class="string">'time'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line">&lt;module <span class="string">'sys'</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure><h2 id="为什么要用模块？"><a href="#为什么要用模块？" class="headerlink" title="为什么要用模块？"></a>为什么要用模块？</h2><blockquote><ol><li>可以将程序中频繁使用的一些公共功能<br>可以拿内置的、第三方的模块，然后直接使用，这种拿来主义，可以极大地提高开发效率</li><li>将程序中公用的一些功能组织到一个文件中，然后程序各部分组件可以重用该文件中的功能</li></ol><p>优点：减少代码冗余，增强程序的组织结构性与可维护性</p></blockquote><h2 id="如何使用模块？"><a href="#如何使用模块？" class="headerlink" title="如何使用模块？"></a>如何使用模块？</h2><p><img src="http://pa2bdkuiw.bkt.clouddn.com/%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8.png" alt="1537516081466"></p><blockquote><p>被导入的文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim spam.py</span><br><span class="line">print(<span class="string">'from the spam.py'</span>)</span><br><span class="line"></span><br><span class="line">money = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'spam模块：'</span>, money)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'spam模块'</span>)</span><br><span class="line">    read1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    money = <span class="number">0</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>执行文件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> the spam.py</span><br></pre></td></tr></table></figure><blockquote><p>导入模块：import 模块名<br>首次导入模块都发生了哪些事？</p><ol><li>先产生一个模块的名称空间</li><li>会执行模块文件的代码，将产生的名字放到模块的名称空间中</li><li>会在当前名称空间中拿到一个模块名，该模块名指向模块的名称空间</li></ol></blockquote><p><img src="http://pa2bdkuiw.bkt.clouddn.com/import%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E9%85%8D%E5%9B%BE.png" alt="import导入模块配图"></p><p><strong>示例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何使用模块？</span></span><br><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块名.名字，是在向模块的名称空间中拿名字</span></span><br><span class="line">print(spam.money)</span><br><span class="line">print(spam.read1)</span><br><span class="line">print(spam.read2)</span><br><span class="line">print(spam.change)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> the spam.py</span><br><span class="line"><span class="number">1000</span></span><br><span class="line">&lt;function read1 at <span class="number">0x000002629B29B6A8</span>&gt;</span><br><span class="line">&lt;function read2 at <span class="number">0x000002629B29B620</span>&gt;</span><br><span class="line">&lt;function change at <span class="number">0x000002629B29B840</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line">money = <span class="number">0</span></span><br><span class="line">print(spam.money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> the spam.py</span><br><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim spam.py</span><br><span class="line"><span class="comment"># print('from the spam.py')</span></span><br><span class="line"></span><br><span class="line">money = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'spam模块：'</span>, money)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'spam模块'</span>)</span><br><span class="line">    read1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    money = <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line">spam.read1()</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">spam模块： <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 凡是来自于 spam 名称空间中的功能，执行时都是模块自己的名称空间为准的</span></span><br><span class="line">money = <span class="number">0</span></span><br><span class="line">spam.read1()</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">spam模块： <span class="number">1000</span></span><br></pre></td></tr></table></figure><p><strong>示例3</strong></p><blockquote><p>观察 spam.py 里的 <code>change()</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line">money = <span class="number">1111111111111111111111</span></span><br><span class="line">spam.change()</span><br><span class="line">print(money)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line">money = <span class="number">1111111111111111111111</span></span><br><span class="line">spam.change()</span><br><span class="line">spam.read1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">spam模块： <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>示例4</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line">money = <span class="number">1111111111111111111111</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'run.py read1'</span>)</span><br><span class="line"></span><br><span class="line">spam.read2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">spam模块</span><br><span class="line">spam模块： <span class="number">1000</span></span><br></pre></td></tr></table></figure><blockquote><p>import 导入模块的方式，在引用模块名称空间中改名字时，必须加上前缀：<code>模块名.名字</code><br>优点：指定前缀地访问模块名称空间中的名字，不会与当前名称空间中名字冲突<br>缺点：每次引用模块名称空间中的名字都需要加上前缀，模块名过长时，前缀会显得非常臃肿</p></blockquote><blockquote><p>起别名可以缩短 <code>模块名.名字</code> 的长度<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 起别名方式</span></span><br><span class="line"><span class="keyword">import</span> spam <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line">print(sm.money)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>模块用逗号分隔，一次导入多个模块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam, os, time</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>推荐多行导入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="from-import-导入模块"><a href="#from-import-导入模块" class="headerlink" title="from...import... 导入模块"></a><code>from...import...</code> 导入模块</h2><blockquote><p>可以在调用模块名称空间中的名字时，不需要在名字前加前缀模块名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> money</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> the spam.py</span><br></pre></td></tr></table></figure><blockquote><p><code>from...import...</code>首次导入模块都发生了哪些事？</p><ol><li>先产生一个模块的名称空间</li><li>会执行模块文件的代码，将产生的名字放到模块的名称空间中</li><li>会在当前名称空间中直接拿到一个模块名称空间中的名字</li></ol></blockquote><p><img src="http://pa2bdkuiw.bkt.clouddn.com/from-import%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%9720180922185501.png" alt="from-import导入模块20180922185501"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> money</span><br><span class="line"></span><br><span class="line">print(money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> money, read1, read2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用：可以不用加前缀直接使用</span></span><br><span class="line">print(money)</span><br><span class="line">print(read1)</span><br><span class="line">print(read2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1000</span></span><br><span class="line">&lt;function read1 at <span class="number">0x000002384886B6A8</span>&gt;</span><br><span class="line">&lt;function read2 at <span class="number">0x000002384886B620</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>使用：可以不用加前缀直接使用<br>优点：简洁<br>缺点：容易与当前名称空间中的名字冲突</p></blockquote><p><img src="http://pa2bdkuiw.bkt.clouddn.com/from-import%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%9720180922185516.png" alt="from-import导入模块20180922185516"></p><blockquote><p>强调：来自于模块名称空间中的函数一定是模块的名称空间为准的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> money, read1, read2, change</span><br><span class="line"></span><br><span class="line">money = <span class="number">1</span></span><br><span class="line">change()</span><br><span class="line">print(money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> money, read1, read2, change</span><br><span class="line"></span><br><span class="line">money = <span class="number">1</span></span><br><span class="line">change()</span><br><span class="line">read1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">spam模块： <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>模块名称空间里的名字可以不用一个个导入<br>但是不推荐使用 <code>&#39;*&#39;</code>，因为不知道会导入哪些功能名字，最好需要哪一个导入哪一个，这样比较清楚<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">print(money)</span><br><span class="line">print(read1)</span><br><span class="line">print(read2)</span><br><span class="line">print(change)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1000</span></span><br><span class="line">&lt;function read1 at <span class="number">0x000001F14E00B6A8</span>&gt;</span><br><span class="line">&lt;function read2 at <span class="number">0x000001F14E00B620</span>&gt;</span><br><span class="line">&lt;function change at <span class="number">0x000001F14E00B840</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>起别名<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> money <span class="keyword">as</span> m</span><br><span class="line">print(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>控制 <code>&#39;*&#39;</code> 所导入的名字</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim spam.py</span><br><span class="line">__all__ = [<span class="string">'money'</span>, <span class="string">'read1'</span>]    <span class="comment"># 控制的就是 '*' 所导入的名字</span></span><br><span class="line">...省略...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">print(money, read1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1000</span> &lt;function read1 at <span class="number">0x000002035A6DB8C8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">print(money, read1)</span><br><span class="line">print(read2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">NameError: name <span class="string">'read2'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><h2 id="模块的嵌套（循环）导入"><a href="#模块的嵌套（循环）导入" class="headerlink" title="模块的嵌套（循环）导入"></a>模块的嵌套（循环）导入</h2><blockquote><p>在 Python 中，一个模块凡是被导入过一次，下一次导入就会直接引用上一次导入的结果，即不会重新执行模块的文件</p></blockquote><p><img src="http://pa2bdkuiw.bkt.clouddn.com/1537626500840.png" alt="1537626500840"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line">print(<span class="string">'正在导入m1'</span>)</span><br><span class="line"><span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">x = <span class="string">'m1'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line">print(<span class="string">'正在导入m2'</span>)</span><br><span class="line"><span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">y = <span class="string">'m2'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">正在导入m1</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">正在导入m2</span><br><span class="line">    <span class="keyword">import</span> m1</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">'x'</span> <span class="keyword">from</span> <span class="string">'m1'</span></span><br></pre></td></tr></table></figure><blockquote><p>以上代码执行过程</p><ol><li>先运行 <code>run.py</code>，产生 <code>run.py</code> 的名称空间，开始运行 <code>run.py</code> 里的代码。</li><li>运行到 <code>import m1</code> 这行代码时，会产生一个 <code>m1</code> 的名称空间，开始运行 <code>m1.py</code> 里的代码。</li><li>运行到 <code>from m2 import y</code> 会发现需要导入 <code>m2</code>，会产生一个 <code>m2</code> 的名称空间，开始运行 <code>m2.py</code> 里的代码，但是 <code>m1.py</code> 里的代码 <code>还没有完全运行完</code>。</li><li><code>m2.py</code> 里需要 <code>from m1 import x</code> 导入 <code>m1</code> 里的 <code>x</code>，需要导入 <code>m1</code>。</li><li>此时会产生一个问题，<code>m1</code> 已经被导入过了，此时不会再执行 <code>m1</code> 里的代码了，它只会直接引用 <code>m1</code> 的名称空间，直接向这个名称空间寻求 <code>x</code>，然而 <code>m1</code> 的名称空间中并没有 <code>x</code>。</li></ol></blockquote><p><strong>解决方法1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line">print(<span class="string">'正在导入m1'</span>)</span><br><span class="line">x = <span class="string">'m1'</span></span><br><span class="line"><span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line">print(<span class="string">'正在导入m2'</span>)</span><br><span class="line">y = <span class="string">'m2'</span></span><br><span class="line"><span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br></pre></td></tr></table></figure><blockquote><p>解决方法：<br>把名字放在导入模块代码的上面，保证在导入之前先产生名字</p><ol><li>先运行 <code>run.py</code>，产生 <code>run.py</code> 的名称空间，开始运行 <code>run.py</code> 里的代码。</li><li>运行到 <code>import m1</code> 代码，产生一个 <code>m1</code> 的名称空间，开始运行 <code>m1.py</code> 里的代码，把 <code>x=&#39;m1&#39;</code> 放进去</li><li>运行到 <code>from m2 import y</code> 代码，需要导入 <code>m2</code>，产生一个 <code>m2</code> 的名称空间<br>，开始运行 <code>m2.py</code> 里的代码，造一个 <code>y=&#39;m2&#39;</code>，然后运行到 <code>from m1 import x</code> 代码，需要导入 <code>m1</code>，<code>m1</code> 名称空间已经存在，寻求 <code>x</code>，此时寻找到了 <code>x</code></li></ol></blockquote><p><img src="http://pa2bdkuiw.bkt.clouddn.com/1537632295691.png" alt="1537632295691"></p><p><strong>解决方法2（推荐）</strong></p><blockquote><p>写代码尽量避免循环导入<br>如果必须面对这种场景，可以使用第三个模块把共享的模块做统一导入</p></blockquote><p><strong>解决方法3</strong></p><ul><li>示例一</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line">print(<span class="string">'正在导入m1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">    print(y)</span><br><span class="line"></span><br><span class="line">x = <span class="string">'m1'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line">print(<span class="string">'正在导入m2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">y = <span class="string">'m2'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line">m1.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br><span class="line">m2</span><br></pre></td></tr></table></figure><blockquote><p>解决思路<br>定义函数时，只检测语法，不执行代码<br>在哪个函数中使用，就在哪个函数当中去 <code>import</code> 导入<br>运行 <code>run.py</code>，产生 <code>run.py</code> 的名称空间，开始运行 <code>run.py</code> 里的代码。<br>运行到 <code>import m1</code> 代码，产生一个 <code>m1</code> 的名称空间，开始运行 <code>m1.py</code> 里的代码，把 <code>f1</code>、<code>x=&#39;m1&#39;</code> 放进去<br>在 <code>run.py</code>，里执行 <code>m1.f1()</code>，调用 <code>m1</code> 里 <code>f1</code> 方法，导入 <code>m2</code>，产生 <code>m2</code> 的名称空间<br>导入 <code>m2</code> 后，运行 <code>m2.py</code> 的代码，<code>m2</code> 里把 <code>f2</code>、<code>y=&#39;m2&#39;</code> 放进去</p></blockquote><p><img src="http://pa2bdkuiw.bkt.clouddn.com/1537633906337.png" alt="1537633906337"></p><ul><li>示例二</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line">print(<span class="string">'正在导入m1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y, f2</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">x = <span class="string">'m1'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line">print(<span class="string">'正在导入m2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">y = <span class="string">'m2'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line">m1.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br><span class="line">m1</span><br></pre></td></tr></table></figure><h2 id="区分Python文件两种用途方式"><a href="#区分Python文件两种用途方式" class="headerlink" title="区分Python文件两种用途方式"></a>区分Python文件两种用途方式</h2><blockquote><ol><li>直接运行，当做运行文件</li><li>被当做模块导入使用</li></ol><p>需求：<br>在文件运行的时候执行一种代码<br>被当做模块导入的时候运行另一种代码</p></blockquote><blockquote><p>当文件被直接执行时 <code>__name__ == &#39;__main__&#39;</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line">print(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">__main__</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>当文件被导入时 <code>__name__ == &#39;模块名&#39;</code><br>模块的使用者<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">m1</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>模块开发者</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f1()</span><br><span class="line">    f2()</span><br><span class="line">    f3()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">f1</span><br><span class="line">f2</span><br><span class="line">f3</span><br></pre></td></tr></table></figure><blockquote><p>该行代码用于区分 Python 文件的两种不同用途，应该写在文件末尾</p></blockquote><blockquote><p>模块的使用者<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"></span><br><span class="line">m1.f1()    <span class="comment"># 使用哪个模块就调用哪个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">f1</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="模块的搜索路径"><a href="#模块的搜索路径" class="headerlink" title="模块的搜索路径"></a>模块的搜索路径</h2><blockquote><p>模块的查找有限顺序：</p><ol><li>内存中已经加载的模块</li><li>内置模块</li><li><code>sys.path</code> 路径中包含的模块</li></ol></blockquote><h3 id="内存中已经加载的模块"><a href="#内存中已经加载的模块" class="headerlink" title="内存中已经加载的模块"></a>内存中已经加载的模块</h3><p><img src="http://pa2bdkuiw.bkt.clouddn.com/%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84%E9%85%8D%E5%9B%BE1.png" alt="模块的搜索路径配图1"></p><blockquote><p>操作方式：在 20秒内 把 spam.py 文件删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim spam.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f1'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">import</span> spam</span><br><span class="line">spam.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f1</span><br></pre></td></tr></table></figure><blockquote><p>发现 还是能输出 <code>from f1</code>，说明在删除文件之前，内存已经加载到了 <code>spam.py</code></p></blockquote><h3 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;module <span class="string">'time'</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>PS</code>：我们自定义的模块名不应该与系统内置模块重名。</p></blockquote><h3 id="sys-path-路径中包含的模块"><a href="#sys-path-路径中包含的模块" class="headerlink" title="sys.path 路径中包含的模块"></a><code>sys.path</code> 路径中包含的模块</h3><blockquote><p><code>sys.path</code> 的值是以当前执行文件为准</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'E:\\PycharmProjects\\SH_weekend_s1\\day05\\08 模块的使用\\模块的搜索路径'</span>, <span class="string">'E:\\PycharmProjects\\SH_weekend_s1'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\python37.zip'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\DLLs'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\lib'</span>, <span class="string">'D:\\Program Files (x86)\\Python37'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\lib\\site-packages'</span>, <span class="string">'D:\\Program Files (x86)\\JetBrains\\PyCharm 2018.2.3\\helpers\\pycharm_matplotlib_backend'</span>]</span><br></pre></td></tr></table></figure><p><strong>示例</strong><br><img src="http://pa2bdkuiw.bkt.clouddn.com/%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84%E9%85%8D%E5%9B%BE2.png" alt="模块的搜索路径配图2"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim spam.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from spam'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">r'E:\PycharmProjects\SH_weekend_s1\day05\08 模块的使用\模块的搜索路径\dir'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> spam</span><br><span class="line">spam.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> spam</span><br></pre></td></tr></table></figure><blockquote><p>也可以在当前目录寻找 <code>from ... import ...</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dir <span class="keyword">import</span> spam</span><br><span class="line">spam.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'E:\\PycharmProjects\\SH_weekend_s1\\day05\\08 模块的使用\\模块的搜索路径'</span>, <span class="string">'E:\\PycharmProjects\\SH_weekend_s1'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\python37.zip'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\DLLs'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\lib'</span>, <span class="string">'D:\\Program Files (x86)\\Python37'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\lib\\site-packages'</span>, <span class="string">'D:\\Program Files (x86)\\JetBrains\\PyCharm 2018.2.3\\helpers\\pycharm_matplotlib_backend'</span>]</span><br><span class="line"><span class="keyword">from</span> spam</span><br></pre></td></tr></table></figure><p><strong>示例</strong><br><img src="http://pa2bdkuiw.bkt.clouddn.com/%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84%E9%85%8D%E5%9B%BE3.png" alt="模块的搜索路径配图3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dir.dir2 <span class="keyword">import</span> spam</span><br><span class="line">spam.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'E:\\PycharmProjects\\SH_weekend_s1\\day05\\08 模块的使用\\模块的搜索路径'</span>, <span class="string">'E:\\PycharmProjects\\SH_weekend_s1'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\python37.zip'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\DLLs'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\lib'</span>, <span class="string">'D:\\Program Files (x86)\\Python37'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\lib\\site-packages'</span>, <span class="string">'D:\\Program Files (x86)\\JetBrains\\PyCharm 2018.2.3\\helpers\\pycharm_matplotlib_backend'</span>]</span><br><span class="line"><span class="keyword">from</span> spam</span><br></pre></td></tr></table></figure><p><strong>示例</strong><br><img src="http://pa2bdkuiw.bkt.clouddn.com/%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84%E9%85%8D%E5%9B%BE4.png" alt="模块的搜索路径配图4"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line"><span class="keyword">import</span> m2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'m1.f1'</span>)</span><br><span class="line">    m2.f2()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'m2.f2'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">from</span> dir1 <span class="keyword">import</span> m1</span><br><span class="line">m1.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">    <span class="keyword">from</span> dir1 <span class="keyword">import</span> m1</span><br><span class="line">    <span class="keyword">import</span> m2</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">'m2'</span></span><br></pre></td></tr></table></figure><p><strong>示例修改1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line"><span class="keyword">from</span> dir1 <span class="keyword">import</span> m2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'m1.f1'</span>)</span><br><span class="line">    m2.f2()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'m2.f2'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">from</span> dir1 <span class="keyword">import</span> m1</span><br><span class="line">m1.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">m1.f1</span><br><span class="line">m2.f2</span><br></pre></td></tr></table></figure><p><strong>示例修改2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> m2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'m1.f1'</span>)</span><br><span class="line">    m2.f2()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'m2.f2'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">from</span> dir1 <span class="keyword">import</span> m1</span><br><span class="line">m1.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">m1.f1</span><br><span class="line">m2.f2</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 模块的使用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 函数的递归调用</title>
      <link href="/2018/09/20/Python%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8/"/>
      <url>/2018/09/20/Python%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="Python-函数的递归调用"><a href="#Python-函数的递归调用" class="headerlink" title="Python 函数的递归调用"></a>Python 函数的递归调用</h1><a id="more"></a><h2 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from bar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><h2 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h2><blockquote><p>函数的递归调用，就是函数嵌套调用的一种特殊格式<br>函数递归调用，在调用一个函数的过程中又直接或间接地调用了自己<br>本质就是一个重复的过程，递归必须要有一个明确的结束条件，在满足该条件的情况下，会终止递归<br>每一次重复问题的规模都应该有所减少</p></blockquote><p><strong>直接调用</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from bar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line">    foo()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">RecursionError: maximum recursion depth exceeded <span class="keyword">while</span> calling a Python object</span><br></pre></td></tr></table></figure></p><blockquote><p>注：Python 中没有伪递归优化这一说</p></blockquote><p><strong>间接调用</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from bar'</span>)</span><br><span class="line">    foo()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">RecursionError: maximum recursion depth exceeded <span class="keyword">while</span> calling a Python object</span><br></pre></td></tr></table></figure></p><blockquote><p>Python 限制递归调用最大层级是多少？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>, n)</span><br><span class="line">    foo(n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> foo <span class="number">997</span>    <span class="comment"># 这里看到的并不精准</span></span><br><span class="line">RecursionError: maximum recursion depth exceeded <span class="keyword">while</span> calling a Python object</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用 <code>sys.getrecursionlimit()</code> 可以查看到</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.getrecursionlimit())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure><blockquote><p>递归的最大层级这个值是可以修改的，但是没有多大的意义<br><code>sys.setrecursionlimit(10000)</code></p></blockquote><h3 id="递归必须满足两个阶段"><a href="#递归必须满足两个阶段" class="headerlink" title="递归必须满足两个阶段"></a>递归必须满足两个阶段</h3><blockquote><ol><li>回溯：一层一层地递归调用下去</li><li>递推：递归必须要有一个明确的结束条件，在满足该条件的情况下，会终止递归，往回一层一层地结束调用</li></ol></blockquote><p><strong>练习</strong></p><blockquote><p>猜年龄</p><p>第一个人 18 岁<br>第二个人比第一个人大2岁<br>第三个人比第二个人大2岁<br>第四个人比第三个人大2岁<br>第五个人比第四个人大2岁<br>问第五个人的年龄是多少岁？</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age(<span class="number">5</span>) = age(<span class="number">4</span>) + <span class="number">2</span></span><br><span class="line">age(<span class="number">4</span>) = age(<span class="number">3</span>) + <span class="number">2</span></span><br><span class="line">age(<span class="number">3</span>) = age(<span class="number">2</span>) + <span class="number">2</span></span><br><span class="line">age(<span class="number">2</span>) = age(<span class="number">1</span>) + <span class="number">2</span></span><br><span class="line">age(<span class="number">1</span>) = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">age(n) = age(n<span class="number">-1</span>) + <span class="number">2</span>  # n &gt; <span class="number">1</span></span><br><span class="line">age(n) = <span class="number">18</span>            # n = <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">18</span></span><br><span class="line">    <span class="keyword">return</span> age(n<span class="number">-1</span>) + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(age(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">26</span></span><br></pre></td></tr></table></figure><p><img src="http://pa2bdkuiw.bkt.clouddn.com/%E5%9B%9E%E6%BA%AF%E9%80%92%E6%8E%A8.png" alt="回溯递推"></p><blockquote><p>递归是一次重复的过程，每一次重复问题的规模都应该有所减少</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>, [<span class="number">7</span>, [<span class="number">8</span>, [<span class="number">9</span>, ]]]]]]]]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">if</span> type(item) <span class="keyword">is</span> <span class="keyword">not</span> list:</span><br><span class="line">            print(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tell(item)</span><br><span class="line"></span><br><span class="line">tell(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="递归-vs-while循环"><a href="#递归-vs-while循环" class="headerlink" title="递归 vs while循环"></a>递归 vs while循环</h2><blockquote><p>递归只需要把控住结束或进入递归的条件，至于循环次数无需考虑</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>, [<span class="number">7</span>, [<span class="number">8</span>, [<span class="number">9</span>, ]]]]]]]]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">if</span> type(item) <span class="keyword">is</span> list:</span><br><span class="line">            <span class="comment"># item 是列表</span></span><br><span class="line">            <span class="comment"># 再次调用本身的逻辑，传入item</span></span><br><span class="line">            tell(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># item 是单独的元素</span></span><br><span class="line">            print(item)</span><br><span class="line"></span><br><span class="line">tell(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="递归的应用"><a href="#递归的应用" class="headerlink" title="递归的应用"></a>递归的应用</h2><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><blockquote><p>数字列表，数字从小打大排列<br>需求：判断某一个值是否存在于这个列表中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line">find_num = <span class="number">27</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> find_num == num:</span><br><span class="line">        print(<span class="string">'find it'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">find it</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>以上方式效率较低</p></blockquote><blockquote><p>算法：就是高效解决某个问题的方法<br>二分法是算法中的其中之一<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># l1 = [3, 11, 13, 15, 23, 27]</span></span><br><span class="line"><span class="comment"># l2 = [23, 27]</span></span><br><span class="line"><span class="comment"># l3 = [23]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(nums, find_num)</span>:</span></span><br><span class="line">    mid_index = len(nums) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> find_num &gt; nums[mid_index]:</span><br><span class="line">        <span class="comment"># in the right</span></span><br><span class="line">        <span class="comment"># 从一个大列表中取出一个子列表</span></span><br><span class="line">        nums = nums[mid_index+<span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># 重复调用本身的逻辑，传入切分之后的结果</span></span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; nums[mid_index]:</span><br><span class="line">        <span class="comment"># in the left</span></span><br><span class="line">        nums = nums[:mid_index]</span><br><span class="line">        <span class="comment"># 重复调用本身的逻辑，传入切分之后的结果</span></span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'find it'</span>)</span><br><span class="line"></span><br><span class="line">binary_search(nums, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">find it</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(nums, find_num)</span>:</span></span><br><span class="line">    print(nums)    <span class="comment"># 获取查找次数</span></span><br><span class="line">    mid_index = len(nums) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> find_num &gt; nums[mid_index]:</span><br><span class="line">        <span class="comment"># in the right</span></span><br><span class="line">        <span class="comment"># 从一个大列表中取出一个子列表</span></span><br><span class="line">        nums = nums[mid_index+<span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># 重复调用本身的逻辑，传入切分之后的结果</span></span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; nums[mid_index]:</span><br><span class="line">        <span class="comment"># in the left</span></span><br><span class="line">        nums = nums[:mid_index]</span><br><span class="line">        <span class="comment"># 重复调用本身的逻辑，传入切分之后的结果</span></span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'find it'</span>)</span><br><span class="line"></span><br><span class="line">binary_search(nums, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>]</span><br><span class="line">[<span class="number">23</span>, <span class="number">27</span>]</span><br><span class="line">[<span class="number">23</span>]</span><br><span class="line">find it</span><br></pre></td></tr></table></figure><blockquote><p>传入一个不存在的值，会抛超出列表索引超出范围异常</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(nums, find_num)</span>:</span></span><br><span class="line">    print(nums)</span><br><span class="line">    mid_index = len(nums) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> find_num &gt; nums[mid_index]:</span><br><span class="line">        nums = nums[mid_index+<span class="number">1</span>:]</span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; nums[mid_index]:</span><br><span class="line">        nums = nums[:mid_index]</span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'find it'</span>)</span><br><span class="line"></span><br><span class="line">binary_search(nums, <span class="number">94</span>)   <span class="comment"># 传入一个不存在的值，会抛超出列表索引超出范围异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><blockquote><p>改进</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(nums, find_num)</span>:</span></span><br><span class="line">    print(nums)</span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'not exists'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid_index = len(nums) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> find_num &gt; nums[mid_index]:</span><br><span class="line">        nums = nums[mid_index+<span class="number">1</span>:]</span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; nums[mid_index]:</span><br><span class="line">        nums = nums[:mid_index]</span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'find it'</span>)</span><br><span class="line"></span><br><span class="line">binary_search(nums, <span class="number">94</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line">[<span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line">[<span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line">[<span class="number">93</span>]</span><br><span class="line">[]</span><br><span class="line"><span class="keyword">not</span> exists</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 函数的递归调用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 匿名函数</title>
      <link href="/2018/09/18/Python%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
      <url>/2018/09/18/Python%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="Python-匿名函数"><a href="#Python-匿名函数" class="headerlink" title="Python 匿名函数"></a>Python 匿名函数</h1><a id="more"></a><h2 id="有名函数"><a href="#有名函数" class="headerlink" title="有名函数"></a>有名函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f1'</span>)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f1</span><br><span class="line"><span class="keyword">from</span> f1</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">print(func)    <span class="comment"># 通过函数名拿到内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function func at <span class="number">0x000001D493372EA0</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line"><span class="comment"># 通过 函数+() 的方式来调用函数</span></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(func(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>针对这种简单形式的函数，可以用匿名函数简写成一行<br>匿名函数本身自带 return<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="keyword">lambda</span> x, y: x + y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x000001DA1A6A2EA0</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line"><span class="comment"># 以下方式不是正规的匿名函数使用方式</span></span><br><span class="line">res = (<span class="keyword">lambda</span> x, y: x + y)(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line">f = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line">res = f(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><ol><li>不会单独使用，会与其他函数配合使用</li><li>匿名函数在于没有名字，如果没有名字表示用一次就立即回收</li><li>匿名函数的应用场景仅应用于只使用使用一次的场景</li></ol></blockquote><h2 id="匿名函数与其他函数配合使用"><a href="#匿名函数与其他函数配合使用" class="headerlink" title="匿名函数与其他函数配合使用"></a>匿名函数与其他函数配合使用</h2><blockquote><p>配合常用的内置函数：<code>max</code>，<code>min</code>，<code>sorted</code>，<code>map</code>, <code>filter</code></p></blockquote><h3 id="max-函数"><a href="#max-函数" class="headerlink" title="max() 函数"></a>max() 函数</h3><p><strong>获取薪资最高的人名</strong></p><blockquote><p>max 默认比较的是字典的 key<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">salaries = &#123;</span><br><span class="line">    <span class="string">'egon'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'alex'</span>: <span class="number">100000000</span>,</span><br><span class="line">    <span class="string">'wupeiqi'</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'yuanhao'</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line">print(max(salaries))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">yuanhao</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>max() 的结果一定是字典的 key<br>可以更改比较依据<br><code>max(比较对象，key=比较依据)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">salaries = &#123;</span><br><span class="line">    <span class="string">'egon'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'alex'</span>: <span class="number">100000000</span>,</span><br><span class="line">    <span class="string">'wupeiqi'</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'yuanhao'</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(k)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> salaries[k]</span><br><span class="line"></span><br><span class="line">print(max(salaries, key=func))    <span class="comment"># key=指定比较依据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">alex</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>工作原理：<code>max()</code> 拿到 salaries 的 <code>key结果</code>，传给 <code>key=func</code> ，把 <code>func</code> 的返回值当做比较依据</p></blockquote><blockquote><p><code>func</code> 就是一次性的函数，可以用 <code>lambda</code> 替换<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">salaries = &#123;</span><br><span class="line">    <span class="string">'egon'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'alex'</span>: <span class="number">100000000</span>,</span><br><span class="line">    <span class="string">'wupeiqi'</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'yuanhao'</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(max(salaries, key=<span class="keyword">lambda</span> x: salaries[x]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">alex</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>获取薪资最小的人名</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">salaries = &#123;</span><br><span class="line">    <span class="string">'egon'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'alex'</span>: <span class="number">100000000</span>,</span><br><span class="line">    <span class="string">'wupeiqi'</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'yuanhao'</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(min(salaries, key=<span class="keyword">lambda</span> x: salaries[x]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">yuanhao</span><br></pre></td></tr></table></figure><h3 id="sorted-排序"><a href="#sorted-排序" class="headerlink" title="sorted() 排序"></a>sorted() 排序</h3><blockquote><p>默认从小到大排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(sorted([<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>按照薪资排序，从小到大排队</strong></p><blockquote><p>sorted 默认也是比较字典的 key<br>如果不给比较依据的话，就按默认的字典key字符串做比较<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">salaries = &#123;</span><br><span class="line">    <span class="string">'egon'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'alex'</span>: <span class="number">100000000</span>,</span><br><span class="line">    <span class="string">'wupeiqi'</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'yuanhao'</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(sorted(salaries))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'wupeiqi'</span>, <span class="string">'yuanhao'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>所以也要通过所获取的字典key，给予 <code>比较依据</code>，然后再做排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">salaries = &#123;</span><br><span class="line">    <span class="string">'egon'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'alex'</span>: <span class="number">100000000</span>,</span><br><span class="line">    <span class="string">'wupeiqi'</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'yuanhao'</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(sorted(salaries, key=<span class="keyword">lambda</span> x: salaries[x]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'yuanhao'</span>, <span class="string">'egon'</span>, <span class="string">'wupeiqi'</span>, <span class="string">'alex'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line"><span class="comment"># 反序排列</span></span><br><span class="line">print(sorted(salaries, key=<span class="keyword">lambda</span> x: salaries[x], reverse=<span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex'</span>, <span class="string">'wupeiqi'</span>, <span class="string">'egon'</span>, <span class="string">'yuanhao'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="map-函数"><a href="#map-函数" class="headerlink" title="map() 函数"></a>map() 函数</h3><blockquote><p>映射：把一个值映射成一个新的值</p></blockquote><blockquote><p>需求：把 人名 都映射成 人名_PY<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex'</span>, <span class="string">'wupeiqi'</span>, <span class="string">'yuanhao'</span>, <span class="string">'liuqingzheng'</span>]</span><br><span class="line">l = [name + <span class="string">"_PY"</span> <span class="keyword">for</span> name <span class="keyword">in</span> names]</span><br><span class="line">print(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex_PY'</span>, <span class="string">'wupeiqi_PY'</span>, <span class="string">'yuanhao_PY'</span>, <span class="string">'liuqingzheng_PY'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>map(映射规则, 可迭代对象)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex'</span>, <span class="string">'wupeiqi'</span>, <span class="string">'yuanhao'</span>, <span class="string">'liuqingzheng'</span>]</span><br><span class="line">obj = map(<span class="keyword">lambda</span> x:x+<span class="string">"_PY"</span>, names)    <span class="comment"># map 的结果其实就是一个迭代器</span></span><br><span class="line">print(obj)</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;map object at <span class="number">0x00000230B9BDCA90</span>&gt;</span><br><span class="line"></span><br><span class="line">print(list(obj))</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex_PY'</span>, <span class="string">'wupeiqi_PY'</span>, <span class="string">'yuanhao_PY'</span>, <span class="string">'liuqingzheng_PY'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>工作原理：会把可迭代对象作为迭代器传给第一个值，作为结果返回出来</p></blockquote><h3 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter() 函数"></a>filter() 函数</h3><blockquote><p>把 人名_sb 结尾的留下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex_sb'</span>, <span class="string">'wupeiqi_sb'</span>, <span class="string">'egon'</span>, <span class="string">'yuanhao_sb'</span>, <span class="string">'liuqingzheng_sb'</span>]</span><br><span class="line">l = [name <span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> name.endswith(<span class="string">'sb'</span>)]</span><br><span class="line">print(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex_sb'</span>, <span class="string">'wupeiqi_sb'</span>, <span class="string">'yuanhao_sb'</span>, <span class="string">'liuqingzheng_sb'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>filter(过滤规则, 可迭代对象)<br>filter 会得到 names 的迭代器对象obj，然后 next(obj)，将得到的值传给函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex_sb'</span>, <span class="string">'wupeiqi_sb'</span>, <span class="string">'egon'</span>, <span class="string">'yuanhao_sb'</span>, <span class="string">'liuqingzheng_sb'</span>]</span><br><span class="line">res = filter(<span class="keyword">lambda</span> x: x.endswith(<span class="string">'sb'</span>), names)    <span class="comment"># filte 将函数返回值为 True 的那个值留下</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;filter object at <span class="number">0x000001867584C9B0</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line">print(list(res))</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex_sb'</span>, <span class="string">'wupeiqi_sb'</span>, <span class="string">'yuanhao_sb'</span>, <span class="string">'liuqingzheng_sb'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>也可以用 <code>生成器表达式</code> 来做<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex_sb'</span>, <span class="string">'wupeiqi_sb'</span>, <span class="string">'egon'</span>, <span class="string">'yuanhao_sb'</span>, <span class="string">'liuqingzheng_sb'</span>]</span><br><span class="line">l = (name <span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> name.endswith(<span class="string">'sb'</span>))</span><br><span class="line">print(l)</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x00000209162E55C8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line">print(list(l))</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex_sb'</span>, <span class="string">'wupeiqi_sb'</span>, <span class="string">'yuanhao_sb'</span>, <span class="string">'liuqingzheng_sb'</span>]</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 匿名函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 生成器表达式</title>
      <link href="/2018/09/17/Python%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/09/17/Python%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="Python-生成器表达式"><a href="#Python-生成器表达式" class="headerlink" title="Python 生成器表达式"></a>Python 生成器表达式</h1><a id="more"></a><blockquote><p><code>()</code> 小括号用来生成 <code>生成器</code><br>把列表推导式的 <code>[]</code> 换成 <code>()</code> 就是生成器表达式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x000001719E5E3EB8</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>用生成器表达式，可以用来造一个无限个值的数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">g = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>生一筐鸡蛋变成给你一只老母鸡，用的时候就下蛋，这也是生成器的特性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">chicken = (<span class="string">'鸡蛋%s'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line">print(chicken)</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x10143f200</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################################################</span></span><br><span class="line">chicken = (<span class="string">'鸡蛋%s'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(next(chicken))</span><br><span class="line">print(next(chicken))</span><br><span class="line">print(next(chicken))</span><br><span class="line">print(next(chicken))</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">鸡蛋<span class="number">0</span></span><br><span class="line">鸡蛋<span class="number">1</span></span><br><span class="line">鸡蛋<span class="number">2</span></span><br><span class="line">鸡蛋<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################################################</span></span><br><span class="line">chicken = (<span class="string">'鸡蛋%s'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line">print(list(chicken))    <span class="comment"># 因 chicken 可迭代，因而可以转成列表</span></span><br><span class="line">[<span class="string">'鸡蛋0'</span>, <span class="string">'鸡蛋1'</span>, <span class="string">'鸡蛋2'</span>, <span class="string">'鸡蛋3'</span>, <span class="string">'鸡蛋4'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>优点：省内存，一次只产生一个值在内存中</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chicken = (<span class="string">'egg%s'</span> % <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>))</span><br><span class="line">print(next(chicken))</span><br><span class="line">print(next(chicken))</span><br><span class="line">print(next(chicken))</span><br><span class="line">print(next(chicken))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">egg0</span><br><span class="line">egg1</span><br><span class="line">egg2</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p><strong>小练习</strong></p><blockquote><p>求文件 a.txt 中最长的行的长度（长度按字符个数算，需要使用 max 函数）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取文件内每一行的字符长度</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    nums = [len(line) <span class="keyword">for</span> line <span class="keyword">in</span> f]</span><br><span class="line">    print(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">66</span>, <span class="number">54</span>, <span class="number">54</span>, <span class="number">54</span>, <span class="number">54</span>, <span class="number">53</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################################################</span></span><br><span class="line"><span class="comment"># 获取最长那一行的长度</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    nums = [len(line) <span class="keyword">for</span> line <span class="keyword">in</span> f]    <span class="comment"># 这里用列表生成器会有问题，如果文件内容非常多，这个列表会变得非常大，我们可以换成生成器表达式</span></span><br><span class="line">    print(max(nums))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">66</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################################################</span></span><br><span class="line"><span class="comment"># 获取最长那一行的长度</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    nums = (len(line) <span class="keyword">for</span> line <span class="keyword">in</span> f)</span><br><span class="line">    print(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x00000153AFF855C8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################################################</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    nums = (len(line) <span class="keyword">for</span> line <span class="keyword">in</span> f)</span><br><span class="line">    print(max(nums))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">66</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 生成器表达式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 面向过程编程</title>
      <link href="/2018/09/15/Python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/09/15/Python%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Python-面向过程编程"><a href="#Python-面向过程编程" class="headerlink" title="Python 面向过程编程"></a>Python 面向过程编程</h1><a id="more"></a><ol><li>首先强调：面向过程编程绝对不是用函数编程这么简单，面向过程是一种编程思路、思想，而编程思路是不依赖于具体的语言或语法的。言外之意是即使我们不依赖于函数，也可以基于面向过程的思想编写程序</li><li>定义<br>面向过程的核心是过程二字，过程指的是解决问题的步骤，即先干什么再干什么<br>基于面向过程设计程序就好比在设计一条流水线，是一种机械式的思维方式</li><li>优点：复杂的问题流程化，进而简单化</li><li>缺点：可扩展性差，修改流水线的任意一个阶段，都会牵一发而动全身</li><li>应用：扩展性要求不高的场景，典型案例如 Linux 内核，git，httpd</li><li>举例<br>流水线1：用户输入用户名、密码 —&gt; 用户验证—&gt;欢迎界面<br>流水线2：用户输入sql —&gt; sql解析 —&gt; 执行功能</li></ol><p>PS：函数的参数传入，是函数吃进去的食物，而函数 return 的返回值，是函数拉出来的结果，面向过程的思路就是，把程序的执行当做一串首尾相连的功能，该功能可以是函数的形式，然后一个函数吃，拉出的东西给另外一个函数吃，另外一个函数吃了再继续拉给下一个函数吃。。。</p><h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阶段1: 接收用户输入账号与密码,完成合法性校验</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        username = input(<span class="string">'请输入你的用户名: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> username.isalpha():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'用户必须为字母'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        password1 = input(<span class="string">'请输入你的密码: '</span>).strip()</span><br><span class="line">        password2 = input(<span class="string">'请再次输入你的密码: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> password1 == password2:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'两次输入的密码不一致'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> username,password1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阶段2: 将账号密码拼成固定的格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_interface</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    format_str = <span class="string">'%s:%s\n'</span> %(username, password)</span><br><span class="line">    <span class="keyword">return</span> format_str</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阶段3: 将拼好的格式写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_file</span><span class="params">(format_str, filepath)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r'%s'</span> % filepath, <span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(format_str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    user, pwd = talk()</span><br><span class="line">    format_str = register_interface(user, pwd)</span><br><span class="line">    handle_file(format_str, <span class="string">'user.txt'</span>)</span><br><span class="line"></span><br><span class="line">register()</span><br></pre></td></tr></table></figure><p><strong>扩展功能麻烦</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阶段1: 接收用户输入账号与密码，完成合法性校验</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        username = input(<span class="string">'请输入你的用户名: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> username.isalpha():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'用户必须为字母'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        password1 = input(<span class="string">'请输入你的密码: '</span>).strip()</span><br><span class="line">        password2 = input(<span class="string">'请再次输入你的密码: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> password1 == password2:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'两次输入的密码不一致'</span>)</span><br><span class="line"></span><br><span class="line">    role_dic = &#123;</span><br><span class="line">        <span class="string">'1'</span>:<span class="string">'user'</span>,</span><br><span class="line">        <span class="string">'2'</span>:<span class="string">'admin'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> role_dic:</span><br><span class="line">            print(k,role_dic[k])</span><br><span class="line"></span><br><span class="line">        choice = input(<span class="string">'请输入您的身份&gt;&gt;: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">not</span> <span class="keyword">in</span> role_dic:</span><br><span class="line">            print(<span class="string">'输入的身份不存在'</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        role = role_dic[choice]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> username, password1, role</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阶段2: 将账号密码拼成固定的格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_interface</span><span class="params">(username, password, role)</span>:</span></span><br><span class="line">    format_str = <span class="string">'%s:%s:%s\n'</span> % (username, password, role)</span><br><span class="line">    <span class="keyword">return</span> format_str</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阶段3: 将拼好的格式写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_file</span><span class="params">(format_str, filepath)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r'%s'</span> % filepath, <span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(format_str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    user, pwd, role = talk()</span><br><span class="line">    format_str = register_interface(user, pwd, role)</span><br><span class="line">    handle_file(format_str, <span class="string">'user.txt'</span>)</span><br><span class="line"></span><br><span class="line">register()</span><br></pre></td></tr></table></figure><blockquote><p>PS：talk 内对 用户名 \ 密码 \ 角色 的合法性校验也可以摘出来做成单独的功能，但本例就写到一个函数内了，力求用更少的逻辑来为大家说明过程式编程的思路</p></blockquote><h2 id="认证功能"><a href="#认证功能" class="headerlink" title="认证功能"></a>认证功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interactive</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""接收用户输入的用户名、密码"""</span></span><br><span class="line">    uname = input(<span class="string">'username: '</span>).strip()</span><br><span class="line">    pwd = input(<span class="string">'password: '</span>).strip()</span><br><span class="line">    <span class="keyword">return</span> uname, group, pwd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(uname, group, pwd)</span>:</span></span><br><span class="line">    <span class="string">"""认证用户名与密码是否正确"""</span></span><br><span class="line">    <span class="keyword">if</span> uname == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>, uname</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>, uname</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(res)</span>:</span></span><br><span class="line">    <span class="string">"""如果认证成功，则打印欢迎界面"""</span></span><br><span class="line">    <span class="keyword">if</span> res[<span class="number">0</span>]:</span><br><span class="line">        print(<span class="string">'%s 登录成功'</span> % res[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'%s 登录失败'</span> % res[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">uname, pwd = interactive()</span><br><span class="line">res = auth(uname, pwd)</span><br><span class="line">index(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">username: egon</span><br><span class="line">password: <span class="number">123</span></span><br><span class="line">egon 登录成功</span><br></pre></td></tr></table></figure><p><strong>扩展功能麻烦</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interactive</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""接收用户输入的用户名、密码"""</span></span><br><span class="line">    uname = input(<span class="string">'username: '</span>).strip()</span><br><span class="line">    group = input(<span class="string">'group: '</span>).strip()</span><br><span class="line">    pwd = input(<span class="string">'password: '</span>).strip()</span><br><span class="line">    <span class="keyword">return</span> uname, group, pwd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(uname, group, pwd)</span>:</span></span><br><span class="line">    <span class="string">"""认证用户名与密码是否正确"""</span></span><br><span class="line">    <span class="keyword">if</span> uname == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span> <span class="keyword">and</span> group == <span class="string">'group1'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>, uname, group</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>, uname, group</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(res)</span>:</span></span><br><span class="line">    <span class="string">"""如果认证成功，则打印欢迎界面"""</span></span><br><span class="line">    <span class="keyword">if</span> res[<span class="number">0</span>]:</span><br><span class="line">        print(<span class="string">'部门：%s 员工：%s 登录成功'</span> % (res[<span class="number">2</span>], res[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'部门：%s 员工：%s 登录失败'</span> % (res[<span class="number">2</span>], res[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">uname, group, pwd = interactive()</span><br><span class="line">res = auth(uname, group, pwd)</span><br><span class="line">index(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">username: egon</span><br><span class="line">group: group1</span><br><span class="line">password: <span class="number">123</span></span><br><span class="line">部门：group1 员工：egon 登录成功</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 面向过程编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 生成器</title>
      <link href="/2018/09/12/Python%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2018/09/12/Python%E7%94%9F%E6%88%90%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="Python-生成器"><a href="#Python-生成器" class="headerlink" title="Python 生成器"></a>Python 生成器</h1><a id="more"></a><h2 id="什么是生成器？"><a href="#什么是生成器？" class="headerlink" title="什么是生成器？"></a>什么是生成器？</h2><blockquote><p>在函数体内凡是有 yield 关键字，再调用函数就不会执行函数体代码，得到的返回值就是一个生成器对象。</p></blockquote><h2 id="为什么要用生成器？"><a href="#为什么要用生成器？" class="headerlink" title="为什么要用生成器？"></a>为什么要用生成器？</h2><blockquote><p>为了掌握一种自定义迭代器的方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'first'</span>)</span><br><span class="line">    print(<span class="string">'second'</span>)</span><br><span class="line">    print(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">first</span><br><span class="line">second</span><br><span class="line">third</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在函数体内凡是有 <code>yield</code> 关键字，再调用函数就不会执行函数体代码，得到的返回值是一个生成器对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'first'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">'second'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    print(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line">g = func()</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object func at <span class="number">0x000002C5C3A05EB8</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>用 <code>yield</code> 的目的就是为了使用自定义迭代器<br>为什么要自定义迭代器？<br>优点：更加节省内存，可以生成一个无限大的迭代器</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'first'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">'second'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    print(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line">g = func()</span><br><span class="line">next(g)    <span class="comment"># 等于 g.__next__()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">first</span><br></pre></td></tr></table></figure><blockquote><p><code>next(g)</code> 会去执行一次，才会去执行 g 所对应的函数体内的代码运行<br>过程：会触发生成器 <code>g</code> 所对应函数的执行，直到遇到 <code>yield</code> 才停止，然后把 <code>yield</code> 后的返回值当做本次 <code>next</code> 操作的结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'first'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>    <span class="comment"># 暂停</span></span><br><span class="line">    print(<span class="string">'second'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>    <span class="comment"># 暂停</span></span><br><span class="line">    print(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line">g = func()</span><br><span class="line">res1 = next(g)    <span class="comment"># g.__next__()</span></span><br><span class="line">print(res1)</span><br><span class="line"></span><br><span class="line">res2 = next(g)    <span class="comment"># g.__next__()</span></span><br><span class="line">print(res2)</span><br><span class="line"></span><br><span class="line">res3 = next(g)    <span class="comment"># g.__next__()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">first</span><br><span class="line"><span class="number">1</span></span><br><span class="line">second</span><br><span class="line"><span class="number">2</span></span><br><span class="line">third</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    res3 = next(g)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'first'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>    <span class="comment"># 暂停</span></span><br><span class="line">    print(<span class="string">'second'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>    <span class="comment"># 暂停</span></span><br><span class="line">    print(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># g = func()</span></span><br><span class="line"><span class="comment"># for item in g:</span></span><br><span class="line"><span class="comment">#    print(item)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> func():</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">first</span><br><span class="line"><span class="number">1</span></span><br><span class="line">second</span><br><span class="line"><span class="number">2</span></span><br><span class="line">third</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><blockquote><p>模拟 <code>range()</code> 函数功能<br>自定义一个 <code>range()</code> 函数<br><code>range(1, 100, 2)</code></p></blockquote><blockquote><p>Python2 的做法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        res.append(start)</span><br><span class="line">        start += step</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">res = my_range(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">33</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">45</span>, <span class="number">47</span>, <span class="number">49</span>, <span class="number">51</span>, <span class="number">53</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">63</span>, <span class="number">65</span>, <span class="number">67</span>, <span class="number">69</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">79</span>, <span class="number">81</span>, <span class="number">83</span>, <span class="number">85</span>, <span class="number">87</span>, <span class="number">89</span>, <span class="number">91</span>, <span class="number">93</span>, <span class="number">95</span>, <span class="number">97</span>, <span class="number">99</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Python3 的做法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line"></span><br><span class="line">res = my_range(<span class="number">1</span>, <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object my_range at <span class="number">0x00000294DBE75EB8</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>只要函数体内出现 <code>yield</code> 再去调函数，就不会运行函数体代码<br>再调用函数会得到一个返回值，这个返回值就是我们所需要的生成器对象（迭代器对象）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'开始运行'</span>)</span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line">    print(<span class="string">'结束运行'</span>)</span><br><span class="line"></span><br><span class="line">obj = my_range(<span class="number">1</span>, <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">print(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object my_range at <span class="number">0x00000294DBE75EB8</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'开始运行'</span>)</span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line">    print(<span class="string">'结束运行'</span>)</span><br><span class="line"></span><br><span class="line">obj = my_range(<span class="number">1</span>, <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">res1 = next(obj)</span><br><span class="line">print(res1)</span><br><span class="line"></span><br><span class="line">res2 = next(obj)</span><br><span class="line">print(res2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">开始运行</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'开始运行'</span>)</span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line">    print(<span class="string">'结束运行'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">开始运行</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">结束运行</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p><code>yield</code> 提供了一种自定义迭代器的方式。<br>与 <code>return</code> 对比，都能返回值，都能返回多个值，都没有类型限制。<br><code>return</code> 只能返回一次值，<code>yield</code> 能暂停住函数，把函数体暂停在某一个位置，可以返回多次值。<code>yield</code> 可以帮我们保存函数的执行状态。</p></blockquote><h2 id="yield-表达式形式应用"><a href="#yield-表达式形式应用" class="headerlink" title="yield 表达式形式应用"></a>yield 表达式形式应用</h2><p><strong>示例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span></span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object dog at <span class="number">0x000001A607255F68</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span></span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">next(g)    <span class="comment"># 让来福准备好，即让生成器对象先暂停到一个位置，准备接收</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">来福 准备开吃</span><br></pre></td></tr></table></figure><p><strong>示例3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span>    <span class="comment"># 暂停 food = yield = None</span></span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">next(g)    <span class="comment"># 让来福准备好，即让生成器对象先暂停到一个位置，准备接收</span></span><br><span class="line">next(g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">来福 准备开吃</span><br><span class="line">来福 吃了 <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p><strong>示例4</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span>    <span class="comment"># 暂停 food = yield = '骨头'</span></span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">next(g)    <span class="comment"># 让来福准备好，即让生成器对象先暂停到一个位置，准备接收</span></span><br><span class="line">g.send(<span class="string">'骨头'</span>)</span><br><span class="line">g.send(<span class="string">'肉'</span>)</span><br><span class="line">g.send(<span class="string">'包子'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">来福 准备开吃</span><br><span class="line">来福 吃了 骨头</span><br><span class="line">来福 吃了 肉</span><br><span class="line">来福 吃了 包子</span><br></pre></td></tr></table></figure><blockquote><p>上面方式是只调用了一次函数</p></blockquote><blockquote><p>下面方式是每次都要调用一次函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(food)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 吃了 %s'</span> % (food))</span><br><span class="line"></span><br><span class="line">dog(<span class="string">'来福1'</span>)</span><br><span class="line">dog(<span class="string">'来福2'</span>)</span><br><span class="line">dog(<span class="string">'来福3'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>两者的区别<br>执行函数体代码，会产生一个内存空间<br>每调用一次函数，就要申请一次内存空间</p></blockquote><p><strong>示例5</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span> <span class="number">123123</span>   <span class="comment"># 暂停 food = yield = None</span></span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">res1 = next(g)</span><br><span class="line">print(res1)</span><br><span class="line"></span><br><span class="line">res2 = g.send(<span class="string">'骨头'</span>)    <span class="comment"># food = yield 123123 &lt;== 暂停 food = yield = '骨头'</span></span><br><span class="line">print(res2)</span><br><span class="line"></span><br><span class="line">res3 = g.send(<span class="string">'骨头1'</span>)    <span class="comment"># food = yield 123123 &lt;== 暂停 food = yield = '骨头1'</span></span><br><span class="line">print(res3)</span><br><span class="line"></span><br><span class="line">res4 = next(g)    <span class="comment"># food = yield 123123 &lt;== 暂停 food = yield = None</span></span><br><span class="line">print(res4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">来福 准备开吃</span><br><span class="line"><span class="number">123123</span></span><br><span class="line">来福 吃了 骨头</span><br><span class="line"><span class="number">123123</span></span><br><span class="line">来福 吃了 骨头<span class="number">1</span></span><br><span class="line"><span class="number">123123</span></span><br><span class="line">来福 吃了 <span class="keyword">None</span></span><br><span class="line"><span class="number">123123</span></span><br></pre></td></tr></table></figure></p><p><strong>示例7</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    food_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span> food_list</span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line">        food_list.append(food)</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">res1 = next(g)</span><br><span class="line">print(res1)</span><br><span class="line"></span><br><span class="line">res2 = g.send(<span class="string">'骨头'</span>)</span><br><span class="line">print(res2)</span><br><span class="line"></span><br><span class="line">res3 = g.send(<span class="string">'骨头1'</span>)</span><br><span class="line">print(res3)</span><br><span class="line"></span><br><span class="line">res4 = g.send(<span class="string">'骨头2'</span>)</span><br><span class="line">print(res4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">来福 准备开吃</span><br><span class="line">[]</span><br><span class="line">来福 吃了 骨头</span><br><span class="line">[<span class="string">'骨头'</span>]</span><br><span class="line">来福 吃了 骨头<span class="number">1</span></span><br><span class="line">[<span class="string">'骨头'</span>, <span class="string">'骨头1'</span>]</span><br><span class="line">来福 吃了 骨头<span class="number">2</span></span><br><span class="line">[<span class="string">'骨头'</span>, <span class="string">'骨头1'</span>, <span class="string">'骨头2'</span>]</span><br></pre></td></tr></table></figure><h2 id="不能-send-一个不为-None-的值，-给一个刚刚开始的-生成器"><a href="#不能-send-一个不为-None-的值，-给一个刚刚开始的-生成器" class="headerlink" title="不能 send 一个不为 None 的值， 给一个刚刚开始的 生成器"></a>不能 send 一个不为 None 的值， 给一个刚刚开始的 生成器</h2><blockquote><p><code>TypeError: can&#39;t send non-None value to a just-started generator</code><br>不能 <code>send</code> 一个不为 None 的值， 给一个刚刚开始的 <code>生成器</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    food_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span> food_list</span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % name)</span><br><span class="line">        food_list.append(food)</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">g.send(<span class="string">'包子'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    g.send(<span class="string">'包子'</span>)</span><br><span class="line">TypeError: can<span class="string">'t send non-None value to a just-started generator</span></span><br></pre></td></tr></table></figure><blockquote><p><code>g.send(None)</code> 等同于 <code>next(g)</code><br>强调：对于表达式形式 yield 的生成器，在使用前必须先用 <code>next(g)</code> 或 <code>g.send(None)</code> 初始化一次<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    food_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span> food_list</span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line">        food_list.append(food)</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">next(g)</span><br><span class="line"><span class="comment"># g.send(None)</span></span><br><span class="line">g.send(<span class="string">'包子'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">来福 准备开吃</span><br><span class="line">来福 吃了 包子</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><blockquote><p>编写装饰器，实现初始化协程函数的功能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        g = func(*args, **kwargs)</span><br><span class="line">        next(g)</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eater</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开始吃饭啦'</span> % name)</span><br><span class="line">    food_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span> food_list</span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line">        food_list.append(food)</span><br><span class="line"></span><br><span class="line">g = eater(<span class="string">'张三'</span>)</span><br><span class="line">g.send(<span class="string">'蒸羊羔'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">张三 准备开始吃饭啦</span><br><span class="line">张三 吃了 蒸羊羔</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现功能：<code>grep  -rl  &#39;python&#39;  /etc</code><br>注意：<code>target.send(...)</code> 在拿到 target 的返回值后才算执行结束</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        g=func(*args,**kwargs)</span><br><span class="line">        next(g)</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(target)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        filepath=<span class="keyword">yield</span></span><br><span class="line">        g=os.walk(filepath)</span><br><span class="line">        <span class="keyword">for</span> dirname,_,files <span class="keyword">in</span> g:</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                abs_path=<span class="string">r'%s\%s'</span> %(dirname,file)</span><br><span class="line">                target.send(abs_path)</span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">opener</span><span class="params">(target)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        abs_path=<span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">with</span> open(abs_path,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            target.send((f,abs_path))</span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cat</span><span class="params">(target)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        f,abs_path=<span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            res=target.send((line,abs_path))</span><br><span class="line">            <span class="keyword">if</span> res:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grep</span><span class="params">(pattern,target)</span>:</span></span><br><span class="line">    tag=<span class="keyword">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        line,abs_path=<span class="keyword">yield</span> tag</span><br><span class="line">        tag=<span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> pattern.encode(<span class="string">'utf-8'</span>) <span class="keyword">in</span> line:</span><br><span class="line">            target.send(abs_path)</span><br><span class="line">            tag=<span class="keyword">True</span></span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        abs_path=<span class="keyword">yield</span></span><br><span class="line">        print(abs_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g=search(opener(cat(grep(<span class="string">'你好'</span>,printer()))))</span><br><span class="line"><span class="comment"># g.send(r'E:\CMS\aaa\db')</span></span><br><span class="line">g=search(opener(cat(grep(<span class="string">'python'</span>,printer()))))</span><br><span class="line">g.send(<span class="string">r'E:\CMS\aaa\db'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 生成器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Prometheus Operator</title>
      <link href="/2018/09/10/Prometheus-Operator/"/>
      <url>/2018/09/10/Prometheus-Operator/</url>
      <content type="html"><![CDATA[<h1 id="Prometheus-Operator"><a href="#Prometheus-Operator" class="headerlink" title="Prometheus Operator"></a>Prometheus Operator</h1><a id="more"></a><h2 id="Prometheus介绍"><a href="#Prometheus介绍" class="headerlink" title="Prometheus介绍"></a>Prometheus介绍</h2><p>Prometheus是继Kubernetes之后CNCF基金会的第二个项目，最早也是孵化于Google内部的Brogmon监控系统，后来由前Google工程师在SoundCloud开源，现在已经成为云原生生态的标准监控系统。</p><p>Prometheus是一个开源的完整监控解决方案，涵盖数据采集、查询、告警、展示整个监控流程，下图是Prometheus的架构图：<br><a href="http://pacnmwckn.bkt.clouddn.com/prometheus1.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/prometheus1.png" alt="prometheus"></a></p><p><strong>Prometheus Server</strong><br>Prometheus server是整个方案的核心组件，负责监控数据的获取、存储和查询，它本身就是一个时序数据库，将采集到的监控数据按照时间序列的方式存储在本地，Prometheus Server对外提供了自定义的PromQL语言，实现对数据的查询以及分析。</p><p>Prometheus server可以通过静态配置监控目标，也可以通过服务发现的方式动态监控目标，Prometheus server采用pull的方式到target暴露出的对应http接口获取监控数据。</p><p><strong>Exporters</strong><br>Exporters将数据采集的target通过http的形式暴露给Prometheus server，Prometheus server通过访问该exporter提供的endpoints端点，获取到需要采集的监控数据。</p><p>Exporters分为两类：</p><ol><li>直接采集：这类的exporters内置在了相应的应用中，能够直接提供target端点，比如etcd、kubernetes组件，都直接内置了用于向Prometheus暴露监控数据的端点。</li><li>间接采集：原有的监控目标不支持prometheus，需要通过prometheus提供的Client Library编写该监控目标的监控采集程序，比如redis、tomcat、mysql等应用，需要有外置的exporters先采集应用的监控项，再通过exporters的http接口把metrics暴露给prometheus server</li></ol><p><strong>PushGateway</strong><br>因为prometheus数据采集采用pull模式，需要prometheus server能直接访问到exporters，当网络环境无法满足时，需要通过PushGateway中转，内部网络的监控数据主动pushl到Gateway当中，而Prometheus Server则可以采用同样Pull的方式从PushGateway中获取到监控数据。</p><p><strong>AlertManager</strong><br>在prometheus server的配置文件中可以配置相应的告警规则，一旦达到告警规则，就会触发AlertManager，至于之后的操作由AlertManager自定义，可以是邮箱、微信、钉钉或webhook等。</p><p>promethus的告警被分成两个部分：</p><ol><li>通过在Prometheus中定义告警触发条件规则，并向Alertmanager发送告警信息</li><li>Alertmanager作为一个独立的组件，负责接收并处理来自Prometheus Server(也可以是其它的客户端程序)的告警信息</li></ol><p>在Prometheus全局配置文件中<code>prometheus.yml</code>通过<code>rule_files</code>指定一组告警规则文件的访问路径。Prometheus启动后会自动扫描这些路径下规则文件中定义的内容，并且根据这些规则计算是否向外部发送通知</p><p>在<code>prometheus.yml</code>中添加监控告警文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">rule_files:</span></span><br><span class="line">  - <span class="meta-keyword">/etc/</span>prometheus<span class="meta-keyword">/rules/</span>*.rules</span><br></pre></td></tr></table></figure><p>在目录<code>/etc/prometheus/rules/</code>下创建告警文件<code>hoststats-alert.rules</code>，重启promethus后这个告警文件就能被promethus读取。</p><p>在<code>promethus.yml</code>中添加关联alertmanager配置：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">alerting</span>:</span><br><span class="line">  <span class="attribute">alertmanagers</span>:</span><br><span class="line">    - <span class="attribute">static_configs</span>:</span><br><span class="line">        <span class="attribute">targets</span>: [<span class="string">'localhost:9093'</span>]</span><br></pre></td></tr></table></figure><p>成功后就可以在alertmanager中查看promethus中触发的告警，之后的操作可以由alertmanager自定义</p><p>alertmanager是独立的服务，配置文件默认在<code>/etc/prometheus/alertmanager.yml</code>，配置文件中目前只写入基础配置：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">route:</span></span><br><span class="line"><span class="symbol">  receiver:</span> <span class="string">'default-receiver'</span></span><br><span class="line"><span class="string">receivers:</span></span><br><span class="line">  - <span class="string">name:</span> <span class="keyword">default</span>-receiver</span><br></pre></td></tr></table></figure><ol><li>route：所有的告警信息都会从配置中的顶级路由(route)进入路由树，根据路由规则将告警信息发送给相应的接收器</li><li>receivers：告警信息会根据路由发送给对应receivers，接收器可以关联邮件，Slack以及其它方式接收告警信息</li></ol><hr><h2 id="Prometheus-Operator-1"><a href="#Prometheus-Operator-1" class="headerlink" title="Prometheus Operator"></a>Prometheus Operator</h2><p>对于云原生基础的Kubernetes，Prometheus对其有着代码级别的支持，Kubernetes中的组件原生支持Prometheus的metrics路径，而且能够通过服务发现的形式自动监控集群。在Kubernetes中部署Prometheus可以通过operator的框架，下图是prometheus-operator的架构：<br><a href="http://pacnmwckn.bkt.clouddn.com/prometheus-operator1.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/prometheus-operator1.png" alt="prometheus-operator"></a></p><p>其中operator是其核心，作为一个控制器，operator首先会创建Prometheus、ServiceMonitor、AlertManager三个CRD资源对象，并且监控并维持这三种资源对象的状态。</p><p>创建的Prometheus资源对象就是作为Prometheus server，ServiceMonitor就是exporters的抽象，通过ServiceMonitor，Prometheus server能够pull到对应target的监控metrics。</p><p>在prometheus的yaml文件中会指定需要采集的ServiceMonitor：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">serviceMonitorSelector</span>:</span><br><span class="line">  <span class="selector-tag">matchExpressions</span>:</span><br><span class="line">  <span class="selector-tag">-</span> &#123;<span class="attribute">key</span>: k8s-app, operator: Exists&#125;</span><br></pre></td></tr></table></figure><p>只有在ServiceMonitor的yaml文件中匹配上了<code>k8s-app</code>的ServiceMonitor才能被Prometheus server采集：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-controller-manager</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-controller-manager</span>    <span class="comment">##Prometheus中的ServiceMonitor选择器</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  jobLabel:</span> <span class="string">k8s-app</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="string">http-metrics</span>    <span class="comment">##对应service的端口名</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">30</span><span class="string">s</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      k8s-app:</span> <span class="string">kube-controller-manager</span>    <span class="comment">##选择对应label的service</span></span><br><span class="line"><span class="attr">  namespaceSelector:</span></span><br><span class="line"><span class="attr">    matchNames:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">kube-system</span>     <span class="comment">##选择对应namespace</span></span><br></pre></td></tr></table></figure><p>也就是Prometheus server选取对应的ServiceMonitor进行监控，而ServiceMonitor会对应到相应的service，service会对应到endpoints，Prometheus server通过选择ServiceMonitor就能访问到最终的监控目标。</p><hr><h2 id="在Kubernetes中部署Prometheus-Operator"><a href="#在Kubernetes中部署Prometheus-Operator" class="headerlink" title="在Kubernetes中部署Prometheus Operator"></a>在Kubernetes中部署Prometheus Operator</h2><p>因为这是部署在非原生的k8s集群，所以需要做一些额外操作才能监控整个集群</p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://codeload.github.com/coreos/prometheus-operator/tar.gz/v0.16.0 -O prometheus-operator-0.16.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf prometheus-operator-0.16.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> prometheus-operator-0.16.0/contrib/kube-prometheus</span></span><br></pre></td></tr></table></figure><p>创建单独的namespace：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create ns monitoring</span></span><br></pre></td></tr></table></figure><h3 id="安装-Prometheus-Operator"><a href="#安装-Prometheus-Operator" class="headerlink" title="安装 Prometheus Operator"></a>安装 Prometheus Operator</h3><p>删除RBAC相关配置：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/prometheus-<span class="keyword">operator</span></span><br><span class="line">manifests/prometheus-<span class="keyword">operator</span></span><br><span class="line">├── prometheus-<span class="keyword">operator</span>-cluster-role-binding.yaml</span><br><span class="line">├── prometheus-<span class="keyword">operator</span>-cluster-role.yaml</span><br><span class="line">├── prometheus-<span class="keyword">operator</span>-service-account.yaml</span><br><span class="line">├── prometheus-<span class="keyword">operator</span>-service.yaml</span><br><span class="line">└── prometheus-<span class="keyword">operator</span>.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">5</span> files</span><br><span class="line">$ rm -rf manifests/prometheus-<span class="keyword">operator</span>/prometheus-<span class="keyword">operator</span>-cluster-role*</span><br><span class="line">$ rm -rf manifests/prometheus-<span class="keyword">operator</span>/prometheus-<span class="keyword">operator</span>-service-account.yaml</span><br></pre></td></tr></table></figure><p>删除 prometheus-operator.yaml 中的 serviceAccountName: prometheus-operator：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> extensions/v1beta1</span><br><span class="line"><span class="symbol">kind:</span> Deployment</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line">...</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line"><span class="symbol">      containers:</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="meta"># serviceAccountName: prometheus-operator # 将这一行删除</span></span><br></pre></td></tr></table></figure><p>部署Prometheus Operator</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/prometheus-operator/</span><br><span class="line">manifests/prometheus-operator</span><br><span class="line">├── prometheus-operator-service.yaml</span><br><span class="line">└── prometheus-operator.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">2</span> files</span><br><span class="line">$ kubectl apply -f manifests/prometheus-operator/ -n monitoring</span><br><span class="line">prometheus-operator<span class="number">-599487016</span><span class="number">-39</span>w9m   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>d</span><br></pre></td></tr></table></figure><p>部署完成后，operator会自动创建三个CRD：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get crd</span><br><span class="line">NAME                                    KIND</span><br><span class="line">alertmanagers<span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span>     CustomResourceDefinition<span class="selector-class">.v1beta1</span><span class="selector-class">.apiextensions</span><span class="selector-class">.k8s</span><span class="selector-class">.io</span></span><br><span class="line">prometheuses<span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span>      CustomResourceDefinition<span class="selector-class">.v1beta1</span><span class="selector-class">.apiextensions</span><span class="selector-class">.k8s</span><span class="selector-class">.io</span></span><br><span class="line">servicemonitors<span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span>   CustomResourceDefinition<span class="selector-class">.v1beta1</span><span class="selector-class">.apiextensions</span><span class="selector-class">.k8s</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure><h3 id="安装Node-Exporter"><a href="#安装Node-Exporter" class="headerlink" title="安装Node Exporter"></a>安装Node Exporter</h3><p>Prometheus监控主机需要Node Exporter提供相应的target<br>删除与 RBAC 相关的 yaml 文件：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/<span class="keyword">node</span><span class="title">-exporter</span></span><br><span class="line">manifests/<span class="keyword">node</span><span class="title">-exporter</span></span><br><span class="line">├── <span class="keyword">node</span><span class="title">-exporter-cluster-role-binding</span>.yaml</span><br><span class="line">├── <span class="keyword">node</span><span class="title">-exporter-cluster-role</span>.yaml</span><br><span class="line">├── <span class="keyword">node</span><span class="title">-exporter-daemonset</span>.yaml</span><br><span class="line">├── <span class="keyword">node</span><span class="title">-exporter-service-account</span>.yaml</span><br><span class="line">└── <span class="keyword">node</span><span class="title">-exporter-service</span>.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">5</span> files</span><br><span class="line">$ rm -rf manifests/<span class="keyword">node</span><span class="title">-exporter</span>/<span class="keyword">node</span><span class="title">-exporter-cluster-role</span>*</span><br><span class="line">$ rm -rf manifests/<span class="keyword">node</span><span class="title">-exporter</span>/<span class="keyword">node</span><span class="title">-exporter-service-account</span>.yaml</span><br></pre></td></tr></table></figure><p>删除<code>node-exporter-daemonset.yaml</code>中的<code>serviceAccountName: node-exporter</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> extensions/v1beta1</span><br><span class="line"><span class="symbol">kind:</span> DaemonSet</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line">...</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line">  ...</span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line">  <span class="meta"># serviceAccountName: node-exporter # 将这一行删除</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>部署 node-exporter</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/<span class="keyword">node</span><span class="title">-exporter</span></span><br><span class="line">manifests/<span class="keyword">node</span><span class="title">-exporter</span></span><br><span class="line">├── <span class="keyword">node</span><span class="title">-exporter-daemonset</span>.yaml</span><br><span class="line">└── <span class="keyword">node</span><span class="title">-exporter-service</span>.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">2</span> files</span><br><span class="line">$ kubectl apply -f manifests/<span class="keyword">node</span><span class="title">-exporter</span> -n monitoring</span><br><span class="line">$ kubectl -n monitoring get pods -l <span class="attr">app=</span><span class="keyword">node</span><span class="title">-exporter</span></span><br><span class="line">NAME                  READY     STATUS    RESTARTS   AGE</span><br><span class="line"><span class="keyword">node</span><span class="title">-exporter-3mnvn</span>   <span class="number">2</span>/<span class="number">2</span>       Running   <span class="number">0</span>          <span class="number">1</span>d</span><br><span class="line"><span class="keyword">node</span><span class="title">-exporter-lwbjm</span>   <span class="number">2</span>/<span class="number">2</span>       Running   <span class="number">0</span>          <span class="number">1</span>d</span><br><span class="line"><span class="keyword">node</span><span class="title">-exporter-p2bw5</span>   <span class="number">2</span>/<span class="number">2</span>       Running   <span class="number">0</span>          <span class="number">1</span>d</span><br></pre></td></tr></table></figure><h3 id="安装-Kube-state-metrics"><a href="#安装-Kube-state-metrics" class="headerlink" title="安装 Kube-state-metrics"></a>安装 Kube-state-metrics</h3><p>删除与 RBAC 相关的 yaml 文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/kube-state-metrics</span><br><span class="line">manifests/kube-state-metrics</span><br><span class="line">├── kube-state-metrics-cluster-role-binding.yaml</span><br><span class="line">├── kube-state-metrics-cluster-role.yaml</span><br><span class="line">├── kube-state-metrics-deployment.yaml</span><br><span class="line">├── kube-state-metrics-role-binding.yaml</span><br><span class="line">├── kube-state-metrics-role.yaml</span><br><span class="line">├── kube-state-metrics-service-account.yaml</span><br><span class="line">└── kube-state-metrics-service.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">7</span> files</span><br><span class="line">$ rm -rf manifests/kube-state-metrics<span class="comment">/*role*</span></span><br><span class="line"><span class="comment">$ rm -rf manifests/kube-state-metrics/kube-state-metrics-service-account.yaml</span></span><br></pre></td></tr></table></figure><p>删除<code>kube-state-metrics-deployment.yaml</code>中的<code>serviceAccountName: kube-state-metrics</code>。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> extensions/v1beta1</span><br><span class="line"><span class="symbol">kind:</span> Deployment</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line">...</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line">  ...</span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line">  <span class="meta"># serviceAccountName: kube-state-metrics # 将这一行删除</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>部署 kube-state-metrics：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/kube-<span class="section">state</span>-metrics</span><br><span class="line">manifests/kube-<span class="section">state</span>-metrics</span><br><span class="line">├── kube-<span class="section">state</span>-metrics-deployment.yaml</span><br><span class="line">└── kube-<span class="section">state</span>-metrics-service.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">2</span> files</span><br><span class="line">$ kubectl apply -f manifests/kube-<span class="section">state</span>-metrics -n monitoring</span><br><span class="line">$ kubectl -n monitoring get pods -l app=kube-<span class="section">state</span>-metrics</span><br><span class="line">NAME                                  READY     STATUS    RESTARTS   AGE</span><br><span class="line">kube-<span class="section">state</span>-metrics<span class="number">-3424261376</span>-hcvd5   <span class="number">4</span>/<span class="number">4</span>       Running   <span class="number">0</span>          <span class="number">1</span>d</span><br></pre></td></tr></table></figure><h3 id="安装-Prometheus-和-ServiceMonitor"><a href="#安装-Prometheus-和-ServiceMonitor" class="headerlink" title="安装 Prometheus 和 ServiceMonitor"></a>安装 Prometheus 和 ServiceMonitor</h3><p>删除与 RBAC 相关的 yaml 文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/prometheus</span><br><span class="line">manifests/prometheus</span><br><span class="line">├── prometheus-k8s-role-bindings.yaml</span><br><span class="line">├── prometheus-k8s-roles.yaml</span><br><span class="line">├── prometheus-k8s-rules.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-alertmanager.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-apiserver.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-kube-controller-manager.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-kubelet.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-kube-scheduler.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-kube-state-metrics.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-node-exporter.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-prometheus-operator.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-prometheus.yaml</span><br><span class="line">├── prometheus-k8s-service.yaml</span><br><span class="line">└── prometheus-k8s.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">14</span> files</span><br><span class="line">$ rm -rf manifests/prometheus<span class="comment">/*role*</span></span><br></pre></td></tr></table></figure><p>删除 prometheus-k8s.yaml 中的 serviceAccountName: prometheus-k8s：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> monitoring.coreos.com/v1</span><br><span class="line"><span class="symbol">kind:</span> Prometheus</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> k8s</span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    prometheus:</span> k8s</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">  version:</span> v2<span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="meta"># serviceAccountName: prometheus-k8s # 将这一行删除</span></span><br></pre></td></tr></table></figure><p>部署 Prometheus 和 ServiceMonitor：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n monitoring apply -f manifests/prometheus/</span><br><span class="line"></span><br><span class="line">$ kubectl -n monitoring get prometheuses</span><br><span class="line">NAME      KIND</span><br><span class="line">k8s       Prometheus<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">$ kubectl -n monitoring get servicemonitor</span><br><span class="line">NAME                      KIND</span><br><span class="line">alertmanager              ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">etcd-k8s                  ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">kube-apiserver            ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">kube-controller-manager   ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">kube-scheduler            ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">kube-state-metrics        ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">kubelet                   ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">node-exporter             ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">prometheus                ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">prometheus-operator       ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><h3 id="监控kube-controller-manager-kube-scheduler"><a href="#监控kube-controller-manager-kube-scheduler" class="headerlink" title="监控kube-controller-manager kube-scheduler"></a>监控kube-controller-manager kube-scheduler</h3><p>查看的kube-controller-manager的ServiceMonitor的yaml文件：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span>: monitoring.coreos.com/v1</span><br><span class="line"><span class="attribute">kind</span>: ServiceMonitor</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">name</span>: kube-controller-manager</span><br><span class="line">  <span class="attribute">labels</span>:</span><br><span class="line">    <span class="attribute">k8s-app</span>: kube-controller-manager</span><br><span class="line"><span class="attribute">spec</span>:</span><br><span class="line">  <span class="attribute">jobLabel</span>: k8s-app</span><br><span class="line">  <span class="attribute">endpoints</span>:</span><br><span class="line">  - <span class="attribute">port</span>: http-metrics</span><br><span class="line">    <span class="attribute">interval</span>: <span class="number">30s</span></span><br><span class="line">  <span class="attribute">selector</span>:</span><br><span class="line">    <span class="attribute">matchLabels</span>:</span><br><span class="line">      <span class="attribute">k8s-app</span>: kube-controller-manager</span><br><span class="line">  <span class="attribute">namespaceSelector</span>:</span><br><span class="line">    <span class="attribute">matchNames</span>:</span><br><span class="line">    - kube-system</span><br></pre></td></tr></table></figure><p>这个ServiceMonitor对应指定的是kube-system命名空间的打了<code>k8s-app: kube-controller-manager</code>标签的service，不是对应的endpoint的标签，对应endpoint端口名是<code>http-metrics</code></p><p>因为kube-controller-manager和kube-scheduler在kube-system的命名空间中没有相应的service和endpoints，所以需要手动创建：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kube-controller-manager</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-controller-manager-prometheus-discovery</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-controller-manager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http-metrics</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10252</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">10252</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-controller-manager-prometheus-discovery</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-controller-manager</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="attr">- addresses:</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.191</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.194</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.183</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http-metrics</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10252</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#kube-scheduler</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-scheduler-prometheus-discovery</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http-metrics</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10251</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">10251</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-scheduler-prometheus-discovery</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="attr">- addresses:</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.191</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.194</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.183</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http-metrics</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10251</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><h3 id="监控api-server"><a href="#监控api-server" class="headerlink" title="监控api-server"></a>监控api-server</h3><p>在原生的k8s集群中，是可以直接监控api-server的，但是在dce集群中，部署多个控制节点后kubernetes的endpoint对应的ip会一直在各个主机ip中变化，所以新建api-server的service和endpoints。<br>在prometheus的配置文件中，通过label来过滤api-server的target：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">relabel_configs:</span></span><br><span class="line"><span class="attr">- source_labels:</span> <span class="string">[__meta_kubernetes_service_label_component]</span></span><br><span class="line"><span class="attr">  separator:</span> <span class="string">;</span></span><br><span class="line"><span class="attr">  regex:</span> <span class="string">apiserver</span></span><br><span class="line"><span class="attr">  replacement:</span> <span class="string">$1</span></span><br><span class="line"><span class="attr">  action:</span> <span class="string">keep</span></span><br><span class="line"><span class="attr">- source_labels:</span> <span class="string">[__meta_kubernetes_service_label_provider]</span></span><br><span class="line"><span class="attr">  separator:</span> <span class="string">;</span></span><br><span class="line"><span class="attr">  regex:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">  replacement:</span> <span class="string">$1</span></span><br><span class="line"><span class="attr">  action:</span> <span class="string">keep</span></span><br></pre></td></tr></table></figure><p>能看到service的label的值只能是apiserver和kubernetes，所以新建api-server的service和endpoint如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    component:</span> <span class="string">apiserver</span></span><br><span class="line"><span class="attr">    provider:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dce</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">16443</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dce</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="attr">- addresses:</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.191</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.194</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.183</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">16443</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><h3 id="监控ETCD"><a href="#监控ETCD" class="headerlink" title="监控ETCD"></a>监控ETCD</h3><p>ETCD作为kubernetes集群的数据持久化的后端，是集群所有数据的存储点，也需要对其有相应监控。CoreOS给出了监控ETCD的方法<a href="https://github.com/coreos/prometheus-operator/blob/master/contrib/kube-prometheus/docs/monitoring-external-etcd.md" target="_blank" rel="noopener">监控ETCD</a></p><p><strong>创建ETCD对应访问证书</strong><br>因为监控ETCD不像监控kubernetes组件是通过api-server或直接使用http访问组件的target，需要使用https双向证书验证，所以要先创建可访问ETCD的secret，供prometheus server使用：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n monitoring create<span class="built_in"> secret </span>generic etcd-certs <span class="attribute">--from-file</span>=/etc/cni/net.d/calico-tls/etcd-cert <span class="attribute">--from-file</span>=/etc/cni/net.d/calico-tls/etcd-key <span class="attribute">--from-file</span>=/etc/cni/net.d/calico-tls/etcd-ca</span><br></pre></td></tr></table></figure><p>证书、私钥及ca证书是可访问ETCD的，路径是主机本地存储证书的目录。<br>在prometheus的yaml文件中挂载证书：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> monitoring.coreos.com/v1</span><br><span class="line"><span class="symbol">kind:</span> Prometheus</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> k8s</span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    prometheus:</span> k8s</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">  secrets:</span> </span><br><span class="line">  - etcd-certs</span><br><span class="line"><span class="symbol">  version:</span> v1<span class="number">.7</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>如果已创建，可以直接edit该对象.</p><p><strong>创建ETCD的ServiceMonitor</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> monitoring.coreos.com/v1</span><br><span class="line"><span class="symbol">kind:</span> ServiceMonitor</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> etcd-k8s</span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line">    k8s-app: etcd-k8s</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  jobLabel:</span> k8s-app</span><br><span class="line"><span class="symbol">  endpoints:</span></span><br><span class="line">  - port: api</span><br><span class="line"><span class="symbol">    interval:</span> <span class="number">30</span>s</span><br><span class="line"><span class="symbol">    scheme:</span> https</span><br><span class="line"><span class="symbol">    tlsConfig:</span></span><br><span class="line"><span class="symbol">      caFile:</span> <span class="meta-keyword">/etc/</span>prometheus<span class="meta-keyword">/secrets/</span>etcd-certs/etcd-ca</span><br><span class="line"><span class="symbol">      certFile:</span> <span class="meta-keyword">/etc/</span>prometheus<span class="meta-keyword">/secrets/</span>etcd-certs/etcd-cert</span><br><span class="line"><span class="symbol">      keyFile:</span> <span class="meta-keyword">/etc/</span>prometheus<span class="meta-keyword">/secrets/</span>etcd-certs/etcd-key</span><br><span class="line">      <span class="meta">#use insecureSkipVerify only <span class="meta-keyword">if</span> you cannot use a Subject Alternative Name</span></span><br><span class="line"><span class="symbol">      insecureSkipVerify:</span> true</span><br><span class="line">      <span class="meta">#serverName: ETCD_DNS_OR_ALTERNAME_</span></span><br><span class="line"><span class="symbol">  selector:</span></span><br><span class="line"><span class="symbol">    matchLabels:</span></span><br><span class="line">      k8s-app: etcd</span><br><span class="line"><span class="symbol">  namespaceSelector:</span></span><br><span class="line"><span class="symbol">    matchNames:</span></span><br><span class="line">    - monitoring</span><br></pre></td></tr></table></figure><p>其中<code>tlsConfig</code>的文件位置是prometheus容器里面挂载证书的位置，不确定的话可以进入容器内部验证一下<br>当证书<code>serverName</code>和etcd中签发的不匹配可以使用<code>insecureSkipVerify: true</code></p><p><strong>创建ETCD对应的service和endpoints</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">etcd-k8s</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">etcd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">api</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">12379</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">etcd-k8s</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">etcd</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="attr">- addresses:</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.191</span></span><br><span class="line"><span class="attr">    nodeName:</span> <span class="string">dcemaster1</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.194</span></span><br><span class="line"><span class="attr">    nodeName:</span> <span class="string">dcemaster2</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.183</span></span><br><span class="line"><span class="attr">    nodeName:</span> <span class="string">dcemaster3</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">api</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">12379</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><p>登录prometheus的UI查看对应target是不是都是up状态，up状态说明数据pull正常<br><a href="http://pacnmwckn.bkt.clouddn.com/target1.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/target1.png" alt="target1"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/target2.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/target2.png" alt="target2"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/target3.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/target3.png" alt="target3"></a></p><h3 id="安装Grafana"><a href="#安装Grafana" class="headerlink" title="安装Grafana"></a>安装Grafana</h3><p>作为prometheus前端展示页面，Grafana提供了强大的数据聚合和展示的功能，可以通过自定义前端配置修改dashboard，官方社区有很多<a href="https://grafana.com/dashboards?search=kubernetes" target="_blank" rel="noopener">kubernetes的前端json文件</a>供使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls manifests/grafana/</span><br><span class="line">grafana-credentials<span class="selector-class">.yaml</span>  grafana-dashboards<span class="selector-class">.yaml</span>  grafana-deployment<span class="selector-class">.yaml</span>  grafana-service.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl -n monitoring apply -f manifests/grafana/</span><br></pre></td></tr></table></figure><p>部署后就能通过Grafana监控整个kubernetes集群<br><a href="http://pacnmwckn.bkt.clouddn.com/grafana1.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana1.png" alt="grafana1"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/grafana2.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana2.png" alt="grafana2"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/grafana3.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana3.png" alt="grafana3"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/grafana4.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana4.png" alt="grafana4"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/grafana5.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana5.png" alt="grafana5"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/grafana6.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana6.png" alt="grafana6"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/grafana7.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana7.png" alt="grafana7"></a></p><h3 id="配置AlertManager"><a href="#配置AlertManager" class="headerlink" title="配置AlertManager"></a>配置AlertManager</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls manifests/alertmanager/</span><br><span class="line">alertmanager-config<span class="selector-class">.yaml</span>  alertmanager-service<span class="selector-class">.yaml</span>  alertmanager.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl -n monitoring apply -f manifests/alertmanager/</span><br></pre></td></tr></table></figure><p>告警接收器可以通过以下形式进行配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">receivers:</span></span><br><span class="line">  - <span class="params">&lt;receiver&gt;</span> ...</span><br></pre></td></tr></table></figure><p>每一个receiver具有一个全局唯一的名称，并且对应一个或者多个通知方式：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">name:</span> <span class="params">&lt;string&gt;</span></span><br><span class="line"><span class="symbol">email_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;email_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">hipchat_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;hipchat_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">pagerduty_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;pagerduty_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">pushover_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;pushover_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">slack_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;slack_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">opsgenie_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;opsgenie_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">webhook_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;webhook_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">victorops_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;victorops_config&gt;</span>, ... ]</span><br></pre></td></tr></table></figure><p>目前官方内置的第三方通知集成包括：邮件、 即时通讯软件（如Slack、Hipchat）、移动应用消息推送(如Pushover)和自动化运维工具（例如：Pagerduty、Opsgenie、Victorops）。Alertmanager的通知方式中还可以支持Webhook，通过这种方式开发者可以实现更多个性化的扩展支持。</p><p><strong>以下是集成SMTP邮件的示例</strong><br>每一个receiver可以对应一组邮件通知配置email_configs，如下所示：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">name:</span> <span class="params">&lt;string&gt;</span></span><br><span class="line"><span class="symbol">email_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;email_config&gt;</span>, ... ]</span><br></pre></td></tr></table></figure><p>email_config配置：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Whether or not to notify about resolved alerts.</span></span><br><span class="line">[ send_resolved: <span class="variable">&lt;boolean&gt;</span> | <span class="keyword">default</span> = false ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># The email address to send notifications to.</span></span><br><span class="line"><span class="keyword">to</span>: <span class="variable">&lt;tmpl_string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The sender address.</span></span><br><span class="line">[ <span class="keyword">from</span>: <span class="variable">&lt;tmpl_string&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_from ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># The SMTP host through which emails are sent.</span></span><br><span class="line">[ smarthost: <span class="variable">&lt;string&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_smarthost ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># SMTP authentication information.</span></span><br><span class="line">[ auth_username: <span class="variable">&lt;string&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_auth_username ]</span><br><span class="line">[ auth_password: <span class="variable">&lt;secret&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_auth_password ]</span><br><span class="line">[ auth_secret: <span class="variable">&lt;secret&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_auth_secret ]</span><br><span class="line">[ auth_identity: <span class="variable">&lt;string&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_auth_identity ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># The SMTP TLS requirement.</span></span><br><span class="line">[ require_tls: <span class="variable">&lt;bool&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_require_tls ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># The HTML body of the email notification.</span></span><br><span class="line">[ html: <span class="variable">&lt;tmpl_string&gt;</span> | <span class="keyword">default</span> = '&#123;&#123; template <span class="string">"email.default.html"</span> . &#125;&#125;' ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Further headers email header key/value pairs. Overrides any headers</span></span><br><span class="line"><span class="comment"># previously set by the notification implementation.</span></span><br><span class="line">[ headers: &#123; <span class="variable">&lt;string&gt;</span>: <span class="variable">&lt;tmpl_string&gt;</span>, ... &#125; ]</span><br></pre></td></tr></table></figure><p>如果所有的邮件配置使用了相同的SMTP配置，则可以直接定义全局的SMTP配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  [ smtp_from: &lt;tmpl_string&gt; ]</span><br><span class="line">  [ smtp_smarthost: &lt;string&gt; ]</span><br><span class="line">  [ smtp_auth_username: &lt;string&gt; ]</span><br><span class="line">  [ smtp_auth_password: &lt;secret&gt; ]</span><br><span class="line">  [ smtp_auth_secret: &lt;secret&gt; ]</span><br><span class="line">  [ smtp_auth_identity: &lt;string&gt; ]</span><br><span class="line">  [ smtp_require_tls: &lt;bool&gt; |<span class="built_in"> default </span>= <span class="literal">true</span> ]</span><br></pre></td></tr></table></figure><p>以Gmail邮箱为例:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">global:</span></span><br><span class="line"><span class="symbol">  smtp_smarthost:</span> smtp.gmail.com:<span class="number">587</span></span><br><span class="line"><span class="symbol">  smtp_from:</span> <span class="params">&lt;smtp mail from&gt;</span></span><br><span class="line"><span class="symbol">  smtp_auth_username:</span> <span class="params">&lt;usernae&gt;</span></span><br><span class="line"><span class="symbol">  smtp_auth_identity:</span> <span class="params">&lt;username&gt;</span></span><br><span class="line"><span class="symbol">  smtp_auth_password:</span> <span class="params">&lt;password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">receivers:</span></span><br><span class="line">  - name: default-receiver</span><br><span class="line"><span class="symbol">    email_configs:</span></span><br><span class="line">      - to: <span class="params">&lt;mail to address&gt;</span></span><br></pre></td></tr></table></figure><p>手动拉高CPU使用量后会触发告警并发送告警邮件：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/dev/</span>zero&gt;<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.troyying.xyz/index.php/operate/15.html" target="_blank" rel="noopener">https://www.troyying.xyz/index.php/operate/15.html</a></p>]]></content>
      
      <categories>
          
          <category> Kubernetes笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus Operator </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack 帮助查看</title>
      <link href="/2018/09/10/SaltStack%E6%9F%A5%E7%9C%8B%E5%B8%AE%E5%8A%A9/"/>
      <url>/2018/09/10/SaltStack%E6%9F%A5%E7%9C%8B%E5%B8%AE%E5%8A%A9/</url>
      <content type="html"><![CDATA[<h1 id="SaltStack-查看帮助"><a href="#SaltStack-查看帮助" class="headerlink" title="SaltStack 查看帮助"></a>SaltStack 查看帮助</h1><a id="more"></a><h2 id="查看所有-module-列表"><a href="#查看所有-module-列表" class="headerlink" title="查看所有 module 列表"></a>查看所有 module 列表</h2><h3 id="查看-Minion端-支持的所有-module-列表"><a href="#查看-Minion端-支持的所有-module-列表" class="headerlink" title="查看 Minion端 支持的所有 module 列表"></a>查看 Minion端 支持的所有 module 列表</h3><figure class="highlight plain"><figcaption><span>&#39;*&#39; sys.list.module</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt &apos;*&apos; sys.list.module</span><br></pre></td></tr></table></figure><h2 id="查看指定-module-的所有-function"><a href="#查看指定-module-的所有-function" class="headerlink" title="查看指定 module 的所有 function"></a>查看指定 module 的所有 function</h2><h3 id="查看-cmd-module-的所有-function-的命令"><a href="#查看-cmd-module-的所有-function-的命令" class="headerlink" title="查看 cmd module 的所有 function 的命令"></a>查看 cmd module 的所有 function 的命令</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> sys.list_functions <span class="keyword">cmd</span><span class="bash"></span></span><br></pre></td></tr></table></figure><h2 id="查看-所有-模块函数帮助信息"><a href="#查看-所有-模块函数帮助信息" class="headerlink" title="查看 所有 模块函数帮助信息"></a>查看 所有 模块函数帮助信息</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt '*' sys.doc <span class="string">| less</span></span><br></pre></td></tr></table></figure><h2 id="查看指定-module-用法"><a href="#查看指定-module-用法" class="headerlink" title="查看指定 module 用法"></a>查看指定 module 用法</h2><h3 id="查看-cmd-module-的详细用法与示例"><a href="#查看-cmd-module-的详细用法与示例" class="headerlink" title="查看 cmd module 的详细用法与示例"></a>查看 cmd module 的详细用法与示例</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> sys.doc <span class="keyword">cmd</span><span class="bash"></span></span><br></pre></td></tr></table></figure><h2 id="查看所有-states-列表"><a href="#查看所有-states-列表" class="headerlink" title="查看所有 states 列表"></a>查看所有 states 列表</h2><h3 id="查看-Minion端-支持的所有-states-列表"><a href="#查看-Minion端-支持的所有-states-列表" class="headerlink" title="查看 Minion端 支持的所有 states 列表"></a>查看 Minion端 支持的所有 states 列表</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> sys.list_state_modules</span><br></pre></td></tr></table></figure><h2 id="查看指定-states-的所有-function"><a href="#查看指定-states-的所有-function" class="headerlink" title="查看指定 states 的所有 function"></a>查看指定 states 的所有 function</h2><h3 id="查看-file-states-的所有-function"><a href="#查看-file-states-的所有-function" class="headerlink" title="查看 file.states 的所有 function"></a>查看 file.states 的所有 function</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> sys<span class="selector-class">.list_state_functions</span> file</span><br></pre></td></tr></table></figure><h2 id="查看指定-states-用法"><a href="#查看指定-states-用法" class="headerlink" title="查看指定 states 用法"></a>查看指定 states 用法</h2><h3 id="查看-file-states-的详细用法与示例"><a href="#查看-file-states-的详细用法与示例" class="headerlink" title="查看 file.states 的详细用法与示例"></a>查看 file.states 的详细用法与示例</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> sys<span class="selector-class">.state_doc</span> file</span><br></pre></td></tr></table></figure><h2 id="查看指定-states-指定-function-用法"><a href="#查看指定-states-指定-function-用法" class="headerlink" title="查看指定 states 指定 function 用法"></a>查看指定 states 指定 function 用法</h2><h3 id="查看-file-managed-states-的详细用法与示例"><a href="#查看-file-managed-states-的详细用法与示例" class="headerlink" title="查看 file.managed states 的详细用法与示例"></a>查看 file.managed states 的详细用法与示例</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> sys<span class="selector-class">.state_doc</span> file.managed</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack 帮助查看 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitLab持续集成-(.gitlab-ci.yml)</title>
      <link href="/2018/09/08/GitLab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90(.gitlab-ci.yml)/"/>
      <url>/2018/09/08/GitLab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90(.gitlab-ci.yml)/</url>
      <content type="html"><![CDATA[<h1 id="GitLab持续集成-gitlab-ci-yml"><a href="#GitLab持续集成-gitlab-ci-yml" class="headerlink" title="GitLab持续集成-(.gitlab-ci.yml)"></a>GitLab持续集成-(.gitlab-ci.yml)</h1><a id="more"></a><blockquote><p>从7.12版本开始，GitLab CI使用YAML文件(.gitlab-ci.yml)来管理项目配置。该文件存放于项目仓库的根目录，它定义该项目如何构建。</p></blockquote><h2 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h2><blockquote><p><code>stages</code>用来定义可以被job调用的stages。stages的规范允许有灵活的多级pipelines。stages中元素的顺序决定了对应job的执行顺序：</p></blockquote><ul><li>相同stage的job是并行执行的；</li><li>下一个stage的job在前一个stage的job成功完成后才开始执行；</li><li>如果.gitlab-ci.yml中没有定义stages，那么stages默认定义为build、test和deploy；</li><li>如果一个job没有指定stage，那么这个任务会分配到test stage。</li></ul><h2 id="variables"><a href="#variables" class="headerlink" title="variables"></a>variables</h2><blockquote><p><code>variables</code>用来定义变量，全局变量作用于所有job，也可以在指定的job中定义变量（优先级高于全局变量）<br>如果在job中想禁用全局定义的变量，可通过<code>variables: {}</code>定义一个空的哈希值。</p></blockquote><h3 id="GitLab-CI-CD内置变量"><a href="#GitLab-CI-CD内置变量" class="headerlink" title="GitLab CI/CD内置变量"></a><a href="https://docs.gitlab.com/ce/ci/variables/README.html" target="_blank" rel="noopener">GitLab CI/CD内置变量</a></h3><table><thead><tr><th>variables</th><th>变量值</th></tr></thead><tbody><tr><td>CI_JOB_NAME</td><td>对应的job_name</td></tr><tr><td>GIT_STRATEGY</td><td>指定git获取代码的方式（clone,fetch,none）</td></tr></tbody></table><h2 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h2><blockquote><p><code>jobs</code>用来定义了一组作业，其中必须包含<code>script</code>语句。</p></blockquote><h3 id="job-stage（默认：test）"><a href="#job-stage（默认：test）" class="headerlink" title="job.stage（默认：test）"></a>job.stage（默认：<code>test</code>）</h3><blockquote><p>job中指定的stage必须是stages中存在的元素</p></blockquote><h3 id="job-tags"><a href="#job-tags" class="headerlink" title="job.tags"></a>job.tags</h3><blockquote><p>指定该job所允许运行的Runner，必须在注册Runner时设置Runner的tag</p></blockquote><h3 id="job-allow-failure"><a href="#job-allow-failure" class="headerlink" title="job.allow_failure"></a>job.allow_failure</h3><blockquote><p>用于指定该job允许执行失败，则如果执行失败也不会影响下一个stage的执行。</p></blockquote><h3 id="job-script"><a href="#job-script" class="headerlink" title="job.script"></a>job.script</h3><blockquote><p><code>script</code>是job中必须指定的语句，指定Runner所要执行的命令</p></blockquote><h3 id="job-before-script、job-after-script"><a href="#job-before-script、job-after-script" class="headerlink" title="job.before_script、job.after_script"></a>job.before_script、job.after_script</h3><blockquote><p>指定script执行前/后所执行的命令，也可定义在全局模式，则在所有job中的script执行前/后都会执行。</p></blockquote><h3 id="job-artifacts"><a href="#job-artifacts" class="headerlink" title="job.artifacts"></a>job.artifacts</h3><blockquote><p>用于指定job执行成功后，将会被发送到Gitlab中的文件，且默认情况下job之间会根据stage的优先级自动下载之前所有stage中的artifacts。</p></blockquote><ul><li><code>artifacts.paths</code>：必选</li><li><code>artifacts.name</code>：指定artifact的名称，同时Gitlab上下载的文件名即为artifact_name.zip</li><li><code>artifacts.when</code>：指定artifact上传到Gitlab的条件（on_success[默认],on_failure,always）</li><li><code>artifacts.expire_in</code>：指定artifact的过期时间（默认为30天），使用<code>keep</code>可永久保存</li></ul><h3 id="job-dependencies"><a href="#job-dependencies" class="headerlink" title="job.dependencies"></a>job.dependencies</h3><blockquote><p><code>dependencies</code>用于在不同的job之间指定在不同的job之间传递artifacts，<code>dependencies: []</code>可禁止该job下载artifacts</p></blockquote><h3 id="job-only、job-except"><a href="#job-only、job-except" class="headerlink" title="job.only、job.except"></a>job.only、job.except</h3><blockquote><p><code>only</code>和<code>except</code>是两个参数用分支策略来限制jobs构建</p></blockquote><ul><li><code>only</code>和<code>except</code>可同时使用。如果在一个job配置中同时存在，则同时有效；</li><li><code>only</code>和<code>except</code>可以使用正则表达式；</li><li><code>only</code>和<code>except</code>允许使用特殊的关键字：<code>branches</code>，<code>tags</code>和<code>triggers</code>；</li></ul><h3 id="job-environment"><a href="#job-environment" class="headerlink" title="job.environment"></a>job.environment</h3><blockquote><p><code>environment</code>用于定义job部署到指定的运行环境中。</p></blockquote><ul><li>environment.name：必选，指定environment名称</li><li>environment.url：可选，指定environment对应的URL，将在指定的environment页面中添加一个链接按钮指向该URL</li></ul><hr><h2 id="特殊的YAML特性"><a href="#特殊的YAML特性" class="headerlink" title="特殊的YAML特性"></a>特殊的YAML特性</h2><h3 id="Hidden-keys（jobs）"><a href="#Hidden-keys（jobs）" class="headerlink" title=" Hidden keys（jobs）"></a><span id="jump"> Hidden keys（jobs）</span></h3><blockquote><p>如果想临时disable某个job，不必注释整个job定义的行，只需在job name前加一个<code>.</code>即可</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.compile_cento<span class="variable">s:</span></span><br><span class="line">  stage: build_centos</span><br><span class="line">  <span class="keyword">tag</span><span class="variable">s:</span></span><br><span class="line">    - centos</span><br><span class="line">  <span class="keyword">scrip</span><span class="variable">t:</span></span><br><span class="line">    - <span class="keyword">echo</span> <span class="string">"##### build library"</span></span><br></pre></td></tr></table></figure><h3 id="Anchors"><a href="#Anchors" class="headerlink" title="Anchors"></a>Anchors</h3><blockquote><p>锚点可用于在文件中复制或继承配置，一般与<a href="http://blog.51cto.com/vnimos/2122951#jump" target="_blank" rel="noopener">Hidden keys（jobs）</a>提供的job模版搭配使用。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.job_template:</span> <span class="meta">&amp;job_definition</span>  <span class="comment">#job中定义一个anchor:job_definition</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">ruby:2.1</span></span><br><span class="line"><span class="attr">  services:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">postgres</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">test1:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*job_definition</span>           <span class="comment">#合并anchor:job_definition中的模版内容</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test1</span> <span class="string">project</span></span><br><span class="line"><span class="attr">test2:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*job_definition</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test2</span> <span class="string">project</span></span><br></pre></td></tr></table></figure><p>最终实现的效果如下：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.job_template:</span><br><span class="line">  image: ruby:2.1</span><br><span class="line">  services:</span><br><span class="line">    -<span class="ruby"> postgres</span></span><br><span class="line"><span class="ruby">    - redis</span></span><br><span class="line"><span class="ruby"><span class="symbol">test1:</span></span></span><br><span class="line"><span class="ruby">  <span class="symbol">image:</span> <span class="symbol">ruby:</span><span class="number">2.1</span></span></span><br><span class="line"><span class="ruby">  <span class="symbol">services:</span></span></span><br><span class="line"><span class="ruby">    - postgres</span></span><br><span class="line"><span class="ruby">    - redis</span></span><br><span class="line"><span class="ruby">  <span class="symbol">script:</span></span></span><br><span class="line"><span class="ruby">    - test1 project</span></span><br><span class="line"><span class="ruby"><span class="symbol">test2:</span></span></span><br><span class="line"><span class="ruby">  <span class="symbol">image:</span> <span class="symbol">ruby:</span><span class="number">2.1</span></span></span><br><span class="line"><span class="ruby">  <span class="symbol">services:</span></span></span><br><span class="line"><span class="ruby">    - postgres</span></span><br><span class="line"><span class="ruby">    - redis</span></span><br><span class="line"><span class="ruby">  <span class="symbol">script:</span></span></span><br><span class="line"><span class="ruby">    - test2 project</span></span><br></pre></td></tr></table></figure><h2 id="Skipping-jobs"><a href="#Skipping-jobs" class="headerlink" title="Skipping jobs"></a>Skipping jobs</h2><blockquote><p>如果你的commit信息中包含<code>[ci skip]</code>或者<code>[skip ci]</code>，不论大小写，那么这个commit将会创建但是jobs也会跳过。</p></blockquote><hr><h3 id="example"><a href="#example" class="headerlink" title="example:"></a>example:</h3><blockquote><p>以下示例为编译nginx的上传模块nginx-upload并测试验证上传功能，验证成功后将自动将编译好的文件打包通过curl上传到指定的文件服务器。其中只有在非master的branches中提交代码才会执行build和test的stage，只有在打tag后才会执行deploy，且需要手动在gitlab上执行。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line"><span class="attr">  DIR:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  TOPNODE:</span> <span class="string">package</span></span><br><span class="line"></span><br><span class="line"><span class="string">.function:</span> <span class="meta">&amp;function</span> <span class="string">|</span></span><br><span class="line"><span class="string">  function build() &#123;</span></span><br><span class="line"><span class="string">    echo "execute function:build"</span></span><br><span class="line"><span class="string">    chmod +x auto/configure</span></span><br><span class="line"><span class="string">    sh build.sh</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function changelog() &#123;</span></span><br><span class="line"><span class="string">    echo "execute function:changelog"</span></span><br><span class="line"><span class="string">    git log --graph -n 3  --name-status --pretty="%h -[%cd] - &lt;%an&gt; %s" &gt; CHANGELOG</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function test() &#123;</span></span><br><span class="line"><span class="string">    echo "execute function:test"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    sudo \cp modules/nginx-upload-module-master/nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="string">    sudo sed -i '/error_log/,/working_directory/d' /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="string">    if [ -f /run/nginx.pid ];then sudo nginx -s reload;else sudo nginx;fi</span></span><br><span class="line"><span class="string">    sudo rm -rf /tmp/&#123;0,1,2,3,4,5,6,7,8,9&#125; &amp;&amp; sudo mkdir /tmp/&#123;0,1,2,3,4,5,6,7,8,9&#125; &amp;&amp; sudo chown -R nginx. /tmp/&#123;0,1,2,3,4,5,6,7,8,9&#125;</span></span><br><span class="line"><span class="string">    sudo echo nginx_upload &gt; test &amp;&amp; curl -F "filename=@test" http://localhost/upload</span></span><br><span class="line"><span class="string">    sudo find /tmp/&#123;0,1,2,3,4,5,6,7,8,9&#125; -type f -exec grep nginx_upload &#123;&#125; \; </span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function artifacts() &#123;</span></span><br><span class="line"><span class="string">    echo "execute function:artifacts"</span></span><br><span class="line"><span class="string">    URL="https://xxx.com/upload?dir=$&#123;DIR&#125;/$&#123;VERSION&#125;&amp;override=1&amp;topNode=$&#123;TOPNODE&#125;"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    echo "push the artifacts:nginx_$&#123;VERSION&#125;.tar.gz to $URL"</span></span><br><span class="line"><span class="string">    tar zcf /tmp/nginx_$&#123;VERSION&#125;.tar.gz --exclude=".git*" --exclude=build .</span></span><br><span class="line"><span class="string">    curl -F "filename=@/tmp/$&#123;DIR&#125;_$&#123;VERSION&#125;.tar.gz" "$URL"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    echo "push the CHANGELOG to $URL"</span></span><br><span class="line"><span class="string">    curl -F "filename=@CHANGELOG" "$URL"</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function deploy() &#123;</span></span><br><span class="line"><span class="string">    echo "execute function:deploy"</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function clean() &#123;</span></span><br><span class="line"><span class="string">    echo "execute function:clean"</span></span><br><span class="line"><span class="string">    if [ -f /run/nginx.pid ];then sudo kill `cat /run/nginx.pid`;fi</span></span><br><span class="line"><span class="string">    sudo rm -rf /tmp/&#123;0,1,2,3,4,5,6,7,8,9&#125; /tmp/nginx_$&#123;version&#125;.tar.gz</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#########only the section above need to be modify #################</span></span><br><span class="line"><span class="string"></span><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">VERSION=`head</span> <span class="bullet">-n1</span> <span class="string">version`</span></span><br><span class="line"><span class="bullet">  -</span> <span class="meta">*function</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">branches</span></span><br><span class="line"><span class="attr">  except:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">changelog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  variables:</span></span><br><span class="line"><span class="attr">    GIT_STRATEGY:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">branches</span></span><br><span class="line"><span class="attr">  except:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">artifacts</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">clean</span></span><br><span class="line"></span><br><span class="line"><span class="string">.job_template:</span> <span class="meta">&amp;deploy_template</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  variables:</span></span><br><span class="line"><span class="attr">    GIT_STRATEGY:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">deploy</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">delete</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">manual</span></span><br><span class="line"></span><br><span class="line"><span class="attr">staging:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*deploy_template</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">staging</span></span><br><span class="line"></span><br><span class="line"><span class="attr">production:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*deploy_template</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">production</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.51cto.com/vnimos/2122951" target="_blank" rel="noopener">http://blog.51cto.com/vnimos/2122951</a></p>]]></content>
      
      <categories>
          
          <category> Git笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab持续集成-(.gitlab-ci.yml) </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitLab-CI 与 GitLab-Runner</title>
      <link href="/2018/09/08/GitLab-CI%E4%B8%8EGitLab-Runner/"/>
      <url>/2018/09/08/GitLab-CI%E4%B8%8EGitLab-Runner/</url>
      <content type="html"><![CDATA[<h1 id="GitLab-CI-与-GitLab-Runner"><a href="#GitLab-CI-与-GitLab-Runner" class="headerlink" title="GitLab-CI 与 GitLab-Runner"></a>GitLab-CI 与 GitLab-Runner</h1><a id="more"></a><h2 id="持续集成（Continuous-Integration）"><a href="#持续集成（Continuous-Integration）" class="headerlink" title="持续集成（Continuous Integration）"></a>持续集成（Continuous Integration）</h2><p>要了解 GitLab-CI 与 GitLab Runner，我们得先了解持续集成是什么。</p><blockquote><p>持续集成是一种<strong>软件开发实践</strong>，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。</p></blockquote><p>看完这段话，估计还是有点懵。怎么理解呢？我是这样理解的：</p><p><strong>软件集成</strong> 是软件开发过程中的一个环节，这个环节的工作一般会包括以下流程：<em>合并代码 —-&gt; 安装依赖 —-&gt; 编译 —-&gt; 测试 —-&gt; 发布</em>。软件集成的工作一般会比较细碎繁琐，为了不影响开发效率，以前软件集成这个环节一般不会经常进行或者只会等到项目后期再进行。但是有些问题，如果等到后期才发现，解决问题的代价很大，有可能导致项目延期或者失败。因此，为了尽早发现软件集成错误，鼓励团队成员应该经常集成他们的工作，通常每个成员每天应该至少集成一次。这就是所说的 <strong>持续集成</strong>。所以说，持续集成是一种软件开发实践。</p><p>软件集成的工作细碎繁琐，以前是由人工完成的。但是现在鼓励持续集成，那岂不是要累死人，还影响开发效率。所以，应该考虑将软件集成这个工作自动化，这就出现了所谓的 <strong>持续集成系统</strong>。</p><p>持续集成详情见<a href="https://baike.baidu.com/item/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90" target="_blank" rel="noopener">百度百科-持续集成</a></p><h2 id="GitLab-CI"><a href="#GitLab-CI" class="headerlink" title="GitLab-CI"></a>GitLab-CI</h2><p>GitLab-CI 就是一套配合 GitLab 使用的持续集成系统（当然，还有其它的持续集成系统，同样可以配合 GitLab 使用，比如 Jenkins）。而且 GitLab8.0 以后的版本是默认集成了 GitLab-CI 并且默认启用的。</p><h2 id="GitLab-Runner"><a href="#GitLab-Runner" class="headerlink" title="GitLab-Runner"></a>GitLab-Runner</h2><p>那 GitLab-Runner 又是什么？和 GitLab-CI 有什么关系？</p><p>GitLab-Runner 是配合 GitLab-CI 进行使用的。一般地，GitLab 里面的每一个工程都会定义一个属于这个工程的软件集成脚本，用来自动化地完成一些软件集成工作。当这个工程的仓库代码发生变动时，比如有人 push 了代码，GitLab 就会将这个变动通知 GitLab-CI。这时 GitLab-CI 会找出与这个工程相关联的 Runner，并通知这些 Runner 把代码更新到本地并执行预定义好的执行脚本。</p><p>所以，GitLab-Runner 就是一个用来执行软件集成脚本的东西。可以想象一下：Runner 就像一个个的工人，而 GitLab-CI就是这些工人的一个管理中心，所有工人都要在 GitLab-CI 里面登记注册，并且表明自己是为哪个工程服务的。当相应的工程发生变化时，GitLab-CI 就会通知相应的工人执行软件集成脚本。如下图所示：</p><p><img src="https:////upload-images.jianshu.io/upload_images/525728-4339103186d2b1c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/550/format/webp" alt="img"></p><center><u>GitLab-CI 与 GitLab-Runner 关系示意图</u></center><p>Runner 可以分布在不同的主机上，同一个主机上也可以有多个Runner。</p><h3 id="Runner类型"><a href="#Runner类型" class="headerlink" title="Runner类型"></a>Runner类型</h3><p>GitLab-Runner 可以分类两种类型：<strong>Shared Runner（共享型）</strong> 和 <strong>Specific Runner（指定型）</strong>。<br><strong>Shared Runner：</strong> 这种 Runner（工人）是所有工程都能够用的。只有系统管理员能够创建Shared Runner。<br><strong>Specific Runner：</strong> 这种 Runner（工人）只能为指定的工程服务。拥有该工程访问权限的人都能够为该工程创建 Shared Runner。</p><h2 id="GitLab-Runner-的安装与使用"><a href="#GitLab-Runner-的安装与使用" class="headerlink" title="GitLab-Runner 的安装与使用"></a>GitLab-Runner 的安装与使用</h2><p>操作系统：Centos 7.0 64位</p><h3 id="安装-gitlab-ci-multi-runner"><a href="#安装-gitlab-ci-multi-runner" class="headerlink" title="安装 gitlab-ci-multi-runner"></a>安装 gitlab-ci-multi-runner</h3><ul><li><p>添加 yum 源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https:<span class="regexp">//</span>packages.gitlab.com<span class="regexp">/install/</span>repositories<span class="regexp">/runner/gi</span>tlab-ci-multi-runner<span class="regexp">/script.rpm.sh | sudo bash</span></span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure></li></ul><p>这里是官网的安装教程，其它操作系统的请参考<br> <a href="https://link.jianshu.com?t=https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" target="_blank" rel="noopener">https://gitlab.com/gitlab-org/gitlab-ci-multi-runner</a></p><h3 id="使用-gitlab-ci-multi-runner-注册-Runner"><a href="#使用-gitlab-ci-multi-runner-注册-Runner" class="headerlink" title="使用 gitlab-ci-multi-runner 注册 Runner"></a>使用 gitlab-ci-multi-runner 注册 Runner</h3><p>安装好 gitlab-ci-multi-runner 这个软件之后，我们就可以用它向 GitLab-CI 注册 Runner 了。</p><p>向 GitLab-CI 注册一个 Runner 需要两样东西：<strong>GitLab-CI的url</strong> 和 <strong>注册token</strong>。<br>其中，token 是为了确定你这个 Runner 是所有工程都能够使用的 Shared Runner 还是具体某一个工程才能使用的Specific Runner。</p><p>如果要注册 Shared Runner，你需要到管理界面的 Runners 页面里面去找注册 token。如下图所示：</p><p><img src="https:////upload-images.jianshu.io/upload_images/525728-e4141cc2a2d4f986.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><center><u>Shared Runner</u></center><p>如果要注册 Specific Runner，你需要到项目的设置的 Runner 页面里面去找注册 token。如下图所示：</p><p><img src="https:////upload-images.jianshu.io/upload_images/525728-bc5f1e385c2beb45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><center><u>Specific Runner</u></center><p>找到 token 之后，运行下面这条命令注册 Runner（当然，除了 url 和 token 之外，还需要其他的信息，比如执行器 <code>executor</code>、构建目录 <code>builds_dir</code> 等）。<br> <code>gitlab-ci-multi-runner register</code><br> 注册完成之后，GitLab-CI 就会多出一条 Runner 记录，如下图所示：</p><p><img src="https:////upload-images.jianshu.io/upload_images/525728-d4b450bb1ea0e31d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><center><u>GitLab-CI Runner</u></center><p>GitLab-CI 会为这个 Runner 生成一个唯一的 token，以后 Runner 就通过这个 token 与 GitLab-CI 进行通信。</p><p>那么，问题来了。注册好了的 Runner 的信息存放在哪儿了呢？<br>原来，Runner 的信息是存放在一个配置文件里面的，配置文件的格式一般是 <code>.toml</code>。这个配置文件的存放位置有以下几种情况：</p><ul><li>在类Unix操作系统下（0.5.0之后版本）</li></ul><ol><li>如果是以 root 用户身份运行 <code>gitlab-ci-multi-runner register</code>，那么配置文件默认是 <code>/etc/gitlab-runner/config.toml</code> </li><li>如果是以非 root 用户身份运行 <code>gitlab-ci-multi-runner register</code>，那么配置文件默认是 <code>~/.gitlab-runner/config.toml</code> </li></ol><ul><li>在其他操作系统下以及 0.5.0 之前版本<br>配置文件默认在当前工作目录下<code>./config.toml</code> </li></ul><p>一般情况下，使用默认的配置文件存放 Runner 的配置信息就可以了。当然，如果你有更细化的分类需求，你也可以在注册的时候通过 <code>-c</code> 或 <code>--config</code> 选项指定配置文件的位置。具体查看register 命令的使用方法：<code>gitlab-ci-multi-runner register --help</code>。</p><p><strong>问题：</strong> 如果不运行 <code>gitlab-ci-multi-runner register</code> 命令，直接在配置文件里面添加 Runner 的配置信息可以吗？<br><strong>回答：</strong> 当然不可以。因为 <code>gitlab-ci-multi-runner register</code> 的作用除了把 Runner 的信息保存到配置文件以外，还有一个很重要的作用，那就是向 GitLab-CI 发出请求，在 GitLab-CI 中登记这个 Runner 的信息并且获取后续通信所需要的 token。</p><h3 id="让注册好的-Runner-运行起来"><a href="#让注册好的-Runner-运行起来" class="headerlink" title="让注册好的 Runner 运行起来"></a>让注册好的 Runner 运行起来</h3><p>Runner 注册完成之后还不行，还必须让它运行起来，否则它无法接收到 GitLab-CI 的通知并且执行软件集成脚本。怎么让 Runner 运行起来呢？<code>gitlab-ci-multi-runner</code> 提供了这样一条命令<code>gitlab-ci-multi-runner run-single</code>，详情如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# gitlab-ci-multi-runner run-single --help</span><br><span class="line">NAME:</span><br><span class="line">   run-single - start single runner</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   command run-single [command options] [arguments<span class="built_in">..</span>.]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   --name, --description   Runner name [<span class="variable">$RUNNER_NAME</span>]</span><br><span class="line">   --limit     Maximum number of builds processed by this runner [<span class="variable">$RUNNER_LIMIT</span>]</span><br><span class="line">   --ouput-limit    Maximum build trace size [<span class="variable">$RUNNER_OUTPUT_LIMIT</span>]</span><br><span class="line">   -u, --url     Runner URL [<span class="variable">$CI_SERVER_URL</span>]</span><br><span class="line">   -t, --token     Runner token [<span class="variable">$CI_SERVER_TOKEN</span>]</span><br><span class="line">   --tls-ca-file    File containing the certificates <span class="keyword">to</span> verify the<span class="built_in"> peer </span>when using HTTPS [<span class="variable">$CI_SERVER_TLS_CA_FILE</span>]</span><br><span class="line">   --executor     Select executor, eg. shell, docker, etc. [<span class="variable">$RUNNER_EXECUTOR</span>]</span><br><span class="line">   --builds-dir    Directory where builds are stored [<span class="variable">$RUNNER_BUILDS_DIR</span>]</span><br><span class="line">   --cache-dir     Directory where build cache is stored [<span class="variable">$RUNNER_CACHE_DIR</span>]</span><br><span class="line">   --env     Custom environment variables injected <span class="keyword">to</span> build environment [<span class="variable">$RUNNER_ENV</span>]</span><br><span class="line">   --shell     Select bash, cmd <span class="keyword">or</span> powershell [<span class="variable">$RUNNER_SHELL</span>]</span><br><span class="line">   --ssh-user    <span class="built_in"> User </span>name [<span class="variable">$SSH_USER</span>]</span><br><span class="line">   --ssh-password   <span class="built_in"> User </span>password [<span class="variable">$SSH_PASSWORD</span>]</span><br><span class="line">   --ssh-host     Remote host [<span class="variable">$SSH_HOST</span>]</span><br><span class="line">   --ssh-port     Remote host<span class="built_in"> port </span>[<span class="variable">$SSH_PORT</span>]</span><br><span class="line">   --ssh-identity-file   <span class="built_in"> Identity </span>file <span class="keyword">to</span> be used [<span class="variable">$SSH_IDENTITY_FILE</span>]</span><br><span class="line">   --docker-host    Docker daemon<span class="built_in"> address </span>[<span class="variable">$DOCKER_HOST</span>]</span><br><span class="line">   --docker-cert-path    Certificate path [<span class="variable">$DOCKER_CERT_PATH</span>]</span><br><span class="line">   --docker-tlsverify    Use TLS <span class="keyword">and</span> verify the remote [<span class="variable">$DOCKER_TLS_VERIFY</span>]</span><br><span class="line">   --docker-hostname    Custom container hostname [<span class="variable">$DOCKER_HOSTNAME</span>]</span><br><span class="line">   --docker-image    Docker image <span class="keyword">to</span> be used [<span class="variable">$DOCKER_IMAGE</span>]</span><br><span class="line">   --docker-privileged   Give extended privileges <span class="keyword">to</span> container [<span class="variable">$DOCKER_PRIVILEGED</span>]</span><br><span class="line">   --docker-disable-cache   <span class="builtin-name">Disable</span> all container caching [<span class="variable">$DOCKER_DISABLE_CACHE</span>]</span><br><span class="line">   --docker-volumes    Bind mount a volumes [<span class="variable">$DOCKER_VOLUMES</span>]</span><br><span class="line">   --docker-cache-dir    Directory where <span class="keyword">to</span> store caches [<span class="variable">$DOCKER_CACHE_DIR</span>]</span><br><span class="line">   --docker-extra-hosts   <span class="builtin-name">Add</span> a custom host-to-IP mapping [<span class="variable">$DOCKER_EXTRA_HOSTS</span>]</span><br><span class="line">   --docker-links    <span class="builtin-name">Add</span> link <span class="keyword">to</span> another container [<span class="variable">$DOCKER_LINKS</span>]</span><br><span class="line">   --docker-services    <span class="builtin-name">Add</span><span class="built_in"> service </span>that is started with container [<span class="variable">$DOCKER_SERVICES</span>]</span><br><span class="line">   --docker-wait-for-services-timeout  How long <span class="keyword">to</span> wait <span class="keyword">for</span><span class="built_in"> service </span>startup [<span class="variable">$DOCKER_WAIT_FOR_SERVICES_TIMEOUT</span>]</span><br><span class="line">   --docker-allowed-images   Whitelist allowed images [<span class="variable">$DOCKER_ALLOWED_IMAGES</span>]</span><br><span class="line">   --docker-allowed-services   Whitelist allowed services [<span class="variable">$DOCKER_ALLOWED_SERVICES</span>]</span><br><span class="line">   --docker-image-ttl     [<span class="variable">$DOCKER_IMAGE_TTL</span>]</span><br><span class="line">   --parallels-base-name   VM name <span class="keyword">to</span> be used [<span class="variable">$PARALLELS_BASE_NAME</span>]</span><br><span class="line">   --parallels-template-name   VM template <span class="keyword">to</span> be created [<span class="variable">$PARALLELS_TEMPLATE_NAME</span>]</span><br><span class="line">   --parallels-disable-snapshots  <span class="builtin-name">Disable</span> snapshoting <span class="keyword">to</span> speedup VM creation [<span class="variable">$PARALLELS_DISABLE_SNAPSHOTS</span>]</span><br><span class="line">   --virtualbox-base-name   VM name <span class="keyword">to</span> be used [<span class="variable">$VIRTUALBOX_BASE_NAME</span>]</span><br><span class="line">   --virtualbox-disable-snapshots  <span class="builtin-name">Disable</span> snapshoting <span class="keyword">to</span> speedup VM creation [<span class="variable">$VIRTUALBOX_DISABLE_SNAPSHOTS</span>]</span><br></pre></td></tr></table></figure><p>要让一个 Runner 运行起来，<code>--url</code>、<code>--token</code> 和 <code>--executor</code> 选项是必要的。其他选项可根据具体情况和需求进行设置。我们可以看出来，这个命令里面的选项跟配置文件中 Runner 的配置项基本上是一样的。那这个命令的运行和配置文件有没有什么关系呢？从我的试验和思考来看，应该是没有什么关系的。因为：</p><ol><li>这个命令里面并没有指定配置文件位置的选项，如果读取配置文件难道去读取默认位置吗？但是配置文件的位置是可以指定的，不一定在默认位置，这不符合逻辑，所以它应该不会去读配置文件。</li><li>我删掉配置文件，这个命令依然能够运行</li></ol><p>所以，这个命令应该只是一个能让 Runner 运行起来的基础命令。但这个命令运行起来的前提是，GitLab-CI 中必须事先注册有这个 Runner。</p><p>那配置文件有毛用？配置文件的作用在后面，但是从这里我们知道一点：<strong>配置文件里面有 Runner运行时所需要的信息</strong>。</p><p>可能你还有一个问题：我用 root 的用户注册 Runner 时，注册完 Runner 就可以用了，并没有手动地去运行 Runner 啊？这个后面讲。</p><h3 id="批量地运行-Runner"><a href="#批量地运行-Runner" class="headerlink" title="批量地运行 Runner"></a>批量地运行 Runner</h3><p>正常情况下，如果我有多个 Runner，我并不想手动一个个地运行，要是能一次运行多个 Runner 多爽啊！嗯哼，<code>gitlab-ci-multi-runner</code> 就提供了这样一个命令 <code>gitlab-ci-multi-runner run</code>，详情如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost gitlab-runner]# gitlab-ci-multi-runner <span class="builtin-name">run</span> --help</span><br><span class="line">NAME:</span><br><span class="line">   <span class="builtin-name">run</span> - <span class="builtin-name">run</span> multi runner service</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   command <span class="builtin-name">run</span> [command options] [arguments<span class="built_in">..</span>.]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   -c, --config <span class="string">"/etc/gitlab-runner/config.toml"</span><span class="built_in"> Config </span>file [<span class="variable">$CONFIG_FILE</span>]</span><br><span class="line">   -n, --service <span class="string">"gitlab-runner"</span>   Use different names <span class="keyword">for</span> different services</span><br><span class="line">   -d, --working-directory     Specify custom working directory</span><br><span class="line">   -u, --user       Use specific<span class="built_in"> user </span><span class="keyword">to</span> execute shell scripts</span><br><span class="line">   --syslog      Log <span class="keyword">to</span> syslog</span><br></pre></td></tr></table></figure><p>这个命令总共有 5 个选项，让我们从选项来理解一下这个命令：</p><ul><li><code>-c, --config</code> 选项<br>这个选项是用来指定配置文件路径的。如果你想同时运行多个 Runner，你必须得知道你要运行哪些 Runner 以及这些 Runner 运行时所需要的信息。而前面我们说过，配置文件里面就存放着 Runner 运行时所需要的信息。而且一个配置文件是可以存放多个 Runner 的信息的。如果不指定这个选项，就会使用默认的配置文件。</li><li><code>-n, --service</code> 选项<br>这个选项是用来指定服务的别名的。为什么要有这个选项呢？指定别名有什么意义呢？我们从上一个选项可以看出来，一次只能运行一批 Runner，因为一次只能指定一个配置文件。那如果我有多个配置文件，我要运行多批 Runner，那是不是给每一次批量运行服务取不同的别名来区分更好一点呢。</li><li><code>-d, --working-directory</code> 选项<br>这个选项是用来指定此次批量运行服务的工作目录的。如果自己没有指定 <code>builds_dir</code> 的话，此次运行起来的 Runner 会把 <code>builds_dir</code> 放到这个目录里面。</li><li><code>-u, --user</code> 选项<br>这个选项很重要，它指定了该以什么用户权限来运行 Runner。为了安全，我认为不应该给运行 Runner 的用户过高的权限，更不应该以 root 用户来运行 Runner。</li><li><code>--syslog</code> 选项<br>如果指定了这个选项，则把日志记录到系统日志。</li></ul><h3 id="使用服务"><a href="#使用服务" class="headerlink" title="使用服务"></a>使用服务</h3><p>能够批量地运行 Runner 已经很好了，但是还不够好，为什么呢？</p><p>首先，<code>gitlab-ci-multi-runner run</code> 默认是前台运行的，使用体验不好；<br>其次，当 <code>gitlab-ci-multi-runner run</code> 在后台运行的时候，要查看其运行状态不方便，而且也没有提供停止 <code>gitlab-ci-multi-runner run</code> 的命令。<br> 所以，要是能将批量运行Runner这个功能安装为一项服务，就更爽了！</p><p><code>gitlab-ci-multi-runner</code> 确实就提供了这样的功能。<br><code>install</code>、<code>uninstall</code>、<code>start</code>、<code>stop</code>、<code>restart</code>、<code>status</code> 这 6 个命令就是和服务相关的。<br>我一开始对 <code>gitlab-ci-multi-runner</code> 的服务概念感觉比较懵，让我们来看看安装服务 <code>install</code> 这个命令到底干了一件什么事情。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# gitlab-ci-multi-runner install --help</span><br><span class="line">NAME:</span><br><span class="line">   install - install service</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   command install [command options] [arguments<span class="built_in">..</span>.]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   --service, -n <span class="string">"gitlab-runner"</span>   Specify<span class="built_in"> service </span>name <span class="keyword">to</span> use</span><br><span class="line">   --working-directory, -d <span class="string">"/root"</span>   Specify custom root directory where all data are stored</span><br><span class="line">   --config, -c <span class="string">"/etc/gitlab-runner/config.toml"</span> Specify custom<span class="built_in"> config </span>file</span><br><span class="line">   --user, -u       Specify user-name <span class="keyword">to</span> secure the runner</span><br></pre></td></tr></table></figure><p>从选项可以看出，一项服务的信息有 4 个：服务名、工作目录、配置文件和用户。这个命令的选项和 <code>gitlab-ci-multi-runner run</code> 的选项基本一样。可见，批量运行 Runner 和服务之间的关系暧昧。至于是什么关系，往下看 <code>gitlab-ci-multi-runner start</code> 这个命令。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# gitlab-ci-multi-runner start --help</span><br><span class="line">NAME:</span><br><span class="line">   start - start service</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   command start [command options] [arguments<span class="built_in">..</span>.]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   --service, -n <span class="string">"gitlab-runner"</span> Specify<span class="built_in"> service </span>name <span class="keyword">to</span> use</span><br></pre></td></tr></table></figure><p>启动一项服务，只要指定服务的名称就行了（默认服务名称是 gitlab-runner）。启动服务后，运行命令 <code>ps -aux | grep gitlab-runner</code> 查看后台程序，发现启动服务其实就是在后台执行了一个批量运行Runner的任务，所以服务安装命令的选项才会和批量运行 Runner 命令的选项基本一样。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root     18219  0.0  0.1 331872  5332 ?        Ssl  00<span class="function">:06</span>   0<span class="function">:00</span> <span class="string">/usr/bin/gitlab-ci-multi-runner</span> run <span class="params">--working-directory</span> <span class="string">/home/gitlab-runner</span> <span class="params">--config</span> <span class="string">/etc/gitlab-runner/config.toml</span> <span class="params">--service</span> gitlab-runner <span class="params">--user</span> gitlab-runner <span class="params">--syslog</span></span><br></pre></td></tr></table></figure><p>还有 <code>stop</code> 命令用于停止服务，<code>restart</code> 命令用于重启服务，<code>status</code> 用于查看服务状态。这三个命令的使用方法和 <code>start</code> 类似，就不一一介绍了。</p><h2 id="其他一些思考"><a href="#其他一些思考" class="headerlink" title="其他一些思考"></a>其他一些思考</h2><ol><li>什么情况下需要注册 Shared Runner？<br>比如，GitLab 上面所有的工程都有可能需要在公司的服务器上进行编译、测试、部署等工作，这个时候注册一个Shared Runner 供所有工程使用就很合适。</li><li>什么情况下需要注册 Specific Runner？<br>比如，我可能需要在我个人的电脑或者服务器上自动构建我参与的某个工程，这个时候注册一个 Specific Runner 就很合适。</li><li>什么情况下需要在同一台机器上注册多个 Runner？<br>比如，我是 GitLab 的普通用户，没有管理员权限，我同时参与多个项目，那我就需要为我的所有项目都注册一个 Specific Runner，这个时候就需要在同一台机器上注册多个 Runner。</li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.jianshu.com/p/2b43151fb92e" target="_blank" rel="noopener">https://www.jianshu.com/p/2b43151fb92e</a></p>]]></content>
      
      <categories>
          
          <category> Git笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab-CI 与 GitLab-Runner </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack 数据系统 Pillar</title>
      <link href="/2018/09/06/SaltStack%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9FPillar/"/>
      <url>/2018/09/06/SaltStack%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9FPillar/</url>
      <content type="html"><![CDATA[<h1 id="SaltStack-数据系统-Pillar"><a href="#SaltStack-数据系统-Pillar" class="headerlink" title="SaltStack 数据系统 Pillar"></a>SaltStack 数据系统 Pillar</h1><a id="more"></a><table><thead><tr><th>名称</th><th>存储位置</th><th>数据类型</th><th>数据采集更新方式</th><th>应用</th></tr></thead><tbody><tr><td>Grains</td><td>Minion端</td><td>静态数据</td><td>Minion启动时收集，也可以使用 saltutil.sync_grains 进行刷新</td><td>存储 Minion 基本数据，比如用于匹配 Minion，自身数据可以用来作资产管理等。</td></tr><tr><td>Pillar</td><td>Master端</td><td>动态数据</td><td>在Master端定义，指定给对应的Minion。可以使用 saltutil.refresh_pillar 刷新</td><td>存储 Master 指定的数据，只有指定的 Minion 可以看到。用于敏感数据保存。</td></tr></tbody></table><p>Pillar 是在 Master端 设置的<br>Pillar 给 Minion端 指定它想要的数据<br>安全性比较高</p><blockquote><p>查看 <code>Pillar</code> 信息<br>默认是 <code>False</code> 状态<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="meta"># salt <span class="string">'*'</span> pillar.items</span></span><br><span class="line"><span class="symbol">dbfw01:</span></span><br><span class="line">    ----------</span><br><span class="line"><span class="symbol">minion01:</span></span><br><span class="line">    ----------</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>开启查看 <code>Pillar</code> 状态，一般不用打开</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# cd /etc/salt/</span><br><span class="line">[root@master01 ~]# vim /etc/salt/master</span><br><span class="line">...省略...</span><br><span class="line">#pillar_opts: <span class="literal">False</span></span><br><span class="line">改成</span><br><span class="line">pillar_opts: <span class="literal">True</span></span><br><span class="line">...省略...</span><br><span class="line">:wq保存退出</span><br><span class="line"></span><br><span class="line"># 重启 salt-master 服务</span><br><span class="line">systemctl restart salt-master</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master01</span> <span class="string">salt]#</span> <span class="string">salt</span> <span class="string">'minion01'</span> <span class="string">pillar.items</span></span><br><span class="line"><span class="attr">minion01:</span></span><br><span class="line"><span class="bullet">    -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">    master:</span></span><br><span class="line"><span class="bullet">        -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        __role:</span></span><br><span class="line">            <span class="string">master</span></span><br><span class="line"><span class="attr">        auth_mode:</span></span><br><span class="line">            <span class="number">1</span></span><br><span class="line"><span class="attr">        auto_accept:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        cache_sreqs:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        cachedir:</span></span><br><span class="line">            <span class="string">/var/cache/salt/master</span></span><br><span class="line"><span class="attr">        cli_summary:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        client_acl:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        client_acl_blacklist:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        cluster_masters:</span></span><br><span class="line"><span class="attr">        cluster_mode:</span></span><br><span class="line">            <span class="string">paranoid</span></span><br><span class="line"><span class="attr">        con_cache:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        conf_file:</span></span><br><span class="line">            <span class="string">/etc/salt/master</span></span><br><span class="line"><span class="attr">        config_dir:</span></span><br><span class="line">            <span class="string">/etc/salt</span></span><br><span class="line"><span class="attr">        cython_enable:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        daemon:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        default_include:</span></span><br><span class="line">            <span class="string">master.d/*.conf</span></span><br><span class="line"><span class="attr">        enable_gpu_grains:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        enforce_mine_cache:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        enumerate_proxy_minions:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line">            <span class="string">None</span></span><br><span class="line"><span class="attr">        event_return:</span></span><br><span class="line"><span class="attr">        event_return_blacklist:</span></span><br><span class="line"><span class="attr">        event_return_queue:</span></span><br><span class="line">            <span class="number">0</span></span><br><span class="line"><span class="attr">        event_return_whitelist:</span></span><br><span class="line"><span class="attr">        ext_job_cache:</span></span><br><span class="line"><span class="attr">        ext_pillar:</span></span><br><span class="line"><span class="attr">        extension_modules:</span></span><br><span class="line">            <span class="string">/var/cache/salt/extmods</span></span><br><span class="line"><span class="attr">        external_auth:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        failhard:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        file_buffer_size:</span></span><br><span class="line">            <span class="number">1048576</span></span><br><span class="line"><span class="attr">        file_client:</span></span><br><span class="line">            <span class="string">local</span></span><br><span class="line"><span class="attr">        file_ignore_glob:</span></span><br><span class="line">            <span class="string">None</span></span><br><span class="line"><span class="attr">        file_ignore_regex:</span></span><br><span class="line">            <span class="string">None</span></span><br><span class="line"><span class="attr">        file_recv:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        file_recv_max_size:</span></span><br><span class="line">            <span class="number">100</span></span><br><span class="line"><span class="attr">        file_roots:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">            base:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">/srv/salt</span></span><br><span class="line"><span class="attr">        fileserver_backend:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">roots</span></span><br><span class="line"><span class="attr">        fileserver_followsymlinks:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        fileserver_ignoresymlinks:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        fileserver_limit_traversal:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        gather_job_timeout:</span></span><br><span class="line">            <span class="number">10</span></span><br><span class="line"><span class="attr">        gitfs_base:</span></span><br><span class="line">            <span class="string">master</span></span><br><span class="line"><span class="attr">        gitfs_env_blacklist:</span></span><br><span class="line"><span class="attr">        gitfs_env_whitelist:</span></span><br><span class="line"><span class="attr">        gitfs_insecure_auth:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        gitfs_mountpoint:</span></span><br><span class="line"><span class="attr">        gitfs_passphrase:</span></span><br><span class="line"><span class="attr">        gitfs_password:</span></span><br><span class="line"><span class="attr">        gitfs_privkey:</span></span><br><span class="line"><span class="attr">        gitfs_pubkey:</span></span><br><span class="line"><span class="attr">        gitfs_remotes:</span></span><br><span class="line"><span class="attr">        gitfs_root:</span></span><br><span class="line"><span class="attr">        gitfs_user:</span></span><br><span class="line"><span class="attr">        hash_type:</span></span><br><span class="line">            <span class="string">md5</span></span><br><span class="line"><span class="attr">        hgfs_base:</span></span><br><span class="line">            <span class="string">default</span></span><br><span class="line"><span class="attr">        hgfs_branch_method:</span></span><br><span class="line">            <span class="string">branches</span></span><br><span class="line"><span class="attr">        hgfs_env_blacklist:</span></span><br><span class="line"><span class="attr">        hgfs_env_whitelist:</span></span><br><span class="line"><span class="attr">        hgfs_mountpoint:</span></span><br><span class="line"><span class="attr">        hgfs_remotes:</span></span><br><span class="line"><span class="attr">        hgfs_root:</span></span><br><span class="line"><span class="attr">        id:</span></span><br><span class="line">            <span class="string">minion01</span></span><br><span class="line"><span class="attr">        interface:</span></span><br><span class="line">            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">        ioflo_console_logdir:</span></span><br><span class="line"><span class="attr">        ioflo_period:</span></span><br><span class="line">            <span class="number">0.01</span></span><br><span class="line"><span class="attr">        ioflo_realtime:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        ioflo_verbose:</span></span><br><span class="line">            <span class="number">0</span></span><br><span class="line"><span class="attr">        ipv6:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        jinja_lstrip_blocks:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        jinja_trim_blocks:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        job_cache:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        keep_jobs:</span></span><br><span class="line">            <span class="number">24</span></span><br><span class="line"><span class="attr">        key_logfile:</span></span><br><span class="line">            <span class="string">/var/log/salt/key</span></span><br><span class="line"><span class="attr">        keysize:</span></span><br><span class="line">            <span class="number">2048</span></span><br><span class="line"><span class="attr">        log_datefmt:</span></span><br><span class="line">            <span class="string">%H:%M:%S</span></span><br><span class="line"><span class="attr">        log_datefmt_logfile:</span></span><br><span class="line">            <span class="string">%Y-%m-%d</span> <span class="string">%H:%M:%S</span></span><br><span class="line"><span class="attr">        log_file:</span></span><br><span class="line">            <span class="string">/var/log/salt/master</span></span><br><span class="line"><span class="attr">        log_fmt_console:</span></span><br><span class="line">            <span class="string">[%(levelname)-8s]</span> <span class="string">%(message)s</span></span><br><span class="line"><span class="attr">        log_fmt_logfile:</span></span><br><span class="line">            <span class="string">%(asctime)s,%(msecs)03.0f</span> <span class="string">[%(name)-17s][%(levelname)-8s][%(process)d]</span> <span class="string">%(message)s</span></span><br><span class="line"><span class="attr">        log_granular_levels:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        log_level:</span></span><br><span class="line">            <span class="string">warning</span></span><br><span class="line"><span class="attr">        loop_interval:</span></span><br><span class="line">            <span class="number">60</span></span><br><span class="line"><span class="attr">        maintenance_floscript:</span></span><br><span class="line">            <span class="string">/usr/lib/python2.7/site-packages/salt/daemons/flo/maint.flo</span></span><br><span class="line"><span class="attr">        master_floscript:</span></span><br><span class="line">            <span class="string">/usr/lib/python2.7/site-packages/salt/daemons/flo/master.flo</span></span><br><span class="line"><span class="attr">        master_job_cache:</span></span><br><span class="line">            <span class="string">local_cache</span></span><br><span class="line"><span class="attr">        master_pubkey_signature:</span></span><br><span class="line">            <span class="string">master_pubkey_signature</span></span><br><span class="line"><span class="attr">        master_roots:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">            base:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">/srv/salt-master</span></span><br><span class="line"><span class="attr">        master_sign_key_name:</span></span><br><span class="line">            <span class="string">master_sign</span></span><br><span class="line"><span class="attr">        master_sign_pubkey:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        master_tops:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        master_use_pubkey_signature:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        max_event_size:</span></span><br><span class="line">            <span class="number">1048576</span></span><br><span class="line"><span class="attr">        max_minions:</span></span><br><span class="line">            <span class="number">0</span></span><br><span class="line"><span class="attr">        max_open_files:</span></span><br><span class="line">            <span class="number">100000</span></span><br><span class="line"><span class="attr">        minion_data_cache:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        minionfs_blacklist:</span></span><br><span class="line"><span class="attr">        minionfs_env:</span></span><br><span class="line">            <span class="string">base</span></span><br><span class="line"><span class="attr">        minionfs_mountpoint:</span></span><br><span class="line"><span class="attr">        minionfs_whitelist:</span></span><br><span class="line"><span class="attr">        nodegroups:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        open_mode:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        order_masters:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        outputter_dirs:</span></span><br><span class="line"><span class="attr">        peer:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        permissive_pki_access:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        pidfile:</span></span><br><span class="line">            <span class="string">/var/run/salt-master.pid</span></span><br><span class="line"><span class="attr">        pillar_opts:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        pillar_roots:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">            base:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">/srv/pillar</span></span><br><span class="line"><span class="attr">        pillar_safe_render_error:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        pillar_source_merging_strategy:</span></span><br><span class="line">            <span class="string">smart</span></span><br><span class="line"><span class="attr">        pillar_version:</span></span><br><span class="line">            <span class="number">2</span></span><br><span class="line"><span class="attr">        pillarenv:</span></span><br><span class="line">            <span class="string">None</span></span><br><span class="line"><span class="attr">        ping_on_rotate:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        pki_dir:</span></span><br><span class="line">            <span class="string">/etc/salt/pki/master</span></span><br><span class="line"><span class="attr">        preserve_minion_cache:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        pub_hwm:</span></span><br><span class="line">            <span class="number">1000</span></span><br><span class="line"><span class="attr">        publish_port:</span></span><br><span class="line">            <span class="number">4505</span></span><br><span class="line"><span class="attr">        publish_session:</span></span><br><span class="line">            <span class="number">86400</span></span><br><span class="line"><span class="attr">        queue_dirs:</span></span><br><span class="line"><span class="attr">        raet_alt_port:</span></span><br><span class="line">            <span class="number">4511</span></span><br><span class="line"><span class="attr">        raet_clear_remotes:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        raet_main:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        raet_mutable:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        raet_port:</span></span><br><span class="line">            <span class="number">4506</span></span><br><span class="line"><span class="attr">        range_server:</span></span><br><span class="line"><span class="attr">            range:</span><span class="number">80</span></span><br><span class="line"><span class="attr">        reactor:</span></span><br><span class="line"><span class="attr">        reactor_refresh_interval:</span></span><br><span class="line">            <span class="number">60</span></span><br><span class="line"><span class="attr">        reactor_worker_hwm:</span></span><br><span class="line">            <span class="number">10000</span></span><br><span class="line"><span class="attr">        reactor_worker_threads:</span></span><br><span class="line">            <span class="number">10</span></span><br><span class="line"><span class="attr">        renderer:</span></span><br><span class="line">            <span class="string">yaml_jinja</span></span><br><span class="line"><span class="attr">        ret_port:</span></span><br><span class="line">            <span class="number">4506</span></span><br><span class="line"><span class="attr">        root_dir:</span></span><br><span class="line">            <span class="string">/</span></span><br><span class="line"><span class="attr">        rotate_aes_key:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        runner_dirs:</span></span><br><span class="line"><span class="attr">        saltversion:</span></span><br><span class="line">            <span class="number">2015.5</span><span class="number">.10</span></span><br><span class="line"><span class="attr">        search:</span></span><br><span class="line"><span class="attr">        search_index_interval:</span></span><br><span class="line">            <span class="number">3600</span></span><br><span class="line"><span class="attr">        serial:</span></span><br><span class="line">            <span class="string">msgpack</span></span><br><span class="line"><span class="attr">        show_jid:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        show_timeout:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        sign_pub_messages:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        sock_dir:</span></span><br><span class="line">            <span class="string">/var/run/salt/master</span></span><br><span class="line"><span class="attr">        sqlite_queue_dir:</span></span><br><span class="line">            <span class="string">/var/cache/salt/master/queues</span></span><br><span class="line"><span class="attr">        ssh_passwd:</span></span><br><span class="line"><span class="attr">        ssh_port:</span></span><br><span class="line">            <span class="number">22</span></span><br><span class="line"><span class="attr">        ssh_scan_ports:</span></span><br><span class="line">            <span class="number">22</span></span><br><span class="line"><span class="attr">        ssh_scan_timeout:</span></span><br><span class="line">            <span class="number">0.01</span></span><br><span class="line"><span class="attr">        ssh_sudo:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        ssh_timeout:</span></span><br><span class="line">            <span class="number">60</span></span><br><span class="line"><span class="attr">        ssh_user:</span></span><br><span class="line">            <span class="string">root</span></span><br><span class="line"><span class="attr">        state_aggregate:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        state_auto_order:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        state_events:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        state_output:</span></span><br><span class="line">            <span class="string">full</span></span><br><span class="line"><span class="attr">        state_top:</span></span><br><span class="line"><span class="attr">            salt:</span><span class="string">//top.sls</span></span><br><span class="line"><span class="attr">        state_top_saltenv:</span></span><br><span class="line">            <span class="string">None</span></span><br><span class="line"><span class="attr">        state_verbose:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        sudo_acl:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        svnfs_branches:</span></span><br><span class="line">            <span class="string">branches</span></span><br><span class="line"><span class="attr">        svnfs_env_blacklist:</span></span><br><span class="line"><span class="attr">        svnfs_env_whitelist:</span></span><br><span class="line"><span class="attr">        svnfs_mountpoint:</span></span><br><span class="line"><span class="attr">        svnfs_remotes:</span></span><br><span class="line"><span class="attr">        svnfs_root:</span></span><br><span class="line"><span class="attr">        svnfs_tags:</span></span><br><span class="line">            <span class="string">tags</span></span><br><span class="line"><span class="attr">        svnfs_trunk:</span></span><br><span class="line">            <span class="string">trunk</span></span><br><span class="line"><span class="attr">        syndic_dir:</span></span><br><span class="line">            <span class="string">/var/cache/salt/master/syndics</span></span><br><span class="line"><span class="attr">        syndic_event_forward_timeout:</span></span><br><span class="line">            <span class="number">0.5</span></span><br><span class="line"><span class="attr">        syndic_jid_forward_cache_hwm:</span></span><br><span class="line">            <span class="number">100</span></span><br><span class="line"><span class="attr">        syndic_master:</span></span><br><span class="line"><span class="attr">        syndic_max_event_process_time:</span></span><br><span class="line">            <span class="number">0.5</span></span><br><span class="line"><span class="attr">        syndic_wait:</span></span><br><span class="line">            <span class="number">5</span></span><br><span class="line"><span class="attr">        timeout:</span></span><br><span class="line">            <span class="number">5</span></span><br><span class="line"><span class="attr">        token_dir:</span></span><br><span class="line">            <span class="string">/var/cache/salt/master/tokens</span></span><br><span class="line"><span class="attr">        token_expire:</span></span><br><span class="line">            <span class="number">43200</span></span><br><span class="line"><span class="attr">        transport:</span></span><br><span class="line">            <span class="string">zeromq</span></span><br><span class="line"><span class="attr">        user:</span></span><br><span class="line">            <span class="string">root</span></span><br><span class="line"><span class="attr">        verify_env:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        win_gitrepos:</span></span><br><span class="line"><span class="attr">            - https:</span><span class="string">//github.com/saltstack/salt-winrepo.git</span></span><br><span class="line"><span class="attr">        win_repo:</span></span><br><span class="line">            <span class="string">/srv/salt/win/repo</span></span><br><span class="line"><span class="attr">        win_repo_mastercachefile:</span></span><br><span class="line">            <span class="string">/srv/salt/win/repo/winrepo.p</span></span><br><span class="line"><span class="attr">        worker_floscript:</span></span><br><span class="line">            <span class="string">/usr/lib/python2.7/site-packages/salt/daemons/flo/worker.flo</span></span><br><span class="line"><span class="attr">        worker_threads:</span></span><br><span class="line">            <span class="number">5</span></span><br><span class="line"><span class="attr">        zmq_filtering:</span></span><br><span class="line">            <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="Pillar-应用场景"><a href="#Pillar-应用场景" class="headerlink" title="Pillar 应用场景"></a>Pillar 应用场景</h2><p>用于敏感数据，给某一个配置文件设置一个密码，这个密码只希望指定 minion 能看到<br>使用 Pillar 来处理变量差异性</p><h2 id="定义-Pillar-数据"><a href="#定义-Pillar-数据" class="headerlink" title="定义 Pillar 数据"></a>定义 Pillar 数据</h2><blockquote><p>打开 <code>pillar_roots</code> 配置<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="comment"># vim /etc/salt/master</span></span><br><span class="line"><span class="string">...</span>省略<span class="string">...</span></span><br><span class="line">pillar_roots:</span><br><span class="line">  base:</span><br><span class="line">    - <span class="string">/srv/pillar</span></span><br><span class="line"><span class="string">...</span>省略<span class="string">...</span></span><br><span class="line"><span class="function">:wq</span> 保存退出</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 salt-master 服务</span></span><br><span class="line">systemctl restart salt-master</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注意：<code>base</code> 环境是必须有的基础环境，和 <code>topfile</code> 里是对应的<br>可以配置多个环境<br>存放在 <code>/srv/pillar</code> 目录下<br><code>Pillar</code> 也有 <code>topfile</code>，可以指定哪个 <code>Minion</code> 能看到哪一个<br><code>topfile</code> 必须放在 <code>base</code> 环境下</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># mkdir -pv /srv/pillar</span></span><br><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># cd /srv/pillar/</span></span><br><span class="line">[root<span class="symbol">@master01</span> pillar]<span class="meta"># vim /srv/pillar/apache.sls</span></span><br><span class="line">&#123;% <span class="keyword">if</span> grains[<span class="string">'os'</span>] == <span class="string">'CentOS'</span> %&#125;</span><br><span class="line">apache: httpd</span><br><span class="line">&#123;% elif grains[<span class="string">'os'</span>] == <span class="string">'Debian'</span> %&#125;</span><br><span class="line">apache: apache2</span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br><span class="line">:wq 保存退出</span><br></pre></td></tr></table></figure><blockquote><p>将 apache.sls 指定哪个 Minion 能看到<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@master01 ~</span>]<span class="meta"># cd /srv/pillar/</span></span><br><span class="line">[<span class="meta">root@master01 pillar</span>]<span class="meta"># vim /srv/pillar/top.sls</span></span><br><span class="line"><span class="keyword">base</span>:</span><br><span class="line">  <span class="string">'*'</span>:</span><br><span class="line">    - apache</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>让所有机器都能看到这个 apache.sls 的 Pillar</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 pillar]<span class="meta"># salt <span class="string">'*'</span> pillar.items</span></span><br><span class="line"><span class="symbol">dbfw01:</span></span><br><span class="line">    ----------</span><br><span class="line"><span class="symbol">    apache:</span></span><br><span class="line">        httpd</span><br><span class="line"><span class="symbol">minion01:</span></span><br><span class="line">    ----------</span><br><span class="line"><span class="symbol">    apache:</span></span><br><span class="line">        httpd</span><br></pre></td></tr></table></figure><blockquote><p>获取到了 apache 的 pillar，值都是 httpd，因为都是 CentOS 的机器，如果是 Ubuntu 的机器就会显示 apache2</p></blockquote><p><strong>Pillar 主要用于做配置管理，用来定义一些变量和参数，比如：主机名，IP</strong></p><h2 id="Pillar-定位主机"><a href="#Pillar-定位主机" class="headerlink" title="Pillar 定位主机"></a>Pillar 定位主机</h2><blockquote><p><code>-I, --pillar</code> 表示使用 Pillar 来匹配<br>设置完 Pillar 后，需要刷新 Pillar 数据信息，使其生效<br><code>salt &#39;*&#39; saltutil.refresh_pillar</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master01</span> <span class="string">pillar]#</span> <span class="string">salt</span> <span class="string">'*'</span> <span class="string">saltutil.refresh_pillar</span></span><br><span class="line"><span class="attr">dbfw01:</span></span><br><span class="line">    <span class="literal">True</span></span><br><span class="line"><span class="attr">minion01:</span></span><br><span class="line">    <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">[root@master01</span> <span class="string">pillar]#</span> <span class="string">salt</span> <span class="bullet">-I</span> <span class="string">'apache:httpd'</span> <span class="string">test.ping</span></span><br><span class="line"><span class="attr">dbfw01:</span></span><br><span class="line">    <span class="literal">True</span></span><br><span class="line"><span class="attr">minion01:</span></span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack 数据系统 Pillar </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack states sls 状态管理</title>
      <link href="/2018/09/06/SaltStack-states-sls%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>/2018/09/06/SaltStack-states-sls%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="SaltStack-states-sls-状态管理"><a href="#SaltStack-states-sls-状态管理" class="headerlink" title="SaltStack states sls 状态管理"></a>SaltStack states sls 状态管理</h2><a id="more"></a><h3 id="开启-file-roots-状态管理"><a href="#开启-file-roots-状态管理" class="headerlink" title="开启 file_roots 状态管理"></a>开启 file_roots 状态管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# cd /etc/salt/</span><br><span class="line">[root@master01 salt]# vim /etc/salt/master</span><br><span class="line">...省略...</span><br><span class="line"><span class="meta">#</span><span class="bash"> file_roots:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   base:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     - /srv/salt/</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   dev:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     - /srv/salt/dev/services</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     - /srv/salt/dev/states</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   prod:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     - /srv/salt/prod/services</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     - /srv/salt/prod/states</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">file_roots:        # 打开这段注释</span><br><span class="line">  base:</span><br><span class="line">    - /srv/salt</span><br><span class="line">...省略...</span><br><span class="line">:wq保存退出</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 mkdir -pv /srv/salt 目录</span></span><br><span class="line">[root@master01 ~]# mkdir -pv /srv/salt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 Master端服务</span></span><br><span class="line">systemctl restart salt-master</span><br></pre></td></tr></table></figure><blockquote><p>默认必须有一个 base 环境<br>可以指定多个环境：基准环境(base)，开发环境(dev)，生产环境(prod)</p></blockquote><h3 id="编辑-sls-状态配置"><a href="#编辑-sls-状态配置" class="headerlink" title="编辑 sls 状态配置"></a>编辑 sls 状态配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master01</span> <span class="string">~]#</span> <span class="string">cd</span> <span class="string">/srv/salt/</span></span><br><span class="line"><span class="string">[root@master01</span> <span class="string">salt]#</span> <span class="string">vim</span> <span class="string">/srv/salt/nginx.sls</span></span><br><span class="line"><span class="attr">nginx-install:</span>       <span class="comment"># 自定义名称</span></span><br><span class="line">  <span class="string">pkg.installed:</span>     <span class="comment"># 模块.方法</span></span><br><span class="line"><span class="attr">    - names:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nginx-servcice:</span>      <span class="comment"># 自定义名称</span></span><br><span class="line">  <span class="string">service.running:</span>   <span class="comment"># 模块.方法</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">nginx</span>    <span class="comment"># nginx 服务名</span></span><br><span class="line"><span class="attr">    - enable:</span> <span class="literal">True</span>   <span class="comment"># 开机自启</span></span><br><span class="line"><span class="attr">    - reload:</span> <span class="literal">True</span>   <span class="comment"># 开启重新加载</span></span><br></pre></td></tr></table></figure><blockquote><p>执行<br><code>salt &#39;*&#39; 模块.方法 sls文件</code><br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># salt <span class="string">'*'</span> state.sls nginx</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>salt ‘*’ 意思是在所有机器上执行  nginx 这个状态(sls)</p></blockquote><blockquote><p>如果没有指定 <code>-name: nginx</code> 服务名，会报 Result 失败<br>命名服务 <code>nginx-service</code> 不可用，因为会把 <code>nginx-service</code> 当成服务名<br>另一个办法是把 <code>nginx-service</code> 改成 <code>nginx</code>，<code>-name: nginx</code> 就不用写了<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">----------</span><br><span class="line">          ID: nginx-service</span><br><span class="line">    Function: service.running</span><br><span class="line">      Result: <span class="literal">False</span></span><br><span class="line">     Comment: The named<span class="built_in"> service </span>nginx-service is <span class="keyword">not</span> available</span><br><span class="line">     Started: 01:38:22.609850</span><br><span class="line">    Duration: 108.528 ms</span><br><span class="line">     Changes:</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>salt ‘minion01’ 指定在 minion01 机器上执行  nginx 这个状态(sls)<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master01</span> <span class="string">~]#</span> <span class="string">salt</span> <span class="string">'minion01'</span> <span class="string">state.sls</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">minion01:</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">          ID:</span> <span class="string">nginx-install</span></span><br><span class="line"><span class="attr">    Function:</span> <span class="string">pkg.installed</span></span><br><span class="line"><span class="attr">        Name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">      Result:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">     Comment:</span> <span class="string">The</span> <span class="string">following</span> <span class="string">packages</span> <span class="string">were</span> <span class="string">installed/updated:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">     Started:</span> <span class="number">01</span><span class="string">:40:29.448702</span></span><br><span class="line"><span class="attr">    Duration:</span> <span class="number">8950.813</span> <span class="string">ms</span></span><br><span class="line"><span class="attr">     Changes:</span>   </span><br><span class="line"><span class="bullet">              -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">              nginx:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-all-modules:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-mod-http-geoip:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-mod-http-image-filter:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-mod-http-perl:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-mod-http-xslt-filter:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-mod-mail:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-mod-stream:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">          ID:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    Function:</span> <span class="string">service.running</span></span><br><span class="line"><span class="attr">      Result:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">     Comment:</span> <span class="string">Service</span> <span class="string">nginx</span> <span class="string">has</span> <span class="string">been</span> <span class="string">enabled,</span> <span class="string">and</span> <span class="string">is</span> <span class="string">running</span></span><br><span class="line"><span class="attr">     Started:</span> <span class="number">01</span><span class="string">:40:38.412396</span></span><br><span class="line"><span class="attr">    Duration:</span> <span class="number">732.741</span> <span class="string">ms</span></span><br><span class="line"><span class="attr">     Changes:</span>   </span><br><span class="line"><span class="bullet">              -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">              nginx:</span></span><br><span class="line">                  <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">Summary</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-----------</span></span><br><span class="line"><span class="attr">Succeeded:</span> <span class="number">2</span> <span class="string">(changed=2)</span></span><br><span class="line"><span class="attr">Failed:</span>    <span class="number">0</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-----------</span></span><br><span class="line"><span class="string">Total</span> <span class="string">states</span> <span class="attr">run:</span>     <span class="number">2</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在 Minion 端查看</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@minion01</span> ~]<span class="meta"># watch <span class="string">'ps -ef | grep yum'</span></span></span><br><span class="line">[root<span class="symbol">@minion01</span> ~]<span class="meta"># lsof -i:80</span></span><br></pre></td></tr></table></figure><blockquote><p>一台机器可能不止一种状态(sls)配置，可能有多个状态(sls)配置<br>可以使用高级状态(sls)配置<br>写一个入口文件 topfile<br>一般入口文件名为 top.sls<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># vim /srv/salt/top.sls</span></span><br><span class="line">base:           <span class="meta"># 在 base 下</span></span><br><span class="line">  <span class="string">'*'</span>:          <span class="meta"># 在 <span class="string">'*'</span> 所有主机上</span></span><br><span class="line">    - nginx     <span class="meta"># 执行 nginx 这个 sls</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@master01 ~</span>]<span class="meta"># vim /srv/salt/top.sls</span></span><br><span class="line"><span class="keyword">base</span>:            <span class="meta"># 在 base 下</span></span><br><span class="line">  <span class="string">'minion01'</span>:   <span class="meta"># 在 minion01 主机上</span></span><br><span class="line">    - nginx      <span class="meta"># 执行 nginx 这个 sls</span></span><br></pre></td></tr></table></figure><blockquote><p>执行<br><code>salt &#39;*&#39; 模块.高级状态</code></p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># salt <span class="string">'*'</span> state.highstate</span></span><br></pre></td></tr></table></figure><blockquote><p>从入口文件开始读，从 topfile 开始读<br>topfile 里包含了哪些普通状态(sls)，就执行哪些状态(sls)<br>远程执行，状态管理</p></blockquote>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack states sls 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack 数据系统 Grains</title>
      <link href="/2018/09/06/SaltStack%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9FGrains/"/>
      <url>/2018/09/06/SaltStack%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9FGrains/</url>
      <content type="html"><![CDATA[<h1 id="SaltStack-数据系统-Grains"><a href="#SaltStack-数据系统-Grains" class="headerlink" title="SaltStack 数据系统 Grains"></a>SaltStack 数据系统 Grains</h1><a id="more"></a><table><thead><tr><th>名称</th><th>存储位置</th><th>数据类型</th><th>数据采集更新方式</th><th>应用</th></tr></thead><tbody><tr><td>Grains</td><td>Minion端</td><td>静态数据</td><td>Minion启动时收集，也可以使用 saltutil.sync_grains 进行刷新</td><td>存储 Minion 基本数据，比如用于匹配 Minion，自身数据可以用来作资产管理等。</td></tr><tr><td>Pillar</td><td>Master端</td><td>动态数据</td><td>在Master端定义，指定给对应的Minion。可以使用 saltutil.refresh_pillar 刷新</td><td>存储 Master 指定的数据，只有指定的 Minion 可以看到。用于敏感数据保存。</td></tr></tbody></table><blockquote><p>Grains 存放 minion 启动时收集的系统信息<br>Grains 是存储在 minion 端的<br>只有在 minion 启动时才会进行收集，收集完之后就不变了，等下一次 minion 重启，才会变<br>Grains 收集的数据信息称之为静态数据，重启才会收集，不重启就不变</p></blockquote><blockquote><p>Grains 在做配置部署的过程中会经常使用到它，Grains 是 SaltStack 记录 Minion 的一些静态信息的组件，我们可以简单地理解为 Grains 里面记录着每台 Minion 的一些常用属性，比如 CPU、内存、磁盘、网络信息等，我们可以通过 <code>granis.items</code> 查看某台 Minion 的所有 Grains 信息，Minion 的 Grains 信息是 Minion 启动的时候采集汇报给 Master 的，在实际应用环境中我们需要根据自己的业务需求去自定义一些 Grains，关于自定义 Grains 的常用方法有以下几种：</p><ul><li>通过 Minion 配置文件定义</li><li>通过 Grains 相关模块定义</li><li>通过 Python 脚本定义</li></ul></blockquote><blockquote><p>查看 Grains 方法列表<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# salt 'minion*' sys.list_functions grains</span><br><span class="line">minion01:</span><br><span class="line">    -<span class="ruby"> grains.append</span></span><br><span class="line"><span class="ruby">    - grains.delval</span></span><br><span class="line"><span class="ruby">    - grains.filter_by</span></span><br><span class="line"><span class="ruby">    - grains.get</span></span><br><span class="line"><span class="ruby">    - grains.get_or_set_hash</span></span><br><span class="line"><span class="ruby">    - grains.has_value</span></span><br><span class="line"><span class="ruby">    - grains.item</span></span><br><span class="line"><span class="ruby">    - grains.items</span></span><br><span class="line"><span class="ruby">    - grains.ls</span></span><br><span class="line"><span class="ruby">    - grains.remove</span></span><br><span class="line"><span class="ruby">    - grains.setval</span></span><br><span class="line"><span class="ruby">    - grains.setvals</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>详细用法与例子可以通过以下命令查看</p></blockquote><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="meta"># salt 'minion*' sys.doc grains</span></span><br><span class="line"><span class="comment">'grains.append:'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">New</span> <span class="keyword">in</span> version <span class="number">0.17</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">    Append a value <span class="keyword">to</span> a list <span class="keyword">in</span> the grains config file. <span class="keyword">If</span> the grain doesn<span class="comment">'t</span></span><br><span class="line">    exist, the grain <span class="keyword">key</span> <span class="keyword">is</span> added <span class="keyword">and</span> the value <span class="keyword">is</span> appended <span class="keyword">to</span> the <span class="keyword">new</span> grain</span><br><span class="line">    <span class="keyword">as</span> a list item.</span><br><span class="line"></span><br><span class="line">    <span class="keyword">key</span></span><br><span class="line">        The grain <span class="keyword">key</span> <span class="keyword">to</span> be appended <span class="keyword">to</span></span><br><span class="line"></span><br><span class="line">    val</span><br><span class="line">        The value <span class="keyword">to</span> append <span class="keyword">to</span> the grain <span class="keyword">key</span></span><br><span class="line">...省略...</span><br><span class="line"><span class="comment">'grains.setvals:'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Set</span> <span class="keyword">new</span> grains values <span class="keyword">in</span> the grains config file</span><br><span class="line"></span><br><span class="line">    :param Destructive: <span class="keyword">If</span> an operation results <span class="keyword">in</span> a <span class="keyword">key</span> being removed, delete the <span class="keyword">key</span>, too. Defaults <span class="keyword">to</span> <span class="literal">False</span>.</span><br><span class="line"></span><br><span class="line">    CLI Example:</span><br><span class="line"></span><br><span class="line">        salt <span class="comment">'*' grains.setvals "&#123;'key1': 'val1', 'key2': 'val2'&#125;"</span></span><br></pre></td></tr></table></figure><blockquote><p>通过 <code>sys.doc</code> 查看 <code>grains模块.items方法</code> 的使用方法</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# salt <span class="symbol">'minion</span>*' sys.doc grains.items</span><br><span class="line"><span class="symbol">'grains.items</span>:'</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Return</span> <span class="keyword">all</span> <span class="keyword">of</span> the minion<span class="symbol">'s</span> grains</span><br><span class="line"></span><br><span class="line">    CLI Example:</span><br><span class="line"></span><br><span class="line">        salt <span class="string">'*'</span> grains.items</span><br><span class="line"></span><br><span class="line">    Sanitized CLI Example:</span><br><span class="line"></span><br><span class="line">        salt <span class="string">'*'</span> grains.items sanitize=<span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Grains-应用场景"><a href="#Grains-应用场景" class="headerlink" title="Grains 应用场景"></a>Grains 应用场景</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="列出-Grains-所有的-key"><a href="#列出-Grains-所有的-key" class="headerlink" title="列出 Grains 所有的 key"></a>列出 Grains 所有的 key</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# salt 'minion*' grains.ls</span><br><span class="line">minion01:</span><br><span class="line">    -<span class="ruby"> SSDs</span></span><br><span class="line"><span class="ruby">    - biosreleasedate</span></span><br><span class="line"><span class="ruby">    - biosversion</span></span><br><span class="line"><span class="ruby">    - cpu_flags</span></span><br><span class="line"><span class="ruby">    - cpu_model</span></span><br><span class="line"><span class="ruby">    - cpuarch</span></span><br><span class="line"><span class="ruby">    - domain</span></span><br><span class="line"><span class="ruby">    - fqdn</span></span><br><span class="line"><span class="ruby">    - fqdn_ip4</span></span><br><span class="line"><span class="ruby">    - fqdn_ip6</span></span><br><span class="line"><span class="ruby">    - gpus</span></span><br><span class="line"><span class="ruby">    - host</span></span><br><span class="line"><span class="ruby">    - hwaddr_interfaces</span></span><br><span class="line"><span class="ruby">    - id</span></span><br><span class="line"><span class="ruby">    - init</span></span><br><span class="line"><span class="ruby">    - ip4_interfaces</span></span><br><span class="line"><span class="ruby">    - ip6_interfaces</span></span><br><span class="line"><span class="ruby">    - ip_interfaces</span></span><br><span class="line"><span class="ruby">    - ipv4</span></span><br><span class="line"><span class="ruby">    - ipv6</span></span><br><span class="line"><span class="ruby">    - kernel</span></span><br><span class="line"><span class="ruby">    - kernelrelease</span></span><br><span class="line"><span class="ruby">    - locale_info</span></span><br><span class="line"><span class="ruby">    - localhost</span></span><br><span class="line"><span class="ruby">    - lsb_distrib_id</span></span><br><span class="line"><span class="ruby">    - machine_id</span></span><br><span class="line"><span class="ruby">    - manufacturer</span></span><br><span class="line"><span class="ruby">    - master</span></span><br><span class="line"><span class="ruby">    - mdadm</span></span><br><span class="line"><span class="ruby">    - mem_total</span></span><br><span class="line"><span class="ruby">    - nodename</span></span><br><span class="line"><span class="ruby">    - num_cpus</span></span><br><span class="line"><span class="ruby">    - num_gpus</span></span><br><span class="line"><span class="ruby">    - os</span></span><br><span class="line"><span class="ruby">    - os_family</span></span><br><span class="line"><span class="ruby">    - osarch</span></span><br><span class="line"><span class="ruby">    - oscodename</span></span><br><span class="line"><span class="ruby">    - osfinger</span></span><br><span class="line"><span class="ruby">    - osfullname</span></span><br><span class="line"><span class="ruby">    - osmajorrelease</span></span><br><span class="line"><span class="ruby">    - osrelease</span></span><br><span class="line"><span class="ruby">    - osrelease_info</span></span><br><span class="line"><span class="ruby">    - path</span></span><br><span class="line"><span class="ruby">    - productname</span></span><br><span class="line"><span class="ruby">    - ps</span></span><br><span class="line"><span class="ruby">    - pythonexecutable</span></span><br><span class="line"><span class="ruby">    - pythonpath</span></span><br><span class="line"><span class="ruby">    - pythonversion</span></span><br><span class="line"><span class="ruby">    - saltpath</span></span><br><span class="line"><span class="ruby">    - saltversion</span></span><br><span class="line"><span class="ruby">    - saltversioninfo</span></span><br><span class="line"><span class="ruby">    - selinux</span></span><br><span class="line"><span class="ruby">    - serialnumber</span></span><br><span class="line"><span class="ruby">    - server_id</span></span><br><span class="line"><span class="ruby">    - shell</span></span><br><span class="line"><span class="ruby">    - systemd</span></span><br><span class="line"><span class="ruby">    - virtual</span></span><br><span class="line"><span class="ruby">    - zmqversion</span></span><br></pre></td></tr></table></figure><h4 id="显示-grains-所有内容信息"><a href="#显示-grains-所有内容信息" class="headerlink" title="显示 grains 所有内容信息"></a>显示 grains 所有内容信息</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# salt 'minion*' grains.items</span><br><span class="line">minion01:</span><br><span class="line">    -<span class="ruby">---------</span></span><br><span class="line"><span class="ruby">    <span class="symbol">SSDs:</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">biosreleasedate:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">04</span>/<span class="number">01</span>/<span class="number">2014</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">biosversion:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">1.11</span>.<span class="number">0</span>-<span class="number">2</span>.el7</span></span><br><span class="line"><span class="ruby">    <span class="symbol">cpu_flags:</span></span></span><br><span class="line"><span class="ruby">        - fpu</span></span><br><span class="line"><span class="ruby">        - de</span></span><br><span class="line"><span class="ruby">        - pse</span></span><br><span class="line"><span class="ruby">        - tsc</span></span><br><span class="line"><span class="ruby">        - msr</span></span><br><span class="line"><span class="ruby">        - pae</span></span><br><span class="line"><span class="ruby">        - mce</span></span><br><span class="line"><span class="ruby">        - cx8</span></span><br><span class="line"><span class="ruby">        - apic</span></span><br><span class="line"><span class="ruby">        - sep</span></span><br><span class="line"><span class="ruby">        - mtrr</span></span><br><span class="line"><span class="ruby">        - pge</span></span><br><span class="line"><span class="ruby">        - mca</span></span><br><span class="line"><span class="ruby">        - cmov</span></span><br><span class="line"><span class="ruby">        - pse36</span></span><br><span class="line"><span class="ruby">        - clflush</span></span><br><span class="line"><span class="ruby">        - mmx</span></span><br><span class="line"><span class="ruby">        - fxsr</span></span><br><span class="line"><span class="ruby">        - sse</span></span><br><span class="line"><span class="ruby">        - sse2</span></span><br><span class="line"><span class="ruby">        - ht</span></span><br><span class="line"><span class="ruby">        - syscall</span></span><br><span class="line"><span class="ruby">        - nx</span></span><br><span class="line"><span class="ruby">        - lm</span></span><br><span class="line"><span class="ruby">        - rep_good</span></span><br><span class="line"><span class="ruby">        - nopl</span></span><br><span class="line"><span class="ruby">        - pni</span></span><br><span class="line"><span class="ruby">        - cx16</span></span><br><span class="line"><span class="ruby">        - x2apic</span></span><br><span class="line"><span class="ruby">        - hypervisor</span></span><br><span class="line"><span class="ruby">        - lahf_lm</span></span><br><span class="line"><span class="ruby">    <span class="symbol">cpu_model:</span></span></span><br><span class="line"><span class="ruby">        QEMU Virtual CPU version <span class="number">2.5</span>+</span></span><br><span class="line"><span class="ruby">    <span class="symbol">cpuarch:</span></span></span><br><span class="line"><span class="ruby">        x86_64</span></span><br><span class="line"><span class="ruby">    <span class="symbol">domain:</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">fqdn:</span></span></span><br><span class="line"><span class="ruby">        minion01</span></span><br><span class="line"><span class="ruby">    <span class="symbol">fqdn_ip4:</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">192.168</span>.<span class="number">50.208</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">fqdn_ip6:</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">gpus:</span></span></span><br><span class="line"><span class="ruby">        <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">          ----------</span></span><br><span class="line"><span class="ruby">          <span class="symbol">model:</span></span></span><br><span class="line"><span class="ruby">              GD <span class="number">5446</span></span></span><br><span class="line"><span class="ruby">          <span class="symbol">vendor:</span></span></span><br><span class="line"><span class="ruby">              unknown</span></span><br><span class="line"><span class="ruby">    <span class="symbol">host:</span></span></span><br><span class="line"><span class="ruby">        minion01</span></span><br><span class="line"><span class="ruby">    <span class="symbol">hwaddr_interfaces:</span></span></span><br><span class="line"><span class="ruby">        ----------</span></span><br><span class="line"><span class="ruby">        <span class="symbol">eth0:</span></span></span><br><span class="line"><span class="ruby">            <span class="symbol">fa:</span><span class="number">57</span><span class="symbol">:ad</span><span class="symbol">:</span><span class="number">54</span><span class="symbol">:</span><span class="number">77</span><span class="symbol">:</span><span class="number">00</span></span></span><br><span class="line"><span class="ruby">        <span class="symbol">lo:</span></span></span><br><span class="line"><span class="ruby">            <span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">id:</span></span></span><br><span class="line"><span class="ruby">        minion01</span></span><br><span class="line"><span class="ruby">    <span class="symbol">init:</span></span></span><br><span class="line"><span class="ruby">        systemd</span></span><br><span class="line"><span class="ruby">    <span class="symbol">ip4_interfaces:</span></span></span><br><span class="line"><span class="ruby">        ----------</span></span><br><span class="line"><span class="ruby">        <span class="symbol">eth0:</span></span></span><br><span class="line"><span class="ruby">            - <span class="number">192.168</span>.<span class="number">50.171</span></span></span><br><span class="line"><span class="ruby">        <span class="symbol">lo:</span></span></span><br><span class="line"><span class="ruby">            - <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">ip6_interfaces:</span></span></span><br><span class="line"><span class="ruby">        ----------</span></span><br><span class="line"><span class="ruby">        <span class="symbol">eth0:</span></span></span><br><span class="line"><span class="ruby">        <span class="symbol">lo:</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">ip_interfaces:</span></span></span><br><span class="line"><span class="ruby">        ----------</span></span><br><span class="line"><span class="ruby">        <span class="symbol">eth0:</span></span></span><br><span class="line"><span class="ruby">            - <span class="number">192.168</span>.<span class="number">50.171</span></span></span><br><span class="line"><span class="ruby">        <span class="symbol">lo:</span></span></span><br><span class="line"><span class="ruby">            - <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">ipv4:</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">192.168</span>.<span class="number">50.171</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">ipv6:</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">kernel:</span></span></span><br><span class="line"><span class="ruby">        Linux</span></span><br><span class="line"><span class="ruby">    <span class="symbol">kernelrelease:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">3.10</span>.<span class="number">0</span>-<span class="number">862</span>.el7.x86_64</span></span><br><span class="line"><span class="ruby">    <span class="symbol">locale_info:</span></span></span><br><span class="line"><span class="ruby">        ----------</span></span><br><span class="line"><span class="ruby">        <span class="symbol">defaultencoding:</span></span></span><br><span class="line"><span class="ruby">            UTF-<span class="number">8</span></span></span><br><span class="line"><span class="ruby">        <span class="symbol">defaultlanguage:</span></span></span><br><span class="line"><span class="ruby">            en_US</span></span><br><span class="line"><span class="ruby">        <span class="symbol">detectedencoding:</span></span></span><br><span class="line"><span class="ruby">            UTF-<span class="number">8</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">localhost:</span></span></span><br><span class="line"><span class="ruby">        minion01</span></span><br><span class="line"><span class="ruby">    <span class="symbol">lsb_distrib_id:</span></span></span><br><span class="line"><span class="ruby">        CentOS Linux</span></span><br><span class="line"><span class="ruby">    <span class="symbol">machine_id:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">2</span>e1eda950cd34bdd9dc04c8df9294ae<span class="number">0</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">manufacturer:</span></span></span><br><span class="line"><span class="ruby">        Red Hat</span></span><br><span class="line"><span class="ruby">    <span class="symbol">master:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">192.168</span>.<span class="number">35.223</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">mdadm:</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">mem_total:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">3772</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">nodename:</span></span></span><br><span class="line"><span class="ruby">        minion01</span></span><br><span class="line"><span class="ruby">    <span class="symbol">num_cpus:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">2</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">num_gpus:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">1</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">os:</span></span></span><br><span class="line"><span class="ruby">        CentOS</span></span><br><span class="line"><span class="ruby">    <span class="symbol">os_family:</span></span></span><br><span class="line"><span class="ruby">        RedHat</span></span><br><span class="line"><span class="ruby">    <span class="symbol">osarch:</span></span></span><br><span class="line"><span class="ruby">        x86_64</span></span><br><span class="line"><span class="ruby">    <span class="symbol">oscodename:</span></span></span><br><span class="line"><span class="ruby">        Core</span></span><br><span class="line"><span class="ruby">    <span class="symbol">osfinger:</span></span></span><br><span class="line"><span class="ruby">        CentOS Linux-<span class="number">7</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">osfullname:</span></span></span><br><span class="line"><span class="ruby">        CentOS Linux</span></span><br><span class="line"><span class="ruby">    <span class="symbol">osmajorrelease:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">7</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">osrelease:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">7.5</span>.<span class="number">1804</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">osrelease_info:</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">7</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">5</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">1804</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">path:</span></span></span><br><span class="line"><span class="ruby">        /usr/local/<span class="symbol">sbin:</span>/usr/local/<span class="symbol">bin:</span>/usr/<span class="symbol">sbin:</span>/usr/bin</span></span><br><span class="line"><span class="ruby">    <span class="symbol">productname:</span></span></span><br><span class="line"><span class="ruby">        KVM</span></span><br><span class="line"><span class="ruby">    <span class="symbol">ps:</span></span></span><br><span class="line"><span class="ruby">        ps -efH</span></span><br><span class="line"><span class="ruby">    <span class="symbol">pythonexecutable:</span></span></span><br><span class="line"><span class="ruby">        /usr/bin/python</span></span><br><span class="line"><span class="ruby">    <span class="symbol">pythonpath:</span></span></span><br><span class="line"><span class="ruby">        - <span class="regexp">/usr/bin</span></span></span><br><span class="line"><span class="ruby">        - <span class="regexp">/usr/lib</span>64/python27.zip</span></span><br><span class="line"><span class="ruby">        - <span class="regexp">/usr/lib</span>64/python2.<span class="number">7</span></span></span><br><span class="line"><span class="ruby">        - <span class="regexp">/usr/lib</span>64/python2.<span class="number">7</span>/plat-linux2</span></span><br><span class="line"><span class="ruby">        - <span class="regexp">/usr/lib</span>64/python2.<span class="number">7</span>/lib-tk</span></span><br><span class="line"><span class="ruby">        - <span class="regexp">/usr/lib</span>64/python2.<span class="number">7</span>/lib-old</span></span><br><span class="line"><span class="ruby">        - <span class="regexp">/usr/lib</span>64/python2.<span class="number">7</span>/lib-dynload</span></span><br><span class="line"><span class="ruby">        - <span class="regexp">/usr/lib</span>64/python2.<span class="number">7</span>/site-packages</span></span><br><span class="line"><span class="ruby">        - <span class="regexp">/usr/lib</span><span class="regexp">/python2.7/site</span>-packages</span></span><br><span class="line"><span class="ruby">    <span class="symbol">pythonversion:</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">2</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">7</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">5</span></span></span><br><span class="line"><span class="ruby">        - final</span></span><br><span class="line"><span class="ruby">        - <span class="number">0</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">saltpath:</span></span></span><br><span class="line"><span class="ruby">        /usr/lib/python2.<span class="number">7</span>/site-packages/salt</span></span><br><span class="line"><span class="ruby">    <span class="symbol">saltversion:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">2015.5</span>.<span class="number">10</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">saltversioninfo:</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">2015</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">5</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">10</span></span></span><br><span class="line"><span class="ruby">        - <span class="number">0</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">selinux:</span></span></span><br><span class="line"><span class="ruby">        ----------</span></span><br><span class="line"><span class="ruby">        <span class="symbol">enabled:</span></span></span><br><span class="line"><span class="ruby">            False</span></span><br><span class="line"><span class="ruby">        <span class="symbol">enforced:</span></span></span><br><span class="line"><span class="ruby">            Disabled</span></span><br><span class="line"><span class="ruby">    <span class="symbol">serialnumber:</span></span></span><br><span class="line"><span class="ruby">        Not Specified</span></span><br><span class="line"><span class="ruby">    <span class="symbol">server_id:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">1223839238</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">shell:</span></span></span><br><span class="line"><span class="ruby">        /bin/sh</span></span><br><span class="line"><span class="ruby">    <span class="symbol">systemd:</span></span></span><br><span class="line"><span class="ruby">        ----------</span></span><br><span class="line"><span class="ruby">        <span class="symbol">features:</span></span></span><br><span class="line"><span class="ruby">            +PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 -SECCOMP +BLKID +ELFUTILS +KMOD +IDN</span></span><br><span class="line"><span class="ruby">        <span class="symbol">version:</span></span></span><br><span class="line"><span class="ruby">            <span class="number">219</span></span></span><br><span class="line"><span class="ruby">    <span class="symbol">virtual:</span></span></span><br><span class="line"><span class="ruby">        kvm</span></span><br><span class="line"><span class="ruby">    <span class="symbol">zmqversion:</span></span></span><br><span class="line"><span class="ruby">        <span class="number">3.2</span>.<span class="number">5</span></span></span><br></pre></td></tr></table></figure><h4 id="显示某个信息内容"><a href="#显示某个信息内容" class="headerlink" title="显示某个信息内容"></a>显示某个信息内容</h4><blockquote><p>显示 <code>fqdn</code> 信息</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># salt <span class="string">'minion*'</span> grains.item fqdn</span></span><br><span class="line">minion01:</span><br><span class="line">    ----------</span><br><span class="line">    fqdn:</span><br><span class="line">        minion01</span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># salt <span class="string">'minion*'</span> grains.get fqdn</span></span><br><span class="line">minion01:</span><br><span class="line">    minion01</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>item</code> 和 <code>get</code> 显示的效果不同</p></blockquote><blockquote><p>查询 <code>eth0</code> 网卡信息<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># salt <span class="string">'minion*'</span> grains.get ip_interfaces:eth0</span></span><br><span class="line">minion01:</span><br><span class="line">    - <span class="number">192.168</span><span class="number">.50</span><span class="number">.171</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="在-远程执行里-匹配-Minion"><a href="#在-远程执行里-匹配-Minion" class="headerlink" title="在 远程执行里 匹配 Minion"></a>在 远程执行里 匹配 Minion</h3><blockquote><p>在所有 CentOS 的机器上执行命令</p></blockquote><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# salt <span class="string">'minion*'</span> grains.item <span class="built_in">os</span></span><br><span class="line"><span class="name">minion01</span>:</span><br><span class="line">    <span class="comment">----------</span></span><br><span class="line">    <span class="name">os</span>:</span><br><span class="line">        CentOS</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# salt <span class="string">'minion*'</span> grains.get <span class="built_in">os</span></span><br><span class="line"><span class="name">minion01</span>:</span><br><span class="line">    CentOS</span><br></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="meta"># salt <span class="string">'*'</span> grains.get osfinger</span></span><br><span class="line"><span class="symbol">dbfw01:</span></span><br><span class="line">    CentOS<span class="number">-6</span></span><br><span class="line"><span class="symbol">minion01:</span></span><br><span class="line">    CentOS Linux<span class="number">-7</span></span><br></pre></td></tr></table></figure><blockquote><p><code>-G：</code> 表示使用 Grains 来匹配<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="comment"># salt -G os:CentOS cmd.run 'w'</span></span><br><span class="line">minion01:</span><br><span class="line">     <span class="number">23</span>:<span class="number">59</span>:<span class="number">26</span> up <span class="number">27</span> days,  <span class="number">3</span>:<span class="number">00</span>,  <span class="number">0</span> users,  load average: <span class="number">0.01</span>, <span class="number">0.03</span>, <span class="number">0.05</span></span><br><span class="line">    <span class="keyword">USER</span>     <span class="title">TTY</span>      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># salt -G osfinger:<span class="string">'CentOS Linux-7'</span> cmd.run <span class="string">'w'</span></span></span><br><span class="line">minion01:</span><br><span class="line">     <span class="number">00</span>:<span class="number">43</span>:<span class="number">03</span> up <span class="number">27</span> days,  <span class="number">3</span>:<span class="number">44</span>,  <span class="number">0</span> users,  load average: <span class="number">0.00</span>, <span class="number">0.01</span>, <span class="number">0.05</span></span><br><span class="line">    USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br></pre></td></tr></table></figure><blockquote><p>使用 Grains 可以来匹配主机</p></blockquote><h3 id="自定义-Grains"><a href="#自定义-Grains" class="headerlink" title="自定义 Grains"></a>自定义 Grains</h3><blockquote><p>当内置 Grains 满足不了需求时，可以自定义 Grains。<br>SaltStack 支持在 Minion 端通过配置文件的方式来自定义 Grains</p></blockquote><h4 id="通过-Minion-配置文件定义-Grains"><a href="#通过-Minion-配置文件定义-Grains" class="headerlink" title="通过 Minion 配置文件定义 Grains"></a>通过 Minion 配置文件定义 Grains</h4><blockquote><p>在 minion 端，编辑 <code>/etc/salt/minion</code><br>打开 <code>grains: roles:</code>  添加一行自定义 Grains 内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> grains:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">   roles:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">      - minion01-server</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# vim /etc/salt/minion</span><br><span class="line">...省略...</span><br><span class="line">grains:</span><br><span class="line">  roles:    # 角色</span><br><span class="line">     - minion-server    # 配置一个角色</span><br><span class="line">     - webserver    # 可以配置多个</span><br><span class="line">     - memcache</span><br><span class="line">...省略...</span><br><span class="line">:wq保存退出</span><br><span class="line"></span><br><span class="line"># 重启 salt-minion</span><br><span class="line">[root@master01 ~]# systemctl restart salt-minion</span><br></pre></td></tr></table></figure><blockquote><p>在 Master 端，在 <code>roles</code> 是 <code>minion-server</code> 的机器上，执行 <code>echo hello minion01</code></p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># salt -G <span class="string">'roles:minion-server'</span> cmd.run <span class="string">'echo hello minion01'</span></span></span><br><span class="line">minion01:</span><br><span class="line">    hello minion01</span><br></pre></td></tr></table></figure><blockquote><p>当配置 <code>/etc/salt/minion</code> 主配置文件，配置信息过多的情况下，可读性就会变差<br>我们可以另做一个配置 /etc/salt/grains 文件，专门来配置自定义 Grains<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@minion01 salt]# vim /etc/salt/grains</span><br><span class="line">roles:</span><br><span class="line">  -<span class="ruby"> minion-server</span></span><br><span class="line"><span class="ruby">  - minion-java</span></span><br><span class="line"><span class="ruby">  - minion-springboot</span></span><br><span class="line"><span class="ruby">  - minion-tomcat</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Salt 默认会读取这个文件</p></blockquote><blockquote><p>推荐使用这种方式 <code>/etc/salt/minion.d/grains.conf</code><br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@minion01 salt]# vim /etc/salt/minion.d/grains.conf</span><br><span class="line">grains:</span><br><span class="line">  Server_business: Java, Web Site</span><br><span class="line">  Soft:</span><br><span class="line">    -<span class="ruby"> Tomcat</span></span><br><span class="line"><span class="ruby">    - Spring Boot</span></span><br><span class="line"><span class="ruby">  <span class="symbol">roles:</span></span></span><br><span class="line"><span class="ruby">    - minion-server</span></span><br><span class="line"><span class="ruby">  <span class="symbol">restful:</span></span></span><br><span class="line"><span class="ruby">    - minion-springboot</span></span><br><span class="line"><span class="ruby">  <span class="symbol">web:</span></span></span><br><span class="line"><span class="ruby">    - minion-tomcat</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在 master 端执行<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# salt '*' grains.item roles</span><br><span class="line">dbfw01:</span><br><span class="line">    -<span class="ruby">---------</span></span><br><span class="line"><span class="ruby">    <span class="symbol">roles:</span></span></span><br><span class="line"><span class="ruby"><span class="symbol">minion01:</span></span></span><br><span class="line"><span class="ruby">    ----------</span></span><br><span class="line"><span class="ruby">    <span class="symbol">roles:</span></span></span><br><span class="line"><span class="ruby">        - minion-server</span></span><br><span class="line"><span class="ruby">        - minion-java</span></span><br><span class="line"><span class="ruby">        - minion-springboot</span></span><br><span class="line"><span class="ruby">        - minion-tomcat</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 hosts]# salt 'minion01' grains.item roles</span><br><span class="line">minion01:</span><br><span class="line">    -<span class="ruby">---------</span></span><br><span class="line"><span class="ruby">    <span class="symbol">roles:</span></span></span><br><span class="line"><span class="ruby">        - minion-server</span></span><br><span class="line"><span class="ruby">[root@master01 hosts]<span class="comment"># salt 'minion01' grains.item Soft</span></span></span><br><span class="line"><span class="ruby"><span class="symbol">minion01:</span></span></span><br><span class="line"><span class="ruby">    ----------</span></span><br><span class="line"><span class="ruby">    <span class="symbol">Soft:</span></span></span><br><span class="line"><span class="ruby">        - Tomcat</span></span><br><span class="line"><span class="ruby">        - Spring Boot</span></span><br><span class="line"><span class="ruby">[root@master01 hosts]<span class="comment"># salt 'minion01' grains.item Server_business</span></span></span><br><span class="line"><span class="ruby"><span class="symbol">minion01:</span></span></span><br><span class="line"><span class="ruby">    ----------</span></span><br><span class="line"><span class="ruby">    <span class="symbol">Server_business:</span></span></span><br><span class="line"><span class="ruby">        Java, Web Site</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>如果 <code>minion</code> 配置文件开着 <code>roles</code>，这里的 <code>roles</code> 名字就不能开着，否则会冲突<br>我们可以换个名字<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@minion01 salt]<span class="meta"># vim /etc/salt/grains</span></span><br><span class="line"><span class="symbol">restful:</span></span><br><span class="line">  - minion-springboot</span><br><span class="line"><span class="symbol">web:</span></span><br><span class="line">  - minion-tomcat</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在 master 端执行<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="meta"># salt <span class="string">'*'</span> grains.item roles</span></span><br><span class="line"><span class="symbol">dbfw01:</span></span><br><span class="line">    ----------</span><br><span class="line"><span class="symbol">    roles:</span></span><br><span class="line"><span class="symbol">minion01:</span></span><br><span class="line">    ----------</span><br><span class="line"><span class="symbol">    roles:</span></span><br><span class="line">        - minion-server</span><br><span class="line"></span><br><span class="line">[root@master01 ~]<span class="meta"># salt <span class="string">'*'</span> grains.item restful</span></span><br><span class="line"><span class="symbol">dbfw01:</span></span><br><span class="line">    ----------</span><br><span class="line"><span class="symbol">    restful:</span></span><br><span class="line"><span class="symbol">minion01:</span></span><br><span class="line">    ----------</span><br><span class="line"><span class="symbol">    restful:</span></span><br><span class="line">        - minion-springboot</span><br><span class="line"></span><br><span class="line">[root@master01 ~]<span class="meta"># salt <span class="string">'*'</span> grains.item web</span></span><br><span class="line"><span class="symbol">dbfw01:</span></span><br><span class="line">    ----------</span><br><span class="line"><span class="symbol">    web:</span></span><br><span class="line"><span class="symbol">minion01:</span></span><br><span class="line">    ----------</span><br><span class="line"><span class="symbol">    web:</span></span><br><span class="line">        - minion-tomcat</span><br><span class="line"></span><br><span class="line">[root@master01 ~]<span class="meta"># salt -G web:minion-tomcat cmd.run <span class="string">'w'</span></span></span><br><span class="line"><span class="symbol">minion01:</span></span><br><span class="line">     <span class="number">01</span>:<span class="number">22</span>:<span class="number">54</span> up <span class="number">27</span> days,  <span class="number">4</span>:<span class="number">23</span>,  <span class="number">1</span> user,  load average: <span class="number">0.00</span>, <span class="number">0.02</span>, <span class="number">0.05</span></span><br><span class="line">    USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">    luming   pts/<span class="number">0</span>    <span class="number">192.168</span><span class="number">.35</span><span class="number">.219</span>   <span class="number">00</span>:<span class="number">50</span>    <span class="number">1</span>:<span class="number">18</span>   <span class="number">0.10</span>s  <span class="number">0.00</span>s sshd: luming [priv]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="在-topfile-里匹配-Minion"><a href="#在-topfile-里匹配-Minion" class="headerlink" title="在 topfile 里匹配 Minion"></a>在 topfile 里匹配 Minion</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master01</span> <span class="string">salt]#</span> <span class="string">vim</span> <span class="string">nginx.sls</span></span><br><span class="line"><span class="attr">nginx-install:</span></span><br><span class="line">  <span class="string">pkg.installed:</span></span><br><span class="line"><span class="attr">    - names:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nginx:</span></span><br><span class="line">  <span class="string">service.running:</span></span><br><span class="line"><span class="attr">    - enable:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">    - reload:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># vim /srv/salt/top.sls</span></span><br><span class="line">base:</span><br><span class="line">  <span class="string">'roles:minion-server'</span>:</span><br><span class="line">  <span class="meta"># <span class="string">'restful:minion-springboot'</span>:</span></span><br><span class="line">  <span class="meta"># <span class="string">'web:minion-tomcat'</span>:</span></span><br><span class="line">    - match: grain</span><br><span class="line">    - nginx</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@master01</span> salt]<span class="meta"># salt <span class="string">'*'</span> state.highstate</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack 数据系统 Grains </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack 基本架构</title>
      <link href="/2018/09/04/SaltStack%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/"/>
      <url>/2018/09/04/SaltStack%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="SaltStack-基本架构"><a href="#SaltStack-基本架构" class="headerlink" title="SaltStack 基本架构"></a>SaltStack 基本架构</h1><a id="more"></a><p>SaltStack 是一种基于 C/S 架构的服务模式。<br>在 SaltStack 架构中服务端叫作 Master，客户端叫作 Minion。<br>客户端发送请求给服务端，服务端接收到请求并且处理完成后再返回给客户端。</p><p>在 Master 和 Minion 端都是以守护进程的模式运行，一直监听配置文件里面定义的 ret_port（接受 minion 请求）和 publish_port（发布消息）的端口。当 Minion 运行时会自动连接到配置文件里面定义的 Master 地址 ret_port 端口进行连接认证。默认客户端请求 id 是 socket.getfqdn() 取到的值，也可以在 Minion 启动之前修改 Minion 的 id 值。关于整个启动通信过程，可以使用 debug 查看详细记录。</p><blockquote><p>Master端<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salt-<span class="keyword">master</span> <span class="title">-l</span> debug</span><br><span class="line">ss -a | egrep '<span class="number">4505</span>|<span class="number">4506</span>'</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Minion端<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt-minion -l <span class="keyword">debug</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="4505-publish-port"><a href="#4505-publish-port" class="headerlink" title="4505(publish_port)"></a>4505(publish_port)</h2><blockquote><p>为 salt 的消息发布专用端口<br>为 Salt Master pub 接口，提供远程执行命令发送功能</p></blockquote><h2 id="4506-ret-port"><a href="#4506-ret-port" class="headerlink" title="4506(ret_port)"></a>4506(ret_port)</h2><blockquote><p>为客户端与服务端通信的端口。监控此端口可以监控哪些 minion 收到的消息，并回复了结果<br>为 Salt Master Ret 接口，支持认证(auth)，文件服务，结果收集等功能<br>要确保 客户端 能跟 服务端 的这 2 个端口通信，需要保证防火墙对于这两个端口是放开的</p></blockquote><p>Salt 架构中最主要的角色是 Salt master 和 Salt minion<br>另外一种角色是 syndic<br>顾名思义<br>master 是中心控制系统<br>minion 是被管理的客户端</p><h2 id="Salt-部署架构可以分为三种"><a href="#Salt-部署架构可以分为三种" class="headerlink" title="Salt 部署架构可以分为三种"></a>Salt 部署架构可以分为三种</h2><h3 id="第一种：master-gt-minion"><a href="#第一种：master-gt-minion" class="headerlink" title="第一种：master -&gt; minion"></a>第一种：master -&gt; minion</h3><p>这种架构中 master 和所有 minion 都直接连接，minion 接收来自 master 的指令，完成命令执行或配置管理</p><p><img src="http://pa2bdkuiw.bkt.clouddn.com/master_minion.png" alt="master_minion.png"></p><h3 id="第二种：master-gt-syndic-gt-minion"><a href="#第二种：master-gt-syndic-gt-minion" class="headerlink" title="第二种：master -&gt; syndic -&gt; minion"></a>第二种：master -&gt; syndic -&gt; minion</h3><p>这种架构中 master 通过 syndic 对 minion 进行管理，同时该架构可以进行多级扩展</p><p><img src="http://pa2bdkuiw.bkt.clouddn.com/master_syndic_minion.png" alt="master_syndic_minion.png"></p><h3 id="第三种：无-master-的-minion"><a href="#第三种：无-master-的-minion" class="headerlink" title="第三种：无 master 的 minion"></a>第三种：无 master 的 minion</h3><p>Masterless 架构，就不需要单独安装一台 SaltStack Master 机器，只需要在每台机器上安装 Minion，然后采用本机只负责对本机的配置管理工作机制服务模式。<br>这种架构中 minion 不受任何 master 控制，通过本地运行即可完成相关功能</p><p><img src="http://pa2bdkuiw.bkt.clouddn.com/minion.png" alt="minion.png"></p><p>Salt 的两个主要设计理念是 远程执行 和 配置管理。<br>Salt 中的 配置管理系统 可以称作 state，也是基于远程执行系统之上，通过 master 的定义可以让对应的 minion 达到想要的系统状态。</p><h2 id="SaltStack-软件依赖"><a href="#SaltStack-软件依赖" class="headerlink" title="SaltStack 软件依赖"></a>SaltStack 软件依赖</h2><p>SaltStack 有两种消息系统，一种是 RAET，另一种是 ZeroMQ，默认使用 ZeroMQ。</p><table><thead><tr><th>组件名</th><th>注释</th></tr></thead><tbody><tr><td>msgpack-python</td><td>SaltStack 消息交换库</td></tr><tr><td>YAML</td><td>SaltStack 配置解析定义语法</td></tr><tr><td>Jinja2</td><td>SaltStack states 配置模板</td></tr><tr><td>MarkupSafe</td><td>Python unicode 转换库</td></tr><tr><td>apache-libcloud</td><td>SaltStack 对云架构编排库</td></tr><tr><td>Requests</td><td>HTTP Python 库</td></tr><tr><td>ZeroMQ</td><td>SaltStack 消息系统</td></tr><tr><td>pyzmq</td><td>ZeroMQ Python 库</td></tr><tr><td>PyCrypto</td><td>Python 密码库</td></tr><tr><td>M2Crypto</td><td>Openssl Python 包装库</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack 基本架构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack 认证配置</title>
      <link href="/2018/09/04/SaltStack%E8%AE%A4%E8%AF%81%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/09/04/SaltStack%E8%AE%A4%E8%AF%81%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="SaltStack-认证配置"><a href="#SaltStack-认证配置" class="headerlink" title="SaltStack 认证配置"></a>SaltStack 认证配置</h1><a id="more"></a><h2 id="Salt-证书管理"><a href="#Salt-证书管理" class="headerlink" title="Salt 证书管理"></a>Salt 证书管理</h2><blockquote><p>SaltStack 使用 SSL 签发证书的方式进行安全认证。<br>在签发证书之前，可以在 Master 端看到 Minion 的证书签证请求。<br>Salt 和 minion 之间的认证关系是通过 salt-key 在 master 端管理的，生成证书记录在 <code>/etc/salt/pki/master/</code> 目录下</p></blockquote><h2 id="salt-minion-启动后生成秘钥文件"><a href="#salt-minion-启动后生成秘钥文件" class="headerlink" title="salt-minion 启动后生成秘钥文件"></a>salt-minion 启动后生成秘钥文件</h2><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@minion01 ~]<span class="comment"># cd /etc/salt/pki/minion/</span></span><br><span class="line">[root@minion01 minion]<span class="comment"># ll -h</span></span><br><span class="line">-r--------<span class="number"> 1 </span>root root 1.7K Sep <span class="number"> 4 </span>16:19 minion.pem    <span class="comment"># 私钥文件</span></span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>root root <span class="number"> 451 </span>Sep <span class="number"> 4 </span>16:19 minion.pub    <span class="comment"># 公钥文件</span></span><br></pre></td></tr></table></figure><blockquote><p>然后 salt-minion 会把公钥发送给 salt-master</p></blockquote><h2 id="salt-master-启动后生成秘钥文件"><a href="#salt-master-启动后生成秘钥文件" class="headerlink" title="salt-master 启动后生成秘钥文件"></a>salt-master 启动后生成秘钥文件</h2><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="comment"># cd /etc/salt/pki/master/</span></span><br><span class="line">[root@master01 master]<span class="comment"># ll -h</span></span><br><span class="line">total 8.0K</span><br><span class="line">-r--------<span class="number"> 1 </span>root root 1.7K Aug<span class="number"> 27 </span>09:03 master.pem    <span class="comment"># 私钥文件</span></span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>root root <span class="number"> 451 </span>Aug<span class="number"> 27 </span>09:03 master.pub    <span class="comment"># 公钥文件</span></span><br><span class="line">drwxr-xr-x<span class="number"> 2 </span>root root  <span class="number"> 23 </span>Sep <span class="number"> 5 </span>15:59 minions</span><br><span class="line">drwxr-xr-x<span class="number"> 2 </span>root root   <span class="number"> 6 </span>Aug<span class="number"> 27 </span>09:03 minions_autosign</span><br><span class="line">drwxr-xr-x<span class="number"> 2 </span>root root   <span class="number"> 6 </span>Aug<span class="number"> 27 </span>09:03 minions_denied</span><br><span class="line">drwxr-xr-x<span class="number"> 2 </span>root root   <span class="number"> 6 </span>Sep <span class="number"> 5 </span>15:49 minions_pre</span><br><span class="line">drwxr-xr-x<span class="number"> 2 </span>root root   <span class="number"> 6 </span>Aug<span class="number"> 27 </span>09:03 minions_rejected</span><br></pre></td></tr></table></figure><blockquote><p>授权前，在获取到 minion端后，公钥文件会存放在 minions_pre 目录下</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 <span class="literal">master</span>]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── <span class="literal">master</span>.pem</span><br><span class="line">├── <span class="literal">master</span>.pub</span><br><span class="line">├── minions</span><br><span class="line">├── minions_autosign</span><br><span class="line">├── minions_denied</span><br><span class="line">├── minions_pre</span><br><span class="line">│   └── minion01    <span class="comment"># minion端的公钥文件</span></span><br><span class="line">└── minions_rejected</span><br></pre></td></tr></table></figure><blockquote><p>授权后，minion的公钥文件会被存放在 minions 目录下</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 <span class="literal">master</span>]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── <span class="literal">master</span>.pem</span><br><span class="line">├── <span class="literal">master</span>.pub</span><br><span class="line">├── minions</span><br><span class="line">│   └── minion01    <span class="comment"># minion端的公钥文件</span></span><br><span class="line">├── minions_autosign</span><br><span class="line">├── minions_denied</span><br><span class="line">├── minions_pre</span><br><span class="line">└── minions_rejected</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 master]<span class="comment"># cd minions/</span></span><br><span class="line"></span><br><span class="line">[root@master01 minions]<span class="comment"># ll -h</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">451</span> Sep  <span class="number">5</span> <span class="number">15</span><span class="symbol">:</span><span class="number">46</span> minion01</span><br><span class="line"></span><br><span class="line">[root@master01 minions]<span class="comment"># file minion01</span></span><br><span class="line"><span class="symbol">minion01:</span> ASCII text</span><br><span class="line"></span><br><span class="line">[root@master01 minions]<span class="comment"># cat minion01</span></span><br><span class="line">-----<span class="keyword">BEGIN</span> PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0DP70JjbCaGB47qsTxn9</span><br><span class="line">I0M46rRv5HEUcEyaRBRehA+DvuZjjV1ud63WxrvMcRXq/M86EURVyjFDcNaZywi3</span><br><span class="line">SO2K70J+wWxD0HDCV0k8SFR/i83n7nPUVmy+PLlSO+ADl8aWogwUw2wZB4JxZ+OS</span><br><span class="line">gWfwvfFZ41yxIlS+Eteb5SkQtRp/OfZrVyEgY6xp4biURsKzP9kFNvOJHW27fcQ9</span><br><span class="line">/XI4JmX2aKYk4LJRVvudkkLzYBW1NeYRv0kMAVGpMm8SiAkIwi+<span class="number">7</span>CJnEWorqAmc<span class="number">0</span></span><br><span class="line">TNLGhtDyhV51cbG5Wbt/vbg6N/NX5BOmErXibEsh7679Wph0mJ1fq5jKjn1fYu/J</span><br><span class="line">rwIDAQAB</span><br><span class="line">-----<span class="keyword">END</span> PUBLIC KEY-----</span><br></pre></td></tr></table></figure><blockquote><p>minion 端也会保存一份 master的公钥</p></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@minion01 ~]<span class="comment"># cd /etc/salt/pki/minion/</span></span><br><span class="line">[root@minion01 minion]<span class="comment"># ll -h</span></span><br><span class="line">total 12K</span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>root root <span class="number"> 451 </span>Sep <span class="number"> 4 </span>16:19 minion_master.pub    <span class="comment"># master端的公钥文件</span></span><br><span class="line">-r--------<span class="number"> 1 </span>root root 1.7K Sep <span class="number"> 4 </span>16:19 minion.pem</span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>root root <span class="number"> 451 </span>Sep <span class="number"> 4 </span>16:19 minion.pub</span><br></pre></td></tr></table></figure><h2 id="salt-key-命令和参数"><a href="#salt-key-命令和参数" class="headerlink" title="salt-key 命令和参数"></a>salt-key 命令和参数</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：salt-key 参数 [minion端ID(可以是IP，也可以是主机名) [-y]</span><br><span class="line">-<span class="ruby">h, --help   <span class="comment"># 帮助</span></span></span><br><span class="line"><span class="ruby">-y           <span class="comment"># 该参数可免去证书操作的交互（除非对 minion 端很信任，一般不建议使用）</span></span></span><br></pre></td></tr></table></figure><h3 id="显示所有-public-keys"><a href="#显示所有-public-keys" class="headerlink" title="显示所有 public keys"></a>显示所有 public keys</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span><span class="string">l</span> <span class="string">ARG,</span> <span class="bullet">--list=ARG</span>    <span class="comment"># 显示指定状态的 key（支持正则表达式）</span></span><br><span class="line"><span class="bullet">-</span><span class="string">L,</span> <span class="bullet">--list-all</span>        <span class="comment"># 列出当前所有认证，包括Accepted Keys、Denied Keys、Unaccepted Keys、Rejected Keys</span></span><br><span class="line"><span class="string">Accepted</span> <span class="attr">Keys:</span>        <span class="comment"># 已经接受的key</span></span><br><span class="line"><span class="string">Denied</span> <span class="attr">Keys:</span>          <span class="comment"># 未被允许的key</span></span><br><span class="line"><span class="string">Unaccepted</span> <span class="attr">Keys:</span>      <span class="comment"># 未被接受的key</span></span><br><span class="line"><span class="string">Rejected</span> <span class="attr">Keys:</span>        <span class="comment"># 被拒绝的key</span></span><br><span class="line"></span><br><span class="line"><span class="string">[root@master01</span> <span class="string">~]#</span> <span class="string">salt-key</span> <span class="bullet">-L</span></span><br><span class="line"><span class="string">Accepted</span> <span class="attr">Keys:</span></span><br><span class="line"><span class="string">Denied</span> <span class="attr">Keys:</span></span><br><span class="line"><span class="string">Unaccepted</span> <span class="attr">Keys:</span></span><br><span class="line"><span class="string">minion01</span></span><br><span class="line"><span class="string">Rejected</span> <span class="attr">Keys:</span></span><br></pre></td></tr></table></figure><h3 id="接受等待认证的-key"><a href="#接受等待认证的-key" class="headerlink" title="接受等待认证的 key"></a>接受等待认证的 key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-a ACCEPT, --accept=ACCEPT    <span class="comment"># 接受指定等待认证的key（支持正则表达式）</span></span><br><span class="line">                              <span class="comment"># 添加某个或某些个未接受(Unaccepted Keys)认证</span></span><br><span class="line">-A, --accept-all              <span class="comment"># 接受所有等待认证的key(Unaccepted Keys)下所有的minion</span></span><br><span class="line">                              <span class="comment"># 添加所有未接受(Unaccepted Keys)认证</span></span><br><span class="line"></span><br><span class="line">[root@master01 ~]<span class="comment"># salt-key -a minion01</span></span><br><span class="line">The following keys are going to be accepted:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">minion01</span><br><span class="line">Proceed? [n/Y] y</span><br><span class="line">Key <span class="keyword">for</span> minion minion01 accepted.</span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################################################################</span></span><br><span class="line">[root@master01 ~]<span class="comment"># salt-key -A -y</span></span><br><span class="line">The following keys are going to be accepted:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">minion01</span><br><span class="line">Key <span class="keyword">for</span> minion minion01 accepted.</span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################################################################</span></span><br><span class="line">[root@master01 ~]<span class="comment"># salt-key -L</span></span><br><span class="line">Accepted Keys:</span><br><span class="line">minion01</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">Rejected Keys:</span><br></pre></td></tr></table></figure><h3 id="拒绝等待认证的-key"><a href="#拒绝等待认证的-key" class="headerlink" title="拒绝等待认证的 key"></a>拒绝等待认证的 key</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">r REJECT, --reject=REJECT    <span class="comment"># 拒绝指定等待认证的key（支持正则表达式）</span></span></span><br><span class="line"><span class="ruby">-R, --reject-all              <span class="comment"># 拒绝所有等待认证的key</span></span></span><br><span class="line"><span class="ruby">--<span class="keyword">include</span>-all                 <span class="comment"># 显示所有状态的key（包含non-pending状态）</span></span></span><br></pre></td></tr></table></figure><h3 id="打印-public-key"><a href="#打印-public-key" class="headerlink" title="打印 public key"></a>打印 public key</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-p PRINT, <span class="params">--print=PRINT</span>    <span class="comment"># 打印指定的 public key（支持正则表达式）</span></span><br><span class="line">-P, <span class="params">--print-all</span>            <span class="comment"># 打印所有的 public key</span></span><br><span class="line"></span><br><span class="line">[root@master01 ~]<span class="comment"># salt-key -p "minion01"</span></span><br><span class="line">Unaccepted Keys:</span><br><span class="line">minion01:  <span class="params">-----BEGIN</span> PUBLIC KEY<span class="params">-----</span></span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0DP70JjbCaGB47qsTxn9</span><br><span class="line">I0M46rRv5HEUcEyaRBRehA+DvuZjjV1ud63WxrvMcRXq/M86EURVyjFDcNaZywi3</span><br><span class="line">SO2K70J+wWxD0HDCV0k8SFR/i83n7nPUVmy+PLlSO+ADl8aWogwUw2wZB4JxZ+OS</span><br><span class="line">gWfwvfFZ41yxIlS+Eteb5SkQtRp/OfZrVyEgY6xp4biURsKzP9kFNvOJHW27fcQ9</span><br><span class="line"><span class="string">/XI4JmX2aKYk4LJRVvudkkLzYBW1NeYRv0kMAVGpMm8SiAkIwi</span>+7CJnEWorqAmc0</span><br><span class="line">TNLGhtDyhV51cbG5Wbt/vbg6N/NX5BOmErXibEsh7679Wph0mJ1fq5jKjn1fYu/J</span><br><span class="line">rwIDAQAB</span><br><span class="line"><span class="params">-----END</span> PUBLIC KEY<span class="params">-----</span></span><br><span class="line"></span><br><span class="line">[root@master01 ~]<span class="comment"># salt-key -P</span></span><br><span class="line">Unaccepted Keys:</span><br><span class="line">minion01:  <span class="params">-----BEGIN</span> PUBLIC KEY<span class="params">-----</span></span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0DP70JjbCaGB47qsTxn9</span><br><span class="line">I0M46rRv5HEUcEyaRBRehA+DvuZjjV1ud63WxrvMcRXq/M86EURVyjFDcNaZywi3</span><br><span class="line">SO2K70J+wWxD0HDCV0k8SFR/i83n7nPUVmy+PLlSO+ADl8aWogwUw2wZB4JxZ+OS</span><br><span class="line">gWfwvfFZ41yxIlS+Eteb5SkQtRp/OfZrVyEgY6xp4biURsKzP9kFNvOJHW27fcQ9</span><br><span class="line"><span class="string">/XI4JmX2aKYk4LJRVvudkkLzYBW1NeYRv0kMAVGpMm8SiAkIwi</span>+7CJnEWorqAmc0</span><br><span class="line">TNLGhtDyhV51cbG5Wbt/vbg6N/NX5BOmErXibEsh7679Wph0mJ1fq5jKjn1fYu/J</span><br><span class="line">rwIDAQAB</span><br><span class="line"><span class="params">-----END</span> PUBLIC KEY<span class="params">-----</span></span><br></pre></td></tr></table></figure><h3 id="删除已接受的-key"><a href="#删除已接受的-key" class="headerlink" title="删除已接受的 key"></a>删除已接受的 key</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-d <span class="keyword">DELETE</span>, --<span class="keyword">delete</span>=<span class="keyword">DELETE</span>   # 删除某个或某些个已接受(Accepted <span class="keyword">Keys</span>)认证</span><br><span class="line">-D, --<span class="keyword">delete</span>-<span class="keyword">all</span>             # 删除所有已接受(Accepted <span class="keyword">Keys</span>)认证</span><br><span class="line"></span><br><span class="line">[root@master01 ~]# salt-<span class="keyword">key</span> -d minion01 -y</span><br><span class="line">Deleting the following <span class="keyword">keys</span>:</span><br><span class="line">Accepted <span class="keyword">Keys</span>:</span><br><span class="line">minion01</span><br><span class="line"><span class="keyword">Key</span> <span class="keyword">for</span> minion minion01 deleted.</span><br></pre></td></tr></table></figure><h3 id="显示-key-的指纹信息"><a href="#显示-key-的指纹信息" class="headerlink" title="显示 key 的指纹信息"></a>显示 key 的指纹信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-f FINGER, --finger=FINGER  <span class="comment"># 显示指定 key 的指纹信息（正则表达式）</span></span><br><span class="line">-F, --finger-all            <span class="comment"># 显示所有 key 的指纹信息</span></span><br><span class="line"></span><br><span class="line">[root@master01 ~]<span class="comment"># salt-key -f "minion01"</span></span><br><span class="line">Unaccepted Keys:</span><br><span class="line">minion01:  c0:e4:83:48:ef:f7:38:70:c7:1d:47:41:df:9c:03:f0</span><br><span class="line"></span><br><span class="line">[root@master01 ~]<span class="comment"># salt-key -F</span></span><br><span class="line">Local Keys:</span><br><span class="line">master.pem:  db:5a:f0:25:13:50:94:b9:e0:61:1d:b9:fe:bc:62:b6</span><br><span class="line">master.pub:  b9:bd:58:90:01:f2:61:7f:03:be:e1:51:f5:0b:4f:08</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">minion01:  c0:e4:83:48:ef:f7:38:70:c7:1d:47:41:df:9c:03:f0</span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################################################################</span></span><br><span class="line">[root@master01 ~]<span class="comment"># salt-key -f "minion01"</span></span><br><span class="line">Accepted Keys:</span><br><span class="line">minion01:  c0:e4:83:48:ef:f7:38:70:c7:1d:47:41:df:9c:03:f0</span><br><span class="line"></span><br><span class="line">[root@master01 ~]<span class="comment"># salt-key -F</span></span><br><span class="line">Local Keys:</span><br><span class="line">master.pem:  db:5a:f0:25:13:50:94:b9:e0:61:1d:b9:fe:bc:62:b6</span><br><span class="line">master.pub:  b9:bd:58:90:01:f2:61:7f:03:be:e1:51:f5:0b:4f:08</span><br><span class="line">Accepted Keys:</span><br><span class="line">minion01:  c0:e4:83:48:ef:f7:38:70:c7:1d:47:41:df:9c:03:f0</span><br></pre></td></tr></table></figure><h3 id="检测主机是否存活"><a href="#检测主机是否存活" class="headerlink" title="检测主机是否存活"></a>检测主机是否存活</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># salt <span class="string">'minion01'</span> test.ping</span></span><br><span class="line">minion01:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>我们发送一条消息给一个或所有的 minion，并告诉它们运行 salt 内置的一个模块中的一条命令（也可以说是模块中的一个函数）。该示例中，miniion 返回 true。这个命令能查询有哪些 minion 是存活的。</p></blockquote>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack 认证配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack 安装</title>
      <link href="/2018/09/04/SaltStack%E5%AE%89%E8%A3%85/"/>
      <url>/2018/09/04/SaltStack%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="SaltStack-安装"><a href="#SaltStack-安装" class="headerlink" title="SaltStack 安装"></a>SaltStack 安装</h1><a id="more"></a><h2 id="SaltStack-官网"><a href="#SaltStack-官网" class="headerlink" title="SaltStack 官网"></a>SaltStack 官网</h2><p>官网：<a href="https://repo.saltstack.com/#rhel" target="_blank" rel="noopener">https://repo.saltstack.com/#rhel</a><br>GitHub：<a href="https://github.com/saltstack/salt" target="_blank" rel="noopener">https://github.com/saltstack/salt</a></p><h2 id="最新版本-Pin-to-Latest-Release"><a href="#最新版本-Pin-to-Latest-Release" class="headerlink" title="最新版本(Pin to Latest Release)"></a>最新版本(Pin to Latest Release)</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Redhat/CentOS 7 PY2</span></span><br><span class="line">yum -y install https:<span class="comment">//repo.saltstack.com/yum/redhat/salt-repo-latest-2.el7.noarch.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Redhat/CentOS 7 PY3</span></span><br><span class="line"><span class="meta"># Redhat Python3 支持要求先安装EPEL</span></span><br><span class="line">yum -y install https:<span class="comment">//repo.saltstack.com/py3/redhat/salt-py3-repo-latest-2.el7.noarch.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Redhat/CentOS 6 PY2</span></span><br><span class="line">yum -y install https:<span class="comment">//repo.saltstack.com/yum/redhat/salt-repo-latest-2.el6.noarch.rpm</span></span><br></pre></td></tr></table></figure><h2 id="主版本-Pin-to-Major-Version"><a href="#主版本-Pin-to-Major-Version" class="headerlink" title="主版本(Pin to Major Version)"></a>主版本(Pin to Major Version)</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Redhat/CentOS 7 PY2</span></span><br><span class="line">yum -y install https:<span class="comment">//repo.saltstack.com/yum/redhat/salt-repo-2018.3-1.el7.noarch.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Redhat/CentOS 7 PY3</span></span><br><span class="line">yum -y install https:<span class="comment">//repo.saltstack.com/py3/redhat/salt-py3-repo-2018.3-1.el7.noarch.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Redhat/CentOS 6 PY2</span></span><br><span class="line">yum -y install https:<span class="comment">//repo.saltstack.com/yum/redhat/salt-repo-2018.3-1.el6.noarch.rpm</span></span><br></pre></td></tr></table></figure><h2 id="次版本-Pin-to-Minor-Release"><a href="#次版本-Pin-to-Minor-Release" class="headerlink" title="次版本(Pin to Minor Release)"></a>次版本(Pin to Minor Release)</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装指定 SaltStack yum仓库文件 和 key文件</span></span><br><span class="line">rpm --import <span class="symbol">https:</span>/<span class="regexp">/repo.saltstack.com/yum</span><span class="regexp">/redhat/</span><span class="number">6</span>/x86_64/archive/<span class="number">2018.3</span>.<span class="number">2</span>/SALTSTACK-GPG-KEY.pub</span><br><span class="line"></span><br><span class="line">cat /etc/yum.repos.d/saltstack.repo</span><br><span class="line">[saltstack-repo]</span><br><span class="line">name=SaltStack repo <span class="keyword">for</span> RHEL/CentOS <span class="variable">$releasever</span></span><br><span class="line">baseurl=<span class="symbol">https:</span>/<span class="regexp">/repo.saltstack.com/yum</span><span class="regexp">/redhat/</span><span class="variable">$releasever</span>/<span class="variable">$basearch</span>/archive/<span class="number">2018.3</span>.<span class="number">2</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=<span class="symbol">https:</span>/<span class="regexp">/repo.saltstack.com/yum</span><span class="regexp">/redhat/</span><span class="variable">$releasever</span>/<span class="variable">$basearch</span>/archive/<span class="number">2018.3</span>.<span class="number">2</span>/SALTSTACK-GPG-KEY.pub</span><br></pre></td></tr></table></figure><h2 id="安装-Salt-组件"><a href="#安装-Salt-组件" class="headerlink" title="安装 Salt 组件"></a>安装 Salt 组件</h2><blockquote><p>获取完以上的仓库源后，执行以下命令，开始安装</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum clean expire-<span class="keyword">cache</span></span><br><span class="line">yum -y <span class="keyword">install</span> <span class="keyword">salt</span>-<span class="keyword">master</span></span><br><span class="line">yum -y <span class="keyword">install</span> <span class="keyword">salt</span>-minion</span><br><span class="line">yum -y <span class="keyword">install</span> <span class="keyword">salt</span>-ssh</span><br><span class="line">yum -y <span class="keyword">install</span> <span class="keyword">salt</span>-syndic</span><br><span class="line">yum -y <span class="keyword">install</span> <span class="keyword">salt</span>-cloud</span><br><span class="line">yum -y <span class="keyword">install</span> <span class="keyword">salt</span>-api</span><br></pre></td></tr></table></figure><h2 id="启停-salt-master-服务"><a href="#启停-salt-master-服务" class="headerlink" title="启停 salt-master 服务"></a>启停 salt-master 服务</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> salt-<span class="literal">master</span></span><br><span class="line">systemctl -l status salt-<span class="literal">master</span></span><br><span class="line">systemctl enable salt-<span class="literal">master</span></span><br><span class="line">systemctl restart salt-<span class="literal">master</span></span><br><span class="line">systemctl <span class="literal">stop</span> salt-<span class="literal">master</span></span><br><span class="line">journalctl -fu salt-<span class="literal">master</span></span><br><span class="line">ps -ef | grep salt-<span class="literal">master</span></span><br></pre></td></tr></table></figure><h2 id="启停-salt-minion-服务"><a href="#启停-salt-minion-服务" class="headerlink" title="启停 salt-minion 服务"></a>启停 salt-minion 服务</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">start</span> <span class="keyword">salt</span>-minion</span><br><span class="line">systemctl -l <span class="keyword">status</span> <span class="keyword">salt</span>-minion</span><br><span class="line">systemctl <span class="keyword">enable</span> <span class="keyword">salt</span>-minion</span><br><span class="line">systemctl restart <span class="keyword">salt</span>-minion</span><br><span class="line">systemctl <span class="keyword">stop</span> <span class="keyword">salt</span>-minion</span><br><span class="line">journalctl -fu <span class="keyword">salt</span>-minion</span><br><span class="line">ps -ef | grep <span class="keyword">salt</span>-minion</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack 安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 可迭代对象与迭代器对象</title>
      <link href="/2018/09/03/Python%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/09/03/Python%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h1 id="Python-可迭代对象与迭代器对象"><a href="#Python-可迭代对象与迭代器对象" class="headerlink" title="Python 可迭代对象与迭代器对象"></a>Python 可迭代对象与迭代器对象</h1><a id="more"></a><h3 id="什么是迭代器？"><a href="#什么是迭代器？" class="headerlink" title="什么是迭代器？"></a>什么是迭代器？</h3><blockquote><p>迭代的工具<br>什么是迭代？<br>迭代是一个重复的过程，迭代不是单纯的重复，每一次重复都是基于上一次结果而进行的<br>单纯的重复，并不是迭代</p></blockquote><h3 id="为什么要用迭代器？"><a href="#为什么要用迭代器？" class="headerlink" title="为什么要用迭代器？"></a>为什么要用迭代器？</h3><blockquote><p>找到一种可以不依赖索引的迭代取值方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(i):</span><br><span class="line">    print(l[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>依赖于列表的的索引而进行的<br>索引的取值方式只适用于 字符串，列表，元组 的序列数据类型</p></blockquote><blockquote><p>针对没有索引的数据类型：字典，集合，文件<br>用迭代器，不依赖于索引</p></blockquote><h3 id="怎么用迭代器？"><a href="#怎么用迭代器？" class="headerlink" title="怎么用迭代器？"></a>怎么用迭代器？</h3><blockquote><p>可迭代对象<br>在 Python 中，凡是内置有 <code>__iter__</code> 方法对象，都是可迭代的对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">1.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下都是可迭代的对象</span></span><br><span class="line">c = <span class="string">'hello'</span></span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">d = &#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br><span class="line">g = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">f = open(<span class="string">'aa.py'</span>, <span class="string">'rb'</span>)    <span class="comment"># 文件类型是迭代器对象</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>迭代器对象？<br>执行可迭代对象下 <code>__iter__</code> 方法得到的返回值是一个迭代器对象<br>迭代器对象是内置有 <code>__next__</code> 方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">iter_obj = l.__iter__()</span><br><span class="line">print(iter_obj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;list_iterator object at <span class="number">0x00000252754AD080</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如何拿到迭代器？<br>执行可迭代对象下的 <code>__iter__()</code> 方法，就能拿到迭代器对象</p></blockquote><blockquote><p>迭代器对象是内置有 <code>__next__</code> 方法<br>列表类型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">iter_obj = l.__iter__()</span><br><span class="line"></span><br><span class="line">print(iter_obj.__next__())</span><br><span class="line">print(iter_obj.__next__())</span><br><span class="line">print(iter_obj.__next__())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>字典类型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'k1'</span>: <span class="number">1</span>, <span class="string">'k2'</span>: <span class="number">2</span>, <span class="string">'k3'</span>: <span class="number">3</span>&#125;</span><br><span class="line">iter_obj = dic.__iter__()</span><br><span class="line"></span><br><span class="line">print(iter_obj.__next__())</span><br><span class="line">print(iter_obj.__next__())</span><br><span class="line">print(iter_obj.__next__())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line">k3</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这种取值方式，不依赖于索引</p></blockquote><blockquote><p>迭代器拿到了以后，就可以想<br>可以把所有可迭代对象全都变成迭代器对象，然后再按照迭代器的方式，一点一点取值<br>就完全可以脱离索引对我们取值的一种限制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'k1'</span>: <span class="number">1</span>, <span class="string">'k2'</span>: <span class="number">2</span>, <span class="string">'k3'</span>: <span class="number">3</span>&#125;</span><br><span class="line">iter_obj = dic.__iter__()</span><br><span class="line"></span><br><span class="line">print(iter_obj.__next__())</span><br><span class="line">print(iter_obj.__next__())</span><br><span class="line">print(iter_obj.__next__())</span><br><span class="line">print(iter_obj.__next__())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line">k3</span><br><span class="line">StopIteration    <span class="comment"># 结束信号</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>结束信号：<code>StopIteration</code>，一旦这个信号出现后，就应该知道，迭代器里的值已经被取完了<br>按照索引依次排开称为有序，有索引的类型，才是有序的（字符串，列表，元组）<br>字典是无序的，字典取值是按照 key取值的，和顺序没有关系</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim aa.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">f4</span><span class="params">()</span>:</span></span><br><span class="line">                <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'aa.py'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">iter_obj = f.__iter__()</span><br><span class="line"></span><br><span class="line">print(iter_obj.__next__(), end=<span class="string">''</span>)</span><br><span class="line">print(iter_obj.__next__(), end=<span class="string">''</span>)</span><br><span class="line">print(iter_obj.__next__(), end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br></pre></td></tr></table></figure><blockquote><p>对文件来说，特点是什么？<br>也能够按照迭代器的方式，把里面的值，一个个取出来<br>可以完全不依赖于索引，仍然能把一个数据类型里面的值，一次次取出来</p></blockquote><blockquote><p>把字典里的多个值取出来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'k1'</span>: <span class="number">1</span>, <span class="string">'k2'</span>: <span class="number">2</span>, <span class="string">'k3'</span>: <span class="number">3</span>&#125;</span><br><span class="line">iter_obj = dic.__iter__()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:   <span class="comment"># 检测有可能抛异常的代码块</span></span><br><span class="line">        print(iter_obj.__next__())</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line">k3</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>总结</strong></p><blockquote><p>内置有 <code>__iter__</code> 方法的称为可迭代对象<br>内置同时有  <code>__iter__</code>，<code>__next__</code> 方法的称为迭代器对象</p></blockquote><h3 id="迭代器对象内置"><a href="#迭代器对象内置" class="headerlink" title="迭代器对象内置"></a>迭代器对象内置</h3><blockquote><p><code>__next__</code> 方法<br><code>__iter__</code> 方法，执行该方法得到仍然是迭代器本身</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于迭代器的迭代取值方式</span></span><br><span class="line">dic = &#123;<span class="string">'k1'</span>: <span class="number">1</span>, <span class="string">'k2'</span>: <span class="number">2</span>, <span class="string">'k3'</span>: <span class="number">3</span>&#125;</span><br><span class="line">iter_obj = dic.__iter__()</span><br><span class="line">print(iter_obj.__iter__() <span class="keyword">is</span> iter_obj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>迭代器对象一定是可迭代的对象<br>可迭代对象不一定是迭代器对象</p></blockquote><h3 id="for-循环的底层运行机制"><a href="#for-循环的底层运行机制" class="headerlink" title="for 循环的底层运行机制"></a>for 循环的底层运行机制</h3><blockquote><p>for循环可以称为迭代器循环</p><ol><li>执行 for 循环 先调用 <code>in</code> 后面那个对象的 <code>dic.__iter__()</code> 方法，拿到它的迭代器对象 <code>iter_obj = dic.__iter__()</code></li><li>执行迭代器对象的 <code>__next__</code> 方法，得到的返回值赋值 <code>in</code> 前面的变量名<code>k</code>，然后执行一次循环体代码 <code>print(k)</code></li><li>循环执行，直到取完迭代器内所有的值，自动捕捉 <code>StopIteration</code> 异常结束循环</li></ol></blockquote><blockquote><p>for 循环字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'k1'</span>: <span class="number">1</span>, <span class="string">'k2'</span>: <span class="number">2</span>, <span class="string">'k3'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">    print(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line">k3</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>for 循环数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: <span class="string">'int'</span> object <span class="keyword">is</span> <span class="keyword">not</span> iterable</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>for 循环文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'aa.py'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    print(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">f4</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>是否能区分出 <code>in</code> 后面跟的是迭代器对象还是可迭代对象，答：不能<br>只能区分出只要能被 <code>for循环</code> 循环的，都称为可迭代对象，并不能确定它是否是迭代器对象<br>迭代器对象最关键的方法是 <code>__next__</code> 方法，也内置了一个 <code>__iter__</code> 方法，为了和 <code>for循环</code> 的标准统一</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'k1'</span>: <span class="number">1</span>, <span class="string">'k2'</span>: <span class="number">2</span>, <span class="string">'k3'</span>: <span class="number">3</span>&#125;</span><br><span class="line">iter_obj = dic.__iter__()    <span class="comment"># 迭代器对象 = dic.__iter__()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> iter_obj:</span><br><span class="line">    print(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line">k3</span><br></pre></td></tr></table></figure><blockquote><p>迭代器的优缺点<br>优点：</p><ol><li>提供了一种不依赖与索引的迭代取值方式</li><li>节省内存</li></ol><p>缺点：<br>值一次性取完，取完后无法再次取值，除非重新得到新的迭代器对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'k1'</span>: <span class="number">1</span>, <span class="string">'k2'</span>: <span class="number">2</span>, <span class="string">'k3'</span>: <span class="number">3</span>&#125;</span><br><span class="line">iter_obj = dic.__iter__()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'第一次迭代iter_obj'</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> iter_obj:</span><br><span class="line">    print(k)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'第二次迭代iter_obj'</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> iter_obj:</span><br><span class="line">    print(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">第一次迭代iter_obj</span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line">k3</span><br><span class="line">第二次迭代iter_obj</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>需求：两次都取到值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'k1'</span>: <span class="number">1</span>, <span class="string">'k2'</span>: <span class="number">2</span>, <span class="string">'k3'</span>: <span class="number">3</span>&#125;</span><br><span class="line">iter_obj = dic.__iter__()</span><br><span class="line">print(<span class="string">'第一次迭代iter_obj'</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> iter_obj:</span><br><span class="line">    print(k)</span><br><span class="line"></span><br><span class="line">iter_obj = dic.__iter__()</span><br><span class="line">print(<span class="string">'第二次迭代iter_obj'</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> iter_obj:</span><br><span class="line">    print(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">第一次迭代iter_obj</span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line">k3</span><br><span class="line">第二次迭代iter_obj</span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line">k3</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'k1'</span>: <span class="number">1</span>, <span class="string">'k2'</span>: <span class="number">2</span>, <span class="string">'k3'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="string">'第一次迭代'</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">    print(k)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'第二次迭代'</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">    print(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">第一次迭代</span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line">k3</span><br><span class="line">第二次迭代</span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line">k3</span><br></pre></td></tr></table></figure><blockquote><p>迭代器节省内存</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'aa.py'</span>)</span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;_io.TextIOWrapper name=<span class="string">'aa.py'</span> mode=<span class="string">'r'</span> encoding=<span class="string">'cp936'</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'aa.py'</span>)</span><br><span class="line">print(f.__next__())</span><br><span class="line">print(f.__next__())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br></pre></td></tr></table></figure><blockquote><p>谨慎使用<br><code>f.read()</code> 读取方式是一下子把文件内容全部读出，假设文件过大，就会把内存撑爆了<br><code>f.readlines()</code> 它也是一下子把文件内容全部读出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = open()</span><br><span class="line"><span class="comment"># f.readline()    # 读文件内容最好使用 readline()，一次读一行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐读文件方式</span></span><br><span class="line"><span class="comment"># 即便文件非常大，也不会影响到内存（只不过for循环的次数会比较多）</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Python2 中 <code>range()</code> 获取的是一个列表类型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Python3 中 把 <code>range()</code> 做成了一个可迭代对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.__iter__</span><br><span class="line">&lt;method-wrapper <span class="string">'__iter__'</span> of range object at <span class="number">0x000002A00528B450</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.__next__</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'range'</span> object has no attribute <span class="string">'__next__'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj=range(<span class="number">1</span>, <span class="number">100000000000000000000000000000000000000000000000000000000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">range(<span class="number">1</span>, <span class="number">100000000000000000000000000000000000000000000000000000000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iter_obj = obj.__iter__()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(iter_obj)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(iter_obj)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iter_obj.__next__()</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iter_obj.__next__()</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Python3 中使用以下方式，不用担心卡死现象<br>Python2 中就有卡死的风险<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">...省略...</span><br><span class="line"><span class="number">9999</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>缺点：<br>只能往后取，不能往前取，值一次性取完，值取完后无法再次取值，除非重新得到新的迭代器对象<br>无法预测迭代器的长度</p></blockquote><blockquote><p>Python2<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.keys()</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Python3 做了很多优化机制，在 Python2 中的列表数据类型，在 Python3 中都做成了 <code>可迭代对象</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.__iter__</span><br><span class="line">&lt;method-wrapper <span class="string">'__iter__'</span> of dict object at <span class="number">0x0000019A9FD67828</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.__next__</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'dict'</span> object has no attribute <span class="string">'__next__'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = d.keys()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">dict_keys([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.__iter__</span><br><span class="line">&lt;method-wrapper <span class="string">'__iter__'</span> of dict_keys object at <span class="number">0x0000019A9FDAA528</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.__next__</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'dict_keys'</span> object has no attribute <span class="string">'__next__'</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 可迭代对象与迭代器对象 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 三元表达式、列表生成式、字典生成式</title>
      <link href="/2018/09/03/Python%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F-%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%BC%8F/"/>
      <url>/2018/09/03/Python%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F-%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="Python-三元表达式、列表生成式、字典生成式"><a href="#Python-三元表达式、列表生成式、字典生成式" class="headerlink" title="Python 三元表达式、列表生成式、字典生成式"></a>Python 三元表达式、列表生成式、字典生成式</h1><a id="more"></a><blockquote><p>都是为了写代码写的简介一点儿，不用它们有点问题都没有<br>这四个东西都是为了将多行代码写到一行去，而且还能兼顾一个简洁性的特点</p></blockquote><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><blockquote><p>比较两个值最大值最小值的功能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">res = max2(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>三元表达式 其实就是想用一行把上面这些事情搞定</p></blockquote><p><strong>语法</strong></p><blockquote><p>条件成立时的返回值 if 条件 else 条件不成立时的返回值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">res = x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><blockquote><p>条件算一元：<code>if x &gt; y</code><br>条件成立时返回的值算一元：<code>x</code><br>条件不成立时返回的值算一元：<code>else y</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">res = <span class="keyword">True</span> <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">res = <span class="keyword">True</span> <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h2 id="列表生成式（列表推导式）"><a href="#列表生成式（列表推导式）" class="headerlink" title="列表生成式（列表推导式）"></a>列表生成式（列表推导式）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="comment"># res = 'egg %s' % i</span></span><br><span class="line">    <span class="comment"># l.append(res)</span></span><br><span class="line">    l.append(<span class="string">'egg %s'</span> % i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'egg0'</span>, <span class="string">'egg1'</span>, <span class="string">'egg2'</span>, <span class="string">'egg3'</span>, <span class="string">'egg4'</span>, <span class="string">'egg5'</span>, <span class="string">'egg6'</span>, <span class="string">'egg7'</span>, <span class="string">'egg8'</span>, <span class="string">'egg9'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nums = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    nums.append(i)</span><br><span class="line"></span><br><span class="line">print(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p><strong>语法</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[expression <span class="keyword">for</span> item1 <span class="keyword">in</span> iterable1 <span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">for</span> item2 <span class="keyword">in</span> iterable2 <span class="keyword">if</span> condition2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> itemN <span class="keyword">in</span> iterableN <span class="keyword">if</span> conditionN</span><br><span class="line">]</span><br><span class="line">类似于</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> item1 <span class="keyword">in</span> iterable1:</span><br><span class="line">    <span class="keyword">for</span> item2 <span class="keyword">in</span> iterable2:</span><br><span class="line">        <span class="keyword">if</span> condition2</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">for</span> itemN <span class="keyword">in</span> iterableN:</span><br><span class="line">                <span class="keyword">if</span> conditionN:</span><br><span class="line">                    res.append(expression)</span><br></pre></td></tr></table></figure></p><blockquote><p>列表生成式示例</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'egg%s'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'egg0'</span>, <span class="string">'egg1'</span>, <span class="string">'egg2'</span>, <span class="string">'egg3'</span>, <span class="string">'egg4'</span>, <span class="string">'egg5'</span>, <span class="string">'egg6'</span>, <span class="string">'egg7'</span>, <span class="string">'egg8'</span>, <span class="string">'egg9'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>获取10个数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>获取10个数的平方<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>获取从4 开始往后的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nums = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">3</span>:</span><br><span class="line">        nums.append(i)</span><br><span class="line"></span><br><span class="line">print(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i &gt; <span class="number">3</span>]</span><br><span class="line">print(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p><strong>小练习</strong></p><blockquote><p>将 name 不是 lisi 的字符串后缀加上 py，并输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'zhangsan'</span>, <span class="string">'lisi'</span>, <span class="string">'wangwu'</span>, <span class="string">'zhaoliu'</span>]</span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">'lisi'</span>:</span><br><span class="line">        l.append(name + <span class="string">'py'</span>)</span><br><span class="line"></span><br><span class="line">print(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'zhangsanpy'</span>, <span class="string">'wangwupy'</span>, <span class="string">'zhaoliupy'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>将后缀为 py 的字符串，小写变大写，并输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'zhangsan_py'</span>, <span class="string">'lisi'</span>, <span class="string">'wangwu_py'</span>, <span class="string">'zhaoliu_py'</span>]</span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="keyword">if</span> name.endswith(<span class="string">'py'</span>):</span><br><span class="line">        l.append(name.upper())</span><br><span class="line"></span><br><span class="line">print(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'ZHANGSAN_PY'</span>, <span class="string">'WANGWU_PY'</span>, <span class="string">'ZHAOLIU_PY'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>将不是 py 结尾的字符串过滤掉，并转换为大写输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'zhangsan_py'</span>, <span class="string">'lisi'</span>, <span class="string">'wangwu_py'</span>, <span class="string">'zhaoliu_py'</span>]</span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="keyword">if</span> name.endswith(<span class="string">'py'</span>):</span><br><span class="line">        l.append(name.upper())</span><br><span class="line"></span><br><span class="line">names = l</span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'ZHANGSAN_PY'</span>, <span class="string">'WANGWU_PY'</span>, <span class="string">'ZHAOLIU_PY'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>将以下列表中将不是 lisi 的字符串后缀加上 py，并大写输出</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'zhangsan_py'</span>, <span class="string">'lisi'</span>, <span class="string">'wangwu_py'</span>, <span class="string">'zhaoliu_py'</span>]</span><br><span class="line">names = [name.upper() <span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> name.endswith(<span class="string">'py'</span>)]</span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'ZHANGSAN_PY'</span>, <span class="string">'WANGWU_PY'</span>, <span class="string">'ZHAOLIU_PY'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>将以下列表中以 py 结尾的名字过滤掉，然后保留剩下的名字长度</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'zhangsan'</span>, <span class="string">'lisi_py'</span>, <span class="string">'wangwu'</span>, <span class="string">'zhaoliu'</span>]</span><br><span class="line">names = [name <span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> <span class="keyword">not</span> name.endswith(<span class="string">'py'</span>)]</span><br><span class="line">print(names)</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'zhangsan'</span>, <span class="string">'wangwu'</span>, <span class="string">'zhaoliu'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#####################################################################################</span></span><br><span class="line">names = [<span class="string">'zhangsan'</span>, <span class="string">'lisi_py'</span>, <span class="string">'wangwu'</span>, <span class="string">'zhaoliu'</span>]</span><br><span class="line">names = [name <span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> <span class="keyword">not</span> name.endswith(<span class="string">'py'</span>)]</span><br><span class="line">print(names)</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><h2 id="字典生成式"><a href="#字典生成式" class="headerlink" title="字典生成式"></a>字典生成式</h2><blockquote><p>集合生成式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i &gt; <span class="number">3</span>&#125;</span><br><span class="line">print(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>把符号 <code>[]</code> 换成 <code>{}</code> 就是字典表达式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;i:i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">3</span>, <span class="number">4</span>: <span class="number">4</span>, <span class="number">5</span>: <span class="number">5</span>, <span class="number">6</span>: <span class="number">6</span>, <span class="number">7</span>: <span class="number">7</span>, <span class="number">8</span>: <span class="number">8</span>, <span class="number">9</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line">d = &#123;i:i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i &gt; <span class="number">3</span>&#125;</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="number">4</span>: <span class="number">4</span>, <span class="number">5</span>: <span class="number">5</span>, <span class="number">6</span>: <span class="number">6</span>, <span class="number">7</span>: <span class="number">7</span>, <span class="number">8</span>: <span class="number">8</span>, <span class="number">9</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>小练习</strong></p><blockquote><p>将以下列表内的字典数据类型，转换成字典类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">userinfo = [(<span class="string">'egon'</span>, <span class="string">'123'</span>), (<span class="string">'alex'</span>, <span class="string">'456'</span>), (<span class="string">'wxx'</span>, <span class="string">'679'</span>)]</span><br><span class="line">dic = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> userinfo&#125;</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="string">'egon'</span>: <span class="string">'123'</span>, <span class="string">'alex'</span>, <span class="string">'456'</span>, <span class="string">'wxx'</span>: <span class="string">'679'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">userinfo = [(<span class="string">'egon'</span>, <span class="string">'123'</span>), (<span class="string">'alex'</span>, <span class="string">'456'</span>), (<span class="string">'wxx'</span>, <span class="string">'679'</span>)]</span><br><span class="line">dic = &#123;item[<span class="number">0</span>]:item[<span class="number">1</span>] <span class="keyword">for</span> item <span class="keyword">in</span> userinfo&#125;</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="string">'egon'</span>: <span class="string">'123'</span>, <span class="string">'alex'</span>, <span class="string">'456'</span>, <span class="string">'wxx'</span>: <span class="string">'679'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">userinfo = [(<span class="string">'egon'</span>, <span class="string">'123'</span>), (<span class="string">'alex'</span>, <span class="string">'456'</span>), (<span class="string">'wxx'</span>, <span class="string">'679'</span>)]</span><br><span class="line">dic = &#123;k:v <span class="keyword">for</span> k, v <span class="keyword">in</span> userinfo&#125;</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="string">'egon'</span>: <span class="string">'123'</span>, <span class="string">'alex'</span>, <span class="string">'456'</span>, <span class="string">'wxx'</span>: <span class="string">'679'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>将列表转换成字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">info = [</span><br><span class="line">    [<span class="string">'name'</span>, <span class="string">'egon'</span>],</span><br><span class="line">    (<span class="string">'age'</span>, <span class="number">18</span>),</span><br><span class="line">    [<span class="string">'sex'</span>, <span class="string">'male'</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'egon'</span>]</span><br><span class="line">(<span class="string">'age'</span>, <span class="number">18</span>)</span><br><span class="line">[<span class="string">'sex'</span>, <span class="string">'male'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">info = [</span><br><span class="line">    [<span class="string">'name'</span>, <span class="string">'egon'</span>],</span><br><span class="line">    (<span class="string">'age'</span>, <span class="number">18</span>),</span><br><span class="line">    [<span class="string">'sex'</span>, <span class="string">'male'</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info:</span><br><span class="line">    print(item[<span class="number">0</span>], item[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">name egon</span><br><span class="line">age <span class="number">18</span></span><br><span class="line">sex male</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">info = [</span><br><span class="line">    [<span class="string">'name'</span>, <span class="string">'egon'</span>],</span><br><span class="line">    (<span class="string">'age'</span>, <span class="number">18</span>),</span><br><span class="line">    [<span class="string">'sex'</span>, <span class="string">'male'</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info:</span><br><span class="line">    d[item[<span class="number">0</span>]] = item[<span class="number">1</span>]</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">info = [</span><br><span class="line">    [<span class="string">'name'</span>, <span class="string">'egon'</span>],</span><br><span class="line">    (<span class="string">'age'</span>, <span class="number">18</span>),</span><br><span class="line">    [<span class="string">'sex'</span>, <span class="string">'male'</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">d = &#123;item[<span class="number">0</span>]: item[<span class="number">1</span>] <span class="keyword">for</span> item <span class="keyword">in</span> info&#125;</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>把 key 变成大写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'egon'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">d = &#123;k.upper():v <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items()&#125;</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="string">'NAME'</span>: <span class="string">'egon'</span>, <span class="string">'AGE'</span>: <span class="number">18</span>, <span class="string">'SEX'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 三元表达式、列表生成式、字典生成式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker 资源汇总</title>
      <link href="/2018/09/01/Docker%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/"/>
      <url>/2018/09/01/Docker%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h1 id="Docker-资源汇总"><a href="#Docker-资源汇总" class="headerlink" title="Docker 资源汇总"></a>Docker 资源汇总</h1><a id="more"></a><h3 id="Docker官方英文资源"><a href="#Docker官方英文资源" class="headerlink" title="Docker官方英文资源"></a>Docker官方英文资源</h3><p>Docker官网：<a href="http://www.docker.com/" target="_blank" rel="noopener">http://www.docker.com</a><br>Docker windows入门：<a href="https://docs.docker.com/windows/" target="_blank" rel="noopener">https://docs.docker.com/windows/</a><br>Docker Linux 入门：<a href="https://docs.docker.com/linux/" target="_blank" rel="noopener">https://docs.docker.com/linux/</a><br>Docker mac 入门：<a href="https://docs.docker.com/mac/" target="_blank" rel="noopener">https://docs.docker.com/mac/</a><br>Docker 用户指引：<a href="https://docs.docker.com/engine/userguide/" target="_blank" rel="noopener">https://docs.docker.com/engine/userguide/</a><br>Docker 官方博客：<a href="http://blog.docker.com/" target="_blank" rel="noopener">http://blog.docker.com/</a><br>Docker Hub: <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a><br>Docker开源： <a href="https://www.docker.com/open-source" target="_blank" rel="noopener">https://www.docker.com/open-source</a></p><h3 id="Docker中文资源"><a href="#Docker中文资源" class="headerlink" title="Docker中文资源"></a>Docker中文资源</h3><p>Docker中文网站：<a href="https://www.docker-cn.com/" target="_blank" rel="noopener">https://www.docker-cn.com/</a><br>Docker安装手册：<a href="https://docs.docker-cn.com/engine/installation/" target="_blank" rel="noopener">https://docs.docker-cn.com/engine/installation/</a></p><h3 id="Docker-国内镜像"><a href="#Docker-国内镜像" class="headerlink" title="Docker 国内镜像"></a>Docker 国内镜像</h3><p>网易加速器：<a href="http://hub-mirror.c.163.com" target="_blank" rel="noopener">http://hub-mirror.c.163.com</a><br>官方中国加速器：<a href="https://registry.docker-cn.com" target="_blank" rel="noopener">https://registry.docker-cn.com</a><br>ustc的镜像：<a href="https://docker.mirrors.ustc.edu.cn" target="_blank" rel="noopener">https://docker.mirrors.ustc.edu.cn</a><br>daocloud：<a href="https://www.daocloud.io/mirror#accelerator-doc（注册后使用）" target="_blank" rel="noopener">https://www.daocloud.io/mirror#accelerator-doc（注册后使用）</a></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-resources.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-resources.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker 资源汇总 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker tag 命令</title>
      <link href="/2018/09/01/Docker-tag%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-tag%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-tag-命令"><a href="#Docker-tag-命令" class="headerlink" title="Docker tag 命令"></a>Docker tag 命令</h1><a id="more"></a><p><strong>docker tag :</strong> 标记本地镜像，将其归入某一仓库。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag [<span class="string">OPTIONS</span>] IMAGE[<span class="string">:TAG</span>] [<span class="string">REGISTRYHOST/</span>][<span class="symbol">USERNAME/</span>]NAME[:TAG]</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将镜像 ubuntu:15.10 标记为 runoob/ubuntu:v3 镜像。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhsot ~] docker <span class="keyword">tag</span> <span class="title">ubuntu</span>:<span class="number">15.10</span> runoob/ubuntu:v3</span><br><span class="line">[root@localhsot ~] docker images runoob/ubuntu:v3</span><br><span class="line">REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             SIZE</span><br><span class="line">runoob/ubuntu       v3                  <span class="number">4</span>e3b13c8a266        <span class="number">3</span> months ago        <span class="number">136.3</span> MB</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-tag-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-tag-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker tag 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker search 命令</title>
      <link href="/2018/09/01/Docker-search%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-search%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-search-命令"><a href="#Docker-search-命令" class="headerlink" title="Docker search 命令"></a>Docker search 命令</h1><a id="more"></a><p><strong>docker search :</strong> 从 Docker Hub 查找镜像</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search <span class="string">[OPTIONS]</span> TERM</span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>–automated :</strong> 只列出 automated build 类型的镜像；</li><li><strong>–no-trunc :</strong> 显示完整的镜像描述；</li><li><strong>-s :</strong> 列出收藏数不小于指定值的镜像。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>从 Docker Hub 查找所有镜像名包含 java，并且收藏数大于 10 的镜像</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~] docker search -s <span class="number">10</span> java</span><br><span class="line">NAME                  DESCRIPTION                           STARS   OFFICIAL   AUTOMATED</span><br><span class="line">java                  Java is a concurrent, class-based...   <span class="number">1037</span>    [OK]       </span><br><span class="line">anapsix/alpine-java   Oracle Java <span class="number">8</span> (and <span class="number">7</span>) with GLIBC ...   <span class="number">115</span>                [OK]</span><br><span class="line">develar/java                                                 <span class="number">46</span>                 [OK]</span><br><span class="line">isuper/java-oracle    This repository contains all java...   <span class="number">38</span>                 [OK]</span><br><span class="line">lwieske/java<span class="number">-8</span>        Oracle Java <span class="number">8</span> Container - Full + ...   <span class="number">27</span>                 [OK]</span><br><span class="line">nimmis/java-centos    This is docker images of CentOS <span class="number">7.</span>..   <span class="number">13</span>                 [OK]</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-search-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-search-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker search 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker push 命令</title>
      <link href="/2018/09/01/Docker-push%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-push%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-push-命令"><a href="#Docker-push-命令" class="headerlink" title="Docker push 命令"></a>Docker push 命令</h1><a id="more"></a><p><strong>docker push :</strong> 将本地的镜像上传到镜像仓库，要先登陆到镜像仓库。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push <span class="string">[OPTIONS]</span> NAME<span class="string">[:TAG]</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>–disable-content-trust :</strong> 忽略镜像的校验，默认开启。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>上传本地镜像 <code>myapache:v1</code> 到镜像仓库中。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="keyword">push </span>myapache:<span class="built_in">v1</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-push-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-push-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker push 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker pull 命令</title>
      <link href="/2018/09/01/Docker-pull%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-pull%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-pull-命令"><a href="#Docker-pull-命令" class="headerlink" title="Docker pull 命令"></a>Docker pull 命令</h1><a id="more"></a><p><strong>docker pull :</strong> 从镜像仓库中拉取或者更新指定镜像</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [OPTIONS] NAME[<span class="symbol">:TAG|</span><span class="variable">@DIGEST</span>]</span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-a :</strong> 拉取所有 tagged 镜像</li><li><strong>–disable-content-trust :</strong> 忽略镜像的校验，默认开启</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>从 Docker Hub 下载 java 最新版镜像。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker pull java</span></span><br></pre></td></tr></table></figure><p>从 Docker Hub 下载 REPOSITORY 为 java 的所有镜像。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull -<span class="selector-tag">a</span> java</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-pull-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-pull-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker pull 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker version 命令</title>
      <link href="/2018/09/01/Docker-version%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-version%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-version-命令"><a href="#Docker-version-命令" class="headerlink" title="Docker version 命令"></a>Docker version 命令</h1><a id="more"></a><p><strong>docker version :</strong> 显示 Docker 版本信息。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version <span class="string">[OPTIONS]</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-f :</strong> 指定返回值的模板文件。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>显示 Docker 版本信息。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">version</span></span><br><span class="line"><span class="attr">Client:</span></span><br><span class="line"><span class="attr"> Version:</span>      <span class="number">1.8</span><span class="number">.2</span></span><br><span class="line"> <span class="string">API</span> <span class="attr">version:</span>  <span class="number">1.20</span></span><br><span class="line"> <span class="string">Go</span> <span class="attr">version:</span>   <span class="string">go1.4.2</span></span><br><span class="line"> <span class="string">Git</span> <span class="attr">commit:</span>   <span class="number">0</span><span class="string">a8c2e3</span></span><br><span class="line"><span class="attr"> Built:</span>        <span class="string">Thu</span> <span class="string">Sep</span> <span class="number">10</span> <span class="number">19</span><span class="string">:19:00</span> <span class="string">UTC</span> <span class="number">2015</span></span><br><span class="line"> <span class="string">OS/Arch:</span>      <span class="string">linux/amd64</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line"><span class="attr"> Version:</span>      <span class="number">1.8</span><span class="number">.2</span></span><br><span class="line"> <span class="string">API</span> <span class="attr">version:</span>  <span class="number">1.20</span></span><br><span class="line"> <span class="string">Go</span> <span class="attr">version:</span>   <span class="string">go1.4.2</span></span><br><span class="line"> <span class="string">Git</span> <span class="attr">commit:</span>   <span class="number">0</span><span class="string">a8c2e3</span></span><br><span class="line"><span class="attr"> Built:</span>        <span class="string">Thu</span> <span class="string">Sep</span> <span class="number">10</span> <span class="number">19</span><span class="string">:19:00</span> <span class="string">UTC</span> <span class="number">2015</span></span><br><span class="line"> <span class="string">OS/Arch:</span>      <span class="string">linux/amd64</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-version-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-version-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker version 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker info 命令</title>
      <link href="/2018/09/01/Docker-info%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-info%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-info-命令"><a href="#Docker-info-命令" class="headerlink" title="Docker info 命令"></a>Docker info 命令</h1><a id="more"></a><p><strong>docker info :</strong> 显示 Docker 系统信息，包括镜像和容器数。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> <span class="literal">info</span> [OPTIONS]</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>查看 docker 系统信息。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br><span class="line"><span class="string">Containers:</span> <span class="number">12</span></span><br><span class="line"><span class="string">Images:</span> <span class="number">41</span></span><br><span class="line">Storage <span class="string">Driver:</span> aufs</span><br><span class="line"> Root <span class="string">Dir:</span> <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>aufs</span><br><span class="line"> Backing <span class="string">Filesystem:</span> extfs</span><br><span class="line"><span class="symbol"> Dirs:</span> <span class="number">66</span></span><br><span class="line"> Dirperm1 <span class="string">Supported:</span> <span class="literal">false</span></span><br><span class="line">Execution <span class="string">Driver:</span> native<span class="number">-0.2</span></span><br><span class="line">Logging <span class="string">Driver:</span> json-file</span><br><span class="line">Kernel <span class="string">Version:</span> <span class="number">3.13</span><span class="number">.0</span><span class="number">-32</span>-generic</span><br><span class="line">Operating <span class="string">System:</span> Ubuntu <span class="number">14.04</span><span class="number">.1</span> LTS</span><br><span class="line"><span class="string">CPUs:</span> <span class="number">1</span></span><br><span class="line">Total <span class="string">Memory:</span> <span class="number">1.954</span> GiB</span><br><span class="line"><span class="string">Name:</span> iZ23mtq8bs1Z</span><br><span class="line"><span class="string">ID:</span> <span class="string">M5N4:</span><span class="string">K6WN:</span><span class="string">PUNC:</span><span class="number">73</span><span class="string">ZN:</span><span class="string">AONJ:</span><span class="string">AUHL:</span><span class="string">KSYH:</span><span class="number">2</span><span class="string">JPI:</span><span class="string">CH3K:</span><span class="string">O4MK:</span><span class="number">6</span><span class="string">OCX:</span><span class="number">5</span>OYW</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-info-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-info-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker info 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker import 命令</title>
      <link href="/2018/09/01/Docker-import%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-import%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-import-命令"><a href="#Docker-import-命令" class="headerlink" title="Docker import 命令"></a>Docker import 命令</h1><a id="more"></a><p><strong>docker import :</strong> 从归档文件中创建镜像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">import</span> [<span class="keyword">OPTIONS</span>] <span class="keyword">file</span>|URL|- [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-c :</strong> 应用 docker 指令创建镜像；</li><li><strong>-m :</strong> 提交时的说明文字；</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>从镜像归档文件 my_ubuntu_v3.tar 创建镜像，命名为 runoob/ubuntu:v4</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="meta">@localhost</span> ~] docker <span class="keyword">import</span> my_ubuntu_v3.tar runoob/<span class="string">ubuntu:</span>v4  </span><br><span class="line"><span class="string">sha256:</span><span class="number">63</span>ce4a6d6bc3fabb95dbd6c561404a309b7bdfc4e21c1d59fe9fe4299cbfea39</span><br><span class="line">[root<span class="meta">@localhost</span> ~] docker images runoob/<span class="string">ubuntu:</span>v4</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">runoob/ubuntu       v4                  <span class="number">63</span>ce4a6d6bc3        <span class="number">20</span> seconds ago      <span class="number">142.1</span> MB</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-import-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-import-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker import 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker save 命令</title>
      <link href="/2018/09/01/Docker-save%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-save%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-save-命令"><a href="#Docker-save-命令" class="headerlink" title="Docker save 命令"></a>Docker save 命令</h1><a id="more"></a><p><strong>docker save :</strong> 将指定镜像保存成 tar 归档文件。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save <span class="string">[OPTIONS]</span> IMAGE <span class="string">[IMAGE...]</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-o :</strong> 输出到的文件。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@localhost ~]</span> <span class="selector-tag">docker</span> <span class="selector-tag">save</span> <span class="selector-tag">-o</span> <span class="selector-tag">my_ubuntu_v3</span><span class="selector-class">.tar</span> <span class="selector-tag">runoob</span>/<span class="selector-tag">ubuntu</span><span class="selector-pseudo">:v3</span></span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span> <span class="selector-tag">ll</span> <span class="selector-tag">my_ubuntu_v3</span><span class="selector-class">.tar</span></span><br><span class="line"><span class="selector-tag">-rw-------</span> <span class="selector-tag">1</span> <span class="selector-tag">runoob</span> <span class="selector-tag">runoob</span> <span class="selector-tag">142102016</span> <span class="selector-tag">Jul</span> <span class="selector-tag">11</span> <span class="selector-tag">01</span><span class="selector-pseudo">:37</span> <span class="selector-tag">my_ubuntu_v3</span><span class="selector-class">.ta</span></span><br></pre></td></tr></table></figure><h3 id="Docker-容器导入导出有两种方法"><a href="#Docker-容器导入导出有两种方法" class="headerlink" title="Docker 容器导入导出有两种方法"></a>Docker 容器导入导出有两种方法</h3><p>一种是使用 save 和 load 命令<br>使用例子如下：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">save</span> ubuntu:<span class="keyword">load</span> &gt; /root/ubuntu.tar</span><br><span class="line">docker <span class="keyword">load</span> &lt; ubuntu.tar</span><br></pre></td></tr></table></figure><p>一种是使用 export 和 import 命令<br>使用例子如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">docker</span> <span class="keyword">export</span> <span class="number">98</span>ca36 &gt; ubuntu.tar</span><br><span class="line"><span class="title">cat</span> ubuntu.tar | sudo docker <span class="keyword">import</span> - ubuntu:<span class="keyword">import</span></span><br></pre></td></tr></table></figure><p>需要注意两种方法不可混用。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-save-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-save-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker save 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker build 命令</title>
      <link href="/2018/09/01/Docker-build%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-build%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-build-命令"><a href="#Docker-build-命令" class="headerlink" title="Docker build 命令"></a>Docker build 命令</h1><a id="more"></a><p><strong>docker build </strong> 命令用于使用 Dockerfile 创建镜像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [OPTIONS] PATH |<span class="string"> URL </span>|<span class="string"> -</span></span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>–build-arg=[] :</strong> 设置镜像创建时的变量；</li><li><strong>–cpu-shares :</strong> 设置 CPU 使用权重；</li><li><strong>–cpu-period :</strong> 限制 CPU CFS周期；</li><li><strong>–cpu-quota :</strong> 限制 CPU CFS配额；</li><li><strong>–cpuset-cpus :</strong> 指定使用的CPU id；</li><li><strong>–cpuset-mems :</strong> 指定使用的内存 id；</li><li><strong>–disable-content-trust :</strong> 忽略校验，默认开启；</li><li><strong>-f :</strong> 指定要使用的 Dockerfile 路径；</li><li><strong>–force-rm :</strong> 设置镜像过程中删除中间容器；</li><li><strong>–isolation :</strong> 使用容器隔离技术；</li><li><strong>–label=[] :</strong> 设置镜像使用的元数据；</li><li><strong>-m :</strong> 设置内存最大值；</li><li><strong>–memory-swap :</strong> 设置 swap 的最大值为 内存+swap，”-1” 表示不限 swap；</li><li><strong>–no-cache :</strong> 创建镜像的过程不使用缓存；</li><li><strong>–pull :</strong> 尝试去更新镜像的新版本；</li><li><strong>–quiet, -q :</strong> 安静模式，成功后只输出镜像 ID；</li><li><strong>–rm :</strong> 设置镜像成功后删除中间容器；</li><li><strong>–shm-size :</strong> 设置 /dev/shm 的大小，默认值是 64M；</li><li><strong>–ulimit :</strong> Ulimit 配置。</li><li><strong>–tag, -t:</strong> 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li><li><strong>–network:</strong> 默认 default。在构建期间设置RUN指令的网络模式</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t runoob/ubuntu:<span class="built_in">v1</span> .</span><br></pre></td></tr></table></figure><p>使用 URL <strong>github.com/creack/docker-firefox</strong> 的 Dockerfile 创建镜像。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="keyword">build </span>github.com/creack/docker-firefox</span><br></pre></td></tr></table></figure><p>也可以通过 -f Dockerfile 文件的位置：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">build</span> -f /<span class="keyword">path</span>/<span class="keyword">to</span>/a/Dockerfile .</span><br></pre></td></tr></table></figure><p>在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t test/myapp .</span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line"><span class="keyword">Error </span>response from daemon: Unknown instruction: RUNCMD</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-build-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-build-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker build 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker rmi 命令</title>
      <link href="/2018/09/01/Docker-rmi%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-rmi%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-rmi-命令"><a href="#Docker-rmi-命令" class="headerlink" title="Docker rmi 命令"></a>Docker rmi 命令</h1><a id="more"></a><p><strong>docker rmi :</strong> 删除本地一个或多个镜像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi <span class="string">[OPTIONS]</span> IMAGE <span class="string">[IMAGE...]</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-f :</strong> 强制删除；</li><li><strong>–no-prune :</strong> 不移除该镜像的过程镜像，默认移除；</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>强制删除本地镜像 runoob/ubuntu:v4。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="meta">@localhost</span> ~] docker rmi -f runoob/<span class="string">ubuntu:</span>v4</span><br><span class="line"><span class="string">Untagged:</span> runoob/<span class="string">ubuntu:</span>v4</span><br><span class="line"><span class="string">Deleted:</span> <span class="string">sha256:</span><span class="number">1</span>c06aa18edee44230f93a90a7d88139235de12cd4c089d41eed8419b503072be</span><br><span class="line"><span class="string">Deleted:</span> <span class="string">sha256:</span><span class="number">85</span>feb446e89a28d58ee7d80ea5ce367eebb7cec70f0ec18aa4faa874cbd97c73</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-rmi-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-rmi-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker rmi 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker images 命令</title>
      <link href="/2018/09/01/Docker-images%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-images%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-images-命令"><a href="#Docker-images-命令" class="headerlink" title="Docker images 命令"></a>Docker images 命令</h1><a id="more"></a><p><strong>docker images :</strong> 列出本地镜像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images <span class="comment">[OPTIONS]</span> <span class="comment">[REPOSITORY<span class="comment">[:TAG]</span>]</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><code>-a</code> 列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）</li><li><code>--digests</code> 显示镜像的摘要信息</li><li><code>-f</code> 显示满足条件的镜像</li><li><code>--format</code> 指定返回值的模板文件</li><li><code>--no-trunc</code> 显示完整的镜像信息</li><li><code>-q</code> 只显示镜像ID</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>查看本地镜像列表。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~] docker images</span><br><span class="line">REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mymysql                 v1                  <span class="number">37</span>af1236adef        <span class="number">5</span> minutes ago       <span class="number">329</span> MB</span><br><span class="line">runoob/ubuntu           v4                  <span class="number">1</span>c06aa18edee        <span class="number">2</span> days ago          <span class="number">142.1</span> MB</span><br><span class="line">&lt;none&gt;                  &lt;none&gt;              <span class="number">5</span>c6e1090e771        <span class="number">2</span> days ago          <span class="number">165.9</span> MB</span><br><span class="line">httpd                   latest              ed38aaffef30        <span class="number">11</span> days ago         <span class="number">195.1</span> MB</span><br><span class="line">alpine                  latest              <span class="number">4e38</span>e38c8ce0        <span class="number">2</span> weeks ago         <span class="number">4.799</span> MB</span><br><span class="line">mongo                   <span class="number">3.2</span>                 <span class="number">282</span>fd552add6        <span class="number">3</span> weeks ago         <span class="number">336.1</span> MB</span><br><span class="line">redis                   latest              <span class="number">4465e4</span>bcad80        <span class="number">3</span> weeks ago         <span class="number">185.7</span> MB</span><br><span class="line">php                     <span class="number">5.6</span>-fpm             <span class="number">025041</span>cd3aa5        <span class="number">3</span> weeks ago         <span class="number">456.3</span> MB</span><br><span class="line">python                  <span class="number">3.5</span>                 <span class="number">045767</span>ddf24a        <span class="number">3</span> weeks ago         <span class="number">684.1</span> MB</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>列出本地镜像中 REPOSITORY 为 ubuntu 的镜像列表。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~] docker images ubuntu</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              <span class="number">14.04</span>               <span class="number">90</span>d5884b1ee0        <span class="number">9</span> weeks ago         <span class="number">188</span> MB</span><br><span class="line">ubuntu              <span class="number">15.10</span>               <span class="number">4e3</span>b13c8a266        <span class="number">3</span> months ago        <span class="number">136.3</span> MB</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-images-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-images-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker images 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker cp 命令</title>
      <link href="/2018/09/01/Docker-cp%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-cp%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-cp-命令"><a href="#Docker-cp-命令" class="headerlink" title="Docker cp 命令"></a>Docker cp 命令</h1><a id="more"></a><p><strong>docker cp :</strong> 用于容器与主机之间的数据拷贝。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span>:SRC_PATH DEST_PATH|-</span><br><span class="line">docker cp <span class="comment">[OPTIONS]</span> SRC_PATH|- <span class="keyword">CONTAINER</span>:DEST_PATH</span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-L :</strong> 保持源目标中的链接</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将主机 /www/runoob 目录拷贝到容器 <code>96f7f14e99ab</code> 的 /www 目录下。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp <span class="regexp">/www/</span>runoob <span class="number">96</span><span class="string">f7f14e99ab:</span><span class="regexp">/www/</span></span><br></pre></td></tr></table></figure><p>将主机 /www/runoob 目录拷贝到容器 <code>96f7f14e99ab</code> 中，目录重命名为 www。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp <span class="regexp">/www/</span>runoob <span class="number">96</span><span class="string">f7f14e99ab:</span>/www</span><br></pre></td></tr></table></figure><p>将容器 <code>96f7f14e99ab</code> 的 /www 目录拷贝到主机的 /tmp 目录中。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp <span class="number">96</span><span class="string">f7f14e99ab:</span><span class="regexp">/www /</span>tmp/</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-cp-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-cp-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker cp 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker commit 命令</title>
      <link href="/2018/09/01/Docker-commit%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-commit%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-commit-命令"><a href="#Docker-commit-命令" class="headerlink" title="Docker commit 命令"></a>Docker commit 命令</h1><a id="more"></a><p><strong>docker commit :</strong> 从容器创建一个新的镜像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[REPOSITORY<span class="comment">[:TAG]</span>]</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-a :</strong> 提交的镜像作者；</li><li><strong>-c :</strong> 使用 Dockerfile 指令来创建镜像；</li><li><strong>-m :</strong> 提交时的说明文字；</li><li><strong>-p :</strong> 在 commit 时，将容器暂停。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将容器 <code>a404c6c174a2</code> 保存为新的镜像，并添加提交人信息和说明信息。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="meta">@localhost</span> ~] docker commit -a <span class="string">"runoob.com"</span> -m <span class="string">"my apache"</span> a404c6c174a2 <span class="string">mymysql:</span>v1 </span><br><span class="line"><span class="string">sha256:</span><span class="number">37</span>af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057</span><br><span class="line">[root<span class="meta">@localhost</span> ~] docker images <span class="string">mymysql:</span>v1</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mymysql             v1                  <span class="number">37</span>af1236adef        <span class="number">15</span> seconds ago      <span class="number">329</span> MB</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-commit-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-commit-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker commit 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker port 命令</title>
      <link href="/2018/09/01/Docker-port%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-port%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-port-命令"><a href="#Docker-port-命令" class="headerlink" title="Docker port 命令"></a>Docker port 命令</h1><a id="more"></a><p><strong>docker port :</strong> 列出指定的容器的端口映射，或者查找将 PRIVATE_PORT NAT 到面向公众的端口。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> port </span>[OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>查看容器 mynginx 的端口映射情况。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~] docker<span class="built_in"> port </span>mymysql</span><br><span class="line">3306/tcp -&gt; 0.0.0.0:3306</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-port-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-port-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker port 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker export 命令</title>
      <link href="/2018/09/01/Docker-export%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-export%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-export-命令"><a href="#Docker-export-命令" class="headerlink" title="Docker export 命令"></a>Docker export 命令</h1><a id="more"></a><p><strong>docker export :</strong> 将文件系统作为一个 tar 归档文件导出到 STDOUT。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-o :</strong> 将输入内容写到文件。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将 <code>id</code> 为 <code>a404c6c174a2</code> 的容器按日期保存为 tar 文件。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="title">@localhost</span> ~]# docker export -o mysql-`date +<span class="symbol">%Y</span><span class="symbol">%m</span><span class="symbol">%d</span>`.tar a<span class="number">404</span><span class="keyword">c</span><span class="number">6</span><span class="keyword">c</span><span class="number">174</span>a<span class="number">2</span></span><br><span class="line">[root<span class="title">@localhost</span> ~]# ls mysql-`date +<span class="symbol">%Y</span><span class="symbol">%m</span><span class="symbol">%d</span>`.tar</span><br><span class="line">mysql<span class="number">-20160711</span>.tar</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-export-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-export-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker export 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker logs 命令</title>
      <link href="/2018/09/01/Docker-logs%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-logs%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-logs-命令"><a href="#Docker-logs-命令" class="headerlink" title="Docker logs 命令"></a>Docker logs 命令</h1><a id="more"></a><p><strong>docker logs :</strong> 获取容器的日志</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-f :</strong> 跟踪日志输出</li><li><strong>–since :</strong> 显示某个开始时间的所有日志</li><li><strong>-t :</strong> 显示时间戳</li><li><strong>–tail :</strong>仅列出最新N条容器日志</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>跟踪查看容器 mynginx 的日志输出。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@localhost ~]</span># docker logs -f mynginx</span><br><span class="line"><span class="number">192.168.239.1</span> - - <span class="string">[10/Jul/2016:16:53:33 +0000]</span> <span class="string">"<span class="keyword">GET</span> / HTTP/1.1"</span> <span class="number">200</span> <span class="number">612</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36"</span> <span class="string">"-"</span></span><br><span class="line"><span class="number">2016</span>/<span class="number">07</span>/<span class="number">10</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">33</span> <span class="string">[error]</span> <span class="number">5</span>#<span class="number">5</span>: *<span class="number">1</span> open() <span class="string">"/usr/share/nginx/html/favicon.ico"</span> failed (<span class="number">2</span>: No such file or directory), client: <span class="number">192.168.239.1</span>, server: localhost, request: <span class="string">"<span class="keyword">GET</span> /favicon.ico HTTP/1.1"</span>, host: <span class="string">"192.168.239.130"</span>, referrer: <span class="string">"http://192.168.239.130/"</span></span><br><span class="line"><span class="number">192.168.239.1</span> - - <span class="string">[10/Jul/2016:16:53:33 +0000]</span> <span class="string">"<span class="keyword">GET</span> /favicon.ico HTTP/1.1"</span> <span class="number">404</span> <span class="number">571</span> <span class="string">"http://192.168.239.130/"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36"</span> <span class="string">"-"</span></span><br><span class="line"><span class="number">192.168.239.1</span> - - <span class="string">[10/Jul/2016:16:53:59 +0000]</span> <span class="string">"<span class="keyword">GET</span> / HTTP/1.1"</span> <span class="number">304</span> <span class="number">0</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36"</span> <span class="string">"-"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>查看容器 mynginx 从 2016年7月1日 后的最新 10条 日志。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs <span class="attribute">--since</span>=<span class="string">"2016-07-01"</span> <span class="attribute">--tail</span>=10 mynginx</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-logs-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-logs-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker logs 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker attach 命令</title>
      <link href="/2018/09/01/Docker-attach%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/01/Docker-attach%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-attach-命令"><a href="#Docker-attach-命令" class="headerlink" title="Docker attach 命令"></a>Docker attach 命令</h1><a id="more"></a><p><strong>docker attach :</strong> 连接到正在运行中的容器。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span></span><br></pre></td></tr></table></figure><p>要 attach 上去的容器必须正在运行，可以同时连接上同一个 container 来共享屏幕（与 screen 命令的 attach 类似）。</p><p>官方文档中说 attach 后可以通过 <code>CTRL-C</code> 来 detach，但实际上经过测试，如果 container 当前在运行 bash，<code>CTRL-C</code> 自然是当前行的输入，没有退出；如果 container 当前正在前台运行进程，如输出 nginx 的 access.log 日志，<code>CTRL-C</code> 不仅会导致退出容器，而且还 stop 了。这不是我们想要的，detach 的意思按理应该是脱离容器终端，但容器依然运行。好在 attach 是可以带上 <code>--sig-proxy=false</code> 来确保 <code>CTRL-D</code> 或 <code>CTRL-C</code> 不会关闭容器。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>容器 mynginx 将访问日志指到标准输出，连接到容器查看访问信息。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@localhost ~]</span># docker attach --sig-proxy=false mynginx</span><br><span class="line"><span class="number">192.168.239.1</span> - - <span class="string">[10/Jul/2016:16:54:26 +0000]</span> <span class="string">"<span class="keyword">GET</span> / HTTP/1.1"</span> <span class="number">304</span> <span class="number">0</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36"</span> <span class="string">"-"</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-attach-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-attach-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker attach 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker top 命令</title>
      <link href="/2018/08/31/Docker-top%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/31/Docker-top%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-top-命令"><a href="#Docker-top-命令" class="headerlink" title="Docker top 命令"></a>Docker top 命令</h1><a id="more"></a><p><strong>docker top :</strong> 查看容器中运行的进程信息，支持 ps 命令参数。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[ps OPTIONS]</span></span><br></pre></td></tr></table></figure><p>容器运行时不一定有 /bin/bash 终端来交互执行 top 命令，而且容器还不一定有 top 命令，可以使用docker top 来实现查看 container 中正在运行的进程。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>查看容器 mymysql 的进程信息。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@localhost mysql]</span># <span class="selector-tag">docker</span> <span class="selector-tag">top</span> <span class="selector-tag">mymysql</span></span><br><span class="line"><span class="selector-tag">UID</span>    <span class="selector-tag">PID</span>    <span class="selector-tag">PPID</span>    <span class="selector-tag">C</span>      <span class="selector-tag">STIME</span>   <span class="selector-tag">TTY</span>  <span class="selector-tag">TIME</span>       <span class="selector-tag">CMD</span></span><br><span class="line">999    40347  40331   18     00<span class="selector-pseudo">:58</span>   ?    00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:02</span>   <span class="selector-tag">mysqld</span></span><br></pre></td></tr></table></figure><p>查看所有运行容器的进程信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  `docker ps | grep Up | awk <span class="string">'&#123;print $1&#125;'</span>`; <span class="keyword">do</span> <span class="built_in">echo</span> \ &amp;&amp; docker top <span class="variable">$i</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-top-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-top-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker top 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker inspect 命令</title>
      <link href="/2018/08/31/Docker-inspect%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/31/Docker-inspect%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-inspect-命令"><a href="#Docker-inspect-命令" class="headerlink" title="Docker inspect 命令"></a>Docker inspect 命令</h1><a id="more"></a><p><strong>docker inspect :</strong> 获取容器/镜像的元数据。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect <span class="string">[OPTIONS]</span> NAME|ID <span class="string">[NAME|ID...]</span></span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-f :</strong> 指定返回值的模板文件。</li><li><strong>-s :</strong> 显示总的文件大小。</li><li><strong>–type :</strong> 为指定类型返回JSON。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>获取镜像 mysql:5.6 的元信息。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">runoob<span class="variable">@runoob</span><span class="symbol">:~</span><span class="variable">$ </span>docker inspect <span class="symbol">mysql:</span><span class="number">5.6</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"sha256:2c0964ec182ae9a045f866bbc2553087f6e42bfc16074a74fb820af235f070ec"</span>,</span><br><span class="line">        <span class="string">"RepoTags"</span>: [</span><br><span class="line">            <span class="string">"mysql:5.6"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"RepoDigests"</span>: [],</span><br><span class="line">        <span class="string">"Parent"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"Comment"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2016-05-24T04:01:41.168371815Z"</span>,</span><br><span class="line">        <span class="string">"Container"</span>: <span class="string">"e0924bc460ff97787f34610115e9363e6363b30b8efa406e28eb495ab199ca54"</span>,</span><br><span class="line">        <span class="string">"ContainerConfig"</span>: &#123;</span><br><span class="line">            <span class="string">"Hostname"</span>: <span class="string">"b0cf605c7757"</span>,</span><br><span class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"AttachStdin"</span>: <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">"AttachStdout"</span>: <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">"AttachStderr"</span>: <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">"ExposedPorts"</span>: &#123;</span><br><span class="line">                <span class="string">"3306/tcp"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>获取正在运行的容器 mymysql 的 IP。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runoob<span class="variable">@runoob</span><span class="symbol">:~</span><span class="variable">$ </span>docker inspect --format=<span class="string">'&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;'</span> mymysql</span><br><span class="line"><span class="number">172.17</span>.<span class="number">0</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-inspect-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-inspect-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker inspect 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker ps 命令</title>
      <link href="/2018/08/31/Docker-ps%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/31/Docker-ps%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-ps-命令"><a href="#Docker-ps-命令" class="headerlink" title="Docker ps 命令"></a>Docker ps 命令</h1><a id="more"></a><p><strong>docker ps :</strong> 列出容器</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps <span class="string">[OPTIONS]</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-a :</strong> 显示所有的容器，包括未运行的。</li><li><strong>-f :</strong> 根据条件过滤显示的内容。</li><li><strong>–format :</strong> 指定返回值的模板文件。</li><li><strong>-l :</strong> 显示最近创建的容器。</li><li><strong>-n :</strong> 列出最近创建的 n 个容器。</li><li><strong>–no-trunc :</strong> 不截断输出。</li><li><strong>-q :</strong> 静默模式，只显示容器编号。</li><li><strong>-s :</strong> 显示总的文件大小。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>列出所有在运行的容器信息</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                ...  PORTS                    NAMES</span><br><span class="line"><span class="number">09</span>b93464c2f7   nginx:latest   <span class="string">"nginx -g 'daemon off"</span> ...  <span class="number">80</span>/tcp, <span class="number">443</span>/tcp          myrunoob</span><br><span class="line"><span class="number">96</span>f7f14e99ab   mysql:<span class="number">5.6</span>      <span class="string">"docker-entrypoint.sh"</span> ...  <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp   mymysql</span><br></pre></td></tr></table></figure><p>列出最近创建的 5 个容器信息</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">runoob@runo<span class="symbol">ob:</span>~$ docker ps -<span class="built_in">n</span> <span class="number">5</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                   CREATED           </span><br><span class="line"><span class="number">09</span>b93464c2f7        ngi<span class="symbol">nx:la</span>test        <span class="string">"nginx -g 'daemon off"</span>    <span class="number">2</span> <span class="built_in">days</span> ago   ...     </span><br><span class="line">b8573233d675        ngi<span class="symbol">nx:la</span>test        <span class="string">"/bin/bash"</span>               <span class="number">2</span> <span class="built_in">days</span> ago   ...     </span><br><span class="line">b1a0703e41e7        ngi<span class="symbol">nx:la</span>test        <span class="string">"nginx -g 'daemon off"</span>    <span class="number">2</span> <span class="built_in">days</span> ago   ...    </span><br><span class="line">f46fb1dec520        <span class="number">5</span>c6e1090e771        <span class="string">"/bin/sh -c 'set -x \t"</span>   <span class="number">2</span> <span class="built_in">days</span> ago   ...   </span><br><span class="line">a63b4a5597de        <span class="number">860</span>c279d2fec        <span class="string">"bash"</span>                    <span class="number">2</span> <span class="built_in">days</span> ago   ...</span><br></pre></td></tr></table></figure><p>列出所有创建的容器ID</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">runoob</span><span class="comment">@runoob:~$ docker ps -a -q</span></span><br><span class="line"><span class="number">09</span>b93464c2f7</span><br><span class="line"><span class="keyword">b8573233d675</span></span><br><span class="line"><span class="keyword">b1a0703e41e7</span></span><br><span class="line"><span class="keyword">f46fb1dec520</span></span><br><span class="line"><span class="keyword">a63b4a5597de</span></span><br><span class="line"><span class="keyword">6a4aa42e947b</span></span><br><span class="line"><span class="keyword">de7bb36e7968</span></span><br><span class="line"><span class="keyword">43a432b73776</span></span><br><span class="line"><span class="keyword">664a8ab1a585</span></span><br><span class="line"><span class="keyword">ba52eb632bbd</span></span><br><span class="line"><span class="keyword">...</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-ps-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-ps-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker ps 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker exec 命令</title>
      <link href="/2018/08/31/Docker-exec%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/31/Docker-exec%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-exec-命令"><a href="#Docker-exec-命令" class="headerlink" title="Docker exec 命令"></a>Docker exec 命令</h1><a id="more"></a><p><strong>docker exec ：</strong> 在运行的容器中执行命令</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-d :</strong> 分离模式: 在后台运行</li><li><strong>-i :</strong> 即使没有附加也保持 STDIN 打开</li><li><strong>-t :</strong> 分配一个伪终端</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>在容器 mynginx 中以交互模式执行容器内 /root/runoob.sh 脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker <span class="built_in">exec</span> -it mynginx /bin/sh /root/runoob.sh</span><br><span class="line">http://www.runoob.com/</span><br></pre></td></tr></table></figure><p>在容器 mynginx 中开启一个交互模式的终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker <span class="built_in">exec</span> -i -t  mynginx /bin/bash</span><br><span class="line">root@b1a0703e41e7:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-exec-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-exec-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker exec 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker pause/unpause 命令</title>
      <link href="/2018/08/31/Docker-pause-unpause%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/31/Docker-pause-unpause%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-pause-unpause-命令"><a href="#Docker-pause-unpause-命令" class="headerlink" title="Docker pause/unpause 命令"></a>Docker pause/unpause 命令</h1><a id="more"></a><p><strong>docker pause :</strong> 暂停容器中所有的进程。<br><strong>docker unpause :</strong> 恢复容器中所有的进程。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pause <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br><span class="line">docker unpause <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>暂停数据库容器 db01 提供服务。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">pause</span> db01</span><br></pre></td></tr></table></figure><p>恢复数据库容器 db01 提供服务。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> unpause db01</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-pause-unpause-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-pause-unpause-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker pause/unpause 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker rm 命令</title>
      <link href="/2018/08/31/Docker-rm%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/31/Docker-rm%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-rm-命令"><a href="#Docker-rm-命令" class="headerlink" title="Docker rm 命令"></a>Docker rm 命令</h1><a id="more"></a><p><strong>docker rm ：</strong>删除一个或多个容器</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-f :</strong> 通过 <code>SIGKILL</code> 信号强制删除一个运行中的容器</li><li><strong>-l :</strong> 移除容器间的网络连接，而非容器本身</li><li><strong>-v :</strong> 删除与容器关联的卷</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>强制删除容器 db01、db02</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> rm -f db01 db02</span><br></pre></td></tr></table></figure><p>移除容器 nginx01 对容器 db01 的连接，连接名 db</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">rm</span> -<span class="keyword">l</span> <span class="keyword">db</span></span><br></pre></td></tr></table></figure><p>删除容器 nginx01，并删除容器挂载的数据卷</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -v <span class="symbol">nginx01</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-rm-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-rm-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker rm 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker kill 命令</title>
      <link href="/2018/08/31/Docker-kill%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/31/Docker-kill%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-kill-命令"><a href="#Docker-kill-命令" class="headerlink" title="Docker kill 命令"></a>Docker kill 命令</h1><a id="more"></a><p><strong>docker kill :</strong> 杀掉一个运行中的容器。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-s :</strong> 向容器发送一个信号</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>杀掉运行中的容器 mynginx<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">kill</span> -<span class="keyword">s</span> <span class="keyword">KILL</span> mynginx</span><br><span class="line">mynginx</span><br></pre></td></tr></table></figure></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-kill-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-kill-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker kill 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker start/stop/restart 命令</title>
      <link href="/2018/08/31/Docker-start-stop-restart%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/31/Docker-start-stop-restart%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-start-stop-restart-命令"><a href="#Docker-start-stop-restart-命令" class="headerlink" title="Docker start/stop/restart 命令"></a>Docker start/stop/restart 命令</h1><a id="more"></a><p><strong>docker start: </strong> 启动一个或多少已经被停止的容器<br><strong>docker stop: </strong> 停止一个运行中的容器<br><strong>docker restart: </strong> 重启容器</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br><span class="line">docker stop <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br><span class="line">docker restart <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>启动已被停止的容器 myrunoob</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="literal">start</span> myrunoob</span><br></pre></td></tr></table></figure><p>停止运行中的容器 myrunoob</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">stop</span> myrunoob</span><br></pre></td></tr></table></figure><p>重启容器 myrunoob</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker restart myrunoob</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-start-stop-restart-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-start-stop-restart-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker start/stop/restart 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker create 命令</title>
      <link href="/2018/08/31/Docker-create%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/31/Docker-create%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-create-命令"><a href="#Docker-create-命令" class="headerlink" title="Docker create 命令"></a>Docker create 命令</h1><a id="more"></a><p><strong>docker create ：</strong>创建一个新的容器但不启动它</p><p>用法同 <a href="https://www.gmlyo.com/2018/08/27/Docker-run-%E5%91%BD%E4%BB%A4/">docker run</a></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create <span class="string">[OPTIONS]</span> IMAGE <span class="string">[COMMAND]</span> <span class="string">[ARG...]</span></span><br></pre></td></tr></table></figure><p>语法同 <a href="https://www.gmlyo.com/2018/08/27/Docker-run-%E5%91%BD%E4%BB%A4/">docker run</a></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>使用 docker 镜像 nginx:latest 创建一个容器，并将容器命名为 myrunoob</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">create</span> <span class="comment">--name myrunoob nginx:latest</span></span><br><span class="line"><span class="number">09</span>b93464c2f75b7b69f83d56a9cfc23ceb50a48a9db7652ee4c27e3e2cb1961f</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-create-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-create-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker create 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>find 命令结合 exec 和 xargs 使用的区别</title>
      <link href="/2018/08/30/find%E5%91%BD%E4%BB%A4%E7%BB%93%E5%90%88exec%E5%92%8Cxargs%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/08/30/find%E5%91%BD%E4%BB%A4%E7%BB%93%E5%90%88exec%E5%92%8Cxargs%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h2 id="find-命令结合-exec-和-xargs-使用的区别"><a href="#find-命令结合-exec-和-xargs-使用的区别" class="headerlink" title="find 命令结合 exec 和 xargs 使用的区别"></a>find 命令结合 exec 和 xargs 使用的区别</h2><a id="more"></a><table><thead><tr><th></th><th>-exec</th><th>xargs</th></tr></thead><tbody><tr><td>区别一</td><td>该参数是将查找的结果文件名逐个传递给后面的命令执行，如果文件比较多则执行的效率会较低</td><td>该命令是将查找的结果一次性传给后面的命令执行，命令执行效率高，可以使用 -n 参数控制一次传递文件的个数</td></tr><tr><td>区别二</td><td>文件名有空格等特殊字符也照常处理</td><td>处理特殊的文件名（例如：文件名有空格）需要采用特殊的方式<br>(find . -name “edu” -print0</td></tr></tbody></table><p>使用 <code>-exec</code> 选项命令操作示例及结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从命令执行的结果可以看到，每次获得一个文件就输出一次</span></span><br><span class="line">find . -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">echo</span> oldboyedu &#123;&#125; \ ;</span><br><span class="line">oldboyedu ./.viminfo</span><br><span class="line">oldboyedu ./anaconda-ks.cfg</span><br><span class="line">oldboyedu ./install.log</span><br><span class="line">oldboyedu ./install.log.syslog</span><br><span class="line">oldboyedu ./.bash_logout</span><br><span class="line">oldboyedu ./.cshrc</span><br><span class="line">oldboyedu ./ls.txt</span><br><span class="line">oldboyedu ./.bash_history</span><br><span class="line">oldboyedu ./.lesshst</span><br><span class="line">oldboyedu ./oldboy. Log</span><br><span class="line">oldboyedu ./<span class="built_in">test</span>. txt</span><br><span class="line">oldboyedu ./.tcshrc</span><br><span class="line">oldboyedu ./GB2312.txt</span><br><span class="line">oldboyedu ./.bash_profile</span><br><span class="line">oldboyedu ./.bashrc</span><br></pre></td></tr></table></figure><p>使用 <code>xargs</code> 命令操作示例及结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出结果只有一行，xargs 获取到所有文件名一次性输出</span></span><br><span class="line">find . -<span class="built_in">type</span> f | xargs <span class="built_in">echo</span> oldboyedu</span><br><span class="line">oldboyedu ./.viminfo ./anaconda-ks.cfg ./install.log ./install.log.syslog ./.bash_logout ./.cshrc ./ls.txt ./.bash_history ./.lesshst ./oldboy.log ./test.txt ./.tcshrc ./GB2312.txt ./.bash_profile ./.bashrc</span><br></pre></td></tr></table></figure><p><code>xargs</code> 还能控制每行输出的参数个数，示例如下，更多使用方法见 <code>xargs</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 -n 3 指定每次输出 3 个参数</span></span><br><span class="line">find . -<span class="built_in">type</span> f | xargs -n 3 <span class="built_in">echo</span> oldboyedu</span><br><span class="line">oldboyedu ./.viminfo ./anaconda-ks.cfg ./install.log</span><br><span class="line">oldboyedu ././install.log.syslog ./.bash_logout ./.cshrc</span><br><span class="line">oldboyedu ./ls.txt ./.bash_history ./.lesshst</span><br><span class="line">oldboyedu ./oldboy.log ./test.txt ./.tcshrc</span><br><span class="line">oldboyedu ./GB2312.txt ./.bash_profile ./.bashrc</span><br></pre></td></tr></table></figure><p>验证区别二的案例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文件名带有空格的特殊文件</span></span><br><span class="line">touch <span class="string">"oldboy edu"</span></span><br><span class="line">ll -h <span class="string">"oldboy edu"</span></span><br><span class="line">-rw-r--r-- 1 root root 0 May 17 16:30 oldboy edu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -exec 参数正常使用</span></span><br><span class="line">find . -name <span class="string">"*oldboy*"</span> -<span class="built_in">exec</span> ls -lh &#123;&#125; \;</span><br><span class="line">-rw-r--r-- 1 root root 0 May 17 16:30 ./oldboy edu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 xargs 命令无法正常打印</span></span><br><span class="line">find . -name <span class="string">"*edu*"</span> | xargs ls -lh</span><br><span class="line">ls: cannot access ./oldboy: No such file or directory</span><br><span class="line">ls: cannot access edu: No such file or directory</span><br><span class="line">find . -name <span class="string">"*edu*"</span> -print0 | xargs -0 ls -lh</span><br><span class="line">-rw-r--r-- 1 root root 0 May 17 16:30 . /oldboy edu</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> find 命令结合 exec 和 xargs 使用的区别 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker run 命令</title>
      <link href="/2018/08/27/Docker-run%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/27/Docker-run%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Docker-run-命令"><a href="#Docker-run-命令" class="headerlink" title="Docker run 命令"></a>Docker run 命令</h1><a id="more"></a><p><strong>docker run ：</strong>创建一个新的容器并运行一个命令</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="string">[OPTIONS]</span> IMAGE <span class="string">[COMMAND]</span> <span class="string">[ARG...]</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-p:</strong> 端口映射，格式为：主机(宿主)端口:容器端口</li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><strong>–name=”nginx-lb”:</strong> 为容器指定一个名称；</li><li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li><li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li><li><strong>-h “mars”:</strong> 指定容器的hostname；</li><li><strong>-e username=”ritchie”:</strong> 设置环境变量；</li><li><strong>–env-file=[]:</strong> 从指定文件读入环境变量；</li><li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”:</strong> 绑定容器到指定CPU运行；</li><li><strong>-m :</strong> 设置容器使用内存最大值；</li><li><strong>–net=”bridge”:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li><li><strong>–link=[]:</strong> 添加链接到另一个容器；</li><li><strong>–expose=[]:</strong> 开放一个端口或一组端口；</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>使用 docker 镜像 nginx:latest 以后台模式启动一个容器,并将容器命名为 mynginx。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> <span class="comment">--name mynginx -d nginx:latest</span></span><br></pre></td></tr></table></figure><p>使用镜像 nginx:latest 以后台模式启动一个容器,并将容器的 80 端口映射到主机随机端口。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -P -d nginx:latest</span></span><br></pre></td></tr></table></figure><p>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口，主机的目录 /data 映射到容器的 /data。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">docker</span> run -p <span class="number">80</span>:<span class="number">80</span> -v /<span class="class"><span class="keyword">data</span>:/<span class="keyword">data</span> -d nginx:latest</span></span><br></pre></td></tr></table></figure><p>绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 127.0.0.1:80:8080/tcp ubuntu bash</span></span><br></pre></td></tr></table></figure><p>使用镜像 nginx:latest 以交互模式启动一个容器,在容器内执行 /bin/bash 命令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -it nginx:latest /bin/bash</span></span><br><span class="line"><span class="bash">root@b8573233d675:/<span class="comment">#</span></span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-run-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-run-command.html</a></p>]]></content>
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker run 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python装饰器</title>
      <link href="/2018/08/27/Python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2018/08/27/Python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="Python-装饰器"><a href="#Python-装饰器" class="headerlink" title="Python 装饰器"></a>Python 装饰器</h2><a id="more"></a><h3 id="什么是装饰器？"><a href="#什么是装饰器？" class="headerlink" title="什么是装饰器？"></a>什么是装饰器？</h3><p>装饰指的是为被装饰对象添加新的功能<br>器指的是工具</p><p>装饰器本身可以是任意可调用对象，被装饰的对象也可以是任意可调用的对象</p><blockquote><p>目的：<br>写一个函数用来为另一个函数添加新功能，需要遵循开放封闭原则<br>对修改（源代码+调用方式）封闭的，对扩展是开放的<br>不修改被装饰对象的源代码<br>不修改被装饰对象的调用方式</p></blockquote><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果（3秒后获得结果）</span></span><br><span class="line">welcome to index page</span><br></pre></td></tr></table></figure><blockquote><p>需求：为 index() 函数增加（装饰）一个统计时间的功能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一个时间段</span></span><br><span class="line">start = time.time()</span><br><span class="line">index()</span><br><span class="line">stop = time.time()</span><br><span class="line">print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.004941940307617</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>time.time()</code> 获取当前时间秒数的表达形式<br>以 1970 年为基准，当前时间减去 1970 年，中间经过的秒数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">print(time.time())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1535380439.073392</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="为无参函数做装饰"><a href="#为无参函数做装饰" class="headerlink" title="为无参函数做装饰"></a>为无参函数做装饰</h3><blockquote><p>为无参函数做装饰</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(func)</span>:</span>  <span class="comment"># func = index</span></span><br><span class="line">    start = time.time()    <span class="comment"># 统计起始时间</span></span><br><span class="line">    func()  <span class="comment"># index()</span></span><br><span class="line">    stop = time.time()     <span class="comment"># 统计结束时间</span></span><br><span class="line">    print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line"></span><br><span class="line">timmer(index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.0023746490478516</span></span><br></pre></td></tr></table></figure><blockquote><p>这里更改了被装饰对象的调用方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func=最原始的index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        func()       <span class="comment"># 最原始的index()</span></span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">f = outter(index)    <span class="comment"># f = wrapper</span></span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.0037789344787598</span></span><br></pre></td></tr></table></figure><blockquote><p>原功能该执行还是执行，并且再加上统计运行时间的功能</p></blockquote><blockquote><p>上面修改了被装饰对象的调用方式<br>把 <code>f=outter(index)</code> 改成 <code>index=outter(index)</code> 就行了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func=最原始的index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        func()       <span class="comment"># 指向最原始的index()</span></span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index = outter(index)    <span class="comment"># index = wrapper</span></span><br><span class="line">index()    <span class="comment"># wrapper()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.0034096240997314</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="为有参函数做装饰"><a href="#为有参函数做装饰" class="headerlink" title="为有参函数做装饰"></a>为有参函数做装饰</h3><blockquote><p>为有参函数做装饰</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'welcome %s to home page'</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index = outter(index)    <span class="comment"># index = wrapper</span></span><br><span class="line">index()</span><br><span class="line"></span><br><span class="line">home = outter(home)</span><br><span class="line">home(<span class="string">'egon'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.003574848175049</span></span><br><span class="line">welcome egon to home page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">2.003159523010254</span></span><br></pre></td></tr></table></figure><h3 id="为有函数返回值的函数做装饰"><a href="#为有函数返回值的函数做装饰" class="headerlink" title="为有函数返回值的函数做装饰"></a>为有函数返回值的函数做装饰</h3><blockquote><p>为有函数返回值的函数做装饰</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'welcome %s to home page'</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index = outter(index)    <span class="comment"># index = wrapper</span></span><br><span class="line">res = index()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">0.5007188320159912</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="装饰器语法糖"><a href="#装饰器语法糖" class="headerlink" title="装饰器语法糖"></a>装饰器语法糖</h3><blockquote><p>在 被装饰对象 正上方，单独一行写上 <code>@装饰器函数名</code><br>Python 会自上而下运行代码<br>一旦运行到 <code>@装饰器函数名</code> 的位置，Python解释器就会立刻将正下方函数当做参数传给 <code>装饰器函数</code><br>然后将返回的结果，重新赋值 给 函数（函数变量名）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer    # index = timmer(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer    # home = timmer(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'welcome %s to home page'</span> % name)</span><br><span class="line"></span><br><span class="line">index = timmer(index)    <span class="comment"># index = wrapper</span></span><br><span class="line">home = timmer(home)</span><br><span class="line"></span><br><span class="line">res = index()</span><br><span class="line">print(res)</span><br><span class="line">home(<span class="string">'egon'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">0.5015261173248291</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line">welcome egon to home page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">1.0023066997528076</span></span><br></pre></td></tr></table></figure><h3 id="认证功能装饰器"><a href="#认证功能装饰器" class="headerlink" title="认证功能装饰器"></a>认证功能装饰器</h3><blockquote><p>为被装饰对象添加认证功能</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_userinfo = &#123;<span class="string">'user'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> current_userinfo[<span class="string">'user'</span>]:</span><br><span class="line">            <span class="comment"># res = func(*args, **kwargs)</span></span><br><span class="line">            <span class="comment"># return res</span></span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        user = input(<span class="string">'please input your username: '</span>).strip()</span><br><span class="line">        pwd = input(<span class="string">'please input your password: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">            print(<span class="string">'login successfull'</span>)</span><br><span class="line">            <span class="comment"># 保存登录状态</span></span><br><span class="line">            current_userinfo[<span class="string">'user'</span>] = user</span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'user or password error'</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter    # index = outter(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter    # home = outter(home)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'welcome %s'</span> % name)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line">res = home(<span class="string">'egon'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">please input your username: egon</span><br><span class="line">please input your password: <span class="number">123</span></span><br><span class="line">login successfull</span><br><span class="line">welcome to index page</span><br><span class="line">welcome egon</span><br></pre></td></tr></table></figure><h3 id="多个装饰器的执行顺序"><a href="#多个装饰器的执行顺序" class="headerlink" title="多个装饰器的执行顺序"></a>多个装饰器的执行顺序</h3><blockquote><p>为一个被装饰对象，同时添加多个装饰器<br>同时添加多个装饰器的执行顺序</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_userinfo = &#123;<span class="string">'user'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(func)</span>:</span>    <span class="comment"># func = wrapper1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper2</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper2......'</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的 index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper1</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper1......'</span>)</span><br><span class="line">        <span class="keyword">if</span> current_userinfo[<span class="string">'user'</span>]:</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        user = input(<span class="string">'please input your username: '</span>).strip()</span><br><span class="line">        pwd = input(<span class="string">'please input your password: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">            print(<span class="string">'login successfull'</span>)</span><br><span class="line">            <span class="comment"># 保存登录状态</span></span><br><span class="line">            current_userinfo[<span class="string">'user'</span>] = user</span><br><span class="line">            res = func(*args, **kwargs)    <span class="comment"># 调用最原始的index</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'user or password error'</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper1</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer    # index = timmer(wrapper1)</span></span><br><span class="line"><span class="meta">@outter    # outter(最原始的index) ==&gt; wrapper1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">index()    <span class="comment"># index ==&gt; wrapper2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">wrapper2......</span><br><span class="line">wrapper1......</span><br><span class="line">please input your username: egon</span><br><span class="line">please input your password: <span class="number">123</span></span><br><span class="line">login successfull</span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">11.453307151794434</span></span><br></pre></td></tr></table></figure><blockquote><p><code>@timmer</code> 在前，<code>@outter</code> 在后<br>代码会统计 <code>outter()</code> 和 <code>index()</code> 的总时间，这不是我们想要的效果<br>我们只要统计 <code>index()</code> 的运行时间</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_userinfo = &#123;<span class="string">'user'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(func)</span>:</span>    <span class="comment"># func = wrapper1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper2</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper2......'</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的 index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper1</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper1......'</span>)</span><br><span class="line">        <span class="keyword">if</span> current_userinfo[<span class="string">'user'</span>]:</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        user = input(<span class="string">'please input your username: '</span>).strip()</span><br><span class="line">        pwd = input(<span class="string">'please input your password: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">            print(<span class="string">'login successfull'</span>)</span><br><span class="line">            <span class="comment"># 保存登录状态</span></span><br><span class="line">            current_userinfo[<span class="string">'user'</span>] = user</span><br><span class="line">            res = func(*args, **kwargs)    <span class="comment"># 调用最原始的index</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'user or password error'</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper1</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="meta">@timmer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">index()    <span class="comment"># index ==&gt; wrapper2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">wrapper1......</span><br><span class="line">please input your username: egon</span><br><span class="line">egon</span><br><span class="line">please input your password: <span class="number">123</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">login successfull</span><br><span class="line">wrapper2......</span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.003432512283325</span></span><br></pre></td></tr></table></figure><blockquote><p><code>@outter</code> 在前，<code>@timmer</code> 在后</p></blockquote><p><strong>总结：可以连续写多个装饰器，处于最顶层的装饰器先执行</strong></p><h3 id="有参装饰器"><a href="#有参装饰器" class="headerlink" title="有参装饰器"></a>有参装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_userinfo = &#123;<span class="string">'user'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(engine = <span class="string">'file'</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的index</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> engine == <span class="string">'file'</span>:</span><br><span class="line">                <span class="keyword">if</span> current_userinfo[<span class="string">'user'</span>]:</span><br><span class="line">                    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">                user = input(<span class="string">'please input your username: '</span>).strip()</span><br><span class="line">                pwd = input(<span class="string">'please input your password: '</span>).strip()</span><br><span class="line">                <span class="keyword">if</span> user == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">                    print(<span class="string">'login successfull'</span>)</span><br><span class="line">                    <span class="comment"># 保存登录状态</span></span><br><span class="line">                    current_userinfo[<span class="string">'user'</span>] = user</span><br><span class="line">                    res = func(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'user or password error'</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">'mysql'</span>:</span><br><span class="line">                print(<span class="string">'mysql 的认证机制'</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">'ldap'</span>:</span><br><span class="line">                print(<span class="string">'ldap 的认证机制'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'不支持该engine'</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outter</span><br><span class="line"></span><br><span class="line">x = auth(engine = <span class="string">'file'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@x    # @autter  # index = outter(最原始的index)  # index = wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">please input your username: egon</span><br><span class="line">please input your password: <span class="number">123</span></span><br><span class="line">login successfull</span><br><span class="line">welcome to index page</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = auth(engine = <span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">mysql 的认证机制</span><br></pre></td></tr></table></figure><blockquote><p>合并一下 <code>x = auth(engine = &#39;file&#39;)</code> 和 <code>@x</code><br><code>auth(engine = &#39;file&#39;)</code><br>这就是有参装饰器</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_userinfo = &#123;<span class="string">'user'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(engine = <span class="string">'file'</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的index</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> engine == <span class="string">'file'</span>:</span><br><span class="line">                <span class="keyword">if</span> current_userinfo[<span class="string">'user'</span>]:</span><br><span class="line">                    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">                user = input(<span class="string">'please input your username: '</span>).strip()</span><br><span class="line">                pwd = input(<span class="string">'please input your password: '</span>).strip()</span><br><span class="line">                <span class="keyword">if</span> user == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">                    print(<span class="string">'login successfull'</span>)</span><br><span class="line">                    <span class="comment"># 保存登录状态</span></span><br><span class="line">                    current_userinfo[<span class="string">'user'</span>] = user</span><br><span class="line">                    res = func(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'user or password error'</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">'mysql'</span>:</span><br><span class="line">                print(<span class="string">'mysql 的认证机制'</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">'ldap'</span>:</span><br><span class="line">                print(<span class="string">'ldap 的认证机制'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'不支持该engine'</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(engine = 'mysql')    # @autter  # index = outter(最原始的index)  # index = wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(engine = 'file')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'welcome %s'</span> % name)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">index()       <span class="comment"># warpper()</span></span><br><span class="line">home(<span class="string">'egon'</span>)  <span class="comment"># warpper('egon')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">mysql 的认证机制</span><br><span class="line">ldap 的认证机制</span><br></pre></td></tr></table></figure><h3 id="wraps-装饰器"><a href="#wraps-装饰器" class="headerlink" title="wraps 装饰器"></a>wraps 装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.0011937618255615</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@timmer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">res = index()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">1.0007963180541992</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><blockquote><p>定义函数，函数体最好有写文档注释</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    这是一个 index 函数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">print(help(index))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">Help on function index <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line">    这是一个index函数</span><br><span class="line">    :<span class="keyword">return</span>:</span><br></pre></td></tr></table></figure><blockquote><p><code>print(help(index))</code> 可以查看函数的帮助信息</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param x: </span></span><br><span class="line"><span class="string">    :param y: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><blockquote><p><code>help()</code> 其实就是在查看 <code>__doc__</code> 属性</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    这是一个index函数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(help(index))  # index.__doc__</span></span><br><span class="line">print(index.__doc__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">    这是一个index函数</span><br><span class="line">    :<span class="keyword">return</span>:</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(help(len))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">Help on built-<span class="keyword">in</span> function len <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line">len(obj, /)</span><br><span class="line">    Return the number of items <span class="keyword">in</span> a container.</span><br></pre></td></tr></table></figure><blockquote><p>在不修改被装饰源代码，以及被装饰器调用的方式，为其加上新功能<br>最好在使用 index() 的时候，和原来一模一样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@timmer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    这是一个index函数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">print(help(index))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">Help on function index <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">wrapper(*args, **kwargs)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>但是加上装饰器后，<code>index()</code> 就不是原来的 <code>index()</code> 了<br><code>help()</code> 是调用的 <code>wrapper()</code> 的注释<br>打印的是 <code>wrapper()</code> 的注释</p></blockquote><blockquote><p>应该将 <code>wrapper()</code> 伪装的和原来的 <code>index()</code> 一模一样<br>把 <code>index()</code> 的 <code>__doc__</code> 拿过来<br>把 <code>index()</code> 的 <code>__name__</code> 拿过来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    wrapper.__doc__ = func.__doc__</span><br><span class="line">    wrapper.__name__ = func.__name__</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    这是一个index函数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">print(help(index))  <span class="comment"># index.__doc__</span></span><br><span class="line">print(index.__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">Help on function index <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">index(*args, **kwargs)</span><br><span class="line">    这是一个index函数</span><br><span class="line">    :<span class="keyword">return</span>:</span><br><span class="line"></span><br><span class="line">index</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这些功能不用自己写，Python 为我们内置了一个装饰器 <code>wraps</code><br>导入 <code>from functools import wraps</code><br><code>@wraps</code> 加在最内层函数正上方<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)    # 加在最内层函数正上方</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="comment"># wrapper.__doc__ = func.__doc__</span></span><br><span class="line">    <span class="comment"># wrapper.__name__ = func.__name__</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    这是一个index函数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">print(help(index))    <span class="comment"># index.__doc__</span></span><br><span class="line">print(index.__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">index()</span><br><span class="line">    这是一个index函数</span><br><span class="line">    :<span class="keyword">return</span>:</span><br><span class="line"></span><br><span class="line">index</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python装饰器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python闭包函数</title>
      <link href="/2018/08/27/Python%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0/"/>
      <url>/2018/08/27/Python%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="Python-闭包函数"><a href="#Python-闭包函数" class="headerlink" title="Python 闭包函数"></a>Python 闭包函数</h2><a id="more"></a><p><strong>前提：函数的作用域关系是在函数定义阶段就已经固定死的，与调用位置无关</strong></p><h3 id="闭包函数介绍"><a href="#闭包函数介绍" class="headerlink" title="闭包函数介绍"></a>闭包函数介绍</h3><blockquote><ol><li>定义在函数的内部的函数</li><li>该内部函数包含对其外层函数作用域名字的引用</li></ol></blockquote><blockquote><p>闭包函数通常需要结合函数对象的概念，将闭包函数返回到外部使用</p></blockquote><p><strong>示例一</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line">x = <span class="number">200</span></span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></p><p><strong>示例二</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">300</span></span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></p><p><strong>示例三</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">300</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">        x = <span class="number">400</span></span><br><span class="line">        f()</span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><blockquote><p><code>闭</code> 指的是 -&gt; 定义在函数的内部的函数<br><code>闭</code> 指的就是将一个函数闭合在另一个函数内部<br><code>包</code> 指的是 -&gt; 该内部函数包含对其外层函数作用域名字的引用</p></blockquote><h3 id="闭包函数的使用"><a href="#闭包函数的使用" class="headerlink" title="闭包函数的使用"></a>闭包函数的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><blockquote><p>闭包函数的基本形式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><p><strong>求两个数的和</strong></p><blockquote><p>直接通过参数为其传值</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum2</span><span class="params">(x, y)</span></span><span class="symbol">:</span></span><br><span class="line">    res = x + y</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">sum2(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>将 值 包给 函数 sum2</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(x, y)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># x = 1</span></span><br><span class="line">    <span class="comment"># y = 2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum2</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">        res = x + y</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> sum2</span><br><span class="line"></span><br><span class="line">sum2 = outter(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">sum2()</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.<span class="built_in">get</span>(<span class="string">'https://www.jd.com'</span>)</span><br><span class="line"><span class="meta"># <span class="meta-keyword">if</span> response.status_code = 200:</span></span><br><span class="line"><span class="built_in">print</span>(response.<span class="built_in">text</span>)</span><br></pre></td></tr></table></figure><blockquote><p>通过参数的形式为函数体传值</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">def <span class="built_in">get</span>(url):</span><br><span class="line">    response = requests.<span class="built_in">get</span>(url)</span><br><span class="line">    <span class="built_in">print</span>(len(response.<span class="built_in">text</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">get</span>(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"><span class="built_in">get</span>(<span class="string">'https://www.jd.com'</span>)</span><br><span class="line"><span class="built_in">get</span>(<span class="string">'https://www.tmall.com'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>将值包给函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># url = 'https://www.jd.com'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        print(len(response.text))</span><br><span class="line">    <span class="keyword">return</span> get</span><br><span class="line"></span><br><span class="line">jd = outter(<span class="string">'https://www.jd.com'</span>)</span><br><span class="line">jd()</span><br><span class="line">jd()</span><br><span class="line">jd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">117377</span></span><br><span class="line"><span class="number">117377</span></span><br><span class="line"><span class="number">117377</span></span><br><span class="line"></span><br><span class="line">baidu = outter(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">baidu()</span><br><span class="line">baidu()</span><br><span class="line">baidu()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">2443</span></span><br><span class="line"><span class="number">2443</span></span><br><span class="line"><span class="number">2443</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> foo</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line">print(f)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python闭包函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 函数之 global 与 nonlocal 关键字</title>
      <link href="/2018/08/26/Python%E5%87%BD%E6%95%B0%E4%B9%8Bglobal%E4%B8%8Enonlocal%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2018/08/26/Python%E5%87%BD%E6%95%B0%E4%B9%8Bglobal%E4%B8%8Enonlocal%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      <content type="html"><![CDATA[<h2 id="Python-函数-global-与-nonlocal-关键字"><a href="#Python-函数-global-与-nonlocal-关键字" class="headerlink" title="Python 函数 global 与 nonlocal 关键字"></a>Python 函数 global 与 nonlocal 关键字</h2><a id="more"></a><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><blockquote><p>global 是用于在函数内去修改全局作用域的名字</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="keyword">func</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = []</span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="keyword">func</span><span class="params">()</span>:</span></span><br><span class="line">    x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 执行结果</span></span><br><span class="line">[]</span><br></pre></td></tr></table></figure><blockquote><p>在局部名称空间，修改一个可变类型的变量名字</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = []</span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="keyword">func</span><span class="params">()</span>:</span></span><br><span class="line">    x.append(<span class="number">1</span>)    <span class="meta"># 在局部名称空间，修改一个可变类型的变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 执行结果</span></span><br><span class="line">[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>局部名称空间</code> 造一个值覆盖全局的变量名字<br><code>global</code> 在局部声明名字是来自于全局的</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="keyword">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x    <span class="meta"># 在 局部名称空间 造一个值覆盖全局的名字</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 执行结果</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h3><blockquote><p><code>global</code> 修改的是 <code>全局名称空间</code> 的所定义 的 名字<br>但无法修改 当前层函数的 外面一层 的 局部名字</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">222</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    x = <span class="number">111</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">        global x</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">    f2()</span><br><span class="line">    print(<span class="string">'f1---&gt;'</span>, x)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">f1---&gt; <span class="number">111</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p><code>nonlocal</code> 声明变量是来自于当前层外层的名字<br>只能找到 当前层函数 的外面一层的 名字<br>如果没有则抛出异常：<code>SyntaxError: no binding for nonlocal &#39;x&#39; found</code><br>必须是在函数内，不能跳出函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">222</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># x = 111</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">    f2()</span><br><span class="line">    print(<span class="string">'f1---&gt;'</span>, x)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">SyntaxError: no binding <span class="keyword">for</span> <span class="keyword">nonlocal</span> <span class="string">'x'</span> found</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">222</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    x = <span class="number">111</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">        nonlocal x</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">    f2()</span><br><span class="line">    print(<span class="string">'f1---&gt;'</span>, x)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">print(<span class="string">'global===&gt;'</span>, x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">f1---&gt; <span class="number">0</span></span><br><span class="line">global===&gt; <span class="number">222</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 函数之 global 与 nonlocal 关键字 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python名称空间与作用域</title>
      <link href="/2018/08/23/Python%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2018/08/23/Python%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<h2 id="Python-名称空间与作用域"><a href="#Python-名称空间与作用域" class="headerlink" title="Python 名称空间与作用域"></a>Python 名称空间与作用域</h2><a id="more"></a><h3 id="什么是名称空间？"><a href="#什么是名称空间？" class="headerlink" title="什么是名称空间？"></a>什么是名称空间？</h3><p>名称空间就是存放名字与值绑定映射关系的地方<br>要取到值必须通过名字才能找到，而名字又在名称空间中存放着，所以在取值时首先是去名称空间中找名字<br>找到了名字就拿到值的内存地址了</p><h3 id="名称空间氛围三种"><a href="#名称空间氛围三种" class="headerlink" title="名称空间氛围三种"></a>名称空间氛围三种</h3><h4 id="内置名称空间"><a href="#内置名称空间" class="headerlink" title="内置名称空间"></a>内置名称空间</h4><blockquote><p>存放的 python 解释器自带的名字<br>生命周期：在解释器启动时生成，在解释器关闭时回收<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(len)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">print</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line">&lt;built-<span class="keyword">in</span> <span class="function"><span class="keyword">function</span></span> len&gt;</span><br><span class="line">&lt;built-<span class="keyword">in</span> <span class="function"><span class="keyword">function</span></span> <span class="built_in">max</span>&gt;</span><br><span class="line">&lt;built-<span class="keyword">in</span> <span class="function"><span class="keyword">function</span></span> <span class="built_in">print</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="全局名称空间"><a href="#全局名称空间" class="headerlink" title="全局名称空间"></a>全局名称空间</h4><blockquote><p>除了内置的与局部的之外的名字，都属于全局名称空间<br>生命周期：在程序文件执行时就立刻生成，在程序执行完毕后就回收</p></blockquote><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">x</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">y</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line">    <span class="attr">x</span> = <span class="number">1</span></span><br><span class="line">    <span class="attr">y</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> y &gt; x:</span><br><span class="line">    <span class="attr">z</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="局部名称空间"><a href="#局部名称空间" class="headerlink" title="局部名称空间"></a>局部名称空间</h4><blockquote><p>存放的是函数内部定义的名字<br>生命周期：在调用函数时临时生成，在调用函数结束后，立刻回收<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h4><blockquote><p>内置名称空间 -&gt; 全局名称空间 -&gt; 局部名称空间</p></blockquote><p><strong>全局查找</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span> = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># len = 100</span></span><br><span class="line">print(<span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> <span class="function"><span class="keyword">function</span> <span class="title">len</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>局部查找</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">len = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    len = <span class="number">2222</span></span><br><span class="line">    print(len)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">2222</span></span><br></pre></td></tr></table></figure><blockquote><p>加载名称空间的目的是为了将名字与值的绑定关系存放起来，存的目的是为取，也就是说，当我们在查找名字时，必然是在三者之一找到</p></blockquote><h4 id="查找顺序"><a href="#查找顺序" class="headerlink" title="查找顺序"></a>查找顺序</h4><blockquote><p>局部名称空间 -&gt; 全局名称空间 -&gt; 内置名称空间<br>基于当前所在的位置往后查找<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = 100</span><br><span class="line">y = 200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：函数的形参名属于局部名称空间</span></span><br><span class="line">def foo(x, y):</span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">foo(1, 2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">1, 2</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><strong>示例一</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 打印 <code>from f2</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from f2'</span>)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>示例二</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 找到局部名称变量 <code>x</code></li><li>打印 <code>from f2 x</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        x = <span class="number">2</span></span><br><span class="line">        print(<span class="string">'from f2'</span>, x)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2 <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>示例三</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 找到 名字变量 <code>x</code></li><li><code>f2()</code> 打印  <code>from f2 1</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># x = 2</span></span><br><span class="line">        print(<span class="string">'from f2'</span>, x)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2 <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>示例四</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 最终没有找到 名字变量 <code>x</code></li><li>抛出异常<code>NameError: name &#39;x&#39; is not defined</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># x = 1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># x = 2</span></span><br><span class="line">        print(<span class="string">'from f2'</span>, x)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">NameError: name <span class="string">'x'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>示例五</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在 全局名称空间 里找到 名字变量 <code>x</code></li><li><code>f2()</code> 打印 <code>from f2 111</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># x = 1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># x = 2</span></span><br><span class="line">        print(<span class="string">'from f2'</span>, x)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2 <span class="number">111</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>示例六</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在 全局名称空间 里找到 名字变量 <code>x</code></li><li><code>f2()</code> 打印 <code>from f2 111</code><br>注：名称空间并不是往上找，只要有就能找到<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># x = 1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># x = 2</span></span><br><span class="line">        print(<span class="string">'from f2'</span>, x)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">x = <span class="number">111</span></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2 <span class="number">111</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>示例七</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在 全局名称空间 里找到 名字变量 <code>x</code></li><li>名字变量 <code>x=2222</code> 被重新赋值 <code>x=111</code></li><li><code>f2()</code> 打印 <code>from f2 111</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">2222</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># x = 1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># x = 2</span></span><br><span class="line">        print(<span class="string">'from f2'</span>, x)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">x = <span class="number">111</span></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2 <span class="number">111</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote><p>域是范围，作用域指的是作用范围</p></blockquote><h4 id="分为两大类"><a href="#分为两大类" class="headerlink" title="分为两大类"></a>分为两大类</h4><h5 id="全局作用范围"><a href="#全局作用范围" class="headerlink" title="全局作用范围"></a>全局作用范围</h5><blockquote><p>包含 <code>内置名称空间</code> 与 <code>全局名称空间</code> 中的名字<br>特点：全局有效，全局存活<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">            print(len)</span><br><span class="line">        f3()</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(len)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;build-<span class="keyword">in</span> function len&gt;</span><br><span class="line">&lt;build-<span class="keyword">in</span> function len&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>内置名字，具备一个特点，无论在任何位置，都能访问的到<br>这叫全局有效</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">            print(x)</span><br><span class="line">        f3()</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="局部作用范围"><a href="#局部作用范围" class="headerlink" title="局部作用范围"></a>局部作用范围</h5><blockquote><p>包含 <code>局部名称空间</code> 的名字<br>特点：局部有效，临时存活</p></blockquote><h5 id="gloabls-与-locals"><a href="#gloabls-与-locals" class="headerlink" title="gloabls 与 locals"></a>gloabls 与 locals</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(globals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> function globals&gt;</span><br></pre></td></tr></table></figure><blockquote><p>返回 <code>全局作用域</code> 中的名字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1111111111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(globals())    <span class="comment"># 返回 全局作用域 中的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> function globals&gt;</span><br><span class="line">&#123;<span class="string">'__name__'</span>: <span class="string">'__main__'</span>, <span class="string">'__doc__'</span>: <span class="keyword">None</span>, <span class="string">'__package__'</span>: <span class="keyword">None</span>, <span class="string">'__loader__'</span>: &lt;_frozen_importlib_external.SourceFileLoader object at <span class="number">0x7fa1f58357f0</span>&gt;, <span class="string">'__spec__'</span>: <span class="keyword">None</span>, <span class="string">'__annotations__'</span>: &#123;&#125;, <span class="string">'__builtins__'</span>: &lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">'__file__'</span>: <span class="string">'/data/app/SH_weekend_s2/day04/04_名称空间与作用域.py'</span>, <span class="string">'__cached__'</span>: <span class="keyword">None</span>, <span class="string">'x'</span>: <span class="number">1111111111</span>, <span class="string">'foo'</span>: &lt;function foo at <span class="number">0x7fa1f5766bf8</span>&gt;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看 <code>全局名称空间</code> 包含的 <code>内置名称空间</code> 的名字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1111111111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(dir(globals()[<span class="string">'__builtins__'</span>]))  <span class="comment"># 返回 全局作用域中 包含的 内置名称空间 的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'ArithmeticError'</span>, <span class="string">'AssertionError'</span>, <span class="string">'AttributeError'</span>, <span class="string">'BaseException'</span>, <span class="string">'BlockingIOError'</span>, <span class="string">'BrokenPipeError'</span>, <span class="string">'BufferError'</span>, <span class="string">'BytesWarning'</span>, <span class="string">'ChildProcessError'</span>, <span class="string">'ConnectionAbortedError'</span>, <span class="string">'ConnectionError'</span>, <span class="string">'ConnectionRefusedError'</span>, <span class="string">'ConnectionResetError'</span>, <span class="string">'DeprecationWarning'</span>, <span class="string">'EOFError'</span>, <span class="string">'Ellipsis'</span>, <span class="string">'EnvironmentError'</span>, <span class="string">'Exception'</span>, <span class="string">'False'</span>, <span class="string">'FileExistsError'</span>, <span class="string">'FileNotFoundError'</span>, <span class="string">'FloatingPointError'</span>, <span class="string">'FutureWarning'</span>, <span class="string">'GeneratorExit'</span>, <span class="string">'IOError'</span>, <span class="string">'ImportError'</span>, <span class="string">'ImportWarning'</span>, <span class="string">'IndentationError'</span>, <span class="string">'IndexError'</span>, <span class="string">'InterruptedError'</span>, <span class="string">'IsADirectoryError'</span>, <span class="string">'KeyError'</span>, <span class="string">'KeyboardInterrupt'</span>, <span class="string">'LookupError'</span>, <span class="string">'MemoryError'</span>, <span class="string">'ModuleNotFoundError'</span>, <span class="string">'NameError'</span>, <span class="string">'None'</span>, <span class="string">'NotADirectoryError'</span>, <span class="string">'NotImplemented'</span>, <span class="string">'NotImplementedError'</span>, <span class="string">'OSError'</span>, <span class="string">'OverflowError'</span>, <span class="string">'PendingDeprecationWarning'</span>, <span class="string">'PermissionError'</span>, <span class="string">'ProcessLookupError'</span>, <span class="string">'RecursionError'</span>, <span class="string">'ReferenceError'</span>, <span class="string">'ResourceWarning'</span>, <span class="string">'RuntimeError'</span>, <span class="string">'RuntimeWarning'</span>, <span class="string">'StopAsyncIteration'</span>, <span class="string">'StopIteration'</span>, <span class="string">'SyntaxError'</span>, <span class="string">'SyntaxWarning'</span>, <span class="string">'SystemError'</span>, <span class="string">'SystemExit'</span>, <span class="string">'TabError'</span>, <span class="string">'TimeoutError'</span>, <span class="string">'True'</span>, <span class="string">'TypeError'</span>, <span class="string">'UnboundLocalError'</span>, <span class="string">'UnicodeDecodeError'</span>, <span class="string">'UnicodeEncodeError'</span>, <span class="string">'UnicodeError'</span>, <span class="string">'UnicodeTranslateError'</span>, <span class="string">'UnicodeWarning'</span>, <span class="string">'UserWarning'</span>, <span class="string">'ValueError'</span>, <span class="string">'Warning'</span>, <span class="string">'ZeroDivisionError'</span>, <span class="string">'__build_class__'</span>, <span class="string">'__debug__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__import__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'abs'</span>, <span class="string">'all'</span>, <span class="string">'any'</span>, <span class="string">'ascii'</span>, <span class="string">'bin'</span>, <span class="string">'bool'</span>, <span class="string">'breakpoint'</span>, <span class="string">'bytearray'</span>, <span class="string">'bytes'</span>, <span class="string">'callable'</span>, <span class="string">'chr'</span>, <span class="string">'classmethod'</span>, <span class="string">'compile'</span>, <span class="string">'complex'</span>, <span class="string">'copyright'</span>, <span class="string">'credits'</span>, <span class="string">'delattr'</span>, <span class="string">'dict'</span>, <span class="string">'dir'</span>, <span class="string">'divmod'</span>, <span class="string">'enumerate'</span>, <span class="string">'eval'</span>, <span class="string">'exec'</span>, <span class="string">'exit'</span>, <span class="string">'filter'</span>, <span class="string">'float'</span>, <span class="string">'format'</span>, <span class="string">'frozenset'</span>, <span class="string">'getattr'</span>, <span class="string">'globals'</span>, <span class="string">'hasattr'</span>, <span class="string">'hash'</span>, <span class="string">'help'</span>, <span class="string">'hex'</span>, <span class="string">'id'</span>, <span class="string">'input'</span>, <span class="string">'int'</span>, <span class="string">'isinstance'</span>, <span class="string">'issubclass'</span>, <span class="string">'iter'</span>, <span class="string">'len'</span>, <span class="string">'license'</span>, <span class="string">'list'</span>, <span class="string">'locals'</span>, <span class="string">'map'</span>, <span class="string">'max'</span>, <span class="string">'memoryview'</span>, <span class="string">'min'</span>, <span class="string">'next'</span>, <span class="string">'object'</span>, <span class="string">'oct'</span>, <span class="string">'open'</span>, <span class="string">'ord'</span>, <span class="string">'pow'</span>, <span class="string">'print'</span>, <span class="string">'property'</span>, <span class="string">'quit'</span>, <span class="string">'range'</span>, <span class="string">'repr'</span>, <span class="string">'reversed'</span>, <span class="string">'round'</span>, <span class="string">'set'</span>, <span class="string">'setattr'</span>, <span class="string">'slice'</span>, <span class="string">'sorted'</span>, <span class="string">'staticmethod'</span>, <span class="string">'str'</span>, <span class="string">'sum'</span>, <span class="string">'super'</span>, <span class="string">'tuple'</span>, <span class="string">'type'</span>, <span class="string">'vars'</span>, <span class="string">'zip'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看 <code>局部作用域</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1111111111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(locals() <span class="keyword">is</span> globals())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在全局作用范围内查看，<code>locals()</code> 和 <code>gloables()</code> 是一样的<br>全局查看就是 优先查看自己，再查看局部的<br>在全局作用范围查看检索范围就是 全局名称空间，以及内置名称空间<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1111111111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line">    print(locals())</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="string">'y'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="打破函数层级限制的解决方案"><a href="#打破函数层级限制的解决方案" class="headerlink" title="打破函数层级限制的解决方案"></a>打破函数层级限制的解决方案</h3><blockquote><p>如何打破函数层级的访问限制？<br>让能够在任意位置都可以访问到一个内部函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>)</span><br><span class="line">    inner()</span><br><span class="line"></span><br><span class="line">outter()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> inner</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>如何在任何位置都能访问到 inner() 函数？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function outter.&lt;locals&gt;.inner at <span class="number">0x7f2b7b0a0c80</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>返回 inner() 的存地址<br>return inner，注意这里 inner 不能加括号<br>然后调用 <code>outter()</code> 函数，将其赋值给 一个 <code>全局名称空间</code> 的名字变量<br>打印这个名字变量，输出 <code>inner()</code> 的内存地址</p></blockquote><blockquote><p>名字变量 加 <code>括号</code> 执行，就可以访问 内部函数<code>inner()</code> 内的内容了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> inner</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>定义个 <code>全局名称空间</code> foo() 函数<br>通过 foo() 调用 <code>全局名称空间</code> 的 名字变量 <code>f</code>，也能访问到 内部函数inner() 内的内容了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(f)</span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function outter.&lt;locals&gt;.inner at <span class="number">0x7f8aaa6f6c80</span>&gt;</span><br><span class="line"><span class="keyword">from</span> inner</span><br></pre></td></tr></table></figure><p><strong>基于函数对象的概念将一个内部函数返回到全局使用，从而打破了函数的的层级限制</strong></p><blockquote><p>也可以将 内部函数 inner() 返回到 foo() 内</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    f = outter()</span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> inner</span><br></pre></td></tr></table></figure><p><strong>函数的作用域关系是在函数定义阶段就已经固定死的，与函数的调用位置无关</strong><br><strong>即在调用函数时，一定要跑到定义函数的位置寻找作用域关系</strong></p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><strong>示例一</strong></p><blockquote><p>注意查看 x 变量的位置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>, x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">222</span></span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> inner <span class="number">111</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>示例二</strong></p><blockquote><p>注意查看 x 变量的位置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">33333</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>, x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">222</span></span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> inner <span class="number">33333</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>示例三</strong></p><blockquote><p>注意查看 x 变量的位置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>, x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">x = <span class="number">4444</span></span><br><span class="line">f = outter()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">222</span></span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> inner <span class="number">4444</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python名称空间与作用域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 函数嵌套</title>
      <link href="/2018/08/21/Python%E5%87%BD%E6%95%B0%E5%B5%8C%E5%A5%97/"/>
      <url>/2018/08/21/Python%E5%87%BD%E6%95%B0%E5%B5%8C%E5%A5%97/</url>
      <content type="html"><![CDATA[<h2 id="Python-函数嵌套"><a href="#Python-函数嵌套" class="headerlink" title="Python 函数嵌套"></a>Python 函数嵌套</h2><a id="more"></a><h3 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h3><blockquote><p>在调用一个函数时，其内部的代码又调用了其他的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from bar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> foo</span><br><span class="line"><span class="keyword">from</span> bar</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>求两个数的最大值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>求四个数的最大值<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def <span class="keyword">max</span><span class="number">4</span>(a, b, <span class="keyword">c</span>, d):</span><br><span class="line">    res<span class="number">1</span> = <span class="keyword">max</span><span class="number">2</span>(a, b):</span><br><span class="line">    res<span class="number">2</span> = <span class="keyword">max</span><span class="number">2</span>(res<span class="number">1</span>, <span class="keyword">c</span>)</span><br><span class="line">    res<span class="number">3</span> = <span class="keyword">max</span><span class="number">2</span>(res<span class="number">2</span>, d)</span><br><span class="line">    return res<span class="number">3</span></span><br><span class="line"></span><br><span class="line">print(<span class="keyword">max</span><span class="number">4</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="函数的嵌套定义"><a href="#函数的嵌套定义" class="headerlink" title="函数的嵌套定义"></a>函数的嵌套定义</h3><blockquote><p>在一个函数的内部又定义了另外一个函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from f2'</span>)</span><br><span class="line"></span><br><span class="line">print(f1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function f1 at <span class="number">0x00000288E1A51E18</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from f2'</span>)</span><br><span class="line">    print(x)</span><br><span class="line">    print(f2)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&lt;function f1.&lt;locals&gt;.f2 at <span class="number">0x0000024BD90F89D8</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from f2'</span>)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 函数嵌套 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 函数对象</title>
      <link href="/2018/08/20/Python%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/08/20/Python%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h2 id="Python-函数对象"><a href="#Python-函数对象" class="headerlink" title="Python 函数对象"></a>Python 函数对象</h2><a id="more"></a><blockquote><p>函数是第一类对象，意味着函数可以当做数据去使用</p></blockquote><h3 id="可以被引用"><a href="#可以被引用" class="headerlink" title="可以被引用"></a>可以被引用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line"></span><br><span class="line">print(foo)</span><br><span class="line">func = foo</span><br><span class="line">print(func)</span><br><span class="line">func()    <span class="comment"># 加括号运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function foo at <span class="number">0x00000221E334E18</span>&gt;</span><br><span class="line">&lt;function foo at <span class="number">0x00000221E334E18</span>&gt;</span><br><span class="line"><span class="keyword">from</span> foo</span><br></pre></td></tr></table></figure><h3 id="可以当做参数传给另外一个函数"><a href="#可以当做参数传给另外一个函数" class="headerlink" title="可以当做参数传给另外一个函数"></a>可以当做参数传给另外一个函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x)</span>:</span>    <span class="comment"># x=foo 的内存地址</span></span><br><span class="line">    print(x)</span><br><span class="line">    x()    <span class="comment"># 在调用 bar 的时候触发 foo</span></span><br><span class="line"></span><br><span class="line">bar(foo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function foo at <span class="number">0x00000221E334E18</span>&gt;</span><br><span class="line"><span class="keyword">from</span> foo</span><br></pre></td></tr></table></figure><h3 id="可以当作函数的返回值"><a href="#可以当作函数的返回值" class="headerlink" title="可以当作函数的返回值"></a>可以当作函数的返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> foo</span><br><span class="line"></span><br><span class="line">f = bar()</span><br><span class="line">print(f)</span><br><span class="line">print(f <span class="keyword">is</span> foo)</span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function foo at <span class="number">0x00000221E334E18</span>&gt;</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">from</span> foo</span><br></pre></td></tr></table></figure><h3 id="可以当作容器类型的元素"><a href="#可以当作容器类型的元素" class="headerlink" title="可以当作容器类型的元素"></a>可以当作容器类型的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f2'</span>)</span><br><span class="line"></span><br><span class="line">l = [f1, f2]</span><br><span class="line">print(l)</span><br><span class="line">l[<span class="number">1</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[&lt;function f1 at <span class="number">0x000001E9A24A89D8</span>&gt;, &lt;function f2 at <span class="number">0x000001E9A24A8A60</span>&gt;]</span><br><span class="line"><span class="keyword">from</span> f2</span><br></pre></td></tr></table></figure><h3 id="示例（基于函数对象思想）"><a href="#示例（基于函数对象思想）" class="headerlink" title="示例（基于函数对象思想）"></a>示例（基于函数对象思想）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'pay function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'withdraw'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'auth function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shopping</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'shopping function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transer</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'transfer function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"""</span></span><br><span class="line"><span class="string">    1 支付</span></span><br><span class="line"><span class="string">    2 取款</span></span><br><span class="line"><span class="string">    3 购物</span></span><br><span class="line"><span class="string">    4 转账</span></span><br><span class="line"><span class="string">    5 退出</span></span><br><span class="line"><span class="string">    """</span>)</span><br><span class="line">    choice = input(<span class="string">'请输入您要执行的操作：'</span>).strip()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">'1'</span>:</span><br><span class="line">        pay()</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">'2'</span>:</span><br><span class="line">        withdraw()</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">'3'</span>:</span><br><span class="line">        shopping()</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">'4'</span>:</span><br><span class="line">        transfer()</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">"5"</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'输入错误，请重新输入'</span>)</span><br></pre></td></tr></table></figure><p><strong>示例优化01</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'pay function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'withdraw'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'auth function'</span>)</span><br><span class="line"></span><br><span class="line">func_dic = &#123;&#125;</span><br><span class="line">    <span class="string">'1'</span>: pay, </span><br><span class="line">    <span class="string">'2'</span>: withdraw, </span><br><span class="line">    <span class="string">'3'</span>: auth</span><br><span class="line"></span><br><span class="line">print(func_dic)</span><br><span class="line">func_dic[<span class="string">'2'</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="string">'1'</span>: &lt;function pay at <span class="number">0x0000029EF7F589D8</span>&gt;, <span class="string">'2'</span>: &lt;function withdraw at <span class="number">0x0000029EF7F58A60</span>&gt;, <span class="string">'3'</span>: &lt;function auth at <span class="number">0x0000029EF7F58AE8</span>&gt;&#125;</span><br><span class="line">withdraw function</span><br></pre></td></tr></table></figure><p><strong>示例优化02</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'pay function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'withdraw'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'auth function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shopping</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'shopping function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transer</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'transfer function'</span>)</span><br><span class="line"></span><br><span class="line">func_dic = &#123;</span><br><span class="line">    <span class="string">'1'</span>: pay, </span><br><span class="line">    <span class="string">'2'</span>: withdraw, </span><br><span class="line">    <span class="string">'3'</span>: auth,</span><br><span class="line">    <span class="string">'4'</span>: shopping,</span><br><span class="line">    <span class="string">'5'</span>: transfer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"""</span></span><br><span class="line"><span class="string">    1 支付</span></span><br><span class="line"><span class="string">    2 取款</span></span><br><span class="line"><span class="string">    3 认证</span></span><br><span class="line"><span class="string">    4 购物</span></span><br><span class="line"><span class="string">    5 转账</span></span><br><span class="line"><span class="string">    """</span>)</span><br><span class="line">    choice = input(<span class="string">'请输入您要执行的操作（按q退出）：'</span>).strip()    <span class="comment"># choice = '1'</span></span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">'q'</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> choice <span class="keyword">not</span> <span class="keyword">in</span> func_dic:</span><br><span class="line">        print(<span class="string">'输入错误，请重新输入'</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    func_dic[choice]()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 函数对象 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 函数参数-命名关键字参数</title>
      <link href="/2018/08/20/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0-%E5%91%BD%E5%90%8D%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%82%E6%95%B0/"/>
      <url>/2018/08/20/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0-%E5%91%BD%E5%90%8D%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="Python-函数参数-命名关键字参数"><a href="#Python-函数参数-命名关键字参数" class="headerlink" title="Python 函数参数-命名关键字参数"></a>Python 函数参数-命名关键字参数</h2><h3 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h3><a id="more"></a><h4 id="函数参数格式"><a href="#函数参数格式" class="headerlink" title="函数参数格式"></a>函数参数格式</h4><blockquote><p><code>def foo(位置形参, 默认形参, **args, 命名关键字参数, **kwargs)</code></p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, <span class="attribute">y</span>=1, *<span class="number">*a</span>rgs, m, **kwargs):</span><br><span class="line">    <span class="builtin-name">print</span>(x, y, args, m, kwargs)</span><br></pre></td></tr></table></figure><blockquote><p><code>m</code> 为 命名关键字参数</p></blockquote><blockquote><p>命名关键字参数：<br>凡是在 <code>*</code> 后 <code>**</code> 之前定义的的参数称之为 命名关键字参数<br><code>注意：</code> 在调用函数时，传值的形式必须是 key=value 的形式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, *, m, n)</span>:</span></span><br><span class="line">    print(x, y, m, n)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: foo() takes <span class="number">2</span> positional arguments but <span class="number">4</span> were given</span><br></pre></td></tr></table></figure><blockquote><p>需要改成</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y, *, m, n):</span><br><span class="line">    <span class="builtin-name">print</span>(x, y, m, n)</span><br><span class="line"></span><br><span class="line">foo(1, 2, <span class="attribute">n</span>=3, <span class="attribute">m</span>=4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">1 2 4 3</span><br></pre></td></tr></table></figure><blockquote><p>以下 m=1 表示为命名关键字参数指定一个默认值</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y, *, <span class="attribute">m</span>=1, n):</span><br><span class="line">    <span class="builtin-name">print</span>(x, y, m, n)</span><br><span class="line"></span><br><span class="line">foo(1, 2, <span class="attribute">n</span>=3)    # <span class="attribute">m</span>=1 命名关键字参数有值了，可以不传值</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">1 2 1 3</span><br></pre></td></tr></table></figure><h4 id="命名关键字参数示例"><a href="#命名关键字参数示例" class="headerlink" title="命名关键字参数示例"></a>命名关键字参数示例</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y, <span class="number">*a</span>rgs, <span class="attribute">m</span>=1, n):</span><br><span class="line">    <span class="builtin-name">print</span>(x, y, m, n)</span><br><span class="line">    <span class="builtin-name">print</span>(args)</span><br><span class="line"></span><br><span class="line">foo(1, 2, 3, 4, 5, <span class="attribute">n</span>=222, <span class="attribute">m</span>=11)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">1 2 11 222</span><br><span class="line">(3, 4, 5)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y=<span class="number">1</span>, *args, m, **kwargs)</span>:</span></span><br><span class="line">    print(x, y, args, m, kwargs)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, m=<span class="number">200</span>, n=<span class="number">300</span>, a=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="number">200</span> &#123;<span class="string">'n'</span>: <span class="number">300</span>, <span class="string">'a'</span>: <span class="number">400</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="常用函数参数形式"><a href="#常用函数参数形式" class="headerlink" title="常用函数参数形式"></a>常用函数参数形式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    index(*args, **kwargs)</span><br></pre></td></tr></table></figure><blockquote><p>示例：求和函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> args:</span><br><span class="line">        res += item</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python 函数参数-命名关键字参数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python函数参数-可变长参数</title>
      <link href="/2018/08/15/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0-%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/"/>
      <url>/2018/08/15/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0-%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="Python函数参数-可变长参数"><a href="#Python函数参数-可变长参数" class="headerlink" title="Python函数参数-可变长参数"></a>Python函数参数-可变长参数</h2><a id="more"></a><h3 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h3><blockquote><p>指的是在调用函数时，传入的实参个数可以不固定<br>实参两种形式：</p><ol><li>位置实参</li><li>关键字实参<br>所以对应的，形参也必须对应两种解决方案，专门用于接收溢出的位置实参和关键字实参</li></ol></blockquote><h3 id="接收溢出的位置实参"><a href="#接收溢出的位置实参" class="headerlink" title="接收溢出的位置实参"></a>接收溢出的位置实参</h3><blockquote><p><code>星（*）</code>：接收溢出的位置实参，存成元组类型，然后赋值给（<code>*</code>）后边跟的那个变量名</p></blockquote><h4 id="用法一：在形参中使用（-）"><a href="#用法一：在形参中使用（-）" class="headerlink" title="用法一：在形参中使用（*）"></a>用法一：在形参中使用（*）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, *args)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)    <span class="comment"># 3, 4, 5 是溢出的</span></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span>, <span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)    <span class="comment"># 3, 4, 5, 6, 7, 8, 9 是溢出的</span></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><h4 id="用法二：在实参中用（-）"><a href="#用法二：在实参中用（-）" class="headerlink" title="用法二：在实参中用（*）"></a>用法二：在实参中用（*）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, *args)</span>:</span>    <span class="comment"># args = ((3, 4, 5, 6, 7, 8, 9))</span></span><br><span class="line">    print(x, y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><blockquote><p>实参中使用星（*），将实参打散成位置实参，再传值给形参</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, *args)</span>:</span>    <span class="comment"># args = (3, 4, 5, 6, 7, 8, 9)</span></span><br><span class="line">    print(x, y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, *(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))    <span class="comment"># foo(1, 2, 3, 4, 5, 6, 7, 8, 9)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, *args)</span>:</span>    <span class="comment"># args = (3, 4, 5,)</span></span><br><span class="line">    print(x, y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, *[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])    <span class="comment"># foo(1, 2, 3, 4, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">def</span> <span class="selector-tag">foo</span>(x, y, *args):</span><br><span class="line">    <span class="selector-tag">print</span>(x, y)</span><br><span class="line">    <span class="selector-tag">print</span>(z)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">foo</span>(<span class="number">1</span>, <span class="number">2</span>, *<span class="string">'abc'</span>)  # <span class="selector-tag">foo</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line"><span class="selector-tag">1</span> <span class="selector-tag">2</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><h4 id="注意以下传参问题："><a href="#注意以下传参问题：" class="headerlink" title="注意以下传参问题："></a>注意以下传参问题：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, *(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))    <span class="comment"># foo(1, 2, 3, 4, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: foo() takes <span class="number">2</span> positional arguments but <span class="number">5</span> were given</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">foo(*(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># foo(1, 2, 3, 4, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: foo() takes <span class="number">2</span> positional arguments but <span class="number">5</span> were given</span><br></pre></td></tr></table></figure><blockquote><p>示例：求和函数，传一堆数字，求这堆数字的和</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def my_sum(*<span class="keyword">args</span>):</span><br><span class="line">    <span class="keyword">res</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n in arg<span class="variable">s:</span></span><br><span class="line">        <span class="keyword">res</span> = <span class="keyword">res</span> + n</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">res</span></span><br><span class="line"></span><br><span class="line">res1 = my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">res2 = my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">res3 = my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(res1)</span><br><span class="line"><span class="keyword">print</span>(res2)</span><br><span class="line"><span class="keyword">print</span>(res3)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><h3 id="接收溢出的关键字实参"><a href="#接收溢出的关键字实参" class="headerlink" title="接收溢出的关键字实参"></a>接收溢出的关键字实参</h3><blockquote><p><code>星星（**）</code>：接收溢出的关键字实参，存成字典类型，然后赋值给（<code>**</code>）后面跟的那个变量名</p></blockquote><h4 id="用法一：在形参中使用（-）-1"><a href="#用法一：在形参中使用（-）-1" class="headerlink" title="用法一：在形参中使用（**）"></a>用法一：在形参中使用（<code>**</code>）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, **kwargs)</span>:</span>    <span class="comment"># kwargs=&#123;'a':2, 'b':4, 'c':4&#125;</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, a=<span class="number">2</span>, b=<span class="number">3</span>, c=<span class="number">4</span>, y=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">2</span>, <span class="string">'b'</span>: <span class="number">4</span>, <span class="string">'c'</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="用法二：在实参中使用（-）"><a href="#用法二：在实参中使用（-）" class="headerlink" title="用法二：在实参中使用（**）"></a>用法二：在实参中使用（<code>**</code>）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, **kwargs)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, &#123;<span class="string">'a'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">10</span>, <span class="string">'y'</span>:<span class="number">111</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="string">'a'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">10</span>, <span class="string">'y'</span>:<span class="number">111</span>&#125;</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1 赋值给了 x<br>{‘a’:2, ‘c’:3, ‘b’:10, ‘y’:111} 赋值给了 y<br>没有溢出的关键字参数，所以 **kwargs 为空</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, **kwargs)</span>:</span>    <span class="comment"># kwargs=&#123;'a':2, 'c':3, 'b':10&#125;</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, **&#123;<span class="string">'a'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">10</span>, <span class="string">'y'</span>:<span class="number">111</span>&#125;)  <span class="comment"># foo&#123;1, y=111, a=2, b=10, c=3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">111</span></span><br><span class="line">&#123;<span class="string">'a'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">10</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1 赋值给了 x<br>111 赋值给了 y<br>{‘a’:2, ‘c’:3, ‘b’:10} 为溢出的关键字参数，赋值给了 **kwargs</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, **kwargs)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, **&#123;<span class="string">'a'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;)  <span class="comment"># foo(1, c=3, a=2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: foo() missing <span class="number">1</span> required positional argument: <span class="string">'y'</span></span><br><span class="line">缺少<span class="number">1</span>个所需的位置参数：<span class="string">'y'</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：把字典里的每个值取出来，分别赋值给 x, y, z</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">foo(d[<span class="string">'x'</span>], d[<span class="string">'y'</span>], d[<span class="string">'z'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">foo(**d)  <span class="comment"># foo(x=1, y=2, z=3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>, <span class="string">'a'</span>: <span class="number">10</span>&#125;</span><br><span class="line">foo(**d)  <span class="comment"># foo(x=1, y=2, z=3, a=10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: foo() got an unexpected keyword argument: <span class="string">'a'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>,&#125;</span><br><span class="line">foo(**d)  <span class="comment"># foo(x=1, y=2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: foo() missing <span class="number">1</span> required positional argument: <span class="string">'z'</span></span><br></pre></td></tr></table></figure><h3 id="接收任意形式，任意长度的参数"><a href="#接收任意形式，任意长度的参数" class="headerlink" title="接收任意形式，任意长度的参数"></a>接收任意形式，任意长度的参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args, **kwargs)</span>:</span>  <span class="comment"># args=(1, 2, 3)</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>示例场景</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def <span class="built_in">index</span>(name, gender):</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'welcome %s gender is %s'</span> % (name, gender))</span><br><span class="line"></span><br><span class="line">def wrapper(*<span class="keyword">args</span>, **kwargs):  # <span class="keyword">args</span>=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)  kwargs=&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;</span><br><span class="line">    <span class="built_in">index</span>(*<span class="keyword">args</span>, **kwargs)  # <span class="built_in">index</span>(*(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), **&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;)  # <span class="built_in">index</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="keyword">a</span>=<span class="number">1</span>,<span class="keyword">b</span>=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">wrapper(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="keyword">a</span>=<span class="number">1</span>, <span class="keyword">b</span>=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line">TypeError: <span class="built_in">index</span>() got <span class="keyword">an</span> unexpected keyword <span class="keyword">argument</span> <span class="string">'a'</span></span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def <span class="built_in">index</span>(name, gender):</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'welcome %s gender is %s'</span> % (name, gender))</span><br><span class="line"></span><br><span class="line">def wrapper(*<span class="keyword">args</span>, **kwargs):  # <span class="keyword">args</span>=(<span class="string">'zhangsan'</span>,<span class="string">'male'</span>)  kwargs=&#123;&#125;</span><br><span class="line">    <span class="built_in">index</span>(*<span class="keyword">args</span>, **kwargs)  # <span class="built_in">index</span>(*(<span class="string">'zhangsan'</span>,<span class="string">'male'</span>), **&#123;&#125;)  # <span class="built_in">index</span>(<span class="string">'zhangsan'</span>,<span class="string">'male'</span>)</span><br><span class="line"></span><br><span class="line"># wrapper(<span class="string">'zhangsan'</span>, <span class="string">'male'</span>)</span><br><span class="line"># wrapper(gender=<span class="string">'male'</span>, name=<span class="string">'zhangsan'</span>)</span><br><span class="line">wrapper(<span class="string">'zhangsan'</span>, gender=<span class="string">'male'</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line">welcome zhangsan gender <span class="keyword">is</span> male</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python函数参数-可变长参数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python函数参数</title>
      <link href="/2018/08/12/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/"/>
      <url>/2018/08/12/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="Python函数参数"><a href="#Python函数参数" class="headerlink" title="Python函数参数"></a>Python函数参数</h2><a id="more"></a><h3 id="函数的参数氛围两大类：形参与实参"><a href="#函数的参数氛围两大类：形参与实参" class="headerlink" title="函数的参数氛围两大类：形参与实参"></a>函数的参数氛围两大类：形参与实参</h3><blockquote><p>形参：指的是在定义函数时，括号指定的参数，本质就是“变量名”<br>实参：指的是在调用函数时，括号内传入的值，本质就是值</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y):  # <span class="attribute">x</span>=1, <span class="attribute">y</span>=2</span><br><span class="line">    <span class="builtin-name">print</span>(x)</span><br><span class="line">    <span class="builtin-name">print</span>(y)</span><br><span class="line"></span><br><span class="line">foo(1, 2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><blockquote><p>只有在调用函数时才会在函数体内发生实参（值）与形参（变量名）的绑定关系<br>该绑定关系只在调用函数时临时生效，在调用函数结束后就解除绑定</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span>  <span class="comment"># x=1, y=2</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1.3</span>, &#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1.3</span></span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在传值的时候没有类型限制</p></blockquote><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><blockquote><p>位置形参：在定义函数时，按照从左到右的顺序依次定义的形参称之为位置形参<br>位置实参：在调用函数时，按照从左到右的顺序依次传入的值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x, y, z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>位置形参：在定义函数时，按照从左到右的顺序依次定义的形参称之为位置形参<br>凡是按照位置定义的形参，在调用函数时必须为其传值，多一个不行少一个也不行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x, y, z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: foo() missing <span class="number">1</span> required positional argument: <span class="string">'z'</span></span><br><span class="line"><span class="comment"># 缺少 1 个所需的位置参数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x, y, z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: foo() takes <span class="number">3</span> positional arguments but <span class="number">4</span> were given</span><br></pre></td></tr></table></figure><blockquote><p>位置实参：在调用函数时，按照从左到右的顺序依次传入的值<br>在传值时按照顺序与形参一一对应</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x, y, z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>缺点：基于位置的方式传值，按照顺序与形参一一对应，对应错了，传值就错了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name, sex, age)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(sex)</span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line">register(<span class="string">'egon'</span>, <span class="string">'male'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">male</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h3><blockquote><p>关键字实参：在调用函数时，按照 key=value 的形式定义的实参，称之为关键字实参<br>在传值时，可以完全打乱顺序，仍然能为指定的参数传值</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def register(name, sex, age):</span><br><span class="line">    <span class="builtin-name">print</span>(name)</span><br><span class="line">    <span class="builtin-name">print</span>(sex)</span><br><span class="line">    <span class="builtin-name">print</span>(age)</span><br><span class="line"></span><br><span class="line">register(<span class="attribute">name</span>=<span class="string">'egon'</span>, <span class="attribute">sex</span>=<span class="string">'male'</span>, <span class="attribute">age</span>=18)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">male</span><br><span class="line">18</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name, sex, age)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(sex)</span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line">register(sex=<span class="string">'male'</span>, age=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: register() missing <span class="number">1</span> required positional argument: <span class="string">'name'</span></span><br></pre></td></tr></table></figure><blockquote><p>在调用函数时，可以混合使用位置实参和关键字实参<br>但是位置实参必须在关键字实参的左边</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name, sex, age)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(sex)</span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line">register(name=<span class="string">'egon'</span>, <span class="string">'male'</span>, age=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">SyntaxError: positional argument follows keyword argument</span><br></pre></td></tr></table></figure><blockquote><p>不能为同一个形参重复传值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name, sex, age)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(sex)</span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line">register(<span class="string">'male'</span>, name=<span class="string">'egon'</span>, age=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: register() got multiple value <span class="keyword">for</span> argument <span class="string">'name'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name, sex, age)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(sex)</span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line">register(<span class="string">'egon'</span>, age=<span class="number">18</span>, sex=<span class="string">'male'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">male</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><blockquote><p>形参在定义时就已经为其赋值<br>可以传值也可以不传值<br>经常需要变得参数定义成位置形参，变化较小的参数定义成默认参数（形参）<br>注意：</p><ol><li>在定义阶段已经赋值，在调用阶段可以不用为其传值</li><li>默认参数的定义应该在位置形参右边</li><li>默认参数通常应该定义成不可变类型</li></ol></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y, <span class="attribute">z</span>=3):</span><br><span class="line">    <span class="builtin-name">print</span>(x)</span><br><span class="line">    <span class="builtin-name">print</span>(y)</span><br><span class="line">    <span class="builtin-name">print</span>(z)</span><br><span class="line"></span><br><span class="line">foo(1, 2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><blockquote><p>如需传值，以新的值为准</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y, <span class="attribute">z</span>=3):</span><br><span class="line">    <span class="builtin-name">print</span>(x)</span><br><span class="line">    <span class="builtin-name">print</span>(y)</span><br><span class="line">    <span class="builtin-name">print</span>(z)</span><br><span class="line"></span><br><span class="line">foo(1, 2, 4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><blockquote><p>经常需要变得参数定义成位置形参，变化较小的参数定义成默认参数（形参）</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def register(name, <span class="attribute">sex</span>=<span class="string">'female'</span>, age):</span><br><span class="line">    <span class="builtin-name">print</span>(name)</span><br><span class="line">    <span class="builtin-name">print</span>(sex)</span><br><span class="line">    <span class="builtin-name">print</span>(age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">SyntxError: non-default argument follows<span class="built_in"> default </span>argument</span><br></pre></td></tr></table></figure><blockquote><p>默认参数的定义应该在位置形参右边</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def <span class="keyword">register</span>(name, age, sex=<span class="string">'female'</span>):</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="built_in">print</span>(sex)</span><br><span class="line">    <span class="built_in">print</span>(age)</span><br><span class="line"></span><br><span class="line"><span class="keyword">register</span>(<span class="string">'wxx'</span>, <span class="number">38</span>)</span><br><span class="line"><span class="keyword">register</span>(<span class="string">'lxx'</span>, <span class="number">48</span>)</span><br><span class="line"><span class="keyword">register</span>(<span class="string">'cxx'</span>, <span class="number">28</span>)</span><br><span class="line"><span class="keyword">register</span>(<span class="string">'alex'</span>, <span class="number">73</span>, <span class="string">'male'</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">wxx</span><br><span class="line">female</span><br><span class="line"><span class="number">38</span></span><br><span class="line">lxx</span><br><span class="line">female</span><br><span class="line"><span class="number">48</span></span><br><span class="line">cxx</span><br><span class="line">female</span><br><span class="line"><span class="number">28</span></span><br><span class="line">alex</span><br><span class="line">male</span><br><span class="line"><span class="number">73</span></span><br></pre></td></tr></table></figure><blockquote><p>默认形参的值只在定义阶段生效一次，在函数定义之后发生的改动无效</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z=m)</span>:</span></span><br><span class="line">    print(<span class="string">'x: %s'</span> % x)</span><br><span class="line">    print(<span class="string">'y: %s'</span> % y)</span><br><span class="line">    print(<span class="string">'z: %s'</span> % z)</span><br><span class="line"></span><br><span class="line">m = <span class="number">123456</span></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">x: <span class="number">1</span></span><br><span class="line">y: <span class="number">2</span></span><br><span class="line">z: <span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>默认参数通常应该定义成不可变类型</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def foo(name, hobby, l=[]):  # 这里 l=[] 默认参数为可变类型</span><br><span class="line">    l.append(hobby)</span><br><span class="line">    print(<span class="string">'%s 的爱好是 %s'</span> <span class="comment">% (name, l))</span></span><br><span class="line"></span><br><span class="line">foo(<span class="string">'张三'</span>, <span class="string">'read'</span>)</span><br><span class="line">foo(<span class="string">'李四'</span>, <span class="string">'吃饭'</span>)</span><br><span class="line">foo(<span class="string">'王五'</span>, <span class="string">'睡觉'</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line">张三 的爱好是 [<span class="string">'read'</span>]</span><br><span class="line">李四 的爱好是 [<span class="string">'read'</span>, <span class="string">'吃饭'</span>]</span><br><span class="line">王五 的爱好是 [<span class="string">'read'</span>, <span class="string">'吃饭'</span>, <span class="string">'睡觉'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>问题：三次调用之间彼此之间有关联，一次调用基于上次的结果继续调用<br>注意：函数定义的时候一定要做到函数的解耦合性</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def foo(name, hobby,):</span><br><span class="line">    l = []</span><br><span class="line">    l.append(hobby)</span><br><span class="line">    print(<span class="string">'%s 的爱好是 %s'</span> <span class="comment">% (name, l))</span></span><br><span class="line"></span><br><span class="line">foo(<span class="string">'张三'</span>, <span class="string">'read'</span>)</span><br><span class="line">foo(<span class="string">'李四'</span>, <span class="string">'吃饭'</span>)</span><br><span class="line">foo(<span class="string">'王五'</span>, <span class="string">'睡觉'</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line">张三 的爱好是 [<span class="string">'read'</span>]</span><br><span class="line">李四 的爱好是 [<span class="string">'吃饭'</span>]</span><br><span class="line">王五 的爱好是 [<span class="string">'睡觉'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name, hobby, l=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> l <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        l = []</span><br><span class="line">    l.append(hobby)</span><br><span class="line">    print(<span class="string">'%s 的爱好是 %s'</span> % (name, l))</span><br><span class="line"></span><br><span class="line">foo(<span class="string">'张三'</span>, <span class="string">'read'</span>, [<span class="string">'music'</span>, <span class="string">'movie'</span>]])</span><br><span class="line">foo(<span class="string">'李四'</span>, <span class="string">'吃饭'</span>, [<span class="string">'撸串'</span>,])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">张三 的爱好是 [<span class="string">'music'</span>, <span class="string">'movie'</span>, <span class="string">'read'</span>]</span><br><span class="line">张三 的爱好是 [<span class="string">'撸串'</span>, <span class="string">'吃饭'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name, hobby, l=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> l <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        l = []</span><br><span class="line">    l.append(hobby)</span><br><span class="line">    print(<span class="string">'%s 的爱好是 %s'</span> % (name, l))</span><br><span class="line"></span><br><span class="line">l1 = []</span><br><span class="line">foo(<span class="string">'张三'</span>, <span class="string">'read'</span>, l1)</span><br><span class="line">foo(<span class="string">'张三'</span>, <span class="string">'音乐'</span>, l1)</span><br><span class="line">foo(<span class="string">'张三'</span>, <span class="string">'旅行'</span>, l1)</span><br><span class="line">foo(<span class="string">'李四'</span>, <span class="string">'吃饭'</span>)</span><br><span class="line">foo(<span class="string">'王五'</span>, <span class="string">'睡觉'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">张三 的爱好是 [<span class="string">'read'</span>, <span class="string">'音乐'</span>, <span class="string">'旅行'</span>]</span><br><span class="line">李四 的爱好是 [<span class="string">'吃饭'</span>]</span><br><span class="line">王五 的爱好是 [<span class="string">'睡觉'</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python函数参数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack network模块</title>
      <link href="/2018/08/08/SaltStack-network%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/08/08/SaltStack-network%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h1 id="network模块"><a href="#network模块" class="headerlink" title="network模块"></a>network模块</h1><a id="more"></a><p>返回 Minion 主机的网络信息</p><h3 id="获取-minion01-主机-ping-域名信息"><a href="#获取-minion01-主机-ping-域名信息" class="headerlink" title="获取 minion01 主机 ping 域名信息"></a>获取 minion01 主机 ping 域名信息</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'minion01'</span> network<span class="selector-class">.ping</span> www<span class="selector-class">.baidu</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><h3 id="获取-minion-的主机名"><a href="#获取-minion-的主机名" class="headerlink" title="获取 minion 的主机名"></a>获取 minion 的主机名</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> network.get_hostname</span><br></pre></td></tr></table></figure><h3 id="获取指定网络接口的-mac-地址"><a href="#获取指定网络接口的-mac-地址" class="headerlink" title="获取指定网络接口的 mac 地址"></a>获取指定网络接口的 mac 地址</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> network<span class="selector-class">.hw_addr</span> eth0</span><br></pre></td></tr></table></figure><h3 id="获取主机是否在某个子网内"><a href="#获取主机是否在某个子网内" class="headerlink" title="获取主机是否在某个子网内"></a>获取主机是否在某个子网内</h3><blockquote><p>在就返回True，如果不在的话就返回 False，多子网用空格隔开<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt '*' network.in_subnet <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="查看-minion-端绑定的-IP-地址"><a href="#查看-minion-端绑定的-IP-地址" class="headerlink" title="查看 minion 端绑定的 IP 地址"></a>查看 minion 端绑定的 IP 地址</h3><blockquote><p>多 IP 也会显示出来，127.0.0.1 除外<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> network.ip_addrs</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="显示所有接口的详细信息"><a href="#显示所有接口的详细信息" class="headerlink" title="显示所有接口的详细信息"></a>显示所有接口的详细信息</h3><blockquote><p>但是别名的网卡类似于 eth0:1 这种不会显示<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> network.interfaces</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="显示指定网卡接口上面的-IP"><a href="#显示指定网卡接口上面的-IP" class="headerlink" title="显示指定网卡接口上面的 IP"></a>显示指定网卡接口上面的 IP</h3><blockquote><p>只会显示IP不会显示其他内容<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> network<span class="selector-class">.interface_ip</span> eth0</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>network.interface 会连网关子网掩码也显示</p></blockquote><h3 id="修改某一个-minion-的主机名"><a href="#修改某一个-minion-的主机名" class="headerlink" title="修改某一个 minion 的主机名"></a>修改某一个 minion 的主机名</h3><blockquote><p>显然这一步操作只适合在初始化的时候而且不适合执行所有主机<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'agent1.salt'</span> network<span class="selector-class">.mod_hostname</span> test1.salt</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="显示的-ping-的结果信息"><a href="#显示的-ping-的结果信息" class="headerlink" title="显示的 ping 的结果信息"></a>显示的 ping 的结果信息</h3><blockquote><p>如果不加 return_boolean=True 显示的是 ping 的结果信息，加了就是如果 ping 通了就返回 True，ping不通就返回 False<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> network<span class="selector-class">.ping</span> www<span class="selector-class">.baidu</span><span class="selector-class">.com</span> return_boolean=True timeout=<span class="number">3</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>timeout=3 就是 ping 的时间，3秒超时这样能快速返回结果<br>这个其实挺好用的，比如我们可以测试哪些主机的 DNS 设置有问题不能正常解析啊，或者是我们内网 DNS 指向了一个非公网的域名解析，可以通过这个看哪些主机设置了内网 DNS 而哪些没设置内网 DNS</p></blockquote><h3 id="获取主机所属的子网"><a href="#获取主机所属的子网" class="headerlink" title="获取主机所属的子网"></a>获取主机所属的子网</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> network.subnets</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack network模块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack host模块</title>
      <link href="/2018/08/08/SaltStack-hosts%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/08/08/SaltStack-hosts%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h2 id="hosts-模块"><a href="#hosts-模块" class="headerlink" title="hosts 模块"></a>hosts 模块</h2><a id="more"></a><blockquote><p>通过这个命令可以查看详细用法<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> sys<span class="selector-class">.doc</span> hosts</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>我们生产中如果没有用内建 DNS 服务，使用 hosts 模块修改 /etc/hosts 还是经常会用到的</p></blockquote><h3 id="hosts-add-host-追加"><a href="#hosts-add-host-追加" class="headerlink" title="hosts.add_host 追加"></a>hosts.add_host 追加</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> hosts.add_host <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.113</span> minion01</span><br><span class="line"># hosts.add 会先判断 /etc/hosts 里面有没有这个 <span class="built_in">IP</span> <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.113</span></span><br><span class="line"># 如果有 minion01 会将 alias 名追加到这个 <span class="built_in">IP</span> 后面，跟之前的解析别名一起使用这个 <span class="built_in">IP</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salt '*' hosts.add_host <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span> minion01</span><br><span class="line"># 如果没有这个 IP，则会新创建一行 hosts 记录，但是 <span class="number">192.168</span><span class="number">.1</span><span class="number">.113</span> 那条还是存在的。两条记录</span><br></pre></td></tr></table></figure><h3 id="hosts-set-host-覆盖"><a href="#hosts-set-host-覆盖" class="headerlink" title="hosts.set_host 覆盖"></a>hosts.set_host 覆盖</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> hosts<span class="selector-class">.set_host</span> <span class="number">192.168</span>.<span class="number">1.114</span> minion02</span><br><span class="line">hosts<span class="selector-class">.set_host</span> 这个的不同之处就是，如果这个 IP 不存在则创建新的一条 hosts 记录，如果 hosts 存在这个 IP 的解析记录。会完全覆盖掉</span><br><span class="line">也就是旧的 IP 解析记录完全变成现在的结果</span><br></pre></td></tr></table></figure><h3 id="hosts-rm-host-删除"><a href="#hosts-rm-host-删除" class="headerlink" title="hosts.rm_host 删除"></a>hosts.rm_host 删除</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt '*' hosts.rm_host <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span> minion02</span><br><span class="line"># 删除 <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span> minion02 这条解析记录</span><br><span class="line"># 如果 <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span> 这行有多条解析记录，而只会删除 minion02 这条记录，其他的 <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span> xxx.xxx，还会存在不会删除，可以说是有选择性的删除</span><br></pre></td></tr></table></figure><blockquote><p>查看 hosts 解析的用法</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span> 这个 IP 对应的别名解析</span><br><span class="line">salt '*' hosts.get_alias <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span></span><br><span class="line"># 如果有则返回对应的 hosts 别名解析记录，没有则什么都不返回</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 这个就是返回 minion01 在 /etc/hosts 里面对应的 IP</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.get_ip minion01</span><br><span class="line"><span class="meta"># 但是有个问题，如果有多条只会返回文件最上方的那一条对应的 IP 地址</span></span><br></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果有这条别名解析记录，则返回<span class="literal">True</span>，如果没有则返回<span class="literal">False</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.has_pair <span class="number">192.168</span><span class="number">.1</span><span class="number">.113</span> minion01</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 类似于 cat /etc/hosts 的操作</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.list_hosts</span><br><span class="line"><span class="meta"># 不同的是，这相当于一个汇总，会以第一行是 IP：下一行是其对应的别名解析的方式来呈现</span></span><br><span class="line"><span class="meta"># 比如一个 IP 有好几行的解析，这所有的解析记录都会汇总到这个 IP 下面，注释过的别名解析的行不会出现在这个汇总信息里面</span></span><br></pre></td></tr></table></figure><h3 id="dnsutil-模块"><a href="#dnsutil-模块" class="headerlink" title="dnsutil 模块"></a>dnsutil 模块</h3><blockquote><p>Minion 主机通用 DNS 操作<br>添加 192.168.2.71 <a href="http://www.test.com" target="_blank" rel="noopener">www.test.com</a> 到 minion01 端 /etc/hosts 下<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'minion01'</span> dnsutil<span class="selector-class">.hosts_append</span> /etc/hosts <span class="number">192.168</span>.<span class="number">2.71</span> www<span class="selector-class">.test</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack host模块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack group模块</title>
      <link href="/2018/08/08/SaltStack-group%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/08/08/SaltStack-group%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h2 id="group-模块"><a href="#group-模块" class="headerlink" title="group 模块"></a>group 模块</h2><a id="more"></a><h3 id="添加指定用户组"><a href="#添加指定用户组" class="headerlink" title="添加指定用户组"></a>添加指定用户组</h3><blockquote><p>group.add 方法<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> group.add user1 1000</span></span><br><span class="line">salt-minion02:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="返回用户组信息"><a href="#返回用户组信息" class="headerlink" title="返回用户组信息"></a>返回用户组信息</h3><blockquote><p>group.info 方法<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@salt-master</span> <span class="string">~]#</span> <span class="string">salt</span> <span class="string">'salt-minion02'</span> <span class="string">group.info</span> <span class="string">user1</span></span><br><span class="line"><span class="attr">salt-minion02:</span></span><br><span class="line"><span class="bullet">    -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">    gid:</span></span><br><span class="line">        <span class="number">1000</span></span><br><span class="line"><span class="attr">    members:</span></span><br><span class="line"><span class="attr">    name:</span></span><br><span class="line">        <span class="string">user1</span></span><br><span class="line"><span class="attr">    passwd:</span></span><br><span class="line">        <span class="string">x</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="返回所有用户组的信息"><a href="#返回所有用户组的信息" class="headerlink" title="返回所有用户组的信息"></a>返回所有用户组的信息</h3><blockquote><p>group.getent 方法<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">[root@salt-master ~]# salt 'salt-minion02' group.getent</span><br><span class="line">salt-minion02:</span><br><span class="line">    |_</span><br><span class="line">      -<span class="ruby">---------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">0</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          root</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">1</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">          - bin</span></span><br><span class="line"><span class="ruby">          - daemon</span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          bin</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">2</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">          - bin</span></span><br><span class="line"><span class="ruby">          - daemon</span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          daemon</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">3</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">          - bin</span></span><br><span class="line"><span class="ruby">          - adm</span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          sys</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">4</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">          - adm</span></span><br><span class="line"><span class="ruby">          - daemon</span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          adm</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">5</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          tty</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">6</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          disk</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">7</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">          - daemon</span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          lp</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">.......</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="添加一个用户到指定组中"><a href="#添加一个用户到指定组中" class="headerlink" title="添加一个用户到指定组中"></a>添加一个用户到指定组中</h3><blockquote><p>group.adduser 方法<br>必须是一个已经存在的组和已存在的用户<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> group.adduser user1 zabbix</span></span><br><span class="line">salt-minion02:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="将用户从用户组中移除"><a href="#将用户从用户组中移除" class="headerlink" title="将用户从用户组中移除"></a>将用户从用户组中移除</h3><blockquote><p>group.deluser 方法<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> group.deluser user1 zabbix</span></span><br><span class="line">salt-minion02:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="移除指定用户组"><a href="#移除指定用户组" class="headerlink" title="移除指定用户组"></a>移除指定用户组</h3><blockquote><p>group.delete 方法<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> group.delete user1</span></span><br><span class="line">salt-minion02:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack group模块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack user模块</title>
      <link href="/2018/08/08/SaltStack-user%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/08/08/SaltStack-user%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h2 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h2><a id="more"></a><blockquote><p>用于用户管理，如创建用户，删除用户，更改用户信息等<br>官方文档<br><a href="https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.useradd.html" target="_blank" rel="noopener">https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.useradd.html</a></p></blockquote><blockquote><p>在 minion 端上创建一个用户</p></blockquote><p><strong>语法</strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> user.<span class="built_in">add</span> name <span class="symbol">&lt;uid&gt;</span> <span class="symbol">&lt;gid&gt;</span> <span class="symbol">&lt;groups&gt;</span> <span class="symbol">&lt;home&gt;</span> <span class="symbol">&lt;shell&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><blockquote><p>创建一个 test 用户，其它都和 useradd 一样默认<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">salt * user.add test</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> user.add test 610 605 zabbix /home/test /bin/bash</span></span><br><span class="line">salt-minion02:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h3><blockquote><p>user.info 方法<br>返回用户信息<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@salt-master</span> <span class="string">~]#</span> <span class="string">salt</span> <span class="string">'salt-minion02'</span> <span class="string">user.info</span> <span class="string">test</span></span><br><span class="line"><span class="attr">salt-minion02:</span></span><br><span class="line"><span class="bullet">    -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">    fullname:</span></span><br><span class="line"><span class="attr">    gid:</span></span><br><span class="line">        <span class="number">605</span></span><br><span class="line"><span class="attr">    groups:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">zabbix</span></span><br><span class="line"><span class="attr">    home:</span></span><br><span class="line">        <span class="string">/home/test</span></span><br><span class="line"><span class="attr">    homephone:</span></span><br><span class="line"><span class="attr">    name:</span></span><br><span class="line">        <span class="string">test</span></span><br><span class="line"><span class="attr">    passwd:</span></span><br><span class="line">        <span class="string">x</span></span><br><span class="line"><span class="attr">    roomnumber:</span></span><br><span class="line"><span class="attr">    shell:</span></span><br><span class="line">        <span class="string">/bin/bash</span></span><br><span class="line"><span class="attr">    uid:</span></span><br><span class="line">        <span class="number">610</span></span><br><span class="line"><span class="attr">    workphone:</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="获取所有系统用户信息的列表"><a href="#获取所有系统用户信息的列表" class="headerlink" title="获取所有系统用户信息的列表"></a>获取所有系统用户信息的列表</h3><blockquote><p>user.getent 方法<br>返回所有系统用户信息的列表<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@salt-master</span> <span class="string">~]#</span> <span class="string">salt</span> <span class="string">'salt-minion02'</span> <span class="string">user.getent</span> </span><br><span class="line"><span class="attr">salt-minion02:</span></span><br><span class="line">    <span class="string">|_</span></span><br><span class="line"><span class="bullet">      -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">      fullname:</span></span><br><span class="line">          <span class="string">root</span></span><br><span class="line"><span class="attr">      gid:</span></span><br><span class="line">          <span class="number">0</span></span><br><span class="line"><span class="attr">      groups:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      home:</span></span><br><span class="line">          <span class="string">/root</span></span><br><span class="line"><span class="attr">      homephone:</span></span><br><span class="line"><span class="attr">      name:</span></span><br><span class="line">          <span class="string">root</span></span><br><span class="line"><span class="attr">      passwd:</span></span><br><span class="line">          <span class="string">x</span></span><br><span class="line"><span class="attr">      roomnumber:</span></span><br><span class="line"><span class="attr">      shell:</span></span><br><span class="line">          <span class="string">/bin/bash</span></span><br><span class="line"><span class="attr">      uid:</span></span><br><span class="line">          <span class="number">0</span></span><br><span class="line"><span class="attr">      workphone:</span></span><br><span class="line">    <span class="string">|_</span></span><br><span class="line"><span class="bullet">      -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">      fullname:</span></span><br><span class="line">          <span class="string">bin</span></span><br><span class="line"><span class="attr">      gid:</span></span><br><span class="line">          <span class="number">1</span></span><br><span class="line"><span class="attr">      groups:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">bin</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">daemon</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">sys</span></span><br><span class="line"><span class="attr">      home:</span></span><br><span class="line">          <span class="string">/bin</span></span><br><span class="line"><span class="attr">      homephone:</span></span><br><span class="line"><span class="attr">      name:</span></span><br><span class="line">          <span class="string">bin</span></span><br><span class="line"><span class="attr">      passwd:</span></span><br><span class="line">          <span class="string">x</span></span><br><span class="line"><span class="attr">      roomnumber:</span></span><br><span class="line"><span class="attr">      shell:</span></span><br><span class="line">          <span class="string">/sbin/nologin</span></span><br><span class="line"><span class="attr">      uid:</span></span><br><span class="line">          <span class="number">1</span></span><br><span class="line"><span class="attr">      workphone:</span></span><br><span class="line">  <span class="string">......</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="查看所有用户"><a href="#查看所有用户" class="headerlink" title="查看所有用户"></a>查看所有用户</h3><blockquote><p>查看所有用户<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">salt</span> * <span class="selector-tag">user</span><span class="selector-class">.list_users</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="列出指定用户所属组的列表"><a href="#列出指定用户所属组的列表" class="headerlink" title="列出指定用户所属组的列表"></a>列出指定用户所属组的列表</h3><blockquote><p>user.list_groups 方法<br>列出指定用户所属组的列表<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> user.list_groups zabbix</span></span><br><span class="line">salt-minion02.contoso.com:</span><br><span class="line">    - zabbix</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="创建用户指定-shell"><a href="#创建用户指定-shell" class="headerlink" title="创建用户指定 shell"></a>创建用户指定 shell</h3><blockquote><p>创建用户时指定 shell<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt * user.<span class="builtin-name">add</span> test <span class="attribute">shell</span>=/sbin/nologin</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="创建用户时指定不创建家目录"><a href="#创建用户时指定不创建家目录" class="headerlink" title="创建用户时指定不创建家目录"></a>创建用户时指定不创建家目录</h3><blockquote><p>创建用户时指定不创建家目录<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt * user.<span class="builtin-name">add</span> test <span class="attribute">createhome</span>=<span class="literal">False</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="创建用户时指定附加组"><a href="#创建用户时指定附加组" class="headerlink" title="创建用户时指定附加组"></a>创建用户时指定附加组</h3><blockquote><p>创建用户时指定附加组<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt * user.<span class="builtin-name">add</span> test <span class="attribute">groups</span>=nginx</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="将用户加入到其他组，为附加组"><a href="#将用户加入到其他组，为附加组" class="headerlink" title="将用户加入到其他组，为附加组"></a>将用户加入到其他组，为附加组</h3><blockquote><p>将 test 用户加入到 nginx 组，此为附加组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt * user.chgroups <span class="built_in">test</span> nginx</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="查看用户所有的组"><a href="#查看用户所有的组" class="headerlink" title="查看用户所有的组"></a>查看用户所有的组</h3><blockquote><p>查看 test 用户所有的组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt * user.list_groups <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><blockquote><p>user.delete 方法<br>删除 test 用户<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt * user.<span class="keyword">delete</span> test <span class="built_in">remove</span>=True</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在 minion 端删除一个用户<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> user.delete test</span></span><br><span class="line">salt-minion02:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h3><blockquote><p>user.rename 方法<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> user.rename test testuser</span></span><br><span class="line">salt-minion02.contoso.com:</span><br><span class="line">    <span class="literal">False</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>虽然返回 False 但是操作是成功完成了的</p></blockquote><h3 id="编辑-user-sls-文件"><a href="#编辑-user-sls-文件" class="headerlink" title="编辑 user.sls 文件"></a>编辑 user.sls 文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">/srv/salt/nginx/create_users.sls</span></span><br><span class="line"><span class="comment"># user</span></span><br><span class="line"><span class="attr">nginx_user:</span></span><br><span class="line">  <span class="string">user.present:</span>               <span class="comment"># 用户创建</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    - createhome:</span> <span class="literal">False</span>       <span class="comment"># 不用家目录</span></span><br><span class="line"><span class="attr">    - gid_from_name:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">    - shell:</span> <span class="string">/sbin/nologin</span>    <span class="comment"># 指定shell</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack user模块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack archive模块</title>
      <link href="/2018/08/08/SaltStack-archive%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/08/08/SaltStack-archive%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h1 id="archive-模块"><a href="#archive-模块" class="headerlink" title="archive 模块"></a>archive 模块</h1><a id="more"></a><blockquote><p>主要用于打包，压缩和归档使用<br>官方文档<br><a href="https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.archive.html" target="_blank" rel="noopener">https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.archive.html</a><br>实现系统层面的压缩包调用，支持 gunzip、gzip、rar、tar、unrar、unzip 等</p></blockquote><blockquote><p>可以设置为 “jinja” 或另一个受支持的模板引擎，以便在执行之前呈现命令参数<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">''</span> archive<span class="selector-class">.tar</span> cjvf /tmp/salt<span class="selector-class">.tar</span><span class="selector-class">.bz2</span> &#123;&#123;grains.saltpath&#125;&#125; template=jinja</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>将 /tmp/file_1,/tmp/file_2 打包压缩成 tarfile.tar.bz2 文件 到 /tmp 目录下<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">''</span> archive<span class="selector-class">.tar</span> cjvf /tmp/tarfile<span class="selector-class">.tar</span><span class="selector-class">.bz2</span> /tmp/file_1,/tmp/file_2</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>解压缩 foo.tar 文件到 /target/directory 目录下<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> archive<span class="selector-class">.tar</span> xf foo<span class="selector-class">.tar</span> dest=/target/directory</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>执行压缩命令<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">salt '*' archive.tar zcvf /root/test.tar.gz /root/python,/root/testa</span><br><span class="line">192.168.10.249:</span><br><span class="line">-<span class="ruby"> <span class="symbol">tar:</span> Removing leading <span class="string">`/' from member names</span></span></span><br><span class="line"><span class="ruby">- <span class="regexp">/root/python</span><span class="regexp">/</span></span></span><br><span class="line"><span class="ruby">- <span class="regexp">/root/python</span><span class="regexp">/p2</span></span></span><br><span class="line"><span class="ruby">- <span class="regexp">/root/python</span><span class="regexp">/p1</span></span></span><br><span class="line"><span class="ruby">- <span class="regexp">/root/testa</span></span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>通过该方法压缩的文件，解压后带有全路径，可通过 cwd 指定执行的目录<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> archive<span class="selector-class">.tar</span> zcvf /root/test/test<span class="selector-class">.tar</span><span class="selector-class">.gz</span> python,testa cwd=/root</span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.249</span>:</span><br><span class="line">python/</span><br><span class="line">python/p2</span><br><span class="line">python/p1</span><br><span class="line">testa</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>执行解压缩命令<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">salt '*' archive.tar zxvf /root/test/test.tar.gz dest=/root/test</span><br><span class="line">192.168.10.249:</span><br><span class="line">-<span class="ruby"> python/</span></span><br><span class="line"><span class="ruby">- python/p2</span></span><br><span class="line"><span class="ruby">- python/p1</span></span><br><span class="line"><span class="ruby">- testa</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 采用 gzip 压缩 sourcefile.txt 文件</span></span><br><span class="line">salt <span class="string">'*'</span> archive.gzip sourcefile.txt</span><br><span class="line"></span><br><span class="line"><span class="meta"># 采用 gzip 压缩 test.txt 文件</span></span><br><span class="line">salt <span class="string">'minion01'</span> archive.gzip test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta"># 采用 gunzip 解压 sourcefile.txt.gz 包</span></span><br><span class="line">salt <span class="string">'*'</span> archive.gunzip sourcefile.txt.gz</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压在 /root 目录下</span></span><br><span class="line">salt <span class="string">'minion01'</span> archive.tar xf <span class="regexp">/tmp/</span>access.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩在 /tmp 目录下</span></span><br><span class="line">salt <span class="string">'minion01'</span> archive.tar  <span class="regexp">/tmp/</span>test.txt</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 打包指定文件，多个文件使用空隔分开，打包后的名称为 <span class="keyword">test</span>.<span class="keyword">zip</span></span><br><span class="line">salt minion* archive.cmd_zip /opt/<span class="keyword">test</span>.<span class="keyword">zip</span> /tmp/<span class="keyword">test</span>.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line"># 打包目录</span><br><span class="line">salt minion* archive.cmd_zip /opt/<span class="keyword">test</span>.<span class="keyword">zip</span> /tmp/init</span><br><span class="line"></span><br><span class="line"># 将 init.<span class="keyword">zip</span> 解压至 /root 目录下面</span><br><span class="line">salt minion* archive.cmd_unzip /opt/init.<span class="keyword">zip</span> /root/</span><br><span class="line"></span><br><span class="line"># 将 <span class="keyword">test</span>.<span class="keyword">sh</span> 打包为 <span class="keyword">test</span>.<span class="keyword">sh</span>.gz，打包后就在当前目录</span><br><span class="line">salt minion* archive.gzip /tmp/<span class="keyword">test</span>.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line"># 将 <span class="keyword">test</span>.<span class="keyword">sh</span>.gz 解压，解压后就在当前目录</span><br><span class="line">salt minion* archive.gunzip /tmp/<span class="keyword">test</span>.<span class="keyword">sh</span>.gz</span><br><span class="line"></span><br><span class="line"># 对 /tmp/init 目录打包后压缩为 tar.gz</span><br><span class="line">salt minion* archive.tar czvf /opt/init.tar.gz /tmp/init</span><br><span class="line"></span><br><span class="line"># 解压 init.tar.gz，默认放到 /root 目录下面，因为 minion 进程是以 root 用户启动的</span><br><span class="line">salt minion* archive.tar xvzf /opt/init.tar.gz</span><br></pre></td></tr></table></figure><h3 id="api-调用"><a href="#api-调用" class="headerlink" title="api 调用"></a>api 调用</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">client</span>.cmd(<span class="string">'*'</span>, <span class="string">'archive.gunzip'</span>, [<span class="string">'sourcefile.txt.gz'</span>])</span><br><span class="line"><span class="keyword">client</span>.cmd(<span class="string">'minion01'</span>, <span class="string">'archive.tar'</span>, [<span class="string">'xf'</span>, <span class="string">'/tmp/access.tar.gz'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>通过 Python 扩展模块，使用 API<br>通过调用 master client 模块，实例化一个 LocalClient 对象，再调用 cmd() 方法来实现<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># API 实现 archive.gzip</span></span><br><span class="line">vim archive_gzip.py</span><br><span class="line">import salt.<span class="keyword">client</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">client</span> = salt.<span class="keyword">client</span>.LocalClient()</span><br><span class="line">res = <span class="keyword">client</span>.cmd(<span class="string">'*'</span>, <span class="string">'archive.gzip'</span>, <span class="string">'/tmp/test.txt'</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 执行结果返回一个字典</span></span><br><span class="line">&#123;<span class="string">'minion01'</span>: <span class="string">'/tmp/test.txt.gz'</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack archive模块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack 常用模块</title>
      <link href="/2018/08/07/SaltStack%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/08/07/SaltStack%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h1 id="SaltStack-常用模块"><a href="#SaltStack-常用模块" class="headerlink" title="SaltStack 常用模块"></a>SaltStack 常用模块</h1><a id="more"></a><h3 id="SaltStack-内置模块汇总"><a href="#SaltStack-内置模块汇总" class="headerlink" title="SaltStack 内置模块汇总"></a>SaltStack 内置模块汇总</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl, aliases, alternatives, apache, archive, artifactory, <span class="keyword">blockdev, </span><span class="keyword">btrfs, </span><span class="keyword">buildout, </span><span class="keyword">cloud, </span>cmd, composer, <span class="built_in">config</span>, container_resource, cp, cron, data, defaults, devmap, <span class="keyword">dig, </span><span class="keyword">disk, </span>django, dnsmasq, dnsutil, drbd, elasticsearch, environ, etcd, event, <span class="keyword">extfs, </span>file, gem, genesis, git, grains, group, grub, hashutil, hg, hipchat, hosts, http, img, incron, ini, introspect, ip, iptables, <span class="keyword">jboss7, </span><span class="keyword">jboss7_cli, </span>key, kmod, locale, locate, logrotate, lowpkg, match, mine, modjk, mount, network, openstack_config, pagerduty, pillar, pip, pkg, pkg_resource, postfix, publish, puppet, pyenv, raid, <span class="built_in">random</span>, random_org, rbenv, ret, rsync, runit, rvm, <span class="built_in">s3</span>, saltutil, <span class="keyword">schedule, </span><span class="keyword">scsi, </span>sdb, seed, selinux, serverdensity_device, service, <span class="keyword">shadow, </span>slack, smtp, sqlite3, ssh, state, status, supervisord, sys, sysctl, syslog_ng, system, test, timezone, user, vbox_guest, virtualenv, webutil, xfs</span><br></pre></td></tr></table></figure><h3 id="SaltStack-常用模块介绍"><a href="#SaltStack-常用模块介绍" class="headerlink" title="SaltStack 常用模块介绍"></a>SaltStack 常用模块介绍</h3><p>这里重点是要将经常用到的模块记录的用法记录下来，直接在 master 端用 salt 命令可以做一些简单的操作，也为做 .sls文件 打基础。</p><h4 id="cmd-模块常用方法"><a href="#cmd-模块常用方法" class="headerlink" title="cmd 模块常用方法"></a>cmd 模块常用方法</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'agent1.salt'</span> sys.doc <span class="keyword">cmd</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 可以看 cmd 模块都有哪些使用方法，这里只列举常用的</span></span></span><br></pre></td></tr></table></figure><h5 id="cmd-has-exec-用法"><a href="#cmd-has-exec-用法" class="headerlink" title="cmd.has_exec 用法"></a>cmd.has_exec 用法</h5><blockquote><p>如果可执行文件在 minion 上可用，则返回true，否则返回false</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这里只能是单个命令，如果你用 <span class="string">'ip addr'</span> 这种形式的话，肯定返回的是 <span class="literal">False</span></span><br><span class="line">salt <span class="string">'*'</span> cmd.has_exec ifconfig</span><br></pre></td></tr></table></figure><h5 id="cmd-retcode-用法"><a href="#cmd-retcode-用法" class="headerlink" title="cmd.retcode 用法"></a>cmd.retcode 用法</h5><blockquote><p>在 minion 端执行一个 shell 命令并返回命令的返回码。0 表示成功，0 以外表示失败有问题。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> <span class="keyword">cmd</span>.<span class="bash">retcode <span class="string">'ls -l /etc/hostname'</span></span></span><br><span class="line"><span class="bash"><span class="comment"># 如我们可以查看一个文件是否存在根据返回码来判断，或者执行一个脚本等，''里面就是你要执行的命令</span></span></span><br><span class="line"><span class="bash"><span class="comment"># 正好跟 cmd.has_exec 相反</span></span></span><br></pre></td></tr></table></figure></p></blockquote><h5 id="cmd-run-用法"><a href="#cmd-run-用法" class="headerlink" title="cmd.run 用法"></a>cmd.run 用法</h5><blockquote><p>这个执行 shell 命令跟 cmd.retcode 类似，但是不同的是，cmd.run 就像在本地执行一样。<br>cmd.run_stderr 意思只会在出问题的时候返回信息。</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# salt <span class="string">'*'</span> cmd.retcode <span class="string">'cat /root/1'</span></span><br><span class="line">zwidc_kvm_192.<span class="number">168.1</span>.<span class="number">104</span>:</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">agent1.<span class="keyword">sal</span><span class="variable">t:</span></span><br><span class="line">    <span class="number">0</span></span><br><span class="line">[root@master ~]# salt <span class="string">'*'</span> cmd.run <span class="string">'cat /root/1'</span></span><br><span class="line">agent1.<span class="keyword">sal</span><span class="variable">t:</span></span><br><span class="line">    <span class="number">123</span></span><br><span class="line">zwidc_kvm_192.<span class="number">168.1</span>.<span class="number">104</span>:</span><br><span class="line">[root@master ~]# salt <span class="string">'*'</span> cmd.run_stderr <span class="string">'cat /root/1'</span></span><br><span class="line">agentl.<span class="keyword">sal</span><span class="variable">t:</span></span><br><span class="line">zwidc_kvm_192.<span class="number">168.1</span>.<span class="number">104</span>:</span><br><span class="line">[root@master ~]# salt <span class="string">'*'</span> cmd.run_stderr <span class="string">'cat /root/6'</span></span><br><span class="line">agent1.<span class="keyword">sal</span><span class="variable">t:</span></span><br><span class="line">    <span class="keyword">ca</span><span class="variable">t:</span> /root/<span class="number">6</span>: No such <span class="keyword">file</span> <span class="built_in">or</span> directory</span><br><span class="line">zwidc_kvm_192.<span class="number">168.1</span>.<span class="number">104</span>:</span><br><span class="line">    <span class="keyword">ca</span><span class="variable">t:</span> /root/<span class="number">6</span>: No such <span class="keyword">file</span> <span class="built_in">or</span> directory</span><br></pre></td></tr></table></figure><h5 id="cmd-script-和-cmd-script-retcode"><a href="#cmd-script-和-cmd-script-retcode" class="headerlink" title="cmd.script 和 cmd.script_retcode"></a>cmd.script 和 cmd.script_retcode</h5><blockquote><p>从远程 salt 服务器 或 ftp 服务器 或 http 服务器 下载脚本到本地执行</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> cmd.script <span class="keyword">sal</span><span class="variable">t:</span>//scripts/runme.<span class="keyword">sh</span></span><br><span class="line">salt <span class="string">'*'</span> cmd.script <span class="keyword">sal</span><span class="variable">t:</span>//scripts/runme.<span class="keyword">sh</span> <span class="string">'arg1 arg2 "arg 3"'</span></span><br></pre></td></tr></table></figure><h5 id="cmd-shell-和-cmd-shells"><a href="#cmd-shell-和-cmd-shells" class="headerlink" title="cmd.shell 和 cmd.shells"></a>cmd.shell 和 cmd.shells</h5><blockquote><p>cmd.shell 跟 cmd.run 一样<br>一般用 cmd.run, cmd.shells 是通过 /etc/shells 文件列出此系统上的有效 shell</p></blockquote><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# salt '*' cmd.shells</span><br><span class="line"></span><br><span class="line">zwidc_kvm_192.168.1.104:</span><br><span class="line">    -<span class="ruby"> /bin/sh</span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/bin/bash</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/sbin/nologin</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/user/bin</span><span class="regexp">/sh</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/usr/bin</span><span class="regexp">/bash</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/usr/sbin</span><span class="regexp">/nologin</span></span></span><br><span class="line"><span class="ruby">agent1.<span class="symbol">salt:</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/bin/sh</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/bin/bash</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/sbin/nologin</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/bin/dash</span></span></span><br></pre></td></tr></table></figure><h5 id="cmd-which-和-cmd-which-bin-用法"><a href="#cmd-which-和-cmd-which-bin-用法" class="headerlink" title="cmd.which 和 cmd.which_bin 用法"></a>cmd.which 和 cmd.which_bin 用法</h5><blockquote><p>就是查找执行文件所在的位置，<code>which</code> 命令嘛都不陌生<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看节点所有 ifconfig 命令的位置，在写脚本或者定时任务的时候很有用</span></span><br><span class="line">salt <span class="string">'*'</span> cmd.which ifconfig</span><br><span class="line"><span class="meta"># 因为系统不同执行文件的绝对路径也不同 和 salt <span class="string">'*'</span> cmd.run  <span class="string">"which ifconfig"</span> 一个效果</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 这是定义了一个列表，返回在命令列表中找到的第一个命令</span></span><br><span class="line">salt <span class="string">'*'</span> cmd.which_bin <span class="string">'[cat, ifconfig, touch]'</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 存在就返回第一个命令的路径</span></span><br><span class="line">[root<span class="symbol">@master</span> ~]<span class="meta"># salt <span class="string">'*'</span> cmd.which_bin <span class="string">'[cat, ifconfig, touch]'</span></span></span><br><span class="line">agent1.salt:</span><br><span class="line">    /bin/cat</span><br><span class="line">zwidc_kvm_192<span class="number">.168</span><span class="number">.1</span><span class="number">.104</span>:</span><br><span class="line">    /usr/bin/cat</span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果第一个命令不存在就往后寻找</span></span><br><span class="line">[root<span class="symbol">@master</span> ~]<span class="meta"># salt <span class="string">'*'</span> cmd.which_bin <span class="string">'[cat, ifconfig, touch]'</span></span></span><br><span class="line">zwidc_kvm_192<span class="number">.168</span><span class="number">.1</span><span class="number">.104</span>:</span><br><span class="line">    /usr/bin/ifconfig</span><br><span class="line">agent1.salt:</span><br><span class="line">    /bin/ifconfig</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="cp模块常用方法"><a href="#cp模块常用方法" class="headerlink" title="cp模块常用方法"></a>cp模块常用方法</h4><blockquote><p>只列举一些常用的，详细的可以自行执行此命令查看</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'agent1.salt'</span> sys<span class="selector-class">.doc</span> cp</span><br></pre></td></tr></table></figure><h5 id="cp-get-dir-和-cp-get-file-用法"><a href="#cp-get-dir-和-cp-get-file-用法" class="headerlink" title="cp.get_dir 和 cp.get_file 用法"></a>cp.get_dir 和 cp.get_file 用法</h5><blockquote><p>就是从 master 端 cp 目录 或 文件 到 minion 端的目录，get_dir 支持与 get_file 相同的模板和 gzip 参数。<br>对应的是 cp.push，cp.push_dir，就是把客户端的文件 或 目录推送到 master 端的 cachedir，默认为 /var/cache/salt/master/minions/minion-id/files，但是这种用法是禁用状态，一般不让 minion 端的文件或目录发送到 master 端，这里只是记录一下有这种用法。</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 从 salt master 递归复制目录到 minion 客户端的 /minion/dest 目录下面</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">cp</span>.get_dir <span class="keyword">sal</span><span class="variable">t:</span>//path/<span class="keyword">to</span>/dir/ /minion/dest</span><br><span class="line"></span><br><span class="line"># 从服务端拷贝单个文件到 minion 端的 /minion/dest 目录下面</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">cp</span>.get_file <span class="keyword">sal</span><span class="variable">t:</span>//path/<span class="keyword">to</span>/<span class="keyword">file</span> /minion/dest</span><br><span class="line"></span><br><span class="line"># 所有 Salt minions 从与其 os 粒度相同名称的目录下载 vimrc，并将其复制到 /etc/vimrc</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">cp</span>.get_file <span class="string">"salt://&#123;&#123;grains.os&#125;&#125;/vimrc"</span> /etc/vimrc template=jinja</span><br></pre></td></tr></table></figure><h5 id="cp-get-url-用法"><a href="#cp-get-url-用法" class="headerlink" title="cp.get_url 用法"></a>cp.get_url 用法</h5><blockquote><p>用于从 URL 获取单个文件</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 将 salt:<span class="comment">//cptest1/cptest1file 文件里面的内容写入到 /tmp/test 文件里面，每次都会覆盖里面的内容</span></span><br><span class="line"># 这种就跟 cp.get_file 一样</span><br><span class="line">salt <span class="string">'*'</span> cp.get_url salt:<span class="comment">//cptest1/cptest1file /tmp/test</span></span><br><span class="line"></span><br><span class="line"># 如这种就把一个页面的 html 信息写入到了客户端的 /tmp/test 文件，切记只能是这种文本形式的文件，不要是压缩包啥的</span><br><span class="line">salt <span class="string">'*'</span> cp.get_url http:<span class="comment">//blog.51niux.com/?id=116 /tmp/test</span></span><br><span class="line"></span><br><span class="line"># 最主要的用法还是这种，我们可以以 httpd 的形式去下载一个 sh 脚本，config 文件等</span><br><span class="line">salt <span class="string">'*'</span> cp.get_url http:<span class="comment">//blog.51niux.com/zb_users/upload/2017/03/201703091489030442220789.txt  /tmp/load_one_check.sh</span></span><br><span class="line"></span><br><span class="line">salt <span class="string">'*'</span> cmd.run <span class="string">" cat /tmp/load_one_check.sh"</span></span><br><span class="line"># 下面是部分内容，这样我们很多文本类的文件就不用从 salt 服务端发布了，直接做个 ftp 服务 或 http 服务来发布文本类的东西什么的就可以了。当然 cmd.run 命令也可以了...</span><br><span class="line">agent1.salt:</span><br><span class="line">    #!/bin/bash</span><br><span class="line">    # ========================================================================================</span><br><span class="line">    # System loadavg  plugin for Nagios</span><br><span class="line">    #</span><br><span class="line">    # Written by    : chaishao</span><br><span class="line">    # From          : <span class="number">51</span>niux.com</span><br><span class="line">    # Release       : <span class="number">1.1</span><span class="number">.0</span></span><br><span class="line">    # Creation date : <span class="number">2017</span><span class="number">-03</span><span class="number">-08</span></span><br><span class="line">    # Revision date : <span class="number">2017</span><span class="number">-03</span><span class="number">-08</span></span><br><span class="line">    # Description   : Nagios plugin (script) to check <span class="keyword">system</span> load_one .</span><br><span class="line">    #               This script has been designed and written on Linux System.</span><br><span class="line">    #</span><br><span class="line">    # USAGE         : ./$PROGNAME [-w -c]</span><br><span class="line">    #</span><br><span class="line">    # Exemple:      : ./$PROGNAME -w n1 -c n2</span><br><span class="line">    # ========================================================================================</span><br></pre></td></tr></table></figure><h5 id="cp-list-master-和-cp-list-master-dirs-用法"><a href="#cp-list-master-和-cp-list-master-dirs-用法" class="headerlink" title="cp.list_master 和 cp.list_master_dirs 用法"></a>cp.list_master 和 cp.list_master_dirs 用法</h5><blockquote><p>这个就是查看 salt master 本地的 file 服务器又哪些文件 或 目录</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 这种就不要指定所有机器了，匹配一台机器就可以了，列出存储在主机上的所有文件</span></span><br><span class="line">salt <span class="string">'agent1.salt'</span> cp.list_master</span><br><span class="line"></span><br><span class="line"><span class="meta"># 列出存储在 master 主机上面的所有目录</span></span><br><span class="line">salt <span class="string">'agent1.salt'</span> cp.list_master_dirs</span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看目录下的文件</span></span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">cptest2</span>]<span class="comment"># salt 'agent1.salt' cp.list_master</span></span><br><span class="line">agent1.salt:</span><br><span class="line">    - cptest1/cptest1file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只会将目录列出来以及子目录</span></span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">cptest2</span>]<span class="comment"># salt 'agent1.salt' cp.list_master_dirs</span></span><br><span class="line">agent1.salt:</span><br><span class="line">    - .</span><br><span class="line">    - cptest1</span><br><span class="line">    - cptest2</span><br><span class="line">    - cptest2/cptest2dir</span><br></pre></td></tr></table></figure><h4 id="file-模块常用方法"><a href="#file-模块常用方法" class="headerlink" title="file 模块常用方法"></a>file 模块常用方法</h4><h5 id="file-access-用法"><a href="#file-access-用法" class="headerlink" title="file.access 用法"></a>file.access 用法</h5><blockquote><p>f 代表存在<br>rwx 分别代表读、写、执行权限<br>file.file_exists、file.get_mode 和 file.stats 的用法<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看 /opt/check.sh 文件是否存在，这个挺有用的</span></span><br><span class="line">salt <span class="string">'*'</span> file.access /opt/check.sh f</span><br><span class="line"><span class="meta"># 我们查看某个脚本或者某个文件是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 上面的例子也可以写成这种</span></span><br><span class="line">salt <span class="string">'*'</span> file.file_exists /opt/check.sh</span><br><span class="line"><span class="meta"># 文件存在就返回True，否则返回False</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果有此脚本之后，我们还可以查看此脚本是否具有执行权限</span></span><br><span class="line">salt <span class="string">'*'</span> file.access /opt/check.sh x</span><br><span class="line"><span class="meta"># f、r、w、x 只能写一种，真就返回true，否则false</span></span><br><span class="line"></span><br><span class="line">salt <span class="string">'*'</span> file.get_mode /etc/passwd</span><br><span class="line"><span class="meta"># file.get_mode 后面指定目录或者文件，可以查看其授权情况，如文件一般是0644，如果文件或目录不存在无信息</span></span><br><span class="line"><span class="meta"># 还有</span></span><br><span class="line"><span class="meta"># file.is_blkdev 检查文件是否存在并且是块设备</span></span><br><span class="line"><span class="meta"># file.is_chrdev 检查文件是否存在并且是字符设备</span></span><br><span class="line"><span class="meta"># file.is_fifo 检查文件是否存在并且是FIFO</span></span><br><span class="line"><span class="meta"># file.is_link 检查路径是否是符号链接）</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># file.stats 返回一个文件 或 目录的统计信息</span></span><br><span class="line">salt <span class="string">'*'</span> file.stats /etc/passwd</span><br><span class="line"><span class="meta"># 这里是返回 /etc/passwd 文件的统计信息（类型，时间，属组，权限等）</span></span><br></pre></td></tr></table></figure></p></blockquote><h5 id="file-append-和-file-write-用法"><a href="#file-append-和-file-write-用法" class="headerlink" title="file.append 和 file.write 用法"></a>file.append 和 file.write 用法</h5><blockquote><p>前者将内容追加到文件的末尾，后者是直接覆盖类似于 echo &gt;，但是格式跟前者一样</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 第一组：单引号 和 双引号 的区别，还有 ! 需要注意的地方</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> <span class="regexp">/tmp/</span><span class="number">1</span> <span class="string">"`hostname` This is a good day\!"</span></span><br><span class="line"># 用双引号，就是里面可以接变量，但是这个 ! 需要注意，不用 \ 转义的话会报错</span><br><span class="line"></span><br><span class="line"># salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> <span class="regexp">/tmp/</span><span class="number">1</span> <span class="string">'`hostname` This is a good day!'</span></span><br><span class="line"># 所以如果出现 ! 最好放到单引号里面来引用，因为上面就算转义了也显示的不对</span><br><span class="line"></span><br><span class="line"># 第二组：换行符的使用</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> <span class="regexp">/tmp/</span><span class="number">1</span> <span class="string">"Two"</span><span class="string">"Two Two"</span></span><br><span class="line"># 这表示两组字符串在一行，中间默认加个空格隔开</span><br><span class="line"></span><br><span class="line"># 这表示两组字符串是换行的</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> <span class="regexp">/tmp/</span><span class="number">1</span> <span class="string">"Two"</span> <span class="string">"Two Two"</span></span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@activemq ~]<span class="comment"># cat /tmp/1</span></span><br><span class="line">master.hadoop This <span class="keyword">is</span> a good day<span class="string">\!</span></span><br><span class="line"><span class="string">'hostname'</span> This <span class="keyword">is</span> a good day!</span><br><span class="line">TwoTwo Two</span><br><span class="line">Two</span><br><span class="line">Two Two</span><br><span class="line">[root@activemq ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><blockquote><p>上面两组测试结果，可以明显的比较出差别</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 第三组：! 是不知道怎么解决了，要么就放单引号</span><br><span class="line"># 还有个 = 是需要注意的，有个 <span class="keyword">args</span> 用法，以及 [] 外面加不加双引号的区别</span><br><span class="line"></span><br><span class="line"># 如果字符串里面有等号要用这种 <span class="keyword">args</span> 的用法</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> /tmp/<span class="number">1</span> <span class="keyword">args</span>=<span class="string">'Hostname=`hostname`'</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">args</span> 用 单引号 和 双引号 的区别就在于里面的变量是否解析为变量的值还是字符串</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> /tmp/<span class="number">1</span> <span class="keyword">args</span>=<span class="string">"Hostname=`hostname`"</span></span><br><span class="line"></span><br><span class="line"># 这里就是定义一个并排的两个字符串</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> /tmp/<span class="number">1</span> <span class="keyword">args</span>=[<span class="string">'Hostname=`hostname`'</span><span class="string">'rel=`cat /etc/redhat-release`'</span>]</span><br><span class="line"></span><br><span class="line"># 可见 <span class="keyword">args</span> 默认是单引号的形式，两组字符串中间加逗号</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> /tmp/<span class="number">1</span> <span class="keyword">args</span>=[<span class="string">'Hostname=`hostname`'</span>,<span class="string">'rel=`cat /etc/redhat-release`'</span>]</span><br><span class="line"></span><br><span class="line"># 双引号 不是默认的，所以要单独的加上</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> /tmp/<span class="number">1</span> <span class="keyword">args</span>=<span class="string">"['Hostname=`hostname`','rel=`cat /etc/redhat-release`']"</span></span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[root@activemq !]</span><span class="comment"># cat /tmp/1</span></span><br><span class="line"><span class="attr">Hostname</span>= hostname</span><br><span class="line"><span class="attr">Hostname</span>=master.hadoop</span><br><span class="line"><span class="attr">Hostname</span>=<span class="string">'hostname'</span>rel=<span class="string">'cat /etc/redhat-release'</span></span><br><span class="line"><span class="attr">Hostname</span>=<span class="string">'hostname'</span></span><br><span class="line"><span class="attr">rel</span>=<span class="string">'cat /etc/redhat-release'</span></span><br><span class="line"><span class="attr">Hostname</span>=master.hadoop</span><br><span class="line"><span class="attr">rel</span>=CentOS release <span class="number">6.4</span> (Final)</span><br></pre></td></tr></table></figure><blockquote><p>从结果我们可以看出，两个字符串之间如果没有逗号的话，不换行，但是中间也没有分隔，可以学习 awk，在两个字符串中间加 “ “ 来进行添加空格的操作。<br>其实主要还是字符串里面有=就用 args 的形式，如果是多组字符串可以用[]的形式，如果要是用变量就用双引号的形式，默认是单引号的形式。</p></blockquote><h5 id="file-chgrp、file-chown-和-file-set-mode-用法"><a href="#file-chgrp、file-chown-和-file-set-mode-用法" class="headerlink" title="file.chgrp、file.chown 和 file.set_mode 用法"></a>file.chgrp、file.chown 和 file.set_mode 用法</h5><blockquote><blockquote><p>前者是更改文件的属组，中者是更改文件数的属主属组，后者是更改文件或目录的权限</p></blockquote></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 将 minion 端的 /tmp/1 文件更改用户组为 test9</span></span><br><span class="line">salt <span class="string">'*'</span> file.chgrp /tmp/<span class="number">1</span> test9</span><br><span class="line"><span class="meta"># 如果客户端有此用户组则返回 None，没有此用户组则返回用户组不存在</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 第一个是用户，第二个是用户组，固定格式必须存在</span></span><br><span class="line">salt <span class="string">'*'</span> file.chown /tmp/<span class="number">1</span> test7 test9</span><br><span class="line"><span class="meta"># 将 /tmp/1 的用户组设置为 test7，用户组设置为 test9</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置 /opt/cs 目录权限为 0550</span></span><br><span class="line">salt <span class="string">'*'</span> file.set_mode /opt/cs <span class="number">0550</span></span><br><span class="line"><span class="meta"># 如果授权成功会显示授权后的权限，如果没有此文件或目录会提示</span></span><br></pre></td></tr></table></figure><h5 id="file-comment-和-file-comment-line-用法"><a href="#file-comment-和-file-comment-line-用法" class="headerlink" title="file.comment 和 file.comment_line 用法"></a>file.comment 和 file.comment_line 用法</h5><blockquote><p>注释指定内容的行，每次操作前都会更新文件名命令的 .bak 备份文件<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这就是将以 /tmp/passwd 文件以 ftp 开头的行注释掉</span></span><br><span class="line">salt <span class="string">'*'</span> <span class="built_in">file</span>.comment /tmp/passwd <span class="keyword">ftp</span></span><br><span class="line"><span class="comment"># 如果注释会显示注释行的信息，如果没注释则返回False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外还支持正则表达式，这里就表示以 ftp 开头以 nologin 结尾的行，多行注释</span></span><br><span class="line">salt <span class="string">'*'</span> <span class="built_in">file</span>.comment /tmp/passwd <span class="keyword">ftp</span>.*nologin$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后面可以指定在行开头加什么字符，当然默认是 #</span></span><br><span class="line">salt <span class="string">'*'</span> <span class="built_in">file</span>.comment /tmp/passwd <span class="keyword">ftp</span>.*nologin$ <span class="string">'-'</span></span><br><span class="line"><span class="comment"># 前面也可以这样后面指定要行头添加的字符</span></span><br></pre></td></tr></table></figure></p></blockquote><h5 id="file-copy-用法"><a href="#file-copy-用法" class="headerlink" title="file.copy 用法"></a>file.copy 用法</h5><blockquote><p>复制文件 或 目录到指定的目录下面，成功返回True，失败会有提示的<br>另外还有 file.move，移动文件的用法</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 这里是文件拷贝，将文件 /path/<span class="keyword">to</span>/src 拷贝到 /path/<span class="keyword">to</span>/ 目录下面，其名称为 dst</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">copy</span> /path/<span class="keyword">to</span>/src /path/<span class="keyword">to</span>/dst</span><br><span class="line"># 切记这里一定要是文件名</span><br><span class="line"></span><br><span class="line"># 目录复制的区别看下面的例子</span><br><span class="line"># 复制目录的话，要加 recurse=True 递归标记</span><br><span class="line"></span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">copy</span> /<span class="keyword">opt</span>/file2 /tmp/haha/ recurse=True</span><br><span class="line"># 这种不管是 /tmp/haha/ 还是 /tmp/haha，如果这个 haha 存在的话，就是将 /<span class="keyword">opt</span>/file2 下面的内容 <span class="keyword">cp</span> -r 拷贝到 /tmp/haha 目录下面，如果 haha 目录不存在的话，就是将 /<span class="keyword">opt</span>/file2 目录变为 /tmp/haha 目录</span><br><span class="line"></span><br><span class="line"># 这种才是正确的将 /<span class="keyword">opt</span>/file2 目录复制到 /tmp/haha/ 目录下方</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">copy</span> /<span class="keyword">opt</span>/file2 /tmp/haha/file2 recurse=True</span><br><span class="line"># 如 haha 目录不存在会创建</span><br><span class="line"></span><br><span class="line"># remove_existing=True 这种就是完全覆盖的形式</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">copy</span> /path/<span class="keyword">to</span>/src_dir /path/<span class="keyword">to</span>/dst_dir recurse=True remove_existing=True</span><br></pre></td></tr></table></figure><h5 id="file-directory-exists-和-file-dirname-用法"><a href="#file-directory-exists-和-file-dirname-用法" class="headerlink" title="file.directory_exists 和 file.dirname 用法"></a>file.directory_exists 和 file.dirname 用法</h5><blockquote><p>前者检查一个目录是否存在，后者取文件的路径</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /tmp/haha/file 目录存在就会返回True，不存在就会返回False</span></span><br><span class="line">salt <span class="string">'*'</span> <span class="built_in">file</span>.directory_exists /tmp/haha/file2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出来的结果是 /opt/file2，这就是末尾加 /，认为这两个都是目录，当然不管是否有这个目录</span></span><br><span class="line">salt <span class="string">'*'</span> <span class="built_in">file</span>.dirname <span class="string">'/opt/file2/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出来的结果是 /opt/file2</span></span><br><span class="line">salt <span class="string">'*'</span> <span class="built_in">file</span>.dirname <span class="string">'/opt/file2/test1'</span></span><br></pre></td></tr></table></figure><h5 id="file-find-用法"><a href="#file-find-用法" class="headerlink" title="file.find 用法"></a>file.find 用法</h5><blockquote><p>类似于 Linux下面的 find 命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">salt '*' file.find / type=f name=\*.bak size=+10m</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找/目录下，文件类型为文件的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a：所有文件类型</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> b：块设备</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> c：字符设备</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> d：目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> p：FIFO（命名管道）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> f：普通文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> l：符号链接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> s：套接字，名称为 .bak 结尾的（这里支持正则表达式），大小大于 10MB 的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> b：字节</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> k：千字节</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> m：兆字节</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> g：GB</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> t：太字节也是TB</span></span><br><span class="line"></span><br><span class="line">salt '*' file.find /var mtime=+30d size=+10m print=path,size,mtime</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里是查找 /var 目录下，最后一次更改时间是 30 天以前</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> w：周</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> d：天</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> h：小时</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> m：分钟</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> s：秒，大小大于 10MB 的文件，并打印文件的路径，大小，更改时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可打印的内容有</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> group：组名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> md5：文件内容的 MD5 摘要</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mode：文件权限（以整数形式）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mtime：最后修改时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> name：文件基础名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> path：文件绝对路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> size：文件大小（以字节为单位）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">type</span>：文件类型</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> user：用户名</span></span><br><span class="line"></span><br><span class="line">salt '*' file.find /var/log name=\*.[0-9] mtime=+30d size=+10m delete</span><br><span class="line"><span class="meta">#</span><span class="bash"> find 的匹配条件有（name区分大小写，iname不区分大小写，<span class="built_in">type</span>类型，user用户，group用户组，size[+-]大小，mtime修改时间，grep搜索文件内容），最后执行的动作除了 delete 和 <span class="built_in">print</span>，还有 <span class="built_in">exec</span> <span class="built_in">command</span></span></span><br></pre></td></tr></table></figure><h5 id="file-get-gid、file-get-uid-和-file-get-group、file-get-user-用法"><a href="#file-get-gid、file-get-uid-和-file-get-group、file-get-user-用法" class="headerlink" title="file.get_gid、file.get_uid 和 file.get_group、file.get_user 用法"></a>file.get_gid、file.get_uid 和 file.get_group、file.get_user 用法</h5><blockquote><p>前一组返回文件或目录的 gid号 和 uid号，后一组返回文件或目录 group 和 user</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看 /etc 目录的属组</span></span><br><span class="line">salt <span class="string">'*'</span> file.get_user /etc</span><br><span class="line"><span class="meta"># 如果文件或目录不存在返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看 /etc 目录的属组的 uid 号</span></span><br><span class="line">salt <span class="string">'*'</span> file.get_uid /etc</span><br><span class="line"><span class="meta"># 如果目录或者文件不存在返回 -1</span></span><br></pre></td></tr></table></figure><h5 id="file-grep-用法"><a href="#file-grep-用法" class="headerlink" title="file.grep 用法"></a>file.grep 用法</h5><blockquote><p>类似于 Linux上面的 grep 命令</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> file.grep /etc/passwd nobody</span><br><span class="line"><span class="meta"># 过滤 /ect/passwd 文件中包含 nobody 的行</span></span><br><span class="line"><span class="meta"># 输出：pid: 是 grep 运行的 pid 号</span></span><br><span class="line"><span class="meta"># retcode: 为状态码</span></span><br><span class="line"><span class="meta"># 0 是成功过滤 1 为非成功过滤</span></span><br><span class="line"><span class="meta"># stderr: 错误输出</span></span><br><span class="line"><span class="meta"># stdout: 正常输出也就是我们要过滤的内容</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># "-i" 的目的是不区分大小写，注意 -i 前面有空格，额外的参数之间都有空格</span></span><br><span class="line">salt <span class="string">'*'</span> file.grep /etc/sysconfig/network-scripts/ifcfg-eth0 ipaddr <span class="string">" -i"</span> </span><br><span class="line"></span><br><span class="line"><span class="meta"># -B2 就是连上面两行也过滤出来，-A2 就是连下两行也过滤出来</span></span><br><span class="line">salt <span class="string">'*'</span> file.grep /etc/sysconfig/network-scripts/ifcfg-eth0 ipaddr <span class="string">" -i -B2 -A2"</span></span><br></pre></td></tr></table></figure><h5 id="file-link-和-file-symlink-用法"><a href="#file-link-和-file-symlink-用法" class="headerlink" title="file.link 和 file.symlink 用法"></a>file.link 和 file.symlink 用法</h5><blockquote><p>前者是创建文件的硬链接，后者是创建符号链接也就是软链接</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 为 <span class="regexp">/tmp/</span><span class="number">1</span> 创建一个硬链接是 <span class="regexp">/tmp/</span><span class="number">2</span>，只能是文件</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.link <span class="regexp">/tmp/</span><span class="number">1</span> <span class="regexp">/tmp/</span><span class="number">2</span></span><br><span class="line"></span><br><span class="line"># 为 <span class="regexp">/tmp/</span>haha 目录创建一个软链接 <span class="regexp">/tmp/</span>buhaha，成功返回 Ture，失败有提示信息</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.symlink <span class="regexp">/tmp/</span>haha <span class="regexp">/tmp/</span>buhaha</span><br></pre></td></tr></table></figure><h5 id="file-mkdir-和-file-makedirs-用法"><a href="#file-mkdir-和-file-makedirs-用法" class="headerlink" title="file.mkdir 和 file.makedirs 用法"></a>file.mkdir 和 file.makedirs 用法</h5><blockquote><p>两种都是创建目录，前者对结尾的/不敏感，后者对/敏感</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 这就是在 /<span class="keyword">opt</span>/ 目录下面创建 <span class="keyword">cs</span> 目录，并在 <span class="keyword">cs</span> 目录下面创建 <span class="keyword">ds</span> 目录</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="built_in">mkdir</span> /<span class="keyword">opt</span>/<span class="keyword">cs</span>/<span class="keyword">ds</span></span><br><span class="line"># 如果 <span class="keyword">cs</span> 目录不存在就创建。目录存不存在也不会有提示</span><br><span class="line"></span><br><span class="line"># 这里只会创建 /<span class="keyword">opt</span>/<span class="keyword">cs</span> 目录，首先如果 /<span class="keyword">opt</span> 要创建的目录是存在的会有提示</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.makedirs /<span class="keyword">opt</span>/<span class="keyword">cs</span>/<span class="keyword">ds</span></span><br><span class="line"># /<span class="keyword">opt</span>/<span class="keyword">cs</span>/<span class="keyword">ds</span>/ 才会在 <span class="keyword">cs</span> 目录下面创建 <span class="keyword">ds</span> 目录</span><br></pre></td></tr></table></figure><h5 id="file-remove、file-rmdir-和-file-rename-用法"><a href="#file-remove、file-rmdir-和-file-rename-用法" class="headerlink" title="file.remove、file.rmdir 和 file.rename 用法"></a>file.remove、file.rmdir 和 file.rename 用法</h5><blockquote><p>前者是删除文件或者目录，中间是删除目录但是目录一定要为空、后者是重命名文件或目录</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 删除 /<span class="keyword">opt</span> 目录下面的 <span class="keyword">cs</span> 目录</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="built_in">remove</span> /<span class="keyword">opt</span>/<span class="keyword">cs</span>/</span><br><span class="line"></span><br><span class="line"># 删除 /<span class="keyword">opt</span>/<span class="keyword">cs</span> 目录</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.rmdir /<span class="keyword">opt</span>/<span class="keyword">cs</span></span><br><span class="line"># 如果 <span class="keyword">cs</span> 目录下面有内容会提示目录不会空删除失败，如果为空则会执行并返回 True</span><br><span class="line"></span><br><span class="line"># 更改 /<span class="keyword">opt</span>/<span class="keyword">cs</span> 目录下的 <span class="keyword">ds</span> 目录为 dss 目录</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="built_in">rename</span> /<span class="keyword">opt</span>/<span class="keyword">cs</span>/<span class="keyword">ds</span> /<span class="keyword">opt</span>/<span class="keyword">cs</span>/dss</span><br></pre></td></tr></table></figure><h5 id="file-touch-和-file-truncate-的用法"><a href="#file-touch-和-file-truncate-的用法" class="headerlink" title="file.touch 和 file.truncate 的用法"></a>file.touch 和 file.truncate 的用法</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 文件不存在则创建此文件，如果文件存在里面的内容不会发生变化，但是它的 time 信息会更新，上级目录必须存在</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.touch <span class="regexp">/tmp/</span>test1</span><br><span class="line"></span><br><span class="line"># 将 <span class="regexp">/tmp/</span>passwd 第三个字段以后的内容全删除掉了，就剩下了 roo 三个字段</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.truncate <span class="regexp">/tmp/</span>passwd <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="hosts模块常用方法"><a href="#hosts模块常用方法" class="headerlink" title="hosts模块常用方法"></a>hosts模块常用方法</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过这个命令可以查看详细用法，如果没有用 内建DNS服务，使用 hosts 模块修改 /etc/hosts 还是经常会用到的</span></span><br><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> sys.doc hosts</span><br></pre></td></tr></table></figure><h5 id="hosts-add-host、hosts-rm-host-和-hosts-set-host-用法"><a href="#hosts-add-host、hosts-rm-host-和-hosts-set-host-用法" class="headerlink" title="hosts.add_host、hosts.rm_host 和 hosts.set_host 用法"></a>hosts.add_host、hosts.rm_host 和 hosts.set_host 用法</h5><blockquote><p>前者是追加，中着是删除、后者是覆盖</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># hosts.add 会先判断 /etc/hosts 里面有没有这个 <span class="built_in">IP</span> <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.113</span>，如果有 foreman.puppet 会将 alias 名追加到这个 <span class="built_in">IP</span> 后面，跟之前的解析别名一起使用这个 <span class="built_in">IP</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.add_host <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.113</span> foreman.puppet</span><br><span class="line"></span><br><span class="line"># 如果没有这个<span class="built_in">IP</span>，则会新创建一行 hosts 记录，但是 <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.113</span> 那条还是存在的，两条记录</span><br><span class="line">salt <span class="string">'*'</span> hosts.add_host <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.114</span> foreman.puppet</span><br><span class="line"></span><br><span class="line"># hosts.set_host 这个的不同之处就是</span><br><span class="line"># 如果这个 <span class="built_in">IP</span> 不存在则创建新的一条 hosts 记录</span><br><span class="line"># 如果 hosts 存在这个 <span class="built_in">IP</span> 的解析记录，会完全覆盖掉，也就是旧的 <span class="built_in">IP</span> 解析记录完全变成现在的结果</span><br><span class="line">salt <span class="string">'*'</span> hosts.set_host <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.114</span> <span class="keyword">test</span>.hahahah</span><br><span class="line"></span><br><span class="line"># 删除 <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.114</span> <span class="keyword">test</span>.haha 这条解析记录</span><br><span class="line">salt <span class="string">'*'</span> hosts.rm_host <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.114</span> <span class="keyword">test</span>.haha</span><br><span class="line"># 如果 <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.114</span> 这行有多条解析记录，而只会删除 <span class="keyword">test</span>.haha 这条记录</span><br><span class="line"># 其他的 <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.114</span> xxx.xxx，还会存在不会删除，可以说是有选择性的删除</span><br></pre></td></tr></table></figure><h5 id="其他查看-hosts-解析的用法"><a href="#其他查看-hosts-解析的用法" class="headerlink" title="其他查看 hosts 解析的用法"></a>其他查看 hosts 解析的用法</h5><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 192.168.1.114 这个 IP 对应的别名解析，如果有则返回对应的 hosts 别名解析记录，没有则什么都不返回</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.get_alias <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 这个就是返回 wo.haha 在 /etc/hosts 里面对应的IP</span></span><br><span class="line"><span class="meta"># 但是有个问题，如果有多条只会返回文件最上方的那一条对应的 IP 地址</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.get_ip wo.haha</span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果有这条别名解析记录，则返回True，如果没有则返回False</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.has_pair <span class="number">192.168</span><span class="number">.1</span><span class="number">.113</span> foreman.puppet</span><br><span class="line"></span><br><span class="line"><span class="meta"># 类似于 cat /etc/hosts 的操作</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.list_hosts</span><br><span class="line"><span class="meta"># 但是不同的是，这相当于一个汇总，会以第一行是IP：下一行是其对应的别名解析的方式来呈现，比如一个 IP 有好几行的解析，这所有的解析记录都会汇总到这个 IP 下面，注释过的别名解析的行不会出现在这个汇总信息里面</span></span><br></pre></td></tr></table></figure><h4 id="cron模块常用方法"><a href="#cron模块常用方法" class="headerlink" title="cron模块常用方法"></a>cron模块常用方法</h4><h5 id="cron-raw-cron-用法"><a href="#cron-raw-cron-用法" class="headerlink" title="cron.raw_cron 用法"></a>cron.raw_cron 用法</h5><blockquote><p>cron.list_tab 和 cron.ls 和跟其效果一样，格式也一样必须要指定某一个用户，都是显示指定用户 crontab 文件里面的定时任务</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> cron.raw_cron root  <span class="comment">#必须指定用户，这里是显示root的crontab文件里面的内容，注释的行也会显示</span></span><br></pre></td></tr></table></figure><h5 id="cron-set-job-用法"><a href="#cron-set-job-用法" class="headerlink" title="cron.set_job 用法"></a>cron.set_job 用法</h5><blockquote><p> 为指定用户设置一个定时任务</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> cron.set_job root <span class="string">'0'</span> <span class="string">'0'</span> <span class="string">'*'</span> <span class="string">'*'</span> <span class="string">'*'</span> <span class="string">'/bin/bash /opt/scripts/scp.sh &gt; /dev/null 2&gt;&amp;1'</span></span><br><span class="line"><span class="meta"># 如果 '/bin/bash /opt/scripts/scp.sh &gt; /dev/null 2&gt;&amp;1'</span></span><br><span class="line"><span class="meta"># 这一部分存在了，那么这一步操作就是 update，也就是更新前面执行 crontab 的时间，如果不存在，这就相当于一条添加定时任务的操作返回内容为 new</span></span><br></pre></td></tr></table></figure><h5 id="cron-rm-job-用法"><a href="#cron-rm-job-用法" class="headerlink" title="cron.rm_job 用法"></a>cron.rm_job 用法</h5><blockquote><p>删除指定用户指定的的定时任务</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意格式是用户 后面跟要删除的任务，不要加前面的时间，成功会返回 removed，如果没有这条记录会返回 absent</span></span><br><span class="line">salt '*' cron.rm_job root '<span class="string">/bin/bash</span> <span class="string">/opt/scripts/scp.sh</span> &gt; <span class="string">/dev/null</span> 2&gt;&amp;1'</span><br></pre></td></tr></table></figure><h5 id="network-模块常用方法"><a href="#network-模块常用方法" class="headerlink" title="network 模块常用方法"></a>network 模块常用方法</h5><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 返回minion的主机名</span></span><br><span class="line">salt <span class="string">'*'</span> network.get_hostname</span><br><span class="line"></span><br><span class="line"><span class="meta"># 返回指定网络接口的mac地址</span></span><br><span class="line">salt <span class="string">'*'</span> network.hw_addr eth0</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看主机在某个子网内就返回True，如果不在的话就返回False，多子网用空格隔开</span></span><br><span class="line">salt <span class="string">'*'</span> network.in_subnet <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看 minion 端绑定的 IP 地址，多 IP 也会显示出来，127.0.0.1除外</span></span><br><span class="line">salt <span class="string">'*'</span> network.ip_addrs</span><br><span class="line"></span><br><span class="line"><span class="meta"># 会显示所有接口的详细信息，但是别名的网卡类似于 eth0:1 这种不会显示</span></span><br><span class="line">salt <span class="string">'*'</span> network.interfaces</span><br><span class="line"></span><br><span class="line"><span class="meta"># 显示指定网卡接口上面的 IP，只会显示 IP 不会显示其他内容</span></span><br><span class="line"><span class="meta"># network.interface 会连网关子网掩码也显示</span></span><br><span class="line">salt <span class="string">'*'</span> network.interface_ip eth0</span><br><span class="line"></span><br><span class="line"><span class="meta"># 修改某一个minion的主机名，显然这一步操作只适合在初始化的时候而且不适合执行所有主机</span></span><br><span class="line">salt <span class="string">'agent1.salt'</span> network.mod_hostname test1.salt</span><br><span class="line"></span><br><span class="line">salt <span class="string">'*'</span> network.ping www.baidu.com return_boolean=True timeout=<span class="number">3</span></span><br><span class="line"><span class="meta"># 如果不加 return_boolean=True 显示的是 ping 的结果信息，加了就是如果 ping 通了就返回True，ping 不通就返回 False</span></span><br><span class="line"><span class="meta"># timeout=3 就是 ping 的时间，3秒超时这样能快速返回结果</span></span><br><span class="line"><span class="meta"># 这个其实挺好用的，比如我们可以测试哪些主机的 DNS 设置有问题不能正常解析啊，或是我们内网 DNS 指向了一个非公网的域名解析，可以通过这个看哪些主机设置了内网 DNS 而哪些没设置内网 DNS</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 返回主机所属的子网</span></span><br><span class="line">salt <span class="string">'*'</span> network.subnets</span><br></pre></td></tr></table></figure><h4 id="sys模块常用方法"><a href="#sys模块常用方法" class="headerlink" title="sys模块常用方法"></a>sys模块常用方法</h4><h5 id="sys-argspec-用法"><a href="#sys-argspec-用法" class="headerlink" title="sys.argspec 用法"></a>sys.argspec 用法</h5><blockquote><p>返回 Salt 执行模块中函数的参数说明。对于我们后期写 .sls文件 很有帮助</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看 pkg.install 函数的参数说明</span><br><span class="line">salt <span class="string">'*'</span> sys.argspec pkg.install</span><br><span class="line"></span><br><span class="line"># 查看sys模块里面所有函数的规则说明，或者#salt <span class="string">'*'</span> sys.argspec <span class="string">'sys.*'</span></span><br><span class="line">salt <span class="string">'*'</span> sys.argspec sys</span><br></pre></td></tr></table></figure><h5 id="sys-doc-用法"><a href="#sys-doc-用法" class="headerlink" title="sys.doc 用法"></a>sys.doc 用法</h5><blockquote><p>显示模块下函数的使用文档信息类似于man帮助，前面已介绍过，多模块或者多函数之间用空格隔开</p></blockquote><h5 id="sys-list-functions-和-sys-list-modules-用法"><a href="#sys-list-functions-和-sys-list-modules-用法" class="headerlink" title="sys.list_functions 和 sys.list_modules 用法"></a>sys.list_functions 和 sys.list_modules 用法</h5><blockquote><p>前者就是列出所有模块下面的函数，多模块也是用空格隔开。后者是将所有模块列出来</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 可以用这种方法将所有 sys.list 开头的函数列出来</span></span><br><span class="line">salt <span class="string">'*'</span> sys.list_functions <span class="string">'sys.list_*'</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 列出所有的模块</span></span><br><span class="line">salt <span class="string">'*'</span> sys.list_modules</span><br><span class="line"></span><br><span class="line"><span class="meta"># 列出所有以 s 开头的模块</span></span><br><span class="line">salt <span class="string">'*'</span> sys.list_modules <span class="string">'s*'</span></span><br></pre></td></tr></table></figure><h4 id="service-模块常用方法"><a href="#service-模块常用方法" class="headerlink" title="service 模块常用方法"></a>service 模块常用方法</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看某个命令的服务是否可用，这里是查看sshd服务是否可用，可用返回True，不可用返回False</span></span><br><span class="line">salt <span class="string">'*'</span> service.available sshd</span><br><span class="line"></span><br><span class="line"><span class="meta"># 禁止某个服务开机启动，这里是禁止 postfix 服务开机启动</span></span><br><span class="line">salt <span class="string">'*'</span> service.disable postfix</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看某个服务是否已经开机不启动，这里是以postfix服务为例，是返回True，否则返回False</span></span><br><span class="line">salt <span class="string">'*'</span> service.disabled postfix</span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置某个服务开机启动，这里以 postfix 为例</span></span><br><span class="line">salt <span class="string">'*'</span> service.enable postfix</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看某个服务是否开机启动，这里以 postfix 服务为例</span></span><br><span class="line">salt <span class="string">'*'</span> service.enabled postfix</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看所有的服务项</span></span><br><span class="line">salt <span class="string">'*'</span> service.get_all</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看所有开机启动的服务</span></span><br><span class="line">salt <span class="string">'*'</span> service.get_enabled</span><br><span class="line"></span><br><span class="line"><span class="meta"># 重新加载指定名称的服务</span></span><br><span class="line">salt <span class="string">'*'</span> service.reload &lt;service name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 重新启动指定名称的服务</span></span><br><span class="line">salt <span class="string">'*'</span> service.restart &lt;service name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 启动指定名称的服务</span></span><br><span class="line">salt <span class="string">'*'</span> service.start &lt;service name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看指定服务的状态，启动状态是True，关闭状态是False</span></span><br><span class="line">salt <span class="string">'*'</span> service.status &lt;service name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭指定名称的服务</span></span><br><span class="line">salt <span class="string">'*'</span> service.stop &lt;service name&gt;</span><br></pre></td></tr></table></figure><h4 id="pkg-模块常用方法"><a href="#pkg-模块常用方法" class="headerlink" title="pkg 模块常用方法"></a>pkg 模块常用方法</h4><h5 id="pkg-install-用法"><a href="#pkg-install-用法" class="headerlink" title="pkg.install 用法"></a>pkg.install 用法</h5><blockquote><p>安装传递的包，在安装包之前，添加 refresh=True 来清理 yum 数据库</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数介绍</span></span><br><span class="line">name    <span class="comment"># 要安装的软件包的名称。如果传递了 "pkgs" 或 "sources" 此参数则会被忽略</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如这就相当于在 minion 端执行 yum -y install httpd 操作</span></span><br><span class="line">salt '*' pkg.<span class="keyword">install</span> httpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是第一个 yum 的话，还是可以 refresh 参数，相当于 yum clean all 操作</span></span><br><span class="line">salt '*' pkg.<span class="keyword">install</span> httpd refresh=<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">skip_verify    <span class="comment"># 跳过 GPG 验证检查</span></span><br><span class="line">version        <span class="comment"># 安装包的特定版本</span></span><br><span class="line">fromrepo       <span class="comment"># 指定从哪个 repo 库来安装软件</span></span><br><span class="line">pkgs           <span class="comment"># 指定多个软件包，一定是要以列表传递</span></span><br><span class="line"></span><br><span class="line">salt '*' pkg.<span class="keyword">install</span> pkgs='[<span class="string">"foo"</span>, <span class="string">"bar"</span>]'</span><br><span class="line">salt '*' pkg.<span class="keyword">install</span> pkgs='[<span class="string">"foo"</span>, &#123;<span class="string">"bar"</span>: <span class="string">"1.2.3-4.el5"</span>&#125;]'</span><br><span class="line"></span><br><span class="line">sources    <span class="comment"># 要安装的RPM软件包列表，其中的键是包名称，值作为包的源URI或本地路径</span></span><br><span class="line"></span><br><span class="line">salt '*' pkg.<span class="keyword">install</span> sources='[&#123;<span class="string">"foo"</span>: <span class="string">"salt://foo.rpm"</span>&#125;, &#123;<span class="string">"bar"</span>: <span class="string">"salt://bar.rpm"</span>&#125;]'</span><br></pre></td></tr></table></figure><h5 id="pkg-latest-version-用法"><a href="#pkg-latest-version-用法" class="headerlink" title="pkg.latest_version 用法"></a>pkg.latest_version 用法</h5><blockquote><p>更新软件包至最新版本</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 更新指定的软件包</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.latest_version <span class="params">&lt;package name&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 指定 repo 源来更新软件包</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.latest_version <span class="params">&lt;package name&gt;</span> fromrepo=epel-testing</span><br><span class="line"></span><br><span class="line"><span class="meta"># 多个要更新的软件之间用空格隔开</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.latest_version <span class="params">&lt;package1&gt;</span> <span class="params">&lt;package2&gt;</span> <span class="params">&lt;package3&gt;</span> ...</span><br></pre></td></tr></table></figure><h5 id="pkg-remove-用法"><a href="#pkg-remove-用法" class="headerlink" title="pkg.remove 用法"></a>pkg.remove 用法</h5><blockquote><p>删除软件的操作</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 卸载指定的软件</span><br><span class="line">salt <span class="string">'*'</span> pkg.<span class="built_in">remove</span> &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"># 多软件可以用空格隔开</span><br><span class="line">salt <span class="string">'*'</span> pkg.<span class="built_in">remove</span> <span class="symbol">&lt;package1&gt;</span>,<span class="symbol">&lt;package2&gt;</span>,<span class="symbol">&lt;package3&gt;</span></span><br><span class="line"></span><br><span class="line"># 也可以用 pkgs 使用 <span class="keyword">python</span> 列表的形式</span><br><span class="line">salt <span class="string">'*'</span> pkg.<span class="built_in">remove</span> pkgs=<span class="string">'["foo", "bar"]'</span></span><br></pre></td></tr></table></figure><h5 id="salt-‘-’-pkg-version-用法"><a href="#salt-‘-’-pkg-version-用法" class="headerlink" title="salt ‘*’ pkg.version 用法"></a>salt ‘*’ pkg.version 用法</h5><blockquote><p>查看软件的版本</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看指定软件的版本号</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.version <span class="params">&lt;package name&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看多软件版本号</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.version <span class="params">&lt;package1&gt;</span> <span class="params">&lt;package2&gt;</span> <span class="params">&lt;package3&gt;</span> ...</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://blog.51niux.com/?id=116" target="_blank" rel="noopener">http://blog.51niux.com/?id=116</a></p>]]></content>
      
      <categories>
          
          <category> SaltStack笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaltStack 常用模块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>持续集成CI持续交付CD</title>
      <link href="/2018/08/06/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90CI%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98CD/"/>
      <url>/2018/08/06/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90CI%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98CD/</url>
      <content type="html"><![CDATA[<h2 id="持续集成CI-持续交付CD"><a href="#持续集成CI-持续交付CD" class="headerlink" title="持续集成CI/持续交付CD"></a>持续集成CI/持续交付CD</h2><a id="more"></a><p>CI 很容易理解，就是持续集成。但是 CD 既可以指代码持续交付，也可理解为代码持续部署。CI 和 CD 之间有很多相似的部分，但是也有很大的区别。</p><h3 id="持续集成-Continuous-Integration"><a href="#持续集成-Continuous-Integration" class="headerlink" title="持续集成 (Continuous Integration)"></a>持续集成 (Continuous Integration)</h3><p>在持续集成环境中，开发人员将会频繁的提交代码到主干。这些新提交在最终合并到主线之前，都需要通过编译和自动化测试流进行验证。这样做是基于之前持续集成过程中很重视自动化测试验证结果，以保障所有的提交在合并主线之后的质量问题，对可能出现的一些问题进行预警。</p><h3 id="持续交付-Continuous-Delivery"><a href="#持续交付-Continuous-Delivery" class="headerlink" title="持续交付 (Continuous Delivery)"></a>持续交付 (Continuous Delivery)</h3><p>持续交付就是讲我们的应用发布出去的过程。这个过程可以确保我们尽可能快的实现交付。这就意味着除了自动化测试，我们还需要有自动化的发布流，以及通过一个按键就可以随时随地实现应用的部署上线。通过持续交付，可以决定每天，每周，每两周发布一次，这完全可以根据自己的业务进行设置。但是，如果您真的希望体验持续交付的优势，就需要先进行小批量发布，尽快部署到生产线，以便在出现问题时方便进行故障排除。</p><h3 id="持续部署-Continuous-Deployment"><a href="#持续部署-Continuous-Deployment" class="headerlink" title="持续部署 (Continuous Deployment)"></a>持续部署 (Continuous Deployment)</h3><p>如果我们想更加深入一步的话，就是持续部署了。通过这个方式，任何修改通过了所有已有的工作流就会直接和客户见面。没有人为干预（没有一键部署按钮），只有当一个修改在工作流中构建失败才能阻止它部署到产品线。持续部署是一个很优秀的方式，可以加速与客户的反馈循环，但是会给团队带来压力，因为不再有“发布日”了。开发人员可以专注于构建软件，他们看到他们的修改在他们完成工作后几分钟就上线了。基本上，当开发人员在主分支中合并一个提交时，这个分支将被构建、测试，如果一切顺利，则部署到生产环境中。</p><h3 id="合并-CI-CD-and-CD？"><a href="#合并-CI-CD-and-CD？" class="headerlink" title="合并 CI CD and CD？"></a>合并 CI CD and CD？</h3><p>当然，正如我所说，他们每部分都更加接近生产环境。你可以构建自己的持续集成环境，然后，一旦团队适应，你可以添加持续交付流，最后，可以添加持续部署流到整个工作流中。</p><p><img src="http://pa2bdkuiw.bkt.clouddn.com/20180806102619.jpg" alt="http://pa2bdkuiw.bkt.clouddn.com/20180806102619.jpg"></p><p>举例 CI，CD 和 CD 流水线</p><p><strong>到底值不值这样做？</strong></p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><ul><li><strong>需要具备哪些条件？</strong></li></ul><p>你的团队需要为每个新功能，代码改进，或者问题修复创建自动化测试用例。你需要一个持续集成服务器，它可以监控代码提交情况，对每个新的提交进行自动化测试。研发团队需要尽可能快的提交代码，至少每天一次提交。</p><ul><li><strong>可以获得什么？</strong></li></ul><p>通过自动化测试可以提早拿到回归测试的结果，避免将一些问题提交到交付生产中发布编译将会更加容易，因为合并之初已经将所有问题都规避了减少工作问题切换，研发可以很快获得构建失败的消息，在开始下一个任务之前就可以很快解决。测试成本大幅降低-你的 CI 服务器可以在几秒钟之内运行上百条测试。你的 QA 团队花费在测试上面的时间会大幅缩短，将会更加侧重于质量文化的提升上面。</p><h3 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h3><ul><li><strong>需要具备的条件</strong></li></ul><p>你需要有强大的持续集成组件和足够多的测试项可以满足你代码的需求部署需要自动化。触发是手动的，但是部署一旦开始，就不能人为干预。你的团队可能需要接受特性开关，没有完成的功能模块不会影响到线上产品。</p><ul><li><strong>可以获得什么？</strong></li></ul><p>繁琐的部署工作没有了。你的团队不在需要花费几天的时间去准备一个发布。你可以更快的进行交付，这样就加快了与客户之间的反馈环。轻松应对小变更，加速迭代</p><h3 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h3><ul><li><strong>需要具备的条件</strong></li></ul><p>研发团队测试理念比较完善。测试单元的健壮性直接决定你的交付质量。你的文档和部署频率要保持一致。<br>特征标志成为发布重大变化过程的固有部分，以确保您可以与其他部门（支持，市场营销，公关…）协调。</p><ul><li><strong>可以获得什么？</strong></li></ul><p>发布频率更快，因为你不需要停下来等待发布。每一处提交都会自动触发发布流。<br>在小批量发布的时候，风险降低了，发现问题也可以很轻松的修复。<br>客户每天都可以看到我们的持续改进和提升，而不是每个月或者每季度，或者每年。<br>如前所述，您可以采用持续集成，持续交付和持续部署。你怎么做取决于你的需求和你的业务情况。<br>如果你刚刚开始一个项目，并且还没有客户，那么你就可以去创建这些工作流，最好是将这三个方面都实现，并且在你的项目迭代和需求增长中同时迭代它们。<br>如果您已经有一个生产项目，那么您可以一步一步地分阶段去实现他们。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.sohu.com/a/204652724_640923" target="_blank" rel="noopener">https://www.sohu.com/a/204652724_640923</a></p>]]></content>
      
      <categories>
          
          <category> CI/CD笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续集成CI持续交付CD </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python函数基础</title>
      <link href="/2018/08/03/Python%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/08/03/Python%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="Python函数基础"><a href="#Python函数基础" class="headerlink" title="Python函数基础"></a>Python函数基础</h2><a id="more"></a><p><strong>什么是函数？</strong></p><ul><li>函数就是具备某一功能的工具</li><li>函数的使用必须遵循先定义，后调用的原则</li><li>实现准备工具的过程即函数的定义</li><li>拿来就用即函数的调用</li></ul><p><strong>函数氛围两大类</strong></p><ul><li>内置函数</li><li>自定义函数</li></ul><p><strong>为什么要用函数？</strong></p><blockquote><p>不用函数的问题</p><ol><li>代码的组织结构不清晰，可读性差</li><li>遇到重复的功能只能重复编写实现代码，代码冗余过多</li><li>程序的扩展性差，功能需要扩展时，需要找出所有实现该功能的地方修改之，无法统一管理且维护难度极大</li></ol></blockquote><p><strong>怎么用函数？</strong></p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3</span>,...)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文档注释</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    函数体</span><br><span class="line">    code1</span><br><span class="line">    code2</span><br><span class="line">    code3</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><h4 id="自定义函数的三种形式"><a href="#自定义函数的三种形式" class="headerlink" title="自定义函数的三种形式"></a>自定义函数的三种形式</h4><h5 id="无参函数"><a href="#无参函数" class="headerlink" title="无参函数"></a>无参函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello1'</span>)</span><br><span class="line">    print(<span class="string">'hello2'</span>)</span><br><span class="line">    print(<span class="string">'hello3'</span>)</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hello1</span><br><span class="line">hello2</span><br><span class="line">hello3</span><br></pre></td></tr></table></figure><h5 id="有参函数"><a href="#有参函数" class="headerlink" title="有参函数"></a>有参函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(y)</span><br><span class="line"></span><br><span class="line">func2(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">func2(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">func2(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h5 id="空函数"><a href="#空函数" class="headerlink" title="空函数"></a>空函数</h5><blockquote><p>用于预设程序的框架</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span>    <span class="comment"># 下载功能</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">()</span>:</span>    <span class="comment"># 上传功能</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">()</span>:</span>    <span class="comment"># 认证功能</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ls</span><span class="params">()</span>:</span>    <span class="comment"># 浏览功能</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cd</span><span class="params">()</span>:</span>    <span class="comment"># 切换目录的功能</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h5 id="定义函数阶段"><a href="#定义函数阶段" class="headerlink" title="定义函数阶段"></a>定义函数阶段</h5><blockquote><p>相当于定义了一个名字，名字指向了一个值，值是内存地址，该地址包含了函数体代码<br>定义函数阶段，只检测语法，不执行函数体代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span>    <span class="comment"># foo = 函数的内存地址</span></span><br><span class="line">    print(<span class="string">'first'</span>)</span><br><span class="line">    print(<span class="string">'second'</span>)</span><br><span class="line">    print(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line">print(foo)    <span class="comment"># 打印输出函数值内存地址</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&lt;function <span class="keyword">for</span> at <span class="number">0x000001E71A588950</span>&gt;</span><br><span class="line"></span><br><span class="line">foo()    <span class="comment"># 函数调用阶段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">first</span><br><span class="line">second</span><br><span class="line">third</span><br></pre></td></tr></table></figure><p><strong>测试一</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from bar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">from</span> foo</span><br><span class="line"><span class="keyword">from</span> bar</span><br></pre></td></tr></table></figure></p><p><strong>测试二</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from bar'</span>)</span><br><span class="line"></span><br><span class="line">foo()    <span class="comment"># 调用阶段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">from</span> foo</span><br><span class="line"><span class="keyword">from</span> bar</span><br></pre></td></tr></table></figure></p><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名<span class="comment">()</span></span><br></pre></td></tr></table></figure><h4 id="调用函数过程"><a href="#调用函数过程" class="headerlink" title="调用函数过程"></a>调用函数过程</h4><blockquote><p>根据函数名找到函数的内存地址<br>函数的内存地址加括号可以触发函数体代码的运行</p></blockquote><h4 id="调用函数的三种形式"><a href="#调用函数的三种形式" class="headerlink" title="调用函数的三种形式"></a>调用函数的三种形式</h4><h5 id="无参函数-1"><a href="#无参函数-1" class="headerlink" title="无参函数"></a>无参函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f1'</span>)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">from</span> f1</span><br></pre></td></tr></table></figure><h5 id="有参函数-1"><a href="#有参函数-1" class="headerlink" title="有参函数"></a>有参函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">res = max(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">res = max(<span class="number">1</span>, <span class="number">2</span>)*<span class="number">10</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><blockquote><p>当作参数传给其他函数</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def <span class="built_in">max</span>(<span class="keyword">x</span>, <span class="keyword">y</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">x</span> &gt; <span class="keyword">y</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">x</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">res</span> = <span class="built_in">max</span>(<span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><h4 id="什么是返回值？"><a href="#什么是返回值？" class="headerlink" title="什么是返回值？"></a>什么是返回值？</h4><p>函数的返回值是函数体代码运行的一个结果</p><h4 id="什么时候使用返回值？"><a href="#什么时候使用返回值？" class="headerlink" title="什么时候使用返回值？"></a>什么时候使用返回值？</h4><h4 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h4><blockquote><p>return 返回值：</p><ol><li>返回值没有类型限制</li><li>返回值没有个数限制<br>逗号分隔多个值，返回一个元组<br>一个值，返回值本身<br>没有return，默认返回None</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>,]</span><br><span class="line"></span><br><span class="line">res = f1()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><blockquote><p>逗号分隔多个值，返回一个元组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">res = f1()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>没有return，默认返回None<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">res = f1()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>return 是函数结束的标志<br>函数内可以有多个return，但只要执行一次，整个函数就立即结束，并且将return后的值当作本次调用的结果返回<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'first'</span></span><br><span class="line">    print(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'second'</span></span><br><span class="line">    print(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'third'</span></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>函数使用的原则：先定义，再调用</li></ol><ul><li>函数名即“变量名”，“变量名”必须先定义后引用。未定义而直接引用函数，就相当于在引用一个不存在的变量名</li><li>我们在使用函数时，一定要明确地区分定义阶段和调用阶段</li></ul><ol start="2"><li>函数在定义阶段都做了哪些事？</li></ol><ul><li>只检测语法，不执行代码</li><li>也就说，语法错误在函数定义阶段就会检测出来，而代码的逻辑错误只有在执行时才会知道</li></ul><blockquote><p>函数名：是用来访问到函数的内存地址，拿到函数的内存地址加括号就可以触发函数体代码<br>函数参数：是外部调用者为函数体传值的媒介<br>函数体代码：是函数功能的具体实现</p></blockquote><ol start="3"><li>return 函数返回值：函数的返回值是函数体执行的成果</li></ol><ul><li>返回值没有类型限制</li><li>返回值没有个数限制</li><li>没有return，默认返回None</li><li>return 值1：返回值1</li><li>return 值1, 值2, 值3：返回(值1, 值2, 值3)</li></ul><ol start="4"><li>return 注意点：</li></ol><ul><li>return 是函数结束运行的标志，函数体内可以都有多个 return</li><li>但是只有执行一次，整个函数就终止运行</li></ul>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python函数基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python修改文件内容</title>
      <link href="/2018/08/01/Python%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/"/>
      <url>/2018/08/01/Python%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<h2 id="Python修改文件内容"><a href="#Python修改文件内容" class="headerlink" title="Python修改文件内容"></a>Python修改文件内容</h2><a id="more"></a><p>想要修改文件中的内容，没有办法直接实现。<br>硬盘上的数据都是一圈一圈写的，没有修改一说，都是新数据覆盖老数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim db.txt</span><br><span class="line">你好哈哈哈</span><br></pre></td></tr></table></figure><blockquote><p>预期 在 <code>你好</code> 后面插入 <code>上上上</code></p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'db.txt'</span> mode=<span class="string">'r+t'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">6</span>, <span class="number">0</span>)    <span class="comment"># 移动了6个bytes</span></span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'上上上'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">cat db.txt</span><br><span class="line">你好上上上</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>seek()</code> 文件指针偏移 会覆盖其他内容，不好掌控</p></blockquote><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote><ol><li>先将文件内容全部读入内存</li><li>在内存中修改完毕</li><li>将修改的结果覆盖写回硬盘中</li></ol></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim db.txt</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><blockquote><p>优点：在修改期间硬盘上同一时刻只有一份数据<br>缺点：占用内存过高</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'db.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.<span class="built_in">read</span>()</span><br><span class="line">    new_data = data.<span class="built_in">replace</span>(<span class="string">'World'</span>, <span class="string">'Python'</span>)</span><br><span class="line">    print(new_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'db.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(new_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">cat db.txt</span><br><span class="line">Hello Python!</span><br></pre></td></tr></table></figure><h3 id="方法二（推荐使用）"><a href="#方法二（推荐使用）" class="headerlink" title="方法二（推荐使用）"></a>方法二（推荐使用）</h3><blockquote><p>一行一行的读，一行一行的改</p><ol><li>以读的模式打开源文件，以写的模式打开一个临时文件（解决占用内存的问题）</li><li>然后用 for 循环读取原文件一行行内容，每读一行则修改一行，将修改的内容写入临时文件，直到把源文件都遍历完，</li><li>删除原文件，将临时文件重命名为原文件名</li></ol></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'db.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> src_f, \</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">'.db.txt.swap'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> temp_f:</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> src_f:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'World'</span> <span class="keyword">in</span> <span class="built_in">line</span>:</span><br><span class="line">            <span class="built_in">line</span> = <span class="built_in">line</span>.<span class="built_in">replace</span>(<span class="string">'World'</span>, <span class="string">'Python'</span>)</span><br><span class="line">        temp_f.<span class="built_in">write</span>(<span class="built_in">line</span>)</span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">'db.txt'</span>)</span><br><span class="line">os.<span class="built_in">rename</span>(<span class="string">'.db.txt.swap'</span>, <span class="string">'db.txt'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优点：同一时刻在内存中只存在文件的一行内容<br>缺点：在修改期间，硬盘上同一份数据会保存两份</p></blockquote>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python修改文件内容 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python字典操作</title>
      <link href="/2018/07/30/Python%E5%AD%97%E5%85%B8%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/07/30/Python%E5%AD%97%E5%85%B8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="Python字典操作"><a href="#Python字典操作" class="headerlink" title="Python字典操作"></a>Python字典操作</h2><p>字典（dict），是一系列放在 <code>{}</code> 的键值对（key-value）。<br>可以使用键来访问对应的值，与键对应的值可以是 数字、字符串、列表、字典<br>字典具有极快的查找速度。 </p><a id="more"></a><blockquote><p>下边是一个与手机信息相关的 dict<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用 <code>dict()</code>方法 创建字典<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">d</span> = dict(os= <span class="string">'Android'</span>, soc=<span class="string">'Qualcomm'</span>, screen=<span class="string">'Samsung'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用可迭代对象（列表、元组等）也可以创建字典<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = dict(([<span class="string">'x'</span>, <span class="number">1</span>], [<span class="string">'y'</span>, <span class="number">2</span>], [<span class="string">'z'</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = dict(zip((<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用 <code>fromkeys()</code>内建方法 创建默认字典<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; &#123;&#125;.fromkeys((<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>), -<span class="number">1</span>)</span><br><span class="line">&#123;<span class="string">'x'</span>: -<span class="number">1</span>, <span class="string">'y'</span>: -<span class="number">1</span>, <span class="string">'z'</span>: -<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; m = &#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 key 访问 value，如果 key 不存在则报错</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; m[<span class="string">'os'</span>]</span></span><br><span class="line">'Android'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为了避免 key 不存在报错问题，可以使用 get 方法，如果 key 不存在则返回 None，或指定返回值</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; m.get(<span class="string">'soc'</span>)</span></span><br><span class="line">'Qualcomm'</span><br><span class="line"><span class="meta">#</span><span class="bash"> key 不存在时，指定返回值</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; m.get(<span class="string">'xxx'</span>，-1)</span></span><br><span class="line">-1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 除了 get 方法外，还可以先通过 <span class="keyword">in</span> 判断 key 是否存在</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;<span class="string">'xxx'</span> <span class="keyword">in</span> m</span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;<span class="string">'os'</span> <span class="keyword">in</span> m </span></span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="添加-key-value"><a href="#添加-key-value" class="headerlink" title="添加 key-value"></a>添加 key-value</h3><blockquote><p>为字典增加一项</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; m = &#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m[<span class="string">'camera'</span>] = <span class="string">'Sony'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m</span><br><span class="line">&#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>, <span class="string">'camera'</span>: <span class="string">'Sony'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="删除-key-value"><a href="#删除-key-value" class="headerlink" title="删除 key-value"></a>删除 key-value</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; m = &#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; del m[<span class="string">'os'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m</span><br><span class="line">&#123;<span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.pop(<span class="string">'soc'</span>)</span><br><span class="line"><span class="string">'Qualcomm'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m</span><br><span class="line">&#123;<span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line"><span class="comment"># 删除所有键值对</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.clear()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; m = &#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m[<span class="string">'screen'</span>] = <span class="string">'BOE'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m</span><br><span class="line">&#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'BOE'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="字典的长度（键值对数量）"><a href="#字典的长度（键值对数量）" class="headerlink" title="字典的长度（键值对数量）"></a>字典的长度（键值对数量）</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; len(d)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="update-字典合并"><a href="#update-字典合并" class="headerlink" title="update() 字典合并"></a>update() 字典合并</h3><blockquote><p>将一个字典的内容添加到另一个字典<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d1 = &#123;<span class="string">'m'</span>: <span class="number">4</span>, <span class="string">'n'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.update(d1)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>, <span class="string">'m'</span>: <span class="number">4</span>, <span class="string">'n'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><h4 id="遍历字典的键-key"><a href="#遍历字典的键-key" class="headerlink" title="遍历字典的键 key"></a>遍历字典的键 key</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; d = &#123;<span class="string">'list'</span>: [1, 2, 3], 1: 123, <span class="string">'111'</span>: <span class="string">'python3'</span>, <span class="string">'tuple'</span>: (4, 5, 6)&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">for</span> key <span class="keyword">in</span> d.keys():</span></span><br><span class="line">···    print(key)</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">list</span><br><span class="line">111</span><br><span class="line">tuple</span><br></pre></td></tr></table></figure><h4 id="遍历字典的值value"><a href="#遍历字典的值value" class="headerlink" title="遍历字典的值value"></a>遍历字典的值value</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; d = &#123;<span class="string">'list'</span>: [1, 2, 3], 1: 123, <span class="string">'111'</span>: <span class="string">'python3'</span>, <span class="string">'tuple'</span>: (4, 5, 6)&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">for</span> value <span class="keyword">in</span> d.values():</span></span><br><span class="line">···    print (value)</span><br><span class="line"></span><br><span class="line">[1, 2, 3]</span><br><span class="line">123</span><br><span class="line">python3</span><br><span class="line">(4, 5, 6)</span><br></pre></td></tr></table></figure><h4 id="遍历获取-key-和-value"><a href="#遍历获取-key-和-value" class="headerlink" title="遍历获取 key 和 value"></a>遍历获取 key 和 value</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m = &#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> key <span class="keyword">in</span> m:</span><br><span class="line">···    <span class="built_in">print</span>(key + <span class="string">' -&gt; '</span> + m[key])</span><br><span class="line"></span><br><span class="line">os<span class="function"> -&gt;</span> Android</span><br><span class="line">soc<span class="function"> -&gt;</span> Qualcomm</span><br><span class="line">screen<span class="function"> -&gt;</span> Samsung</span><br></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;<span class="string">'list'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">1</span>:<span class="number">123</span>, <span class="string">'111'</span>: <span class="string">'python3'</span>, <span class="string">'tuple'</span>: (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> <span class="built_in">key</span> in d:</span><br><span class="line">···    <span class="built_in">print</span>(<span class="built_in">str</span>(<span class="built_in">key</span>) + <span class="string">':'</span> + <span class="built_in">str</span>(d[<span class="built_in">key</span>]))</span><br><span class="line"></span><br><span class="line">list:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="number">1</span>:<span class="number">123</span></span><br><span class="line"><span class="number">111</span>:python3</span><br><span class="line">tuple:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h4 id="遍历字典的项-items，获取-key-和-value"><a href="#遍历字典的项-items，获取-key-和-value" class="headerlink" title="遍历字典的项 items，获取 key 和 value"></a>遍历字典的项 items，获取 key 和 value</h4><blockquote><p><code>items()</code> 返回一个列表，列表的每一个元素是一个包含 <code>key</code>、<code>value</code> 的 <code>tuple</code></p></blockquote><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m = &#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line"><span class="comment"># m.items() 返回一个列表，列表的每一个元素是一个包含 key、value 的 tuple</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> key, value <span class="keyword">in</span> m.items():</span><br><span class="line">···    <span class="built_in">print</span>(key + <span class="string">' -&gt; '</span> + value)</span><br><span class="line"></span><br><span class="line">os<span class="function"> -&gt;</span> Android</span><br><span class="line">soc<span class="function"> -&gt;</span> Qualcomm</span><br><span class="line">screen<span class="function"> -&gt;</span> Samsung</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'list'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">1</span>: <span class="number">123</span>, <span class="string">'111'</span>: <span class="string">'python3'</span>, <span class="string">'tuple'</span>: (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> d.items():</span><br><span class="line">···    print(item)</span><br><span class="line"></span><br><span class="line">(<span class="string">'list'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">(<span class="number">1</span>, <span class="number">123</span>)</span><br><span class="line">(<span class="string">'111'</span>, <span class="string">'python3'</span>)</span><br><span class="line">(<span class="string">'tuple'</span>, (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; d = &#123;<span class="string">'list'</span>: [1, 2, 3], 1: 123, <span class="string">'111'</span>: <span class="string">'python3'</span>, <span class="string">'tuple'</span>: (4, 5, 6)&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span></span><br><span class="line">···    print(key, value)</span><br><span class="line"></span><br><span class="line">list [1, 2, 3]</span><br><span class="line">1 123</span><br><span class="line">111 python3</span><br><span class="line">tuple (4, 5, 6)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; d = &#123;<span class="string">'list'</span>: [1, 2, 3], 1: 123, <span class="string">'111'</span>: <span class="string">'python3'</span>, <span class="string">'tuple'</span>: (4, 5, 6)&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">for</span> (key, value) <span class="keyword">in</span> d.items():</span></span><br><span class="line">···    print(key, value)</span><br><span class="line"></span><br><span class="line">list [1, 2, 3]</span><br><span class="line">1 123</span><br><span class="line">111 python3</span><br><span class="line">tuple (4, 5, 6)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python字典操作 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python文件内指针移动</title>
      <link href="/2018/07/28/Python%E6%96%87%E4%BB%B6%E5%86%85%E5%85%89%E6%A0%87%E7%A7%BB%E5%8A%A8/"/>
      <url>/2018/07/28/Python%E6%96%87%E4%BB%B6%E5%86%85%E5%85%89%E6%A0%87%E7%A7%BB%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h2 id="Python文件内指针移动"><a href="#Python文件内指针移动" class="headerlink" title="Python文件内指针移动"></a>Python文件内指针移动</h2><a id="more"></a><p><strong>read(3)</strong></p><blockquote><ul><li>文件打开方式为文本模式时，代表读取 3 个字符</li><li>文件打开方式为 <code>b模式</code> 时，代表读取 3 个字节</li><li>其余的文件内光标移动都是以字节为单位如 <code>seek</code>，<code>tell</code>，<code>truncate</code></li></ul></blockquote><h3 id="seek-文件内光标操作"><a href="#seek-文件内光标操作" class="headerlink" title="seek() 文件内光标操作"></a><code>seek()</code> 文件内光标操作</h3><blockquote><p><code>seek</code> 有三种移动方式 <code>0</code>，<code>1</code>，<code>2</code><br>其中 <code>1</code> 和 <code>2</code> 必须在 <code>b模式</code> 下进行，但无论哪种模式，都是以 <code>bytes</code> 为单位移动的</p></blockquote><blockquote><p>单位统一为字节<br>第一个参数：控制移动的字节数<br>第二个参数：控制移动的参照物，值可以为：0、1、2<br>0：参照文件开头，默认为0<br>1：参照当前位置<br>2：参照文件末尾</p></blockquote><h3 id="0：参照文件开头（在-b-和-t-模式下都能使用）"><a href="#0：参照文件开头（在-b-和-t-模式下都能使用）" class="headerlink" title="0：参照文件开头（在 b 和 t 模式下都能使用）"></a>0：参照文件开头（在 b 和 t 模式下都能使用）</h3><blockquote><p>默认为 0<br><code>强调：除了 0 模式以外的模式都只能在 b 模式下使用</code><br><code>1 和 2 只能用在 b 模式下</code></p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat e.txt</span><br><span class="line">你好hello</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">3</span>)</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">好hello</span><br></pre></td></tr></table></figure><blockquote><p> 如果一个 <code>字节</code> 没有读完，会报以下错误</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">2</span>)</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="built_in">result</span>, consumed) = self.<span class="title">_buffer</span>_decode(data, self.errors, final)</span><br><span class="line">UnicodeDecodeError: <span class="string">'utf-8'</span> codec can<span class="string">'t decode byte 0xa0 in position 0: invalid start byte</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">read</span>()</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    print(<span class="string">'第二次'</span>, f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">第二次 你好hello</span><br></pre></td></tr></table></figure><h3 id="1：参照当前位置（只能在-b模式下使用）"><a href="#1：参照当前位置（只能在-b模式下使用）" class="headerlink" title="1：参照当前位置（只能在 b模式下使用）"></a>1：参照当前位置（只能在 b模式下使用）</h3><blockquote><p>储备：<code>read(n)</code><br>read 的 n 在 <code>t</code>模式下 读的是字符个数<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.<span class="built_in">read</span>(<span class="number">2</span>)</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">你好</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>read 的 n 在 <code>b</code>模式下 读的是字节个数<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.<span class="built_in">read</span>(<span class="number">3</span>)</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">b<span class="string">'\xe4\xbd\xa0'</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">with</span> open('e.txt', mode='rb') <span class="keyword">as</span> f:</span><br><span class="line">    <span class="class"><span class="keyword">data</span> = f.read(3)</span></span><br><span class="line">    print(<span class="class"><span class="keyword">data</span>.decode('<span class="title">utf</span>-8'))</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">你</span><br></pre></td></tr></table></figure><blockquote><p>其余所有文件内指针的移动都是以字节为单位</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.<span class="built_in">read</span>(<span class="number">1</span>)</span><br><span class="line">    print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">你</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.<span class="built_in">read</span>(<span class="number">1</span>)</span><br><span class="line">    print(s)</span><br><span class="line">    print(f.tell())    <span class="comment"># 查看当前指针位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">你</span><br><span class="line"><span class="number">3</span>    <span class="comment"># 表示当前指针在第 3 个字节</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.<span class="built_in">read</span>(<span class="number">1</span>)    <span class="comment"># 读取一个字符</span></span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">6</span>, <span class="number">0</span>)    <span class="comment"># 0 将指针放到文件开头，移动到第 6 个字节位</span></span><br><span class="line">    print(f.<span class="built_in">read</span>())    <span class="comment"># 打印输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.<span class="built_in">read</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># f.seek(6, 0)</span></span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">b<span class="string">'hello'</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.<span class="built_in">read</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># f.seek(6, 0)</span></span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">    print(f.<span class="built_in">read</span>().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h3 id="2：参照文件末尾（只能在-b模式下使用）"><a href="#2：参照文件末尾（只能在-b模式下使用）" class="headerlink" title="2：参照文件末尾（只能在 b模式下使用）"></a>2：参照文件末尾（只能在 b模式下使用）</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat e.txt</span><br><span class="line">你好hell<span class="meta">o1</span></span><br><span class="line">你好hell<span class="meta">o2</span></span><br><span class="line">你好hell<span class="meta">o3</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">-6</span>,<span class="number">2</span>)    <span class="comment"># 读取 'hello3'</span></span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">b<span class="string">'hello3'</span></span><br></pre></td></tr></table></figure><h3 id="truncate-截断文件"><a href="#truncate-截断文件" class="headerlink" title="truncate 截断文件"></a><code>truncate</code> 截断文件</h3><blockquote><p>文件的打开方式必须可写，但是不能用 <code>w</code> 或 <code>w+</code> 等方式打开，因为那样直接清空文件了<br>所以 <code>truncate</code> 要在 <code>r+</code> 或 <code>a</code> 或 <code>a+</code> 等模式下测试效果<br>a：追加写<br>r+：可读可写</p></blockquote><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat e.txt</span><br><span class="line">你aaa好hell<span class="meta">o1</span></span><br><span class="line">你好hell<span class="meta">o2</span></span><br><span class="line">你好hell<span class="meta">o3</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.truncate(<span class="number">9</span>)    <span class="comment"># 从文件开头截取到 3个bytes 的位置，其余的删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">cat e.txt</span><br><span class="line">你aaa好</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'r+t'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.truncate(<span class="number">9</span>)    <span class="comment"># 从文件开头截取到 3个bytes 的位置，其余的删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">cat e.txt</span><br><span class="line">你aaa好</span><br></pre></td></tr></table></figure><h3 id="练习：基于-seek-实现-tail-f-功能"><a href="#练习：基于-seek-实现-tail-f-功能" class="headerlink" title="练习：基于 seek 实现 tail -f 功能"></a>练习：基于 <code>seek</code> 实现 <code>tail -f</code> 功能</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'test.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="built_in">line</span> = f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">line</span>:</span><br><span class="line">            print(<span class="built_in">line</span>.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">time</span>.sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python文件内指针移动 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ集群配置</title>
      <link href="/2018/07/25/RabbitMQ%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/07/25/RabbitMQ%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="RabbitMQ-集群配置"><a href="#RabbitMQ-集群配置" class="headerlink" title="RabbitMQ 集群配置"></a>RabbitMQ 集群配置</h2><p>这里展示的是多机集群的部署，如果机器受限，可以选择单机集群部署</p><a id="more"></a><p>RabbitMQ 可以通过三种方法来部署分布式集群系统<br>分别是：cluster，federation，shovel</p><p><strong>cluster</strong></p><blockquote><ul><li>不支持跨网段，用于同一个网段内的局域网</li><li>可以随意的动态增加或者减少</li><li>节点之间需要运行相同版本的 RabbitMQ 和 Erlang</li></ul></blockquote><p><strong>federation</strong></p><blockquote><p>应用于广域网，允许单台服务器上的交换机或队列接收发布到另一台服务器上交换机或队列的消息，可以是单独机器或集群。federation 队列类似于单向点对点连接，消息会在联盟队列之间转发任意次，直到被消费者接受。通常使用 federation 来连接 internet 上的中间服务器，用作订阅分发消息或工作队列。</p></blockquote><p><strong>shovel</strong></p><blockquote><p>连接方式与 federation 的连接方式类似，但它工作在更低层次。可以应用于广域网。</p></blockquote><p><strong>节点类型</strong></p><blockquote><p>Ram node：内存节点将所有的队列、交换机、绑定、用户、权限和 vhost 的元数据定义存储在内存中，好处是可以使得像交换机和队列声明等操作更加的快速。</p></blockquote><blockquote><p>Disk node：将元数据存储在磁盘中，单节点系统只允许磁盘类型的节点，防止重启 RabbitMQ 的时候，丢失系统的配置信息。</p></blockquote><p>选用三台主机，主机名分别是</p><blockquote><p>pro-rabbitmq01<br>pro-rabbitmq02<br>pro-rabbitmq03</p></blockquote><h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><p>RabbitMQ 是用 Erlang 开发的，集群非常方便，因为 Erlang 天生就是一门分布式语言，但其本身并不支持负载均衡。<br>RabbitMQ 利用 Erlang 的分布式特性组建集群，erlang 集群通过 magic cookie 实现，<br>此 cookie 保存在 $HOME/.erlang.cookie<br>rpm安装即 <code>/var/lib/rabbitmq/.erlang.cookie</code><br>二进制安装在 <code>/data/erlang/.erlang.cookie</code><br>需要保证集群各节点的此 cookie 一致，可以选取一个节点的 cookie，用 <code>rsync</code>，<code>scp</code> 同步到其余节点。</p><h3 id="同步-Cookie"><a href="#同步-Cookie" class="headerlink" title="同步 Cookie"></a>同步 Cookie</h3><p>读取其中一个节点的 cookie，并复制到其他节点<br>节点之间通过 cookie 确定相互是否可通信。<br>cookie 存放在 /var/lib/rabbitmq/.erlang.cookie<br>或<br>$HOME/.erlang.cookie 中</p><h3 id="设置-Erlang-Cookie"><a href="#设置-Erlang-Cookie" class="headerlink" title="设置 Erlang Cookie"></a>设置 Erlang Cookie</h3><p>RabbitMQ 的集群是依赖于 Erlang 的集群来工作的，所以必须先构建起 Erlang 的集群环境。<br>Erlang 的集群中各节点是通过一个 magic cookie 来实现的，这个 Cookie 存放在 /data/erlang/.erlang.cookie 中，文件是 400 的权限。<br>所以必须保证各节点 Cookie 保持一致，否则节点之间就无法通信。<br>我们是删除其中两台的 /data/erlang/.erlang.cookie，然后将另一台的 /data/erlang/.erlang.cookie 拷贝到这两台上。<br>文件权限是 400</p><blockquote><p>注意：<code>.erlang.cookie</code> 文件的权限，RabbitMQ账号，权限 <code>400</code> 或 <code>600</code> 即可，为组或 other 账号赋权会报错</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rsync -avzP <span class="regexp">/data/</span>erlang<span class="regexp">/.erlang.cookie root@10.21.20.94:/</span>data<span class="regexp">/erlang/</span></span><br><span class="line"># scp <span class="regexp">/var/</span>lib<span class="regexp">/rabbitmq/</span>.erlang.cookie root@<span class="number">1.1</span>.<span class="number">1.2</span>:<span class="regexp">/var/</span>lib<span class="regexp">/rabbitmq/</span></span><br><span class="line"># scp <span class="regexp">/var/</span>lib<span class="regexp">/rabbitmq/</span>.erlang.cookie root@<span class="number">1.1</span>.<span class="number">1.3</span>:<span class="regexp">/var/</span>lib<span class="regexp">/rabbitmq/</span></span><br></pre></td></tr></table></figure><h3 id="逐个启动节点"><a href="#逐个启动节点" class="headerlink" title="逐个启动节点"></a>逐个启动节点</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-<span class="keyword">server</span> -detached</span><br></pre></td></tr></table></figure><h3 id="查看各节点的状态"><a href="#查看各节点的状态" class="headerlink" title="查看各节点的状态"></a>查看各节点的状态</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl <span class="keyword">status</span></span><br><span class="line">rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><h3 id="配置各节点的-hosts-文件"><a href="#配置各节点的-hosts-文件" class="headerlink" title="配置各节点的 hosts 文件"></a>配置各节点的 hosts 文件</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"><span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span> pro-rabbitmq<span class="number">01</span></span><br><span class="line"><span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span> pro-rabbitmq<span class="number">02</span></span><br><span class="line"><span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span> pro-rabbitmq<span class="number">03</span></span><br></pre></td></tr></table></figure><h3 id="组建集群"><a href="#组建集群" class="headerlink" title="组建集群"></a>组建集群</h3><p>pro-rabbitmq02 和 pro-rabbitmq03<br>以 pro-rabbitmq01 为主节点<br>在 pro-rabbitmq02 上</p><blockquote><p><code>rabbitmqctl join_cluster rabbit@pro-rabbitmq01</code> 中的 <code>rabbit@pro-rabbitmq01</code>，<br><code>rabbit</code> 代表集群名<br><code>pro-rabbitmq01</code> 代表集群节点<br>节点名同 hostname，<code>hostname</code> 与 <code>/etc/hosts</code> 中设置必须保持一致<br><code>pro-rabbitmq02</code> 与 <code>pro-rabbitmq03</code> 均连接到 <code>pro-rabbitmq01</code>，它们之间也会自动建立连接。<br>如果需要使用内存节点，增加一个 <code>--ram</code> 的参数即可<br>如：<br><code>rabbitmqctl join_cluster --ram rabbit@pro-rabbitmq01</code><br><code>rabbitmqctl join_cluster rabbit@pro-rabbitmq01 --ram</code><br>一个集群中至少需要一个 <code>disk</code> 节点<br>默认是磁盘节点，如果是内存节点的话，需要加 <code>--ram</code> 参数</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@pro-rabbitmq02 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">[root@pro-rabbitmq02 ~]<span class="comment"># rabbitmqctl reset</span></span><br><span class="line">[root@pro-rabbitmq02 ~]<span class="comment"># rabbitmqctl join_cluster rabbit<span class="doctag">@pro</span>-rabbitmq01</span></span><br><span class="line">[root@pro-rabbitmq02 ~]<span class="comment"># rabbitmqctl start_app</span></span><br></pre></td></tr></table></figure><blockquote><p><code>pro-rabbitmq03</code> 上的操作与 <code>pro-rabbitmq02</code> 的相同</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@pro-rabbitmq03 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">[root@pro-rabbitmq03 ~]<span class="comment"># rabbitmqctl reset</span></span><br><span class="line">[root@pro-rabbitmq03 ~]<span class="comment"># rabbitmqctl join_cluster rabbit<span class="doctag">@pro</span>-rabbitmq01</span></span><br><span class="line">[root@pro-rabbitmq03 ~]<span class="comment"># rabbitmqctl start_app</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@pro-rabbitmq02 rabbitmq]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">Stopping rabbit application on node rabbit@pro-rabbitmq02 ...</span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 rabbitmq]<span class="comment"># netstat -ntlp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">4369</span>            <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:*</span>               LISTEN      <span class="number">2556</span>/epmd           </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">22</span>              <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:*</span>               LISTEN      <span class="number">2717</span>/sshd           </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">25672</span>           <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:*</span>               LISTEN      <span class="number">2467</span>/beam.smp       </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">4369</span>                 <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                    LISTEN      <span class="number">2556</span>/epmd           </span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 rabbitmq]<span class="comment"># rabbitmqctl reset</span></span><br><span class="line">Resetting node rabbit@pro-rabbitmq02 ...</span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 rabbitmq]<span class="comment"># rabbitmqctl join_cluster rabbit<span class="doctag">@pro</span>-rabbitmq01</span></span><br><span class="line">Clustering node rabbit@pro-rabbitmq02 with rabbit@pro-rabbitmq01</span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 rabbitmq]<span class="comment"># rabbitmqctl start_app</span></span><br><span class="line">Starting node rabbit@pro-rabbitmq02 ...</span><br><span class="line"> completed with <span class="number">0</span> plugins.</span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 rabbitmq]<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@pro-rabbitmq02 ...</span><br><span class="line">[&#123;nodes,[&#123;disc,[<span class="string">'rabbit@pro-rabbitmq01'</span>,<span class="string">'rabbit@pro-rabbitmq02'</span>]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[<span class="string">'rabbit@pro-rabbitmq01'</span>,<span class="string">'rabbit@pro-rabbitmq02'</span>]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@pro-rabbitmq01"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;<span class="string">'rabbit@pro-rabbitmq01'</span>,[]&#125;,&#123;<span class="string">'rabbit@pro-rabbitmq02'</span>,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure><h3 id="修改集群类型"><a href="#修改集群类型" class="headerlink" title="修改集群类型"></a>修改集群类型</h3><blockquote><p>修改 <code>disk</code> 节点到 <code>内存</code> 节点</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@pro-rabbitmq02 ~]# rabbitmqctl change_cluster_node_type ram</span><br><span class="line"><span class="symbol">Turning</span> rabbit@pro-rabbitmq02 into a ram node</span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 ~]# rabbitmqctl start_app</span><br><span class="line"><span class="symbol">Starting</span> node rabbit@pro-rabbitmq02 ...</span><br><span class="line"> completed with <span class="number">3</span> plugins.</span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 ~]# rabbitmqctl cluster_status</span><br><span class="line"><span class="symbol">Cluster</span> status of node rabbit@pro-rabbitmq02 ...</span><br><span class="line">[&#123;nodes,[&#123;disc,[<span class="string">'rabbit@pro-rabbitmq01'</span>]&#125;,&#123;ram,[<span class="string">'rabbit@pro-rabbitmq02'</span>]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[<span class="string">'rabbit@pro-rabbitmq01'</span>,<span class="string">'rabbit@pro-rabbitmq02'</span>]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@pro-rabbitmq01"</span>&gt;&gt;&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;<span class="string">'rabbit@pro-rabbitmq01'</span>,[]&#125;,&#123;<span class="string">'rabbit@pro-rabbitmq02'</span>,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@pro-rabbitmq03 rabbitmq]# rabbitmqctl cluster_status</span><br><span class="line"><span class="symbol">Cluster</span> status of node rabbit@pro-rabbitmq03 ...</span><br><span class="line">[&#123;nodes,[&#123;disc,[<span class="string">'rabbit@pro-rabbitmq01'</span>]&#125;,</span><br><span class="line">         &#123;ram,[<span class="string">'rabbit@pro-rabbitmq03'</span>,<span class="string">'rabbit@pro-rabbitmq02'</span>]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[<span class="string">'rabbit@pro-rabbitmq02'</span>,<span class="string">'rabbit@pro-rabbitmq01'</span>,</span><br><span class="line">                 <span class="string">'rabbit@pro-rabbitmq03'</span>]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@pro-rabbitmq01"</span>&gt;&gt;&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;<span class="string">'rabbit@pro-rabbitmq02'</span>,[]&#125;,</span><br><span class="line">          &#123;<span class="string">'rabbit@pro-rabbitmq01'</span>,[]&#125;,</span><br><span class="line">          &#123;<span class="string">'rabbit@pro-rabbitmq03'</span>,[]&#125;]&#125;]</span><br><span class="line"></span><br><span class="line"># 可以看到三个节点都加入了集群中，两个 ram 节点、一个 disc 节点。</span><br><span class="line"># 其中三个节点都在运行中，以及集群名称显示。</span><br></pre></td></tr></table></figure><blockquote><p>默认是磁盘节点，如果是内存节点的话，需要加 <code>--ram</code> 参数<br>RabbitMQ 集群节点有 <code>disc</code> 和 <code>ram</code> 两种类型，一个集群中至少要有一个 <code>disc</code> 类型的节点，不指定默认加入为 <code>disc</code></p></blockquote><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将集群类型修改成 disk 节点</span><br><span class="line"><span class="title">rabbitmqctl</span> change_cluster_node_<span class="keyword">type</span> disc</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> RabbitMQ笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ集群配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML基础学习</title>
      <link href="/2018/07/25/HTML%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/07/25/HTML%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="HTML基础学习"><a href="#HTML基础学习" class="headerlink" title="HTML基础学习"></a>HTML基础学习</h2><h3 id="Web运行本质"><a href="#Web运行本质" class="headerlink" title="Web运行本质"></a>Web运行本质</h3><blockquote><p>对于所有的 Web 应用，本质上其实就是一个 socket 服务端，用户的浏览器其实就是一个 socket 客户端</p></blockquote><a id="more"></a><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">socket</span></span><br><span class="line"></span><br><span class="line">def handle_request(client):</span><br><span class="line">    buf = client.recv(<span class="number">1024</span>)</span><br><span class="line">    client.<span class="built_in">send</span>(<span class="keyword">bytes</span>(<span class="string">"HTTP/1.1 200 OK\r\n\r\n"</span>, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    client.<span class="built_in">send</span>(<span class="keyword">bytes</span>(<span class="string">"Hello, World"</span>, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    </span><br><span class="line">def main():</span><br><span class="line">    sock = <span class="built_in">socket</span>.<span class="built_in">socket</span>(<span class="built_in">socket</span>.AF_INET, <span class="built_in">socket</span>.SOCK_STREAM)</span><br><span class="line">    sock.bind((<span class="string">'localhost'</span>, <span class="number">8000</span>))</span><br><span class="line">    sock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        connection, address = sock.accept()</span><br><span class="line">        handle_request(connection)</span><br><span class="line">        connection.<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://ooo.0o0.ooo/2017/05/13/5916a911da775.png" alt="原理.png"></p><h3 id="HTML-相关概念"><a href="#HTML-相关概念" class="headerlink" title="HTML 相关概念"></a>HTML 相关概念</h3><h4 id="html是什么"><a href="#html是什么" class="headerlink" title="html是什么"></a>html是什么</h4><blockquote><ol><li>超文本标记语言（Hypertext Markup Language，HTML）通过标记符号来标记要显示的网页中的内容。</li><li>其实就是一套规则，浏览器认识的规则。</li><li>浏览器按顺序渲染网页文件，然后根据标记符解释和显示内容。</li><li>对于不同的浏览器，对同一标签可能会有不完全相同的解释（兼容性）。</li></ol></blockquote><h4 id="w3c（了解）"><a href="#w3c（了解）" class="headerlink" title="w3c（了解）"></a>w3c（了解）</h4><ul><li><p>w3c是什么？</p><blockquote><p>万维网联盟（World Wide Web Consortium，简称W3C）创建于1994年，是Web技术领域具权威和影响力的国际标准化组织</p></blockquote></li><li><p>w3c的主要工作？</p><blockquote><p>W3C主要工作，是制作Web规范。到目前为止，W3C已发布了200多项影响深远的Web技术标准。比如：XHTML、HTML5、XML、CSS、DOM、XSTL等</p></blockquote></li></ul><h3 id="HTML-文件结构以及标签格式"><a href="#HTML-文件结构以及标签格式" class="headerlink" title="HTML 文件结构以及标签格式"></a>HTML 文件结构以及标签格式</h3><h4 id="html-的文件格式"><a href="#html-的文件格式" class="headerlink" title="html 的文件格式"></a>html 的文件格式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      文件体</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="上述代码说明"><a href="#上述代码说明" class="headerlink" title="上述代码说明"></a>上述代码说明</h4><blockquote><ol><li><code>&lt;html&gt;&lt;/html&gt;</code>是文档的开始标记和结束标记。此元素告诉浏览器其自身是一个 HTML 文档，在它们之间是文档的头部和主体</li><li><code>&lt;head&gt;&lt;/head&gt;</code>元素出现在文档的开头部分。<code>&lt;head&gt;</code>与<code>&lt;/head&gt;</code>之间的内容不会在浏览器的文档窗口显示，但是其中的元素有特殊重要的意义</li><li><code>&lt;title&gt;&lt;/title&gt;</code>定义网页标题，在浏览器标题栏显示</li><li><code>&lt;body&gt;&lt;/body&gt;</code>之间的文本是可见的网页主体内容</li></ol></blockquote><h4 id="html-标签格式"><a href="#html-标签格式" class="headerlink" title="html 标签格式"></a>html 标签格式</h4><blockquote><ul><li>HTML标签是由尖括号包围的关键词，比如 <code>&lt;html&gt;</code></li><li>标签对中的第一个标签是开始标签，第二个标签是结束标签</li><li>HTML标签通常是成对出现的（双边标记），比如 <code>&lt;div&gt;</code> 和 <code>&lt;/div&gt;</code></li><li>但也有单独呈现的标签（单边标记），如：<code>&lt;br /&gt;</code>、<code>&lt;hr /&gt;</code>和<code>&lt;img src=“images/1.jpg” /&gt;</code>等</li><li>标签可以有若干个属性，也可以不带属性。如<code>&lt;head&gt;</code>元素就不带任何属性</li></ul></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标答的语法：</span><br><span class="line">&lt;标签名 属性<span class="number">1</span>=“属性值<span class="number">1</span>” 属性<span class="number">2</span>=“属性值<span class="number">2</span>”...&gt;内容部分&lt;/标签名&gt;</span><br><span class="line">&lt;标签名 属性<span class="number">1</span>=“属性值<span class="number">1</span>” 属性<span class="number">2</span>=“属性值<span class="number">2</span>”.../&gt;</span><br></pre></td></tr></table></figure><h3 id="HTML-常用标签之Meta"><a href="#HTML-常用标签之Meta" class="headerlink" title="HTML 常用标签之Meta"></a>HTML 常用标签之Meta</h3><h4 id="Meta介绍"><a href="#Meta介绍" class="headerlink" title="Meta介绍"></a>Meta介绍</h4><blockquote><ul><li><code>&lt;meta&gt;</code>元素可提供有关页面的元信息（meta-information），针对搜索引擎和更新频度的描述和关键词</li><li><code>&lt;meta&gt;</code>标签位于文档的头部，不包含任何内容</li><li><code>&lt;meta&gt;</code>提供的信息是用户不可见的</li></ul></blockquote><h4 id="关于meta常见的用法"><a href="#关于meta常见的用法" class="headerlink" title="关于meta常见的用法"></a>关于meta常见的用法</h4><ul><li><p>author（作者）</p><blockquote><p>说明：标注网页的作者<br>用法：<code>&lt;meta name=&quot;author&quot; content=&quot;张三&quot;&gt;</code></p></blockquote></li><li><p>Copyright(版权信息)</p><blockquote><p>功能：说明网站版权信息<br>用法：<code>&lt;meta name=&quot;copyright&quot; content=&quot;信息参数&quot;&gt;</code></p></blockquote></li></ul><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><p><img src="https://ooo.0o0.ooo/2017/05/10/5912b5a503af6.png" alt="FAJTP.md.png"></p><h3 id="HTML-常用标签之字体以及排版标签"><a href="#HTML-常用标签之字体以及排版标签" class="headerlink" title="HTML 常用标签之字体以及排版标签"></a>HTML 常用标签之字体以及排版标签</h3><h4 id="排版元素（常用）"><a href="#排版元素（常用）" class="headerlink" title="排版元素（常用）"></a>排版元素（常用）</h4><table><thead><tr><th>标签</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;p&gt;&lt;/p&gt;</code></td><td>用来创建一个段落，该元素自动在其前后创建一些空白</td></tr><tr><td><code>&lt;br/&gt;</code></td><td>换行</td></tr><tr><td><code>&lt;hr/&gt;</code></td><td>华丽的分割线</td></tr><tr><td><code>&lt;h1&gt;&lt;/h1&gt;...&lt;h6&gt;&lt;/h6&gt;</code></td><td>6种标题效果标签。分别为h1~h6。<code>&lt;h1&gt;</code>字体最大，<code>&lt;h6&gt;</code>字体最小</td></tr></tbody></table><h4 id="marquee标签（跑马灯的实现）"><a href="#marquee标签（跑马灯的实现）" class="headerlink" title="marquee标签（跑马灯的实现）"></a>marquee标签（跑马灯的实现）</h4><h3 id="HTML常用标签之列表"><a href="#HTML常用标签之列表" class="headerlink" title="HTML常用标签之列表"></a>HTML常用标签之列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常用属性解释"><a href="#常用属性解释" class="headerlink" title="常用属性解释"></a>常用属性解释</h4><blockquote><p>type属性：disc（实心圆点）（默认）、circle（空心圆圈）、square（实心方块）</p></blockquote><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常用属性解释-1"><a href="#常用属性解释-1" class="headerlink" title="常用属性解释"></a>常用属性解释</h4><blockquote><p>属性：type编号类型，默认为整数。可选（1、A、a、Ⅰ、i）<br>属性：start起始编号，默认为1，即由最小编号开始</p></blockquote><h3 id="HTML常用标签之a标签"><a href="#HTML常用标签之a标签" class="headerlink" title="HTML常用标签之a标签"></a>HTML常用标签之a标签</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><blockquote><p><code>&lt;a 属性=&quot;属性值&quot;&gt;标签内容&lt;/a&gt;</code></p></blockquote><h4 id="常见的属性"><a href="#常见的属性" class="headerlink" title="常见的属性"></a>常见的属性</h4><ul><li><p>href – 指定目标网页的地址，该地址可以有如下类型：</p><blockquote><p>链接远程目标：通过URL地址链接到远程目标。</p><p>链接本地页面：可以通过相对路径或者绝对路径链接本地页面。</p><blockquote><p>相对路径：指相对于当前页面位置的路径<br>./：表示当前页面所在的目录<br>../：表示当前页面所在的上一级目录</p><p>绝对路径：绝对路径指当前站点中确切的路径，一般以”/”开始 例如：<code>&lt;a href=&quot;/admin/index.py&quot;&gt;后台首页&lt;/a&gt;</code></p></blockquote></blockquote></li><li><p>target</p><blockquote><p>_blank 表示在 <code>新窗口</code> 中打开目标网页<br>_self 表示在 <code>当前窗口</code> 中打开目标网页</p></blockquote></li></ul><h4 id="常见例子"><a href="#常见例子" class="headerlink" title="常见例子"></a>常见例子</h4><blockquote><p>链接到远程地址</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com.cn"</span>&gt;</span>新浪网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.qq.com"</span>&gt;</span>腾讯网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>链接到本地文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">相对路径：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"include/login.html"</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">绝对路径：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/html/123.html"</span>&gt;</span>国内新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>链接到邮箱</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:976296751@qq.com"</span>&gt;</span>给我发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>下载文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/download/winRAR.rar"</span>&gt;</span>下载WinRAR<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"download/office2007.rar"</span>&gt;</span>下载office2007<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML常用标签之div和span元素"><a href="#HTML常用标签之div和span元素" class="headerlink" title="HTML常用标签之div和span元素"></a>HTML常用标签之div和span元素</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><blockquote><p><code>&lt;div&gt;&lt;/div&gt;</code><br><code>&lt;div&gt;</code>只是一个块级元素，并无实际的意义. 主要通过CSS为其赋予不同的表现</p></blockquote><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><blockquote><p><code>&lt;span&gt;&lt;/span&gt;</code><br><code>&lt;span&gt;</code>内联行(行内元素),并无实际的意义. 主要通过CSS为其赋予不同的表现</p></blockquote><h4 id="块级元素与行内元素的区别"><a href="#块级元素与行内元素的区别" class="headerlink" title="块级元素与行内元素的区别"></a><code>块级元素与行内元素的区别</code></h4><blockquote><p>所谓块元素，是以另起一行开始渲染的元素，行内元素则不需另起一行<br>如果单独在网页中插入这两个元素，不会对页面产生任何的影响<br>这两个元素是专门为定义CSS样式而生的</p></blockquote><h3 id="HTML常用标签之img标签"><a href="#HTML常用标签之img标签" class="headerlink" title="HTML常用标签之img标签"></a>HTML常用标签之img标签</h3><h4 id="常见的用法"><a href="#常见的用法" class="headerlink" title="常见的用法"></a>常见的用法</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"URL"</span> <span class="attribute">alt</span>=<span class="string">"图片说明"</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="常见的属性用法说明"><a href="#常见的属性用法说明" class="headerlink" title="常见的属性用法说明"></a>常见的属性用法说明</h4><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>src</td><td>图像URL</td><td>规定图像的URL</td></tr><tr><td>alt</td><td>字符串</td><td>规定图像的替代文本</td></tr><tr><td>width</td><td>px / %</td><td>规定图像的宽</td></tr><tr><td>height</td><td>px / %</td><td>规定图像的高</td></tr><tr><td>border</td><td>px</td><td>图像的边框粗细</td></tr></tbody></table><h3 id="HTML常用标签之table标签"><a href="#HTML常用标签之table标签" class="headerlink" title="HTML常用标签之table标签"></a>HTML常用标签之table标签</h3><h4 id="html表格的基本结构"><a href="#html表格的基本结构" class="headerlink" title="html表格的基本结构"></a>html表格的基本结构</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h4><blockquote><ol><li><code>&lt;table&gt;&lt;/table&gt;</code>表示的表格的开始和结束</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code>表示的是表格的一行</li><li><code>&lt;td&gt;&lt;/td&gt;</code>表示的是一个单元数据格</li><li><code>&lt;th&gt;&lt;/th&gt;</code>表示表格标题单元格，且加粗居中显示</li></ol></blockquote><h4 id="table的常用属性"><a href="#table的常用属性" class="headerlink" title="table的常用属性"></a>table的常用属性</h4><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>width</td><td>px或%</td><td>表格的宽度</td></tr><tr><td>height</td><td>px或%</td><td>表格的高度</td></tr><tr><td>border</td><td>px</td><td>表格的边框的粗细</td></tr><tr><td>align</td><td>Left/center/right</td><td>元素的对齐方式</td></tr></tbody></table><h4 id="简单的案例实现"><a href="#简单的案例实现" class="headerlink" title="简单的案例实现"></a>简单的案例实现</h4><p><img src="https://ooo.0o0.ooo/2017/05/10/5912b5a507092.png" alt="FEp7t.md.png"></p><h3 id="HTML常用标签之form表单元素标签"><a href="#HTML常用标签之form表单元素标签" class="headerlink" title="HTML常用标签之form表单元素标签"></a>HTML常用标签之form表单元素标签</h3><h4 id="FORM表单的基本概念"><a href="#FORM表单的基本概念" class="headerlink" title="FORM表单的基本概念"></a>FORM表单的基本概念</h4><ul><li><p>基本概念</p><blockquote><p>HTML表单是HTML元素中较为复杂的部分，表单往往和脚本、动态页面、数据处理等功能相结合，因此它是制作动态网站很重要的内容。<br>表单一般用来收集用户的输入信息</p></blockquote></li><li><p>表单的工作原理</p><blockquote><p>访问者在浏览有表单的网页时，可填写必需的信息，然后按某个按钮提交<br>这些信息通过Internet传送到服务器上<br>服务器上专门的程序对这些数据进行处理，如果有错误会返回错误信息，并要求纠正错误</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.write(<span class="string">"Hello, world"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.write(<span class="string">'this is a test'</span>)</span><br><span class="line"> </span><br><span class="line">application = tornado.web.Application([</span><br><span class="line">    (<span class="string">r"/index"</span>, MainHandler),</span><br><span class="line">])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure><ul><li>表单的常见结构</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> id=<span class="string">"form1"</span>  method=<span class="string">"post"</span> action=<span class="string">""</span>&gt;</span><br><span class="line">    账号：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"account"</span> /&gt;&lt;<span class="keyword">br</span> /&gt;</span><br><span class="line">    密码：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span> /&gt;&lt;<span class="keyword">br</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"reset"</span>  name=<span class="string">"reset"</span>  value=<span class="string">"重置"</span> /&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>表单标记属性</li></ul><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>action</td><td>url</td><td>指定一个表单处理目标URL，表单数据将被提交到该URL地址的处理程序。如果该属性值为空，则提交到文档自身。该属性值可以为绝对地址、相对地址、文档片段，甚至是脚本代码</td></tr><tr><td>method</td><td>get或post</td><td>将表单数据提交到http服务器的方法，可能值有两个：get和post</td></tr><tr><td>enctype</td><td>application/x-www-form-urlencoded</td><td>指定表单数据的编码类型，此属性只有在method属性设置为post时才有效。默认值为application/x-www-form-urlencoded对所有字符进行编码。如果表单包含用于文件上传的控件（input type=“file”），那么这个属性值必须设为multipart/form-data ，不对字符进行编码。</td></tr></tbody></table><h4 id="补充：Get和Post提交的区别"><a href="#补充：Get和Post提交的区别" class="headerlink" title="补充：Get和Post提交的区别"></a>补充：Get和Post提交的区别</h4><ul><li>Get方式提交</li></ul><blockquote><p>如果为get，那么所提交的数据集将被作为一个由表单的所有名/值对组成的查询字符串（query string）添加到表单处理器的URL（action属性）的末尾<br>比如：<a href="http://www.oldboyedu.com/index.py?variable1=content1&amp;variable1=content2" target="_blank" rel="noopener">http://www.oldboyedu.com/index.py?variable1=content1&amp;variable1=content2</a><br>这种方法提交的信息在长度上有一定限制，而且不安全，适合简单的数据查询</p></blockquote><ul><li>Post方式提交</li></ul><blockquote><p>如果为post，那么数据集将直接发给表单处理程序，而不是以可见的URL查询字符串的形式。<br>post方法可以提交更长的数据，并且相对安全一些，传送的数据类型更多一些（不限于ASCII字符），因而适用于数据更复杂的表单</p></blockquote><h4 id="常见的-INPUT-标签"><a href="#常见的-INPUT-标签" class="headerlink" title="常见的 INPUT 标签"></a>常见的 INPUT 标签</h4><table><thead><tr><th>type属性值</th><th>空间名称</th><th>对应代码</th></tr></thead><tbody><tr><td>text</td><td>单行文本输入框</td><td><code>&lt;input type=&quot;text&quot;/&gt;</code></td></tr><tr><td>password</td><td>密码输入框</td><td><code>&lt;input type=&quot;password&quot;/&gt;</code></td></tr><tr><td>checkbox</td><td>复选框</td><td><code>&lt;input type=&quot;checkbox&quot; checked=&#39;checked&#39;/&gt;</code></td></tr><tr><td>radio</td><td>单选框</td><td><code>&lt;input type=&quot;radio&quot;/&gt;</code></td></tr><tr><td>submit</td><td>提交按钮</td><td><code>&lt;input type=&quot;submit&quot; value=&#39;提交&#39;/&gt;</code></td></tr><tr><td>reset</td><td>重置按钮</td><td><code>&lt;input type=&quot;reset&quot; value=&#39;重置&#39;/&gt;</code></td></tr><tr><td>button</td><td>普通按钮</td><td><code>&lt;input type=&quot;button&quot; value=“普通按钮”/&gt;</code></td></tr><tr><td>hidden</td><td>隐藏按钮</td><td><code>&lt;input type=&quot;hidden&quot; value=“隐藏按钮”/&gt;</code></td></tr><tr><td>file</td><td>文本选择框</td><td><code>&lt;input type=&quot;file&quot;/&gt;</code></td></tr></tbody></table><h4 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h4><ul><li>上传文件控件</li></ul><blockquote><p>当一个<br>中有“上传文件域”，必须指定MIME类型 enctype=”multipart/form-data”&gt;，否则无法上传文件<br>上传文件域，只在 method=”post” 下才有效</p></blockquote><ul><li><p>隐藏控件</p><blockquote><p><code>&lt;input type=&quot;hidden&quot; name=&quot;nid&quot; value=&quot;234&quot; /&gt;</code><br>隐藏字段对于用户是不可见的<br>隐藏字段通常会存储一个默认值<br>一般用在，修改某条数据时，用来记录数据的id号</p></blockquote></li><li><p>普通按钮</p><blockquote><p><code>&lt;input type=&quot;button&quot; name=&quot;button&quot; value=&quot;普通按钮&quot; /&gt;</code><br>定义可点击的按钮，但没有任何行为，一般配合JS使用</p></blockquote></li></ul><p><strong>各种按钮显示效果</strong></p><p><img src="https://ooo.0o0.ooo/2017/05/10/5912b5a4e8a6a.png" alt="FEih8.md.png"></p><h4 id="SELECT下拉列表"><a href="#SELECT下拉列表" class="headerlink" title="SELECT下拉列表"></a>SELECT下拉列表</h4><p><strong>常见的基本结构</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=<span class="string">"form1"</span> name=<span class="string">"form1"</span> method=<span class="string">"post"</span> action=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;select name=<span class="string">"city"</span> id=<span class="string">"city"</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">"北京"</span>&gt;北京&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">"上海"</span> selected=<span class="string">"selected"</span>&gt;上海&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">"南京"</span>&gt;南京&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">"杭州"</span>&gt;杭州&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">"深圳"</span>&gt;深圳&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>属性说明</strong></p><blockquote><p>multiple：布尔属性，设置后允许多选，否则只能选择一个<br>disabled：禁用该下拉列表<br>selected：首次显示时,为选中状态<br>value：定义发往服务器的选项值</p></blockquote><h4 id="TEXTAREA多行文本框"><a href="#TEXTAREA多行文本框" class="headerlink" title="TEXTAREA多行文本框"></a>TEXTAREA多行文本框</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">name</span>=<span class="string">"form1"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"宽度"</span> <span class="attr">rows</span>=<span class="string">"高度"</span> <span class="attr">name</span>=<span class="string">"名称"</span>&gt;</span></span><br><span class="line">    默认内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性说明</strong></p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>name</td><td>控件名称</td></tr><tr><td>rows</td><td>number</td><td>设置多行文本框的显示行数（高度）</td></tr><tr><td>cols</td><td>number</td><td>设置多行文本框的显示列数（宽度）</td></tr><tr><td>disabled</td><td>disabled</td><td>布尔属性，设置当前文本框为禁用状态</td></tr></tbody></table><h4 id="LABEL表单修饰"><a href="#LABEL表单修饰" class="headerlink" title="LABEL表单修饰"></a>LABEL表单修饰</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> id=<span class="string">"form1"</span> name=<span class="string">"form1"</span> method=<span class="string">"post"</span> action=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"username"</span>&gt;用户名&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span> id=<span class="string">"username"</span> /&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote><p>label 元素不会向用户呈现任何特殊效果<br><code>&lt;label&gt;</code> 标签的 for 属性应当与相关元素的 id 属性相同<br>结合CSS可以控制表单文本或控件对齐，美化表单</p></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><img src="https://ooo.0o0.ooo/2017/05/10/5912b5a50507f.png" alt="FEens.md.png"></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.shangzekai.xyz/2017/05/07/html基础目录/" target="_blank" rel="noopener">http://www.shangzekai.xyz/2017/05/07/html基础目录/</a></p>]]></content>
      
      <categories>
          
          <category> HTML笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML基础学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ常用命令</title>
      <link href="/2018/07/24/RabbitMQ%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/07/24/RabbitMQ%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="RabbitMQ常用命令"><a href="#RabbitMQ常用命令" class="headerlink" title="RabbitMQ常用命令"></a>RabbitMQ常用命令</h2><a id="more"></a><h3 id="服务启动关闭"><a href="#服务启动关闭" class="headerlink" title="服务启动关闭"></a>服务启动关闭</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">rabbitmq-server -detached </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">rabbitmqctl stop</span><br></pre></td></tr></table></figure><h3 id="集群配置相关命令"><a href="#集群配置相关命令" class="headerlink" title="集群配置相关命令"></a>集群配置相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop_app </span><br><span class="line">rabbitmqctl reset </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在当前集群中加入某节点</span></span><br><span class="line">rabbitmqctl join_cluster &#123;rabbit_node_name&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 某些低版本可以采用 rabbitmqctl cluster &#123;rabbit_node_name&#125;</span></span><br><span class="line">rabbitmqctl start_app </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 集群状态</span></span><br><span class="line">rabbitmqctl cluster_status</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将某节点剔除出当前集群</span></span><br><span class="line">rabbitmqctl forget_cluster_node &#123;rabbit_node_name&#125;</span><br></pre></td></tr></table></figure><h3 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启某个插件</span></span><br><span class="line">rabbitmq-plugins <span class="builtin-name">enable</span> &#123;插件名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭某个插件</span></span><br><span class="line">rabbitmq-plugins <span class="builtin-name">disable</span> &#123;插件名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有关插件名可以在 rabbitmq 的安装目录下的 plugins 目录中查看</span></span><br><span class="line"><span class="variable">$RABBITMQ_HOME</span>/plugins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举例</span></span><br><span class="line">rabbitmq-plugins <span class="builtin-name">enable</span> rabbitmq_management </span><br><span class="line">rabbitmq-plugins list</span><br></pre></td></tr></table></figure><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加用户</span></span><br><span class="line">rabbitmqctl add_user &#123;username&#125; &#123;password&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除用户</span></span><br><span class="line">rabbitmqctl delete_user &#123;username&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码</span></span><br><span class="line">rabbitmqctl change_password &#123;username&#125; &#123;newpassword&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置用户角色</span></span><br><span class="line">rabbitmqctl set_user_tags &#123;username&#125; &#123;tag&#125;</span><br><span class="line">tag 可以为 administrator, monitoring, management</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 举例</span></span><br><span class="line">rabbitmqctl add_user root root</span><br><span class="line">rabbitmqctl set_user_tags root administrator</span><br><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">rabbitmqctl set_permissions [-p vhostpath] &#123;user&#125; &#123;conf&#125; &#123;<span class="built_in">write</span>&#125; &#123;<span class="built_in">read</span>&#125;</span><br><span class="line"></span><br><span class="line">conf  <span class="comment"># 一个正则表达式match哪些配置资源能够被该用户访问</span></span><br><span class="line"><span class="built_in">write</span> <span class="comment"># 一个正则表达式match哪些配置资源能够被该用户读</span></span><br><span class="line"><span class="built_in">read</span>  <span class="comment"># 一个正则表达式match哪些配置资源能够被该用户访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看（指定vhost）所有用户的权限信息</span></span><br><span class="line">rabbitmqctl list_permissions [-p vhostPath]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定用户的权限信息</span></span><br><span class="line">rabbitmqctl list_user_permissions &#123;username&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除用户的权限信息</span></span><br><span class="line">rabbitmqctl clear_permissions [-p vhostPath] &#123;username&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举例</span></span><br><span class="line">rabbitmqctl set_permissions -p / root <span class="string">"."</span> <span class="string">"."</span> <span class="string">".*"</span></span><br></pre></td></tr></table></figure><h3 id="获取服务器状态信息"><a href="#获取服务器状态信息" class="headerlink" title="获取服务器状态信息"></a>获取服务器状态信息</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 服务器状态</span></span><br><span class="line">rabbitmqctl status</span><br><span class="line"></span><br><span class="line"><span class="meta"># 队列信息</span></span><br><span class="line">rabbitmqctl list_queues -p vhostpath</span><br><span class="line"></span><br><span class="line"><span class="meta"># queueinfoitem可以为</span></span><br><span class="line">name, durable, auto_delete, arguments, messages_ready, messages_unacknowled, messages, consumers, memory.</span><br><span class="line"></span><br><span class="line"><span class="meta"># Exchange信息</span></span><br><span class="line">rabbitmqctl list_exchanges -p vhostpath</span><br><span class="line"></span><br><span class="line"><span class="meta"># exchangeinfoitem有</span></span><br><span class="line">name, type, durable, auto_delete, <span class="keyword">internal</span>, arguments.</span><br><span class="line"></span><br><span class="line"><span class="meta"># Binding信息</span></span><br><span class="line">rabbitmqctl list_bindings -p vhostpath</span><br><span class="line"></span><br><span class="line"><span class="meta"># bindinginfoitem有</span></span><br><span class="line">source_name, source_kind, destination_name, destination_kind, routing_key, arguments.等</span><br><span class="line"></span><br><span class="line"><span class="meta"># connection信息</span></span><br><span class="line">rabbitmqctl list_connections [connectioninfoitem ...]</span><br><span class="line"></span><br><span class="line"><span class="meta"># connectioninfoitem有</span></span><br><span class="line">recv_oct，recv_cnt，send_oct，send_cnt，send_pend 等。</span><br><span class="line"></span><br><span class="line"><span class="meta"># channel信息</span></span><br><span class="line">rabbitmqctl list_channels [channelinfoitem ...]</span><br><span class="line"></span><br><span class="line"><span class="meta"># channelinfoitem有</span></span><br><span class="line">consumer_count，messages_unacknowledged，messages_uncommitted，acks_uncommitted，messages_unconfirmed，prefetch_count，client_flow_blocked</span><br><span class="line"></span><br><span class="line"><span class="meta"># 举例</span></span><br><span class="line">rabbitmqctl list_queues name messages_ready pid slave_pids</span><br></pre></td></tr></table></figure><h3 id="更改节点类型"><a href="#更改节点类型" class="headerlink" title="更改节点类型"></a>更改节点类型</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rabbitmqctl</span> stop_app</span><br><span class="line"><span class="title">rabbitmqctl</span> change_cluster_node_<span class="keyword">type</span> disc</span><br><span class="line">或</span><br><span class="line"><span class="title">rabbitmqctl</span> change_cluster_node_<span class="keyword">type</span> ram</span><br><span class="line"><span class="title">rabbitmqctl</span> start_app</span><br></pre></td></tr></table></figure><h3 id="vhost管理"><a href="#vhost管理" class="headerlink" title="vhost管理"></a>vhost管理</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加vhost</span></span><br><span class="line">rabbitmqctl <span class="keyword">add</span><span class="bash"> vhost &#123;name&#125;</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 删除vhost</span></span></span><br><span class="line"><span class="bash">rabbitmqctl delete vhost &#123;name&#125;</span></span><br></pre></td></tr></table></figure><h3 id="镜像队列的设置"><a href="#镜像队列的设置" class="headerlink" title="镜像队列的设置"></a>镜像队列的设置</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">镜像队列的配置通过添加<span class="built_in"> policy </span>完成，policy 添加的命令为</span><br><span class="line">rabbitmqctl set_policy [-p Vhost] Name Pattern Definition [Priority] </span><br><span class="line"></span><br><span class="line">-p Vhost:         # 可选参数，针对指定 vhost 下的<span class="built_in"> queue </span>进行设置</span><br><span class="line">Name:             #<span class="built_in"> policy </span>的名称</span><br><span class="line">Pattern:          #<span class="built_in"> queue </span>的匹配模式（正则表达式）</span><br><span class="line">Definition:       # 镜像定义，包括三个部分 ha-mode，ha-params，ha-sync-mode</span><br><span class="line">    ha-mode:      # 指明镜像队列的模式，有效值为 all/exactly/nodes</span><br><span class="line">        all       # 表示在集群所有的节点上进行镜像</span><br><span class="line">        exactly   # 表示在指定个数的节点上进行镜像，节点的个数由 ha-params 指定</span><br><span class="line">        nodes     # 表示在指定的节点上进行镜像，节点名称通过 ha-params 指定</span><br><span class="line">    ha-params:    # ha-mode模式需要用到的参数</span><br><span class="line">    ha-sync-mode: # 镜像队列中消息的同步方式，有效值为 automatic，manually</span><br><span class="line">                  # 有效值为 automatic（自动同步），manually（手动同步），默认是 manually</span><br><span class="line">                  # 请注意一定要记得设置为 automatic（自动同步），否则消息在镜像队列中是不会自动同步的（即普通集群模式），只能通过命令手动去同步</span><br><span class="line">Priority:         # 可选参数，policy 的优先级</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对队列名称以 hello 开头的所有队列进行镜像，并在集群的两个节点上完成镜像</span></span><br><span class="line"><span class="comment"># policy 的设置命令为</span></span><br><span class="line">rabbitmqctl <span class="keyword">set</span>_policy hello-ha <span class="string">"^hello"</span> '&#123;<span class="string">"ha-mode"</span>:<span class="string">"exactly"</span>,<span class="string">"ha-params"</span><span class="function">:2</span>,<span class="string">"ha-sync-mode"</span>:<span class="string">"automatic"</span>&#125;'</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对队列名称以 “queue_” 开头的所有队列进行镜像，并在集群的两个节点上完成进行</span></span><br><span class="line"><span class="comment"># policy 的设置命令为</span></span><br><span class="line">rabbitmqctl <span class="keyword">set</span>_policy <span class="params">--priority</span> 0 <span class="params">--apply-to</span> queues mirror_queue <span class="string">"^queue_"</span> '&#123;<span class="string">"ha-mode"</span>:<span class="string">"exactly"</span>,<span class="string">"ha-params"</span><span class="function">:2</span>,<span class="string">"ha-sync-mode"</span>:<span class="string">"automatic"</span>&#125;'</span><br></pre></td></tr></table></figure><h3 id="policy-相关解释"><a href="#policy-相关解释" class="headerlink" title="policy 相关解释"></a>policy 相关解释</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name：      #<span class="built_in"> policy </span>策略的唯一名称</span><br><span class="line">Pattern：   # 用于匹配 exchange 和<span class="built_in"> queue </span>等名称的正则表达式</span><br><span class="line">Apply <span class="keyword">to</span>：  # 指定将此<span class="built_in"> policy </span>应用到哪些项上（例如：exchange，queue等）</span><br><span class="line">Priority：  # 可选参数，policy 的优先级，exchange 和<span class="built_in"> queue </span>名称可以匹配到多个 policy，优先级则定义了<span class="built_in"> policy </span>被执行的顺序</span><br><span class="line">Definition：# 参数定义</span><br></pre></td></tr></table></figure><h3 id="消息的同步"><a href="#消息的同步" class="headerlink" title="消息的同步"></a>消息的同步</h3><blockquote><p>将新节点加入已存在的镜像队列是，默认情况下 <code>ha-sync-mode=manual</code>，镜像队列中的消息不会主动同步到新节点，除非显式调用同步命令。<br>当调用同步命令后，队列开始阻塞，无法对其进行操作，直到同步完毕。<br>当 <code>ha-sync-mode=automatic</code> 时，新加入节点时会默认同步已知的镜像队列。<br>由于同步过程的限制，所以不建议在生产的 active 队列（有生产消费消息）中操作。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以使用下面的命令来查看那些 slaves 已经完成同步</span></span><br><span class="line">rabbitmqctl list_queues name slave_pids synchronised_slave_pids</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以通过手动的方式同步一个 queue</span></span><br><span class="line">rabbitmqctl sync_queue name</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同样也可以取消某个 queue 的同步功能</span></span><br><span class="line">rabbitmqctl cancel_sync_queue name</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当然这些都可以通过 management 插件来设置</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/u013256816/article/details/53524814" target="_blank" rel="noopener">https://blog.csdn.net/u013256816/article/details/53524814</a></p>]]></content>
      
      <categories>
          
          <category> RabbitMQ笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ常用命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ用户管理</title>
      <link href="/2018/07/24/RabbitMQ%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
      <url>/2018/07/24/RabbitMQ%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="RabbitMQ-用户管理"><a href="#RabbitMQ-用户管理" class="headerlink" title="RabbitMQ 用户管理"></a>RabbitMQ 用户管理</h2><a id="more"></a><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><blockquote><p>在 <code>RabbitMQ</code> 中，用户是访问控制（Access Control）的基本单元，且单个用户可以跨越多个<code>vhost</code> 进行授权。<br>针对一至多个 <code>vhost</code>，用户可以被赋予不同级别的访问权限，并使用标准的用户名和密码来认证用户。<br>创建用户的命令为：<code>rabbitmqctl add_user {username} {password}</code>。<br>其中<br><code>username</code> 表示要创建的用户名称。<br><code>password</code> 表示创建用户登录的密码。<br>具体创建一个用户名为 <code>root</code>、密码为 <code>root123</code> 的用户</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rabbitmqctl add_user root root@123</span><br><span class="line">Creating<span class="built_in"> user </span><span class="string">"root"</span></span><br></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>可以通过<br><code>rabbitmqctl change_password {username} {newpassword}</code><br>命令来更改指定用户的密码<br>其中<br><code>username</code> 表示要变更密码的用户名称<br><code>newpassword</code> 表示要变更的新的密码</p><blockquote><p>举例：将 <code>root</code>用户的密码变更为 <code>root321</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rabbitmqctl change_password root root@321</span><br><span class="line">Changing password <span class="keyword">for</span><span class="built_in"> user </span><span class="string">"root"</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="清除密码"><a href="#清除密码" class="headerlink" title="清除密码"></a>清除密码</h3><p>同样可以清除密码，这样用户就不能使用密码登录了<br>对于的操作命令为：<br><code>rabbitmqctl clear_password {username}</code><br>其中<br><code>username</code> 表示要清楚密码的用户名称</p><h3 id="验证用户"><a href="#验证用户" class="headerlink" title="验证用户"></a>验证用户</h3><p>使用<br><code>rabbitmqctl authenticate_user {username} {password}</code><br>可以通过密码来验证用户<br>其中<br><code>username</code> 表示需要被验证的用户名称<br><code>password</code> 表示密码</p><blockquote><p>下面示例中分别采用 <code>root321</code> 和 <code>root322</code> 来验证 <code>root</code> 用户<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rabbitmqctl authenticate_user root root@321</span><br><span class="line">Authenticating<span class="built_in"> user </span><span class="string">"root"</span></span><br><span class="line">Success</span><br><span class="line"></span><br><span class="line">[root@node1 ~]# rabbitmqctl authenticate_user root root@322</span><br><span class="line">Authenticating<span class="built_in"> user </span><span class="string">"root"</span></span><br><span class="line">Error: failed <span class="keyword">to</span> authenticate<span class="built_in"> user </span><span class="string">"root"</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>删除用户的命令是<br><code>rabbitmqctl delete_user {username}</code><br>其中<br><code>username</code> 表示要删除的用户名称</p><blockquote><p>删除用户 <code>root</code> 的示例如下<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rabbitmqctl delete_user root</span><br><span class="line">Deleting<span class="built_in"> user </span><span class="string">"root"</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="查询用户列表"><a href="#查询用户列表" class="headerlink" title="查询用户列表"></a>查询用户列表</h3><p><code>rabbitmqctl list_users</code> 命令可以用来罗列当前的所有用户<br>每个结果行都包含用户名称，其后紧跟用户的角色（tags）</p><blockquote><p>示例代码如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rabbitmqctl list_users</span><br><span class="line">Listing users</span><br><span class="line">guest        [administrator]</span><br><span class="line">root          []</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="用户的角色分为-5-种类型"><a href="#用户的角色分为-5-种类型" class="headerlink" title="用户的角色分为 5 种类型"></a>用户的角色分为 <code>5</code> 种类型</h3><p><code>none</code>：无任何角色。新创建的用户的角色默认为 <code>none</code>。<br><code>management</code>：可以访问 <code>Web</code> 管理页面。<br><code>policymaker</code>：包含 <code>management</code> 的所有权限，并且可以管理策略（policy）和参数（parameter）。<br><code>monitoring</code>：包含 <code>management</code> 的所有权限，并且可以看到所有连接（connections）、信道（channels）以及节点相关的信息。<br><code>administartor</code>：包含 <code>monitoring</code> 的所有权限，并且可以管理用户、虚拟主机、权限、策略、参数等等。<code>administator</code> 代表了最高的权限。 </p><h3 id="设置用户角色"><a href="#设置用户角色" class="headerlink" title="设置用户角色"></a>设置用户角色</h3><p>用户的角色可以通过<br><code>rabbitmqctl set_user_tags {username} {tag...}</code><br>命令设置。<br>其中<br><code>username</code> 参数表示需要设置角色的用户名称。<br><code>tag</code> 参数用于设置 <code>0</code> 个、<code>1</code> 个 或者 <code>多</code> 个的角色，设置之后任何之前现有的身份都会被删除。</p><blockquote><p>使用示例如下：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl set_user_tags root monitoring</span></span><br><span class="line">Setting tags <span class="keyword">for</span> user <span class="string">"root"</span> <span class="keyword">to</span> [monitoring]</span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl list_users -q</span></span><br><span class="line">guest        [administrator]</span><br><span class="line">root         [monitoring]</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl set_user_tags root policymaker -q</span></span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl list_users -q</span></span><br><span class="line">guest        [administrator]</span><br><span class="line">root         [policymaker]</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl set_user_tags root</span></span><br><span class="line">Setting tags <span class="keyword">for</span> user <span class="string">"root"</span> <span class="keyword">to</span> []</span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl list_users -q</span></span><br><span class="line">guest        [administrator]</span><br><span class="line">root         []</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl set_user_tags root policymaker,management</span></span><br><span class="line">Setting tags <span class="keyword">for</span> user <span class="string">"root"</span> <span class="keyword">to</span> [<span class="string">'policymaker,management'</span>]</span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl list_users -q</span></span><br><span class="line">guest        [administrator]</span><br><span class="line">root         [policymaker,management]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/u013256816/article/details/78181306" target="_blank" rel="noopener">https://blog.csdn.net/u013256816/article/details/78181306</a></p>]]></content>
      
      <categories>
          
          <category> RabbitMQ笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ用户管理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ集群管理</title>
      <link href="/2018/07/24/RabbitMQ%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/"/>
      <url>/2018/07/24/RabbitMQ%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="RabbitMQ-集群管理"><a href="#RabbitMQ-集群管理" class="headerlink" title="RabbitMQ 集群管理"></a>RabbitMQ 集群管理</h2><a id="more"></a><h3 id="rabbitmqctl-join-cluster-cluster-node-–ram"><a href="#rabbitmqctl-join-cluster-cluster-node-–ram" class="headerlink" title="rabbitmqctl join_cluster {cluster_node} [–ram]"></a>rabbitmqctl join_cluster {cluster_node} [–ram]</h3><blockquote><p>将节点加入指定集群中。在这个命令执行前需要停止 <code>RabbitMQ</code> 应用并重置节点。</p></blockquote><h3 id="rabbitmqctl-cluster-status"><a href="#rabbitmqctl-cluster-status" class="headerlink" title="rabbitmqctl cluster_status"></a>rabbitmqctl cluster_status</h3><blockquote><p>显示集群的状态</p></blockquote><h3 id="rabbitmqctl-change-cluster-node-type-disc-ram"><a href="#rabbitmqctl-change-cluster-node-type-disc-ram" class="headerlink" title="rabbitmqctl change_cluster_node_type {disc|ram}"></a>rabbitmqctl change_cluster_node_type {disc|ram}</h3><blockquote><p>修改集群节点的类型。在这个命令执行前需要停止 <code>RabbitMQ</code> 应用</p></blockquote><h3 id="rabbitmqctl-forget-cluster-node-–offline"><a href="#rabbitmqctl-forget-cluster-node-–offline" class="headerlink" title="rabbitmqctl forget_cluster_node [–offline]"></a>rabbitmqctl forget_cluster_node [–offline]</h3><blockquote><p>将节点从集群中删除，允许离线执行</p></blockquote><h3 id="rabbitmqctl-update-cluster-nodes-clusternode"><a href="#rabbitmqctl-update-cluster-nodes-clusternode" class="headerlink" title="rabbitmqctl update_cluster_nodes {clusternode}"></a>rabbitmqctl update_cluster_nodes {clusternode}</h3><blockquote><p>在集群中的节点应用启动前咨询 <code>clusternode</code> 节点的最新信息，并更新相应的集群信息。<br>这个和 <code>join_cluster</code> 不同，它不加入集群。<br>考虑这样一种情况，<code>节点A</code> 和 <code>节点B</code> 都在集群中，当节点A离线了，<code>节点C</code> 又和 <code>节点B</code> 组成了一个集群，然后 <code>节点B</code> 又离开了集群，当 <code>A</code> 醒来的时候，它会尝试联系 <code>节点B</code>，但是这样会失败，因为节点B已经不在集群中了。<br><code>rabbitmqctl update_cluster_nodes -n A C</code> 可以解决这种场景。 </p></blockquote><blockquote><p>示例如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设已有 node1 和 node2 组成的集群</span></span><br><span class="line"><span class="comment"># 1. 初始状态</span></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@node1</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@node1,rabbit@node2]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit@node2,rabbit@node1]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@node1"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit@node2,[]&#125;,&#123;rabbit@node1,[]&#125;]&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 关闭 node1 节点的应用</span></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">Stopping rabbit application on node rabbit@node1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 之后将 node3 加入到集群中（rabbitmqctl join_cluster rabbit<span class="doctag">@node</span>2）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 再将 node2 节点的应用关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 最后启动 node1 节点的应用，此时会报错</span></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl start_app</span></span><br><span class="line">Starting node rabbit@node1</span><br><span class="line">BOOT FAILED</span><br><span class="line">===========</span><br><span class="line">Timeout contacting cluster <span class="symbol">nodes:</span> [rabbit@node2].</span><br><span class="line">....(省略)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 如果在启动 node1 节点的应用之前咨询 node3 并更新相关集群信息则可以解决这个问题</span></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl update_cluster_nodes rabbit<span class="doctag">@node</span>3</span></span><br><span class="line">Updating cluster nodes <span class="keyword">for</span> rabbit@node1 from rabbit@node3</span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl start_app</span></span><br><span class="line">Starting node rabbit@node1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 最终集群状态</span></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@node1</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@node1,rabbit@node3]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit@node3,rabbit@node1]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@node1"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit@node3,[]&#125;,&#123;rabbit@node1,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-force-boot"><a href="#rabbitmqctl-force-boot" class="headerlink" title="rabbitmqctl force_boot"></a>rabbitmqctl force_boot</h3><p>确保节点可以启动，即使它不是最后一个关闭的节点。<br>通常情况下，当关闭整个 <code>RabbitMQ</code> 集群时，重启的第一个节点应该是最后关闭的节点，因为它可以看到其它节点所看不到的事情。<br>但是有时会有一些异常情况出现，比如整个集群都掉电而所有节点都认为它不是最后一个关闭的。在这种情况下，可以调用 <code>rabbitmqctl force_boot</code> 命令，这就告诉节点可以无条件的启动节点。<br>在此节点关闭后，集群的任何变化，它都会丢失。<br>如果最后一个关闭的节点永久丢失了，那么你需要优先使用 <code>rabbitmqctl forget_cluster_node –offline</code> 命令，因为它可以确保镜像队列的正常运转。 </p><blockquote><p>示例如下：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># rabbitmqctl force_boot</span></span><br><span class="line">Forcing boot <span class="keyword">for</span> Mnesia dir /data/app/rabbitmq/var/<span class="class"><span class="keyword">lib</span>/<span class="title">rabbitmq</span>/<span class="title">mnesia</span>/<span class="title">rabbit</span>@<span class="title">node2</span></span></span><br><span class="line">[root@node2 ~]<span class="comment"># rabbitmq-server –detached</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-sync-queue-p-vhost-queue"><a href="#rabbitmqctl-sync-queue-p-vhost-queue" class="headerlink" title="rabbitmqctl sync_queue [-p vhost] {queue}"></a>rabbitmqctl sync_queue [-p vhost] {queue}</h3><blockquote><p>指示未同步队列 <code>queue</code> 的 <code>slave</code> 镜像可以同步 <code>master</code> 镜像行的内容。<br>同步期间此队列会被阻塞（所有此队列的生产消费者都会被阻塞），直到同步完成。<br>此条命令执行成功的前提是队列<code>queue</code> 配置了镜像。<br>注意，未同步队列中的消息被耗尽后，最终也会变成同步，此命令主要用于未耗尽的队列。 </p></blockquote><blockquote><p>示例如下：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl sync_queue queue</span></span><br><span class="line">Synchronising queue <span class="string">'queue'</span> <span class="keyword">in</span> vhost <span class="string">'/'</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-cancel-sync-queue-p-vhost-queue"><a href="#rabbitmqctl-cancel-sync-queue-p-vhost-queue" class="headerlink" title="rabbitmqctl cancel_sync_queue [-p vhost] {queue}"></a>rabbitmqctl cancel_sync_queue [-p vhost] {queue}</h3><blockquote><p>取消队列 <code>queue</code> 同步镜像的操作。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl cancel_sync_queue queue</span></span><br><span class="line">Stopping synchronising queue <span class="string">'queue'</span> <span class="keyword">in</span> vhost <span class="string">'/'</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-set-cluster-name-name"><a href="#rabbitmqctl-set-cluster-name-name" class="headerlink" title="rabbitmqctl set_cluster_name {name}"></a>rabbitmqctl set_cluster_name {name}</h3><blockquote><p>设置集群名称。<br>集群名称在客户端连接时会通报给客户端。<br><code>Federation</code> 和 <code>Shovel</code> 插件也会有用到集群名称的地方。<br>集群名称默认是集群中第一个节点的名称，通过这个命令可以重新设置。 </p></blockquote><blockquote><p>示例如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@node1</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@node1,rabbit@node2]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit@node2,rabbit@node1]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@node1"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit@node2,[]&#125;,&#123;rabbit@node1,[]&#125;]&#125;]</span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl set_cluster_name cluster_hidden</span></span><br><span class="line">Setting cluster name to cluster_hidden</span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@node1</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@node1,rabbit@node2]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit@node2,rabbit@node1]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"cluster_hidden"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit@node2,[]&#125;,&#123;rabbit@node1,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/u013256816/article/details/78348761" target="_blank" rel="noopener">https://blog.csdn.net/u013256816/article/details/78348761</a></p>]]></content>
      
      <categories>
          
          <category> RabbitMQ笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ集群管理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ应用管理</title>
      <link href="/2018/07/24/RabbitMQ%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/"/>
      <url>/2018/07/24/RabbitMQ%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="RabbitMQ-应用管理"><a href="#RabbitMQ-应用管理" class="headerlink" title="RabbitMQ 应用管理"></a>RabbitMQ 应用管理</h2><p>本文主要阐述应用与集群相关的一些操作管理命令，包括关闭、重置、开启服务，还有建立集群的一些信息。</p><a id="more"></a><h3 id="rabbitmqctl-stop-pid-file"><a href="#rabbitmqctl-stop-pid-file" class="headerlink" title="rabbitmqctl stop [pid_file]"></a>rabbitmqctl stop [pid_file]</h3><blockquote><p>用于停止运行 <code>RabbitMQ</code> 的 <code>Erlang</code> 虚拟机和 <code>RabbitMQ</code> 服务应用。<br>如果指定了 <code>pid_file</code>，还需要等待指定进程的结束。<br>其中 <code>pid_file</code> 是通过调用 <code>rabbitmq-server</code> 启动 <code>RabbitMQ</code> 服务时创建的，默认情况下存放于 <code>Mnesia</code> 目录中，可以通过 <code>RABBITMQ_PID_FILE</code> 这个环境变量来改变存放路径。<br><code>注意</code>，如果是 <code>rabbitmq-server –detach</code> 启动的 <code>RabbitMQ</code> 服务则不会生成 <code>pid_file</code> 这个文件。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl stop</span></span><br><span class="line">/data/app/rabbitmq/var/<span class="class"><span class="keyword">lib</span>/<span class="title">rabbitmq</span>/<span class="title">mnesia</span>/<span class="title">rabbit</span>\@<span class="title">node1</span>.<span class="title">pid</span></span></span><br><span class="line">Stopping and halting node rabbit@node1</span><br><span class="line"></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl stop</span></span><br><span class="line">Stopping and halting node rabbit@node1</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-shutdown"><a href="#rabbitmqctl-shutdown" class="headerlink" title="rabbitmqctl shutdown"></a>rabbitmqctl shutdown</h3><blockquote><p>用于停止运行 <code>RabbitMQ</code> 的 <code>Erlang</code> 虚拟机 和 <code>RabbitMQ</code> 服务应用。<br>执行这个命令会阻塞直到 <code>Erlang</code> 虚拟机进程的退出。<br>如果 <code>RabbitMQ</code> 没有成功关闭，则会返回一个非零值。<br>这个命令和 <code>rabbitmqctl stop</code> 的不同的是，它不需要指定 <code>pid_file</code> 而可以阻塞等待指定进程的关闭。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl shutdown</span></span><br><span class="line">Shutting down RabbitMQ <span class="keyword">node</span> <span class="title">rabbit</span>@node1 running at PID <span class="number">1706</span></span><br><span class="line">Waiting for PID <span class="number">1706</span> to terminate</span><br><span class="line">RabbitMQ <span class="keyword">node</span> <span class="title">rabbit</span>@node1 running at PID <span class="number">1706</span> successfully shut down</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-stop-app"><a href="#rabbitmqctl-stop-app" class="headerlink" title="rabbitmqctl stop_app"></a>rabbitmqctl stop_app</h3><blockquote><p>停止 <code>RabbitMQ</code> 服务应用，但是 <code>Erlang</code> 虚拟机还是处于运行状态。<br>此命令优先执行其他管理操作（这些管理操作需要先停止 <code>RabbitMQ</code> 应用），比如 <code>rabbitmqctl reset</code>。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">Stopping rabbit application on <span class="keyword">node</span> <span class="title">rabbit</span>@node1</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-start-app"><a href="#rabbitmqctl-start-app" class="headerlink" title="rabbitmqctl start_app"></a>rabbitmqctl start_app</h3><blockquote><p>启动 <code>RabbitMQ</code> 应用。<br>此命令典型的用途是在执行了其他管理操作之后，重新启动之前停止的 RabbitMQ 应用，譬如<code>rabbitmqctl reset</code>。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl start_app</span></span><br><span class="line">Starting <span class="keyword">node</span> <span class="title">rabbit</span>@node1</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-wait-pid-file"><a href="#rabbitmqctl-wait-pid-file" class="headerlink" title="rabbitmqctl wait [pid_file]"></a>rabbitmqctl wait [pid_file]</h3><blockquote><p>等待 <code>RabbitMQ</code> 应用的启动。<br>它会等到 <code>pid_file</code> 的创建，然后等待 <code>pid_file</code> 中的所代表的进程启动。<br>当指定的进程没有启动 <code>RabbitMQ</code> 应用而关闭时将会返回失败。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>node1 ~]# rabbitmqctl wait /<span class="keyword">data</span>/app/rabbitmq/<span class="keyword">var</span>/lib/rabbitmq/mnesia/rabbit\<span class="meta">@node1</span>.pid</span><br><span class="line">Waiting <span class="keyword">for</span> <span class="symbol">rabbit@</span>node1</span><br><span class="line">pid <span class="keyword">is</span> <span class="number">3468</span></span><br><span class="line"></span><br><span class="line">[<span class="symbol">root@</span>node1 ~]# rabbitmqctl wait /<span class="keyword">data</span>/app/rabbitmq/<span class="keyword">var</span>/lib/rabbitmq/mnesia/rabbit\<span class="meta">@node1</span>.pid</span><br><span class="line">Waiting <span class="keyword">for</span> <span class="symbol">rabbit@</span>node1</span><br><span class="line">pid <span class="keyword">is</span> <span class="number">3468</span></span><br><span class="line">Error: process_not_running</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-reset"><a href="#rabbitmqctl-reset" class="headerlink" title="rabbitmqctl reset"></a>rabbitmqctl reset</h3><blockquote><p>将 <code>RabbitMQ</code> 节点重置还原到最初状态，包括从原所在的集群中删除此节点，从管理数据库中删除所有的配置数据，如已配置的用户、vhost等，以及删除所有的持久化消息。<br>执行 <code>rabbitmqctl reset</code> 命令前必须停止 <code>RabbitMQ</code> 应用（比如先执行 <code>rabbitmqctl stop_app</code>）。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">Stopping rabbit application on <span class="keyword">node</span> <span class="title">rabbit</span>@node1</span><br><span class="line"></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl reset</span></span><br><span class="line">Resetting <span class="keyword">node</span> <span class="title">rabbit</span>@node1</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-force-reset"><a href="#rabbitmqctl-force-reset" class="headerlink" title="rabbitmqctl force_reset"></a>rabbitmqctl force_reset</h3><blockquote><p>强制将 <code>RabbitMQ</code> 节点重置还原到最初状态。<br>不同于 <code>rabbitmqctl reset</code>，<code>rabbitmqctl force_reset</code> 命令不论当前管理数据库的状态和集群配置是什么，会无条件地重置节点。<br>它只能在数据库或集群配置已损坏的情况下才可使用。<br>与 <code>rabbitmqctl reset</code> 命令一下，执行 <code>rabbitmqctl force_reset</code> 命令前必须先停止<code>RabbitMQ</code> 应用。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">Stopping rabbit application on <span class="keyword">node</span> <span class="title">rabbit</span>@node1</span><br><span class="line"></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl force_reset</span></span><br><span class="line">Forcefully resetting <span class="keyword">node</span> <span class="title">rabbit</span>@node1</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-rotate-logs-suffix"><a href="#rabbitmqctl-rotate-logs-suffix" class="headerlink" title="rabbitmqctl rotate_logs {suffix}"></a>rabbitmqctl rotate_logs {suffix}</h3><blockquote><p>指示 <code>RabbitMQ</code> 节点轮换日志文件。<br><code>RabbitMQ</code> 节点会将原来的日志文件中的内容追加到 <code>“原始名称+后缀”</code>的日志文件中，然后再将新的日志内容记录到新创建的日志中（与原日志文件同名）。<br>当目标文件不存在时，将会重新创建。<br>如果不指定 <code>suffix</code>，那么则日志文件只是重新打开而不会进行轮换。</p></blockquote><blockquote><p>示例如下所示<br>原日志文件为 <a href="mailto:`rabbit@node1.log" target="_blank" rel="noopener">`rabbit@node1.log</a><code>和</code><a href="mailto:rabbit@node1-sasl.log" target="_blank" rel="noopener">rabbit@node1-sasl.log</a><code>，轮换日志之后，原日志文件中的内容就被追加到</code><a href="mailto:rabbit@node1.log.1" target="_blank" rel="noopener">rabbit@node1.log.1</a><code>和</code><a href="mailto:rabbit@node1-sasl.log.1" target="_blank" rel="noopener">rabbit@node1-sasl.log.1</a><code>日志中，之后重新建立</code><a href="mailto:rabbit@node1.log" target="_blank" rel="noopener">rabbit@node1.log</a><code>和</code><a href="mailto:rabbit@node1-sasl.log" target="_blank" rel="noopener">rabbit@node1-sasl.log</a>` 文件用来接收新的日志。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@node1</span> rabbitmq]<span class="meta"># pwd</span></span><br><span class="line">/data/app/rabbitmq/var/<span class="built_in">log</span>/rabbitmq</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@node1</span> rabbitmq]<span class="meta"># ll</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1024127</span> Aug <span class="number">18</span> <span class="number">11</span>:<span class="number">56</span> rabbit<span class="symbol">@node1</span>.<span class="built_in">log</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root  <span class="number">720553</span> Aug <span class="number">17</span> <span class="number">19</span>:<span class="number">16</span> rabbit<span class="symbol">@node1</span>-sasl.<span class="built_in">log</span></span><br><span class="line">[root<span class="symbol">@node1</span> rabbitmq]<span class="meta"># rabbitmqctl rotate_logs .1</span></span><br><span class="line">Rotating logs <span class="keyword">to</span> files <span class="keyword">with</span> suffix <span class="string">".1"</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@node1</span> rabbitmq]<span class="meta"># ll</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root       <span class="number">0</span> Aug <span class="number">18</span> <span class="number">12</span>:<span class="number">05</span> rabbit<span class="symbol">@node1</span>.<span class="built_in">log</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1024202</span> Aug <span class="number">18</span> <span class="number">12</span>:<span class="number">05</span> rabbit<span class="symbol">@node1</span>.<span class="built_in">log</span><span class="number">.1</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root       <span class="number">0</span> Aug <span class="number">18</span> <span class="number">12</span>:<span class="number">05</span> rabbit<span class="symbol">@node1</span>-sasl.<span class="built_in">log</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root  <span class="number">720553</span> Aug <span class="number">18</span> <span class="number">12</span>:<span class="number">05</span> rabbit<span class="symbol">@node1</span>-sasl.<span class="built_in">log</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-hipe-compile-directory"><a href="#rabbitmqctl-hipe-compile-directory" class="headerlink" title="rabbitmqctl hipe_compile {directory}"></a>rabbitmqctl hipe_compile {directory}</h3><blockquote><p>将部分 <code>RabbitMQ</code> 代码用 <code>HiPE（HiPE是指High Performance Erlang ，是Erlang版的JIT）</code>编译，并且将编译后的 <code>.beam</code> 文件（beam 文件是 Erlang 编译器生成的文件格式，可以直接加载到 Erlang 虚拟机中运行的文件格式）保存到指定的文件目录中。<br>如果这个目录不存在则会自行创建。<br>如果这个目录中原本有任何 <code>.beam</code> 文件，则会在执行编译前被删除。<br>如果要使用预编译的这些文件，需要设置 <code>RABBITMQ_SERVER_CODE_PATH</code> 这个环境变量来指定<code>hipe_compile</code> 调用的路径。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 rabbitmq]# rabbitmqctl hipe_compile /data/app/rabbitmq/tmp/rabbit-hipe/ebin</span><br><span class="line">HiPE compiling:  |---------------------------------------------------------|</span><br><span class="line">                 |#########################################################|</span><br><span class="line">Compiled <span class="number">57</span> modules <span class="keyword">in</span> <span class="number">55</span>s</span><br><span class="line">[root@node1 rabbitmq]# ls /opt/rabbitmq/tmp/rabbit-hipe/ebin</span><br><span class="line">array.beam              proplists.beam                    rabbit_misc.beam</span><br><span class="line">credit_flow.beam        qlc.beam                          rabbit_msg_file.beam</span><br><span class="line">delegate.beam           queue.beam                        rabbit_msg_store.beam</span><br><span class="line">dict.beam               rabbit_amqqueue.beam              rabbit_msg_store_ets_index.beam</span><br><span class="line">file_handle_cache.beam  rabbit_amqqueue_process.beam      rabbit_net.beam</span><br><span class="line">gb_sets.beam            rabbit_basic.beam                 rabbit_queue_index.beam</span><br><span class="line">gb_trees.beam           rabbit_binary_generator.beam      rabbit_reader.beam</span><br><span class="line">gen.beam                rabbit_binary_parser.beam         rabbit_router.beam</span><br><span class="line">gen_fsm.beam            rabbit_channel.beam               rabbit_trace.beam</span><br><span class="line">gen_server2.beam        rabbit_command_assembler.beam     rabbit_variable_queue.beam</span><br><span class="line">lists.beam              rabbit_event.beam                 rabbit_writer.beam</span><br><span class="line">lqueue.beam             rabbit_exchange.beam              rpc.beam</span><br><span class="line">mnesia.beam             rabbit_exchange_decorator.beam    sets.beam</span><br><span class="line">mnesia_lib.beam         rabbit_exchange_type_direct.beam  sofs.beam</span><br><span class="line">mnesia_tm.beam          rabbit_exchange_type_fanout.beam  ssl.beam</span><br><span class="line">orddict.beam            rabbit_exchange_type_topic.beam   ssl_connection.beam</span><br><span class="line">ordsets.beam            rabbit_framing_amqp_0_9_1.beam    ssl_record.beam</span><br><span class="line">pmon.beam               rabbit_guid.beam                  tls_connection.beam</span><br><span class="line">priority_queue.beam     rabbit_limiter.beam               tls_record.beam</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/u013256816/article/details/78221439" target="_blank" rel="noopener">https://blog.csdn.net/u013256816/article/details/78221439</a></p>]]></content>
      
      <categories>
          
          <category> RabbitMQ笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ应用管理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx修改隐藏版本号</title>
      <link href="/2018/07/17/Nginx%E4%BF%AE%E6%94%B9%E9%9A%90%E8%97%8F%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
      <url>/2018/07/17/Nginx%E4%BF%AE%E6%94%B9%E9%9A%90%E8%97%8F%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
      <content type="html"><![CDATA[<h2 id="Nginx修改隐藏版本号"><a href="#Nginx修改隐藏版本号" class="headerlink" title="Nginx修改隐藏版本号"></a>Nginx修改隐藏版本号</h2><h3 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a><code>Nginx</code> 配置文件</h3><blockquote><p>配置文件里增加 <code>server_tokens off;</code><br><code>server_tokens</code> 作用域是 <code>http</code> <code>server</code> <code>location</code> 语句块<br><code>server_tokens</code> 默认值是 <code>on</code>，表示显示版本信息，设置 <code>server_tokens</code> 值是 <code>off</code>，就可以在所有地方隐藏 <code>nginx</code> 的版本信息</p></blockquote><a id="more"></a><h3 id="隐藏-Nginx-版本号"><a href="#隐藏-Nginx-版本号" class="headerlink" title="隐藏 Nginx 版本号"></a>隐藏 <code>Nginx</code> 版本号</h3><blockquote><p>在 <code>/data/app/nginx/conf/nginx.conf</code> 里</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="string">/data/app/nginx/conf/nginx.conf</span></span><br><span class="line">host &#123;</span><br><span class="line"><span class="string">...</span>省略<span class="string">...</span></span><br><span class="line">    server_tokens off;</span><br><span class="line"><span class="string">...</span>省略<span class="string">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样修改之后能隐藏掉 <code>nginx</code> 的版本号，但是还是可以显示 Web 软件为 nginx</p></blockquote><h3 id="修改-Nginx-源码版本信息"><a href="#修改-Nginx-源码版本信息" class="headerlink" title="修改 Nginx 源码版本信息"></a>修改 <code>Nginx</code> 源码版本信息</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -<span class="literal">I</span> <span class="string">"http://127.0.0.1 | grep Server"</span></span><br></pre></td></tr></table></figure><h3 id="Nginx-编译前修改版本及版本号"><a href="#Nginx-编译前修改版本及版本号" class="headerlink" title="Nginx 编译前修改版本及版本号"></a>Nginx 编译前修改版本及版本号</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="meta-keyword">/data/</span>tools/</span><br><span class="line">cd nginx<span class="number">-1.15</span><span class="number">.1</span>/</span><br><span class="line">vim .<span class="meta-keyword">/src/</span>core/nginx.h</span><br><span class="line">... 省略 ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> nginx_version      1008001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NGINX_VERSION      <span class="string">""</span>                        # 修改想要显示的版本</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NGINX_VER          <span class="string">"FastDFS"</span> NGINX_VERSION    # 将 nginx 修改成想要显示的软件名称</span></span><br><span class="line">... 省略 ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NGINX_VAR          <span class="string">"FastDFS"</span>                  # 将 nginx 修改成想要显示的软件名称(Evan Web Server)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NGX_OLDPID_EXT     <span class="string">".oldbin"</span></span></span><br><span class="line"></span><br><span class="line">vim .<span class="meta-keyword">/src/</span>http/ngx_http_header_filter_module.c</span><br><span class="line"><span class="comment">// static u_char ngx_http_server_string[] = "Server: nginx" CRLF;</span></span><br><span class="line">static u_char ngx_http_server_string[] = <span class="string">"Server: FastDFS"</span> CRLF;    <span class="meta"># 将 nginx 修改为想要的版本</span></span><br><span class="line">static u_char ngx_http_server_full_string[] = <span class="string">"Server: "</span> NGINX_VER CRLF;</span><br><span class="line">static u_char ngx_http_server_build_string[] = <span class="string">"Server: "</span> NGINX_VER_BUILD CRLF;</span><br><span class="line"></span><br><span class="line">vim .<span class="meta-keyword">/src/</span>http/ngx_http_special_response.c</span><br><span class="line">static u_char ngx_http_error_tail[] =</span><br><span class="line"><span class="comment">// "&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;" CRLF</span></span><br><span class="line"><span class="string">"&lt;hr&gt;&lt;center&gt;FastDFS&lt;/center&gt;"</span> CRLF    <span class="meta"># 将 nginx 修改为想要的版本信息</span></span><br><span class="line"><span class="string">"&lt;/body&gt;"</span> CRLF</span><br><span class="line"><span class="string">"&lt;/html&gt;"</span> CRLF</span><br></pre></td></tr></table></figure><h3 id="修改-fastcgi"><a href="#修改-fastcgi" class="headerlink" title="修改 fastcgi"></a>修改 <code>fastcgi</code></h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/data/tools/nginx-1.15.1/</span></span><br><span class="line">vim <span class="string">./conf/fastcgi_params</span></span><br><span class="line">找到</span><br><span class="line">fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_<span class="keyword">version</span>;</span><br><span class="line">修改为</span><br><span class="line">fastcgi_param  SERVER_SOFTWARE    FastDFS/$nginx_<span class="keyword">version</span>;</span><br><span class="line"></span><br><span class="line">vim <span class="string">./conf/fastcgi.conf</span></span><br><span class="line">找到</span><br><span class="line">fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_<span class="keyword">version</span>;</span><br><span class="line">修改为</span><br><span class="line">fastcgi_param  SERVER_SOFTWARE    FastDFS/$nginx_<span class="keyword">version</span>;</span><br></pre></td></tr></table></figure><blockquote><p>修改探针中显示的 Web 服务软件信息，在编译前，fastcgi 编译后修改都可以</p></blockquote><p><code>注意：</code></p><blockquote><p>当添加 <code>server_tokens off;</code> 参数的时候，调用的是 <code>src/http/ngx_http_header_filter_module.c</code> 里的值<br>不添加的时候，显示版本号调用的是 <code>src/core/nginx.h</code> 里的值<br>所以我们修改的时候需要两个地方都修改。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Nginx笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx修改隐藏版本号 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python文件处理</title>
      <link href="/2018/07/11/Python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
      <url>/2018/07/11/Python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><a id="more"></a><blockquote><p>应用程序中需要经常将内存的数据永久保存下来，而应用程序又无法直接操作硬件<br>只能通过操作系统提供的虚拟单位去间接地操作硬盘</p></blockquote><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><blockquote><p><code>open(&#39;文件的路径&#39;, mode=&#39;打开文件的模式&#39;, encoding=&#39;操作文件的字符编码&#39;)</code><br><code>r</code> 表示 <code>原始字符串</code>，不转义任何特殊字符</p><ol><li>向操作系统发送打开文件的请求</li><li>向操作系统发送打开文件的请求</li></ol></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(<span class="string">r'/tmp/a.txt'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>open 有返回值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">r'/tmp/a.txt'</span>, mode=<span class="string">'r'</span>)</span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&lt;_io.TextIOWrapper name=<span class="string">'/tmp/a.txt'</span> mode=<span class="string">'r'</span> encoding=<span class="string">'UTF-8'</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>f =&gt; 应用程序中的一个值 =&gt; 操作系统打开的文件 a.txt =&gt; 硬盘中的一块空间</p></blockquote><h3 id="读-写"><a href="#读-写" class="headerlink" title="读/写"></a>读/写</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 应用程序向操作系统发送请求，打开文件</span></span><br><span class="line"><span class="title">f</span>.read()    # 把文件内容全都读到内存里去</span><br><span class="line"></span><br><span class="line"><span class="title">f</span> = open(r'a.txt', mode='r')</span><br><span class="line"><span class="class"><span class="keyword">data</span> = f.read()</span></span><br><span class="line"><span class="title">print</span>(<span class="class"><span class="keyword">data</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line"><span class="type">UnicodeDecodeError</span>: 'gbk' codec can't decode byte <span class="number">0x8a</span> <span class="keyword">in</span> position <span class="number">8</span>: illegal multibyte sequenc</span><br><span class="line"><span class="meta"># 注意 不同 操作系统平台 字符编码问题</span></span><br><span class="line"><span class="meta"># Windows gbk</span></span><br><span class="line"><span class="meta"># Linux utf-8</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">r'a.txt'</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)   <span class="comment"># 指定打开文件的字符编码为 utf-8</span></span><br><span class="line">data = f.read()    <span class="comment"># 在读取的时候就会以 utf-8 的编码读取</span></span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">你好啊</span><br><span class="line">aaa</span><br><span class="line">woca 嘞</span><br></pre></td></tr></table></figure><h3 id="关闭文件，释放资源"><a href="#关闭文件，释放资源" class="headerlink" title="关闭文件，释放资源"></a>关闭文件，释放资源</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f.close()    <span class="comment"># 回收操作系统的资源，操作系统会定期回收资源</span></span><br><span class="line">print(f)     <span class="comment"># f 的资源会自动被 Python 回收掉</span></span><br><span class="line">f.<span class="built_in">read</span>()</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">ValueError: I/O operation <span class="keyword">on</span> closed <span class="built_in">file</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># del f    # 手动回收 f 资源，不要在 f.close() 之前用这个</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>文件处理的步骤</p><ol><li>打开文件</li><li>读/写文件</li><li>关闭文件</li></ol></blockquote><h3 id="打开多个文件"><a href="#打开多个文件" class="headerlink" title="打开多个文件"></a>打开多个文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1 = open(<span class="string">r'a1.txt'</span>, mode=<span class="string">'r'</span>)</span><br><span class="line">f2 = open(<span class="string">r'a2.txt'</span>, mode=<span class="string">'r'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>操作系统资源 =&gt; 文件描述符<br>应用程序资源</p></blockquote><h3 id="with-上下文管理"><a href="#with-上下文管理" class="headerlink" title="with 上下文管理"></a><code>with</code> 上下文管理</h3><blockquote><p>帮你打开文件<br>先将操作系统把文件打开<br>然后把打开结果赋值给 f（占用两个资源）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'a.txt'</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">'==&gt;'</span>)       <span class="comment"># 运行 with 的子代码块</span></span><br><span class="line">    print(f.read())    <span class="comment"># 在这里基于 with 打开的文件，做读写操作</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>with</code> 会帮我们自动 <code>close</code></p></blockquote><h3 id="with-打开多个文件"><a href="#with-打开多个文件" class="headerlink" title="with 打开多个文件"></a><code>with</code> 打开多个文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'a.txt'</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f1,\</span><br><span class="line">        open(<span class="string">r'b.txt'</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    print(<span class="string">'==&gt;'</span>)</span><br><span class="line">    print(f1.read())</span><br><span class="line">    print(f2.read())</span><br></pre></td></tr></table></figure><h3 id="文件的打开模式"><a href="#文件的打开模式" class="headerlink" title="文件的打开模式"></a>文件的打开模式</h3><h4 id="三种纯净模式"><a href="#三种纯净模式" class="headerlink" title="三种纯净模式"></a>三种纯净模式</h4><blockquote><p><code>r</code> 只读模式（默认模式，文件必须存在，不存在则抛出异常）<br><code>w</code> 只写模式（不可读，不存在则创建；存在则清空内容）<br><code>a</code> 只追加写模式（不可读，不存在则创建；存在则追加内容）</p></blockquote><h3 id="控制操作文件内容的模式"><a href="#控制操作文件内容的模式" class="headerlink" title="控制操作文件内容的模式"></a>控制操作文件内容的模式</h3><h4 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h4><blockquote><p>不能单独使用，必须与 <code>r</code>，<code>w</code>，<code>a</code> 连用<br><code>t（默认）</code>：<code>text</code>文本模式，该模式操作文件内容的单位都是字符串，该模式只适用于文本文件<br><code>注意：</code> 该模式下必须指定 <code>encoding=&quot;字符编码&quot;</code><br><code>b</code>：<code>bytes</code> 二进制模式，该模式下操作文件的内容单位都是bytes，该模式适用于所有类型文件</p></blockquote><h4 id="r-模式，只读模式"><a href="#r-模式，只读模式" class="headerlink" title="r 模式，只读模式"></a><code>r</code> 模式，只读模式</h4><blockquote><p>默认单位：<code>t</code>，可以不指定<br>默认文件的打开模式是 <code>rt</code> 模式<br>文件必须存在，不存在则报错<br>文件存在则打开文件，并且将文件指针跳到文件的开头</p></blockquote><h5 id="read-方法"><a href="#read-方法" class="headerlink" title="read() 方法"></a><code>read()</code> 方法</h5><blockquote><p>读取所有内容，光标移动到文件末尾<br>把文件内容一次性全都读出，读成 <code>str字符串</code> 数据类型</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'a.txt'</span>, <span class="keyword">mode</span>=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    data = <span class="keyword">f</span>.<span class="keyword">read</span>()</span><br><span class="line">    <span class="keyword">print</span>(<span class="built_in">type</span>(data))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">&lt;class <span class="string">'str'</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.<span class="built_in">read</span>()</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">你好啊</span><br><span class="line">aaa</span><br><span class="line">woca 了</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'a.txt'</span>, <span class="keyword">mode</span>=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    data1 = <span class="keyword">f</span>.<span class="keyword">read</span>()</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'第一次'</span>, data1)</span><br><span class="line">    data2 = <span class="keyword">f</span>.<span class="keyword">read</span>()</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'第二次'</span>, data2)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">第一次 你好啊</span><br><span class="line">aaa</span><br><span class="line">woca 了</span><br><span class="line">第二次</span><br></pre></td></tr></table></figure><h5 id="readable-判断文件是否可读"><a href="#readable-判断文件是否可读" class="headerlink" title="readable() 判断文件是否可读"></a><code>readable()</code> 判断文件是否可读</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h5 id="writable-判断文件是否可写"><a href="#writable-判断文件是否可写" class="headerlink" title="writable() 判断文件是否可写"></a><code>writable()</code> 判断文件是否可写</h5><blockquote><p><code>r</code> 读模式，不能写，只能读</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">False</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">io.UnsupportedOperation: <span class="keyword">not</span> writable</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f.closed    <span class="comment"># 文件是否关闭</span></span><br><span class="line">f.encoding    <span class="comment"># 如果文件打开模式为b，则没有该属性</span></span><br><span class="line">f.flush()    <span class="comment"># 立刻将文件内容从内存刷到硬盘</span></span><br><span class="line">f.<span class="built_in">name</span></span><br></pre></td></tr></table></figure><h5 id="readline-方法"><a href="#readline-方法" class="headerlink" title="readline() 方法"></a><code>readline()</code> 方法</h5><blockquote><p>一次读一行<br>读取一行内容，光标移动到第二行首部</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'a.txt'</span>, <span class="keyword">mode</span>=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    <span class="built_in">line</span> = <span class="keyword">f</span>.readline()</span><br><span class="line">    <span class="keyword">print</span>(<span class="built_in">line</span>, end=<span class="string">''</span>)  # end=<span class="string">''</span> 取消 <span class="keyword">print</span>() 自带的换行</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'====&gt;'</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">你好啊</span><br><span class="line">====&gt;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">with <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) as f:</span><br><span class="line">    line1 = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(line1, <span class="keyword">end</span>=<span class="string">''</span>)  # <span class="keyword">end</span>=<span class="string">''</span> 取消 <span class="built_in">print</span>() 自带的换行</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'====&gt;'</span>)</span><br><span class="line">    line2 = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(line2, <span class="keyword">end</span>=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">你好啊</span><br><span class="line">====&gt;</span><br><span class="line">aaa</span><br></pre></td></tr></table></figure><h5 id="readlines-方法"><a href="#readlines-方法" class="headerlink" title="readlines() 方法"></a><code>readlines()</code> 方法</h5><blockquote><p>读取每一行内容，存放于列表中<br>把文件内容一次性全都读出，读成 <code>list列表</code> 数据类型，和 <code>read()</code> 类似</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'a.txt'</span>, <span class="keyword">mode</span>=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    <span class="keyword">l</span> = <span class="keyword">f</span>.readlines()</span><br><span class="line">    <span class="keyword">print</span>(<span class="built_in">type</span>(<span class="keyword">l</span>))</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">l</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">&lt;class <span class="string">'list'</span>&gt;</span><br><span class="line">[<span class="string">'你好啊\n'</span>, <span class="string">'aaa\n'</span>, <span class="string">'woca 了'</span>]</span><br></pre></td></tr></table></figure><h4 id="w-模式，只写模式"><a href="#w-模式，只写模式" class="headerlink" title="w 模式，只写模式"></a><code>w</code> 模式，只写模式</h4><blockquote><p>只写模式<br>文件存在，会将文件内容情空，并且将文件指针跳到文件的开头<br>文件不存在，则创建一个空文件，并且将文件指针跳到文件的开头</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.readline()</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">io.UnsupportedOperation: <span class="keyword">not</span> readable</span><br></pre></td></tr></table></figure><h5 id="write-方法"><a href="#write-方法" class="headerlink" title="write() 方法"></a><code>write()</code> 方法</h5><blockquote><p>针对文本模式的写，需要自己写换行符</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f.write('<span class="number">1111</span>\n<span class="number">2222</span>\n')</span><br><span class="line">f.write('<span class="number">1111</span>\n<span class="number">2222</span>\n'.encode('utf-8'))</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'你好啊'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line">你好啊</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'你好啊'</span>)</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'我的天'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line">你好啊我的天</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'你好啊\n'</span>)</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'我的天'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line">你好啊</span><br><span class="line">我的天</span><br></pre></td></tr></table></figure><blockquote><p><code>注意：</code><br>如果每次都是重新打开文件，那么文件内容总会清空，指针永远跳到开头<br>如果在打开文件不关闭的情况下，连续的写入，本次写入会基于上一次指针所在的位置往后继续写</p></blockquote><h5 id="writelines-方法"><a href="#writelines-方法" class="headerlink" title="writelines() 方法"></a><code>writelines()</code> 方法</h5><blockquote><p>文件模式<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">f</span><span class="selector-class">.writelines</span>([<span class="string">'333\n'</span>,<span class="string">'444\n'</span>])</span><br><span class="line"><span class="selector-tag">f</span><span class="selector-class">.writelines</span>([bytes(<span class="string">'333\n'</span>, encoding=<span class="string">'utf-8'</span>), <span class="string">'444\n'</span>.encode(<span class="string">'utf-8'</span>)])</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    l = [<span class="string">'1111\n'</span>, <span class="string">'2222\n'</span>, <span class="string">'3333\n'</span>]</span><br><span class="line">    f.writelines(l)</span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line"><span class="number">1111</span></span><br><span class="line"><span class="number">2222</span></span><br><span class="line"><span class="number">3333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    l = [<span class="string">'1111\n'</span>, <span class="string">'2222\n'</span>, <span class="string">'3333\n'</span>]</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> l:</span><br><span class="line">        f.<span class="built_in">write</span>(<span class="built_in">line</span>)</span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line"><span class="number">1111</span></span><br><span class="line"><span class="number">2222</span></span><br><span class="line"><span class="number">3333</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'1111\n\2222\n3333\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line"><span class="number">1111</span></span><br><span class="line"><span class="number">2222</span></span><br><span class="line"><span class="number">3333</span></span><br></pre></td></tr></table></figure><h5 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h5><blockquote><p><code>\n</code> Unix/Linux平台<br><code>\r</code> 老 Mac OS<br><code>\n</code> 新 Mac OS X<br><code>\r\n</code> Windows平台</p></blockquote><blockquote><p>查看换行符<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">b<span class="string">'1111\r\n2222\r\n3333\r\n'</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'a.txt'</span>, <span class="keyword">mode</span>=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    <span class="keyword">l</span> = <span class="keyword">f</span>.readlines()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">l</span>)</span><br><span class="line">    <span class="keyword">print</span>(<span class="built_in">type</span>(<span class="keyword">l</span>))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'1111\n'</span>, <span class="string">'2222\n'</span>, <span class="string">'3333'</span>]</span><br><span class="line">&lt;class <span class="string">'list'</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>write()</code> 将内容一次性写入文件中</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><blockquote><p><code>writelines()</code> 将内容循环写入文件中</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'hello'</span>:</span><br><span class="line">        f.<span class="built_in">write</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h4 id="a-模式，只追加写模式"><a href="#a-模式，只追加写模式" class="headerlink" title="a 模式，只追加写模式"></a><code>a</code> 模式，只追加写模式</h4><blockquote><p>文件不存在，则创建一个空文件，并且将文件指针跳到文件的末尾<br>文件存在，则会将文件指针跳到文件的末尾</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.writable())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    f.<span class="built_in">read</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">False</span><br><span class="line">io.UnsupportedOperation: <span class="keyword">not</span> readable</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'你好\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 a.txt</span></span><br><span class="line"><span class="number">1111</span></span><br><span class="line"><span class="number">2222</span></span><br><span class="line"><span class="number">3333</span>你好</span><br><span class="line">你好</span><br><span class="line">你好</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines([<span class="string">'aaaa\n'</span>, <span class="string">'bbbb\n'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 a.txt</span></span><br><span class="line"><span class="number">1111</span></span><br><span class="line"><span class="number">2222</span></span><br><span class="line"><span class="number">3333</span>你好</span><br><span class="line">你好</span><br><span class="line">你好</span><br><span class="line">aaaa</span><br><span class="line">bbbb</span><br></pre></td></tr></table></figure><h3 id="b-模式-操作文件内容"><a href="#b-模式-操作文件内容" class="headerlink" title="b 模式 操作文件内容"></a><code>b 模式</code> 操作文件内容</h3><blockquote><p>操作文件内容 <code>t模式</code> 有局限性<br>优点：读写文件以 <code>字符串</code> 为单位，不用自己去进行编码解码的转换<br>缺点：仅仅只适用于文本文件<br>我们不仅仅要操作文本文件，还要操作 <code>图片</code>，<code>视频</code>，等，再用 <code>t模式</code> 就无法处理了<br><code>文本文件</code> 里存的是 <code>字符</code>，而 <code>图片</code>，<code>视频</code>文件中存的是 <code>二进制</code></p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'1.mp4'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">read</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">UnicodeDecodeError: <span class="string">'utf-8'</span> codec can<span class="string">'t decode byte 0x86 in position 37: invalid start byte</span></span><br></pre></td></tr></table></figure><blockquote><p><code>b模式</code> 字节，二进制模式，一种原始的模式，在硬盘上存的都是二进制模式，如果打开的文件时 <code>b模式</code>，意味告诉操作系统，不用做转换，文件存的是什么，读出来就是什么<br><code></code>bytes` 二进制模式，该模式下操作文件的内容单位都是bytes，该模式适用于所有类型文件</p></blockquote><blockquote><p><code>注意：</code> <code>b模式</code> 不需要指定 <code>encoding</code> 参数<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'1.mp4'</span>, mode=<span class="string">'rb'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">read</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">ValueError: binary mode doesn<span class="string">'t take an encoding argument</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>获取 <code>音频文件</code> 二进制内容</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">with</span> open('<span class="number">1.</span>mp4', mode='rb') <span class="keyword">as</span> f:</span><br><span class="line">    <span class="class"><span class="keyword">data</span> = f.readline()    # 文件大，文件内容多，用 readline()</span></span><br><span class="line">    print(<span class="class"><span class="keyword">type</span>(<span class="title">data</span>))</span></span><br><span class="line">    print(<span class="class"><span class="keyword">data</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">&lt;<span class="keyword">class</span> 'bytes'&gt;</span><br><span class="line"><span class="title">b'</span>\x00\x00\x00\xlcftypisom\x00\x00\x02\x00isomiso2mp41\x00\x00\x08free\t...'</span><br></pre></td></tr></table></figure><blockquote><p>获取 <code>文本文件</code> 二进制内容</p></blockquote><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">with open('d.txt', mode='rb') as f:</span><br><span class="line">    data = f.read()    # 文件小，文件内容少，用 read()</span><br><span class="line">    print(type(data))</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">&lt;class 'bytes'&gt;</span><br><span class="line">b'<span class="symbol">\x</span>e4<span class="symbol">\x</span>bd<span class="symbol">\x</span>a0<span class="symbol">\x</span>e5<span class="symbol">\x</span>a5<span class="symbol">\x</span>bd<span class="symbol">\x</span>e5<span class="symbol">\x</span>95<span class="symbol">\x</span>8a<span class="symbol">\r</span><span class="symbol">\n</span>aaaa<span class="symbol">\r</span><span class="symbol">\n</span>bbbbccc<span class="symbol">\r</span><span class="symbol">\n</span>1111'</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'d.txt'</span>, <span class="keyword">mode</span>=<span class="string">'rb'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    data = <span class="keyword">f</span>.<span class="keyword">read</span>()</span><br><span class="line">    <span class="keyword">res</span> = data.decode(<span class="string">'utf-8'</span>)    # 将读出的二进制内容解码，转换成人类可识别的内容</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">你好啊</span><br><span class="line">aaaa</span><br><span class="line">bbbbccc</span><br><span class="line"><span class="number">1111</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'d.txt'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'你好，Python'</span>.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h3 id="遍历文件内容的方式"><a href="#遍历文件内容的方式" class="headerlink" title="遍历文件内容的方式"></a>遍历文件内容的方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'd.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">   <span class="keyword">for</span> line <span class="keyword">in</span> f:    <span class="comment"># 如果文件过大，使用 for循环 读文件内容</span></span><br><span class="line">       print(line, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">你好，Python</span><br><span class="line">你好，Python</span><br><span class="line">你好，Python</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'd.txt'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readline())</span><br><span class="line">    print(f.readline())</span><br><span class="line">    print(f.readline())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br></pre></td></tr></table></figure><blockquote><p><code>二进制</code>文件内容，<code>换行符</code>不会被识别</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(b<span class="string">'11111111\n'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'===================='</span>)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>输出 <code>二进制文件</code> 内容时，<code>print()</code> 内不要加 <code>end=&#39;&#39;</code><br>遍历 <code>音频文件</code> 内容</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'1.mp4'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> f:</span><br><span class="line">        print(<span class="built_in">line</span>)</span><br></pre></td></tr></table></figure><h3 id="练习：利用-b模式，编写一个-cp工具"><a href="#练习：利用-b模式，编写一个-cp工具" class="headerlink" title="练习：利用 b模式，编写一个 cp工具"></a>练习：利用 <code>b模式</code>，编写一个 <code>cp工具</code></h3><h4 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'D:\test.jpg'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> read_f,\</span><br><span class="line">        open(<span class="string">r'E:\test.jpg'</span>, mode=<span class="string">'wb'</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> read_f:</span><br><span class="line">        write_f.write(line)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src_file_path = input(<span class="string">'源文件路径：'</span>).strip()</span><br><span class="line">dst_file_path = input(<span class="string">'目标文件路径'</span>).strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'%s'</span> % src_file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> read_f,\</span><br><span class="line">        open(<span class="string">r'%s'</span> % dst_file_path, mode=<span class="string">'wb'</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> read_f:</span><br><span class="line">        write_f.write(line)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">src_file_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">dst_file_path = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'%s'</span> % src_file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> read_f,\</span><br><span class="line">        open(<span class="string">r'%s'</span> % dst_file_path, mode=<span class="string">'wb'</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> read_f:</span><br><span class="line">        write_f.write(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">python3 copy.py test.jpg test2.jpg</span><br></pre></td></tr></table></figure><h4 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h4><blockquote><ol><li>既可以拷贝文本又可以拷贝视频，图片等文件</li><li>用户一旦参数错误，打印命令的正确使用方法，如 <code>usage: cp source_file target_file</code><br>提示：可以用 <code>import sys</code>，然后用 <code>sys.argv</code> 获取脚本后面跟的参数</li></ol></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(sys.<span class="built_in">argv</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line"><span class="keyword">python3</span> <span class="keyword">cp</span>.<span class="keyword">py</span> src.txt dst.txt</span><br><span class="line">[<span class="string">'cp.py'</span>, <span class="string">'src.txt'</span>, <span class="string">'dst.txt'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">sys</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">print</span>(<span class="selector-tag">sys</span><span class="selector-class">.argv</span><span class="selector-attr">[1]</span>)</span><br><span class="line"><span class="selector-tag">print</span>(<span class="selector-tag">sys</span><span class="selector-class">.argv</span><span class="selector-attr">[2]</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line"><span class="selector-tag">python3</span> <span class="selector-tag">cp</span><span class="selector-class">.py</span> <span class="selector-tag">src</span><span class="selector-class">.txt</span> <span class="selector-tag">dst</span><span class="selector-class">.txt</span></span><br><span class="line"><span class="selector-tag">src</span><span class="selector-class">.txt</span></span><br><span class="line"><span class="selector-tag">dst</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.<span class="built_in">argv</span>) != <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'usage: cp source_file target_file'</span>)</span><br><span class="line">    sys.<span class="keyword">exit</span>()</span><br><span class="line"></span><br><span class="line">source_file, target_file=sys.<span class="built_in">argv</span>[<span class="number">1</span>], sys.<span class="built_in">argv</span>[<span class="number">2</span>]</span><br><span class="line">with <span class="keyword">open</span>(source_file,<span class="string">'rb'</span>) <span class="keyword">as</span> read_f, \</span><br><span class="line">        <span class="keyword">open</span>(target_file,<span class="string">'wb'</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> in read_f:</span><br><span class="line">        write_f.<span class="keyword">write</span>(<span class="built_in">line</span>)</span><br></pre></td></tr></table></figure><h3 id="可读可写模式"><a href="#可读可写模式" class="headerlink" title="可读可写模式 +"></a>可读可写模式 <code>+</code></h3><blockquote><p>r+t，r+b<br>w+t，w+b<br>a+t，a+b</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, mode=<span class="string">'r+t'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"></span><br><span class="line"><span class="comment"># r+t 模式，在没有文件的情况下，会报找不到文件的提示</span></span><br><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'a.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'r+t'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">222</span></span><br><span class="line"><span class="number">333</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'r+t'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'444\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行后，查看 a.txt 文件</span></span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">222</span></span><br><span class="line"><span class="number">333444</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python文件处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python列表类型</title>
      <link href="/2018/07/10/Python%E5%88%97%E8%A1%A8%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/07/10/Python%E5%88%97%E8%A1%A8%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="list-列表类型"><a href="#list-列表类型" class="headerlink" title="list 列表类型"></a><code>list</code> 列表类型</h2><a id="more"></a><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><blockquote><p>存放多个值，记录人多个爱好，多个人名</p></blockquote><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><blockquote><p>在 <code>[]</code> 内用逗号分隔 多个元素 每个元素可以是任意数据类型<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="string">'aa'</span>, <span class="number">3.1</span>, [<span class="number">1</span>, <span class="number">2</span>]]    # lst = <span class="keyword">list</span>([<span class="number">1</span>, <span class="string">'a'</span>, <span class="number">3.1</span>, [<span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">res</span> = <span class="keyword">list</span>(<span class="string">'hello'</span>)    # 将 字符串 转换成 列表</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>, <span class="built_in">type</span>(<span class="keyword">res</span>))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>] &lt;class <span class="string">'list'</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>list</code> 类型转换的工作原理：<code>list(items)</code></p><ol><li>先造一个空列表</li><li>类似调用了一个 for 循环，从 items 里取出一个值放入空列表中，循环往复直到取干净为止<br>但凡可以被 <code>for循环</code> 循环的，都可以被 <code>list()</code> 转换<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="type">list</span>(range(<span class="number">1</span>, <span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="调用-list-方法"><a href="#调用-list-方法" class="headerlink" title="调用 list() 方法"></a>调用 <code>list()</code> 方法</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; list(<span class="string">'hello'</span>)</span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; list((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; list(&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;)</span><br><span class="line">[<span class="string">'x'</span>, <span class="string">'y'</span>]</span><br></pre></td></tr></table></figure><h3 id="常用操作-内置方法"><a href="#常用操作-内置方法" class="headerlink" title="常用操作+内置方法"></a>常用操作+内置方法</h3><blockquote><p> 按索引存取值（正向存取+反向存取）：即可以取值，也可以改值</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">3</span>])    <span class="comment"># 正向取值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">d</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">-1</span>])    <span class="comment"># 反向取值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">d</span><br><span class="line"></span><br><span class="line">l[<span class="number">3</span>] = <span class="string">'D'</span>    <span class="comment"># 修改元素值</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'D'</span>]</span><br><span class="line"></span><br><span class="line">l[<span class="number">4</span>] = <span class="string">'5555'</span>    <span class="comment"># 不能根据索引往列表里追加元素值</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">IndexError: list assignment index out <span class="keyword">of</span> range</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(names[<span class="number">4</span>])     <span class="comment"># 正向取值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">yxx</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(names[<span class="number">-1</span>])    <span class="comment"># 反向取值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">yxx</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(names[<span class="number">-2</span>])</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即可以取值，也可以改值</span></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names[<span class="number">0</span>] = <span class="string">'EGON'</span></span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'EGON'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(id(names))</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line">names[<span class="number">0</span>] = <span class="string">'EGON'</span></span><br><span class="line"><span class="built_in">print</span>(id(names))</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">3155914092616</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="number">3155914092616</span></span><br><span class="line">[<span class="string">'EGON'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names[<span class="number">5</span>] = <span class="number">3</span>    <span class="comment"># 超出索引限制会报错</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">IndexError: list assignment index out <span class="keyword">of</span> range</span><br></pre></td></tr></table></figure><h3 id="切片（顾头不顾尾，步长）"><a href="#切片（顾头不顾尾，步长）" class="headerlink" title="切片（顾头不顾尾，步长）"></a>切片（顾头不顾尾，步长）</h3><blockquote><p>从一个大列表中切出一个字列表<br>[起始位置:结束位置:步长]</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">l1 = l[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">print(l1)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(names[起始位置:结束位置:步长])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(names[0:3])    <span class="comment"># 正向取</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(names[0:3:2])    <span class="comment"># 正向步长</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'wxx'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(names[::1])</span><br><span class="line"><span class="comment"># []内 起始没写，默认从索引0开始</span></span><br><span class="line"><span class="comment">#      结束没写，默认到最后结束</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(names[:])    <span class="comment"># [] 冒号左边没有值，默认索引是0，冒号右边没有写值，默认到最后结束</span></span><br><span class="line">                   <span class="comment"># 如果要获取列表内所有的值，可以省略掉 冒号 左右两边的值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br></pre></td></tr></table></figure><h3 id="反向取值，反向步长（顾头不顾尾）"><a href="#反向取值，反向步长（顾头不顾尾）" class="headerlink" title="反向取值，反向步长（顾头不顾尾）"></a>反向取值，反向步长（顾头不顾尾）</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">print(names[起始位置:结束位置:反向步长])</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">print(names[<span class="number">3</span>:<span class="number">0</span>:-<span class="number">1</span>])    # 遵循切片顾头不顾尾的规则，agon 获取不到</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'xxx'</span>, <span class="string">'wxx'</span>, <span class="string">'alex'</span>]</span><br><span class="line"></span><br><span class="line">print(names[<span class="number">3</span>::-<span class="number">1</span>])    # 在结束位置不写值，就能获取到最后一个元素值</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'xxx'</span>, <span class="string">'wxx'</span>, <span class="string">'alex'</span>, <span class="string">'egon'</span>]</span><br><span class="line"></span><br><span class="line">print(names[<span class="number">-1</span>::-<span class="number">1</span>])</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'yxx'</span>, <span class="string">'xxx'</span>, <span class="string">'wxx'</span>, <span class="string">'alex'</span>, <span class="string">'egon'</span>]</span><br></pre></td></tr></table></figure><h3 id="长度-len"><a href="#长度-len" class="headerlink" title="长度 len()"></a>长度 <code>len()</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="built_in">print</span>(len(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">4</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(len(names))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="成员运算-in-和-not-in"><a href="#成员运算-in-和-not-in" class="headerlink" title="成员运算 in 和 not in"></a>成员运算 <code>in</code> 和 <code>not in</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(<span class="string">'alex'</span> <span class="keyword">in</span> names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(<span class="number">4</span> <span class="keyword">in</span> names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(<span class="number">5</span> <span class="keyword">not</span> <span class="keyword">in</span> names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="追加-append"><a href="#追加-append" class="headerlink" title="追加 append()"></a>追加 <code>append()</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">l.append(<span class="string">'aaa'</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'aaa'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names.<span class="built_in">append</span>(<span class="string">'oldboy'</span>)</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="string">'oldboy'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names.<span class="built_in">append</span>(<span class="string">'oldboy1'</span>)</span><br><span class="line">names.<span class="built_in">append</span>(<span class="string">'oldboy2'</span>)</span><br><span class="line">names.<span class="built_in">append</span>(<span class="string">'oldboy3'</span>)</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="string">'oldboy1'</span>, <span class="string">'oldboy2'</span>, <span class="string">'oldboy3'</span>]</span><br></pre></td></tr></table></figure><h3 id="插入-insert"><a href="#插入-insert" class="headerlink" title="插入 insert()"></a>插入 <code>insert()</code></h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">l.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="string">'B'</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'B'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">l.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">'B'</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'B'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">l.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">'B'</span>)</span><br><span class="line">l.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">'egon'</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'B'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names.insert(0, oldboy)    <span class="comment"># 两个参数：索引下标，插入的值</span></span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'oldboy'</span>, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"></span><br><span class="line">names.insert(2, <span class="string">'oldboy'</span>)</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'oldboy'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br></pre></td></tr></table></figure><h3 id="删除-del-remove-pop"><a href="#删除-del-remove-pop" class="headerlink" title="删除 del, remove(), pop()"></a>删除 <code>del</code>, <code>remove()</code>, <code>pop()</code></h3><h4 id="del-删除"><a href="#del-删除" class="headerlink" title="del 删除"></a><code>del</code> 删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'alex'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> l[<span class="number">2</span>]</span><br><span class="line">print(l)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">res = <span class="keyword">del</span> l[<span class="number">2</span>]</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="keyword">del</span> names[<span class="number">2</span>]    <span class="comment"># 删除列表中某一个元素</span></span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>非列表独有的删除，是一种通用的删除方法</p></blockquote><h4 id="remove-删除"><a href="#remove-删除" class="headerlink" title="remove() 删除"></a><code>remove()</code> 删除</h4><blockquote><p>只是单纯的删除操作，没有返回值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'alex'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">l.remove(<span class="string">'alex'</span>)</span><br><span class="line">print(l)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">res = l.remove(<span class="string">'alex'</span>)   <span class="comment"># 只是单纯的删除操作，没有返回值</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names.<span class="built_in">remove</span>(<span class="number">0</span>)    # 单纯的删除，没有返回值</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"># 输出结果</span><br><span class="line">ValueError: <span class="keyword">list</span>.<span class="built_in">remove</span>(<span class="keyword">x</span>): <span class="keyword">x</span> not in <span class="keyword">list</span></span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names.<span class="built_in">remove</span>(<span class="string">'wxx'</span>)    # <span class="built_in">remove</span>() 是指定元素值删除</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">res</span> = names.<span class="built_in">remove</span>(<span class="string">'wxx'</span>)    # <span class="built_in">remove</span>() 没有返回值</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"># 输出结果</span><br><span class="line">None</span><br></pre></td></tr></table></figure><h4 id="pop-从列表中取走一个元素值"><a href="#pop-从列表中取走一个元素值" class="headerlink" title="pop() 从列表中取走一个元素值"></a><code>pop()</code> 从列表中取走一个元素值</h4><blockquote><ol><li>删除一个元素</li><li>将该元素当做返回值返回<br>默认从最后一个删除</li></ol></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">l</span> = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'alex'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="keyword">res</span> = <span class="keyword">l</span>.<span class="keyword">pop</span>()    # 默认从最后一个删除</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">l</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'alex'</span>]</span><br><span class="line">d</span><br><span class="line"></span><br><span class="line"><span class="keyword">l</span> = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'alex'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="keyword">res</span> = <span class="keyword">l</span>.<span class="keyword">pop</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"># 输出结果</span><br><span class="line">alex</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names.<span class="keyword">pop</span>(<span class="number">0</span>)    # <span class="keyword">pop</span>() 是按照索引下标删除元素值</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="keyword">res</span> = names.<span class="keyword">pop</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)    # <span class="keyword">pop</span>() 会获取返回删除的元素值</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">egon</span><br><span class="line"></span><br><span class="line"><span class="keyword">res</span> = names.<span class="keyword">pop</span>(<span class="number">100</span>)    # 超过索引限制会报错</span><br><span class="line"># 输出结果</span><br><span class="line">IndexError: <span class="keyword">pop</span> <span class="built_in">index</span> out of <span class="built_in">range</span></span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="number">100</span> &lt; <span class="built_in">len</span>(names):    # 可以加一个判断 来让它不报错</span><br><span class="line">    <span class="keyword">res</span> = names.<span class="keyword">pop</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">print</span>(names)</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">res</span>)</span><br></pre></td></tr></table></figure><h3 id="循环（循环取值）"><a href="#循环（循环取值）" class="headerlink" title="循环（循环取值）"></a>循环（循环取值）</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> l:</span><br><span class="line">    print(<span class="keyword">item</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">a</span></span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="keyword">item</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">alex</span><br><span class="line">wxx</span><br><span class="line">xxx</span><br><span class="line">yxx</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><blockquote><p>列表可变类型<br>可变类型：值变，id不变，可变 == 不可hash</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="built_in">print</span>(id(l1))</span><br><span class="line">l1[0] = <span class="string">'A'</span></span><br><span class="line"><span class="built_in">print</span>(id(l1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">1460820390344</span><br><span class="line">1460820390344</span><br></pre></td></tr></table></figure><h3 id="reverse-反转（单纯的反转）"><a href="#reverse-反转（单纯的反转）" class="headerlink" title="reverse() 反转（单纯的反转）"></a><code>reverse()</code> 反转（单纯的反转）</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">l1.<span class="keyword">reverse</span>()</span><br><span class="line"><span class="keyword">print</span>(l1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="number">2.3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'lxx'</span>]</span><br><span class="line">names.<span class="keyword">reverse</span>()</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'lxx'</span>, <span class="string">'wxx'</span>, <span class="string">'alex'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">names.<span class="keyword">reverse</span>()    <span class="comment"># reverse() 反转，改的是原值</span></span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'yxx'</span>, <span class="string">'xxx'</span>, <span class="string">'wxx'</span>, <span class="string">'alex'</span>, <span class="string">'egon'</span>]</span><br></pre></td></tr></table></figure><h3 id="count-统计列表元素值的个数"><a href="#count-统计列表元素值的个数" class="headerlink" title="count() 统计列表元素值的个数"></a><code>count()</code> 统计列表元素值的个数</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">print(l1.<span class="keyword">count</span>(<span class="string">'a'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(names.<span class="keyword">count</span>(<span class="string">'xxx'</span>))    <span class="meta"># count()方法 统计列表元素值的个数</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="clear-清空列表所有元素值"><a href="#clear-清空列表所有元素值" class="headerlink" title="clear() 清空列表所有元素值"></a><code>clear()</code> 清空列表所有元素值</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>]</span><br><span class="line">l1.<span class="built_in">clear</span>()</span><br><span class="line"><span class="built_in">print</span>(l1)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">names.<span class="built_in">clear</span>()    <span class="meta"># clear() 清空列表所有元素值</span></span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h3 id="copy-列表复制"><a href="#copy-列表复制" class="headerlink" title="copy() 列表复制"></a><code>copy()</code> 列表复制</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l1 = [1, 2.3, 'a']</span><br><span class="line">l2 = l1.copy()</span><br><span class="line">print(l2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[1, 2.3, 'a']</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, 1, 2, 3, 4]</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line">lst = names.copy()    <span class="comment"># copy() 复制一份列表元素值</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, 1, 2, 3, 4]</span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure><h3 id="extend-向列表末尾追加多个元素值"><a href="#extend-向列表末尾追加多个元素值" class="headerlink" title="extend() 向列表末尾追加多个元素值"></a><code>extend()</code> 向列表<code>末尾</code>追加多个元素值</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">l2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">l1.append(l2[<span class="number">0</span>])</span><br><span class="line">l1.append(l2[<span class="number">1</span>])</span><br><span class="line">l1.append(l2[<span class="number">2</span>])</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"># 一个一个追加，比较麻烦</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">l2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">l1.extend(l2)</span><br><span class="line">print(l1)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h3 id="index-获取列表元素值的索引下标"><a href="#index-获取列表元素值的索引下标" class="headerlink" title="index()获取列表元素值的索引下标"></a><code>index()</code>获取列表元素值的索引下标</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">l1.index(<span class="string">'egon'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">ValueError: <span class="string">'egon'</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> list</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="built_in">print</span>(l1.index(<span class="string">'a'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="built_in">print</span>(l1.index(<span class="string">'a'</span>, <span class="number">0</span>, <span class="number">3</span>))    <span class="comment"># 指定 起始位置,结束位置（顾头不顾尾）</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># names.index(元素值, 起始位置，结束位置)</span></span><br><span class="line"><span class="built_in">print</span>(names.index(<span class="string">'alex'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有的元素值，会报错</span></span><br><span class="line"><span class="built_in">print</span>(names.index(<span class="string">'alexabcd'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">ValueError: <span class="string">'alexabcd'</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> list</span><br></pre></td></tr></table></figure><h3 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort 排序"></a><code>sort</code> 排序</h3><blockquote><p>默认从小到大排序</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">-1</span>]</span><br><span class="line">names.sort()    # 默认从小到大排序</span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="number">-1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">100</span>, <span class="number">98</span>]</span><br><span class="line">nums.sort(reverse=True)    # 从大到小排序</span><br><span class="line">print(nums)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="number">-1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">98</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">100</span>, <span class="number">98</span>]</span><br><span class="line">nums.sort(reverse=True)    # 从大到小排序</span><br><span class="line">print(nums)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="number">100</span>, <span class="number">98</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">l1.<span class="built_in">sort</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: <span class="string">'&lt;'</span> <span class="keyword">not</span> supported between instances <span class="keyword">of</span> <span class="string">'str'</span> <span class="keyword">and</span> <span class="string">'float'</span></span><br><span class="line"><span class="comment"># 字符串 和 浮点类型 之间不支持排序</span></span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="string">'a'</span>]</span><br><span class="line">names.sort()</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: <span class="string">'&lt;'</span> <span class="keyword">not</span> supported between instances <span class="keyword">of</span> <span class="string">'str'</span> <span class="keyword">and</span> <span class="string">'int'</span></span><br><span class="line"><span class="comment"># 字符串 和 整型 之间不支持排序</span></span><br></pre></td></tr></table></figure><blockquote><p>列表中的元素值，必须是 <code>同一</code> 类型，才能做比较排序</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>]</span><br><span class="line">names.sort()</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'+'</span>]</span><br><span class="line">names.sort()</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'+'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">'hello'</span></span><br><span class="line">s2 = <span class="string">'z'</span></span><br><span class="line"><span class="keyword">print</span>(s1 &gt; s2)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">'hello'</span></span><br><span class="line">y = <span class="string">'hez'</span></span><br><span class="line"><span class="keyword">print</span>(y &gt; x)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p><code>字符串</code> 是 <code>根据位置</code> 比较的，先比较两个字符串的第一个位置的字符<br>如果 第一个字符比出大小，后面的字符将不再做比较<br>字符串之间根据 <code>ASCII码</code> 来做比较<br><code>小写字母</code> 比 <code>大写字母</code> 大</p></blockquote><h3 id="列表比较大小"><a href="#列表比较大小" class="headerlink" title="列表比较大小"></a>列表比较大小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">lst2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(lst2 &gt; lst1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">lst2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(lst2 &gt; lst1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: <span class="string">'&gt;'</span> <span class="keyword">not</span> supported between instances of <span class="string">'int'</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br><span class="line"><span class="comment"># 第三个位置不是同一种类型，所以报错</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">lst2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'b'</span>]</span><br><span class="line">print(lst2 &gt; lst1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>队列：先进先出<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line"># 入队</span><br><span class="line">l.<span class="built_in">append</span>('<span class="built_in">first</span>')</span><br><span class="line">l.<span class="built_in">append</span>('<span class="built_in">second</span>')</span><br><span class="line">l.<span class="built_in">append</span>('<span class="built_in">third</span>')</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"># 输出结果</span><br><span class="line">['<span class="built_in">first</span>', '<span class="built_in">second</span>', '<span class="built_in">third</span>']</span><br><span class="line"></span><br><span class="line"># 出队</span><br><span class="line"><span class="built_in">print</span>(l.<span class="built_in">pop</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(l.<span class="built_in">pop</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(l.<span class="built_in">pop</span>(<span class="number">0</span>))</span><br><span class="line"># 输出结果</span><br><span class="line"><span class="built_in">first</span></span><br><span class="line"><span class="built_in">second</span></span><br><span class="line"><span class="built_in">third</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>堆栈：先进后出<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line"># 入栈</span><br><span class="line">l.<span class="built_in">append</span>('<span class="built_in">first</span>')</span><br><span class="line">l.<span class="built_in">append</span>('<span class="built_in">second</span>')</span><br><span class="line">l.<span class="built_in">append</span>('<span class="built_in">third</span>')</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"># 输出结果</span><br><span class="line">['<span class="built_in">first</span>', '<span class="built_in">second</span>', '<span class="built_in">third</span>']</span><br><span class="line"></span><br><span class="line"># 出栈</span><br><span class="line"><span class="built_in">print</span>(l.<span class="built_in">pop</span>(-<span class="number">1</span>))    # 默认是 -<span class="number">1</span>，不写就是 -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(l.<span class="built_in">pop</span>(-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(l.<span class="built_in">pop</span>(-<span class="number">1</span>))</span><br><span class="line"># 输出结果</span><br><span class="line"><span class="built_in">third</span></span><br><span class="line"><span class="built_in">second</span></span><br><span class="line"><span class="built_in">first</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ol><li>能存多个值，没有类型限制</li><li>有序（能够按索引取值的属于有序的）</li><li>可变类型<br> 可变：值变，id不变，可变 == 不可hash<br> list（任何能被 for循环的对象）转换成 列表</li></ol></blockquote>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python列表类型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python集合类型</title>
      <link href="/2018/07/10/Python%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/07/10/Python%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="set-集合类型"><a href="#set-集合类型" class="headerlink" title="set 集合类型"></a><code>set</code> 集合类型</h2><a id="more"></a><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><blockquote><p>主要用于<code>关系运算</code><br>去重</p></blockquote><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><blockquote><p>在 <code>{}</code> 内用逗号分隔开多个元素<br>每一个元素必须为不可变类型<code>(int，float，str，tuple)</code><br>集合内的元素不能重复<br>集合内元素无序</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pythoners</span> = [<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>]</span><br><span class="line"><span class="attr">linuxers</span> = [<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>, <span class="string">'张大炮'</span>, <span class="string">'王全蛋'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>获取即报名Linux，又报名Python 课程 的 学生姓名</p></blockquote><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pl = []</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">name</span> <span class="keyword">in</span> pythoners:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">name</span> <span class="keyword">in</span> linuxers:</span><br><span class="line">        pl.append(<span class="keyword">name</span>)</span><br><span class="line">print(pl)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;&#125;    <span class="comment"># 定义空字典</span></span><br><span class="line"><span class="built_in">print</span>(s, <span class="built_in">type</span>(s))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;&#125; &lt;class <span class="string">'dict'</span>&gt;</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">set</span>()    <span class="comment"># 定义空集合</span></span><br><span class="line"><span class="built_in">print</span>(s, <span class="built_in">type</span>(s))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">set</span>() &lt;class <span class="string">'set'</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;1, 2&#125;    <span class="comment"># s = set(&#123;1, 2&#125;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&lt;class <span class="string">'set'</span>&gt;</span><br><span class="line"></span><br><span class="line">s = &#123;1, <span class="string">'a'</span>, 3&#125;    <span class="comment"># s = set(&#123;1, 'a', 3&#125;)</span></span><br><span class="line"><span class="built_in">print</span>(s, <span class="built_in">type</span>(s))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;1, 3, <span class="string">'a'</span>&#125; &lt;class <span class="string">'set'</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="string">'a'</span>, <span class="number">3.1</span>, [<span class="number">1</span>,<span class="number">2</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">TypeError: unhashable type: <span class="string">'list'</span></span><br><span class="line"><span class="meta"># 列表类型 是 不可hash类型，不能用于 集合</span></span><br></pre></td></tr></table></figure><blockquote><p>可变类型 不可 <code>hash</code><br>不可变类型 可 <code>hash</code><br>集合无法一个值一个值取值</p></blockquote><h3 id="集合类型-元素不能重复"><a href="#集合类型-元素不能重复" class="headerlink" title="集合类型 元素不能重复"></a>集合类型 元素不能重复</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">22</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="集合去重"><a href="#集合去重" class="headerlink" title="集合去重"></a>集合去重</h3><h4 id="有局限性"><a href="#有局限性" class="headerlink" title="有局限性"></a>有局限性</h4><blockquote><p>不能保证原来的顺序<br>不能针对可变类型去重</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">set</span>(<span class="string">'hello'</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'o'</span>, <span class="string">'h'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">l = [1, 1, 1, 1, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'egon'</span>]</span><br><span class="line">s = <span class="built_in">set</span>(l)    <span class="comment"># 将 l 列表 转换成 集合</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;1, <span class="string">'egon'</span>, <span class="string">'alex'</span>&#125;</span><br><span class="line"></span><br><span class="line">s = &#123;<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'lxx'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s:    <span class="comment"># 遍历 集合</span></span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">lxx</span><br><span class="line">wxx</span><br><span class="line">alex</span><br><span class="line"></span><br><span class="line">l = [1, 1, 1, 1, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'egon'</span>]</span><br><span class="line">s = <span class="built_in">set</span>(l)    <span class="comment"># 将 列表 转换成 集合</span></span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line">l = list(s)   <span class="comment"># 再将 集合 转换成 列表</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[1, <span class="string">'egon'</span>, <span class="string">'alex'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>需求：即想针对可变类型去重，又想保证原来的顺序</p><ol><li>列表内的元素有可变类型</li><li>去重之后要保证原来顺序</li></ol></blockquote><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">info</span> = [</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'egon'</span>, <span class="string">'age'</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'alex'</span>, <span class="string">'age'</span>:<span class="number">73</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'egon'</span>, <span class="string">'age'</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'lxx'</span>, <span class="string">'age'</span>:<span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'egon'</span>, <span class="string">'age'</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'lxx'</span>, <span class="string">'age'</span>:<span class="number">19</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> dic in <span class="keyword">info</span>:</span><br><span class="line">    <span class="keyword">if</span> dic not in l:</span><br><span class="line">        l.<span class="keyword">append</span>(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(l)</span></span><br><span class="line"><span class="keyword">info</span> = l</span><br><span class="line">print(<span class="keyword">info</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[&#123;<span class="string">'name'</span>:<span class="string">'egon'</span>, <span class="string">'age'</span>:<span class="number">18</span>&#125;, &#123;<span class="string">'name'</span>:<span class="string">'alex'</span>, <span class="string">'age'</span>:<span class="number">73</span>&#125;, &#123;<span class="string">'name'</span>:<span class="string">'lxx'</span>, <span class="string">'age'</span>:<span class="number">19</span>&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">'a'</span>, <span class="string">'asdfsa'</span>, (1, 2), 1, 3.1&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(1, 2)</span><br><span class="line">1</span><br><span class="line">3.1</span><br><span class="line">asdfsa</span><br><span class="line">a</span><br></pre></td></tr></table></figure><h3 id="长度len"><a href="#长度len" class="headerlink" title="长度len()"></a>长度<code>len()</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(len(&#123;1, 2, 3&#125;))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">pythoners = [<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>]</span><br><span class="line"><span class="built_in">print</span>(len(pythoners))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="成员运算-in-和-not-in"><a href="#成员运算-in-和-not-in" class="headerlink" title="成员运算 in 和 not in"></a>成员运算 <code>in</code> 和 <code>not in</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">pythoners = [<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>]</span><br><span class="line">print(<span class="string">'egon'</span> <span class="keyword">in</span> pythoners)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="集合的关系运算"><a href="#集合的关系运算" class="headerlink" title="集合的关系运算"></a>集合的关系运算</h3><h3 id="交集-amp-，intersection-内置方法"><a href="#交集-amp-，intersection-内置方法" class="headerlink" title="交集 &amp; ，intersection() 内置方法"></a>交集 <code>&amp;</code> ，<code>intersection()</code> 内置方法</h3><blockquote><p>获取两个集合的共同部分</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;'艾利克斯', 'wxx', 'egon', '吴三江', 'oldboy'&#125;</span><br><span class="line">linuxers = &#123;'wxx', '吴三江', '张大炮', '王全蛋'&#125;</span><br><span class="line">print(pythoners <span class="meta">&amp; linuxers)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">['wxx', '吴三江']</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pythoners.intersection(linuxers))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>]</span><br></pre></td></tr></table></figure><h3 id="差集-，difference-内置方法"><a href="#差集-，difference-内置方法" class="headerlink" title="差集 -，difference() 内置方法"></a>差集 <code>-</code>，<code>difference()</code> 内置方法</h3><blockquote><p>获取只报名Python，没有报名Linux 的人<br>即集合pythoners 减去 linuxers ，称之为 <code>差集</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>&#125;</span><br><span class="line">linuxers = &#123;<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>, <span class="string">'张大炮'</span>, <span class="string">'王全蛋'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(pythoners - linuxers)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'艾利克斯'</span>, <span class="string">'oldboy'</span>, <span class="string">'egon'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pythoners.difference(linuxers))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'艾利克斯'</span>, <span class="string">'oldboy'</span>, <span class="string">'egon'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取只报名 linux，没有报名 python 的人</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>&#125;</span><br><span class="line">linuxers = &#123;<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>, <span class="string">'张大炮'</span>, <span class="string">'王全蛋'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(linuxers - pythoners)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'王全蛋'</span>, <span class="string">'张大炮'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(linuxers.difference(pythoners))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'王全蛋'</span>, <span class="string">'张大炮'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="合集，并集-，union-内置方法"><a href="#合集，并集-，union-内置方法" class="headerlink" title="合集，并集 |，union() 内置方法"></a>合集，并集 <code>|</code>，<code>union()</code> 内置方法</h3><blockquote><p>获取两个集合的总和，把两个集合合到一起，把重复的部分去除<br>获取所有的学生的姓名</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;'艾利克斯', 'wxx', 'egon', '吴三江', 'oldboy'&#125;</span><br><span class="line">linuxers = &#123;'wxx', '吴三江', '张大炮', '王全蛋'&#125;</span><br><span class="line">print(pythoners <span class="string">| linuxers)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">&#123;'吴三江', 'oldboy', '王全蛋', 'egon', 'wxx', '张大炮', '艾利克斯'&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>&#125;</span><br><span class="line">linuxers = &#123;<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>, <span class="string">'张大炮'</span>, <span class="string">'王全蛋'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(pythoners.<span class="keyword">union</span>(linuxers))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>, <span class="string">'王全蛋'</span>, <span class="string">'egon'</span>, <span class="string">'wxx'</span>, <span class="string">'张大炮'</span>, <span class="string">'艾利克斯'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="对称差集-，symmetric-difference-内置方法"><a href="#对称差集-，symmetric-difference-内置方法" class="headerlink" title="对称差集 ^，symmetric_difference()` 内置方法"></a>对称差集 ^<code>，</code>symmetric_difference()` 内置方法</h3><blockquote><p>获取没有同时报名两门课程的学生姓名</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>&#125;</span><br><span class="line">linuxers = &#123;<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>, <span class="string">'张大炮'</span>, <span class="string">'王全蛋'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(pythoners ^ linuxers)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'张大炮'</span>, <span class="string">'艾利克斯'</span>, <span class="string">'egon'</span>, <span class="string">'oldboy'</span>, <span class="string">'王全蛋'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(linuxers ^ pythoners)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'张大炮'</span>, <span class="string">'艾利克斯'</span>, <span class="string">'egon'</span>, <span class="string">'oldboy'</span>, <span class="string">'王全蛋'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>&#125;</span><br><span class="line">linuxers = &#123;<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>, <span class="string">'张大炮'</span>, <span class="string">'王全蛋'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(pythoners.symmetric_difference(linuxers))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'张大炮'</span>, <span class="string">'艾利克斯'</span>, <span class="string">'egon'</span>, <span class="string">'oldboy'</span>, <span class="string">'王全蛋'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="比较两个值是否相等"><a href="#比较两个值是否相等" class="headerlink" title="== 比较两个值是否相等"></a><code>==</code> 比较两个值是否相等</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">print(s1 == s2)</span><br><span class="line"># 输出结果</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line">print(s1 == s2)</span><br><span class="line"># 输出结果</span><br><span class="line">True</span><br></pre></td></tr></table></figure><blockquote><p>集合之间做比较，指的是包含 与 被包含的关系</p></blockquote><h3 id="父集-gt-gt-，issuperset-内置方法"><a href="#父集-gt-gt-，issuperset-内置方法" class="headerlink" title="父集 &gt; &gt;=，issuperset() 内置方法"></a>父集 <code>&gt; &gt;=</code>，<code>issuperset()</code> 内置方法</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">s1</span> = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">s2</span> = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">print(<span class="built_in">s1</span> &gt; <span class="built_in">s2</span>)</span><br><span class="line">print(<span class="built_in">s1</span> &gt;= <span class="built_in">s2</span>)</span><br><span class="line"><span class="comment"># 判断 s1 是否是 s2 的父集</span></span><br><span class="line"><span class="comment"># 判断 s1 是否包含 s2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>&#125;</span><br><span class="line">print(s1 &gt;= s2)    # 判断 s1 是否是 s2 的父集</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">False</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;1, 2, 3&#125;</span><br><span class="line">s2 = &#123;1, 2&#125;</span><br><span class="line">print(s1.issuperset(s2))    <span class="comment"># 判断 s1 是否是 s2 的父集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="子集-lt-lt-，issubset-内置方法"><a href="#子集-lt-lt-，issubset-内置方法" class="headerlink" title="子集 &lt; &lt;=，issubset()内置方法"></a>子集 <code>&lt; &lt;=</code>，<code>issubset()</code>内置方法</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;1, 2, 3&#125;</span><br><span class="line">s2 = &#123;1, 2&#125;</span><br><span class="line">print(s2 &lt;= s1)    <span class="comment"># 判断 s2 是否是 s1 的子集</span></span><br><span class="line">                   <span class="comment"># 判断 s2 是否被 s1 包含</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;1, 2, 3&#125;</span><br><span class="line">s2 = &#123;1, 2&#125;</span><br><span class="line">print(s2.issubset(s1))    <span class="comment"># 判断 s2 是否是 s1 的子集</span></span><br><span class="line">                          <span class="comment"># 判断 s2 是否被 s1 包含</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="添加集合元素"><a href="#添加集合元素" class="headerlink" title="添加集合元素"></a>添加集合元素</h3><blockquote><p>集合属于可变类型，值变，id不变，不可 <code>hash</code></p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">print(id(s1))</span><br><span class="line">s1.add(<span class="number">6</span>)</span><br><span class="line">print(id(s1))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line"><span class="number">3014527602472</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="number">3014527602472</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(id(s1))</span><br><span class="line">s1.add(<span class="string">'d'</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(id(s1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">1981688305928</span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">1981688305928</span><br></pre></td></tr></table></figure><h3 id="删除集合元素"><a href="#删除集合元素" class="headerlink" title="删除集合元素"></a>删除集合元素</h3><h4 id="remove-按元素名删除元素"><a href="#remove-按元素名删除元素" class="headerlink" title="remove() 按元素名删除元素"></a><code>remove()</code> 按元素名删除元素</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">s1.<span class="keyword">remove</span>(<span class="string">'b'</span>)</span><br><span class="line">print(s1)</span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看是否有返回值</span></span><br><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">res = s1.<span class="keyword">remove</span>(<span class="string">'b'</span>)    <span class="meta"># 只是单纯的删除，没有返回值</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">None</span><br><span class="line"></span><br><span class="line">s1.<span class="keyword">remove</span>(<span class="string">'dddd'</span>)    <span class="meta"># 指定元素删除，如果元素不存在，则报错</span></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">KeyError: <span class="string">'dddd'</span></span><br></pre></td></tr></table></figure><h4 id="discard-按元素名删除元素"><a href="#discard-按元素名删除元素" class="headerlink" title="discard() 按元素名删除元素"></a><code>discard()</code> 按元素名删除元素</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s1.discard(<span class="number">3</span>)</span><br><span class="line">print(s1)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s1.discard(<span class="number">333333</span>)  # 指定元素删除，如果元素不存在，不会报错</span><br><span class="line">print(s1)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">s1.discard(<span class="string">'b'</span>)</span><br><span class="line">print(s1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否有返回值</span></span><br><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">res = s1.discard(<span class="string">'b'</span>)    <span class="comment"># 没有返回值</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">s1.discard(<span class="string">'dddd'</span>)    <span class="comment"># 指定元素删除，如果元素不存在，不会报错</span></span><br><span class="line">print(s1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="pop-随即删除，有返回值，将删除的元素值返回出来"><a href="#pop-随即删除，有返回值，将删除的元素值返回出来" class="headerlink" title="pop() 随即删除，有返回值，将删除的元素值返回出来"></a><code>pop()</code> 随即删除，有返回值，将删除的元素值返回出来</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"><span class="keyword">res</span> = s1.<span class="keyword">pop</span>()    # 随即删除，有返回值，将删除的元素值返回出来</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line"><span class="keyword">c</span></span><br></pre></td></tr></table></figure><h3 id="更新集合元素"><a href="#更新集合元素" class="headerlink" title="更新集合元素"></a>更新集合元素</h3><h4 id="update-更新集合中的元素值，并且去除重复值"><a href="#update-更新集合中的元素值，并且去除重复值" class="headerlink" title="update() 更新集合中的元素值，并且去除重复值"></a><code>update()</code> 更新集合中的元素值，并且去除重复值</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s1.update(&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;)</span><br><span class="line">print(s1)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s1.update('hello')    # 先将字符串 hello 转成集合，再更新到 s1 里去</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, 'l', 'e', 'h', 'o'&#125;</span><br></pre></td></tr></table></figure><h3 id="清空集合元素"><a href="#清空集合元素" class="headerlink" title="清空集合元素"></a>清空集合元素</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s1.clear</span><br></pre></td></tr></table></figure><h3 id="查看两个集合是否有交集（共同部分）"><a href="#查看两个集合是否有交集（共同部分）" class="headerlink" title="查看两个集合是否有交集（共同部分）"></a>查看两个集合是否有交集（共同部分）</h3><h4 id="isdisjoint-判断两个集合没有交集（共同部分），返回-True"><a href="#isdisjoint-判断两个集合没有交集（共同部分），返回-True" class="headerlink" title="isdisjoint() 判断两个集合没有交集（共同部分），返回 True"></a><code>isdisjoint()</code> 判断两个集合没有交集（共同部分），返回 <code>True</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看注释，Ctrl + 点击左键</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isdisjoint</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">    <span class="string">""" Return True if two sets have a null intersection. """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">print(s1.isdisjoint(s2))</span><br><span class="line"># 输出结果</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">print(s1.isdisjoint(s2))</span><br><span class="line"># 输出结果</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="把找出来的差集，重新覆盖原集合"><a href="#把找出来的差集，重新覆盖原集合" class="headerlink" title="把找出来的差集，重新覆盖原集合"></a>把找出来的差集，重新覆盖原集合</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">res = s1.difference(s2)    # s1 - s2</span><br><span class="line">print(res)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">s1.difference(s2)    # s1 - s2</span><br><span class="line">print(s1)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"># 原 s1 的值其实并没有改变</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">s1 = s1.difference(s2)    # s1 = s1 - s2，将改变后的值重新赋值给 s1 将其改变</span><br><span class="line">print(s1)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">s1.difference_update(s2)  # s1=s1.difference # s1=s1-s2，将改变后的值重新赋值给 s1 将其改变</span><br><span class="line">print(s1)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.difference(s2))</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;    <span class="comment"># 这是一个新的元素值</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>&#125;    <span class="comment"># 原 s1 的内容没有改变</span></span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>&#125;</span><br><span class="line">s1.difference_update(s2)    <span class="comment"># 等于 s1 = s1.difference(s2)</span></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;    <span class="comment"># 将差集的结果直接赋值给s1</span></span><br></pre></td></tr></table></figure><h3 id="将对称差集的结果，重新覆盖原集合"><a href="#将对称差集的结果，重新覆盖原集合" class="headerlink" title="将对称差集的结果，重新覆盖原集合"></a>将对称差集的结果，重新覆盖原集合</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">s1</span><span class="selector-class">.symmetric_difference_update</span>()</span><br></pre></td></tr></table></figure><h3 id="将交集的结果，重新覆盖原集合"><a href="#将交集的结果，重新覆盖原集合" class="headerlink" title="将交集的结果，重新覆盖原集合"></a>将交集的结果，重新覆盖原集合</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">s1</span><span class="selector-class">.intersection_update</span>()</span><br></pre></td></tr></table></figure><h3 id="用集合去重，不保证顺序"><a href="#用集合去重，不保证顺序" class="headerlink" title="用集合去重，不保证顺序"></a>用集合去重，不保证顺序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, 1, <span class="string">'a'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="built_in">print</span>(list(<span class="built_in">set</span>(l)))</span><br><span class="line">names = [<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(names))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'wxx'</span>, <span class="string">'alex'</span>, <span class="string">'egon'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="将-集合-转回-原来-的类型，不保证顺序"><a href="#将-集合-转回-原来-的类型，不保证顺序" class="headerlink" title="将 集合 转回 原来 的类型，不保证顺序"></a>将 集合 转回 原来 的类型，不保证顺序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(list(<span class="built_in">set</span>(names)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'wxx'</span>, <span class="string">'alex'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>用集合去重，局限性很强<br>不能保证元数据类型的顺序<br>元数据类型中包含的元素必须全都为不可变类型</p></blockquote><blockquote><p>即想去重，又想保证顺序</p></blockquote><h3 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'lxx'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">item</span> <span class="keyword">in</span> s:</span><br><span class="line">    print(<span class="literal">item</span>)</span><br></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>]</span><br><span class="line"><span class="keyword">new</span><span class="type">_names</span> = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:<span class="type"></span></span><br><span class="line"><span class="type">    if name not in new_names</span>:</span><br><span class="line">        <span class="keyword">new</span><span class="type">_names</span>.append(name)</span><br><span class="line">print(<span class="keyword">new</span><span class="type">_names</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">[<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'wxx'</span>]</span><br></pre></td></tr></table></figure><h3 id="使用-keys-方法"><a href="#使用-keys-方法" class="headerlink" title="使用 keys() 方法"></a>使用 keys() 方法</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">names</span> = [<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>]</span><br></pre></td></tr></table></figure><h3 id="list-方法是把-str字符串-或-tuple元组-转成-list列表"><a href="#list-方法是把-str字符串-或-tuple元组-转成-list列表" class="headerlink" title="list() 方法是把 str字符串 或 tuple元组 转成 list列表"></a><code>list()</code> 方法是把 <code>str</code>字符串 或 <code>tuple</code>元组 转成 <code>list</code>列表</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span><span class="type">_names</span> = list(&#123;&#125;.fromkeys(names).keys())</span><br><span class="line">print(<span class="keyword">new</span><span class="type">_names</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">[<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'wxx'</span>]</span><br></pre></td></tr></table></figure><h3 id="列表类型，字典类型，集合类型方式-去除重复的部分，保证原来的顺序"><a href="#列表类型，字典类型，集合类型方式-去除重复的部分，保证原来的顺序" class="headerlink" title="列表类型，字典类型，集合类型方式 去除重复的部分，保证原来的顺序"></a>列表类型，字典类型，集合类型方式 去除重复的部分，保证原来的顺序</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">l</span> = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">73</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">set</span>()    # 创建一个空集合</span><br><span class="line">new_l = []</span><br><span class="line"><span class="keyword">for</span> d in <span class="variable">l:</span></span><br><span class="line">    # n, <span class="keyword">a</span>, s = d[<span class="string">'name'</span>], d[<span class="string">'age'</span>], d[<span class="string">'sex'</span>]    # 获取到 字典的值</span><br><span class="line">    # <span class="keyword">print</span>(n, <span class="keyword">a</span>, s)</span><br><span class="line">    # s.<span class="built_in">add</span>((n, <span class="keyword">a</span>, s))</span><br><span class="line">    <span class="built_in">values</span> = (d[<span class="string">'name'</span>], d[<span class="string">'age'</span>], d[<span class="string">'sex'</span>])</span><br><span class="line">    <span class="keyword">print</span>(<span class="built_in">values</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">values</span> not in <span class="variable">s:</span></span><br><span class="line">        s.<span class="built_in">add</span>(<span class="built_in">values</span>)</span><br><span class="line">        new_l.<span class="keyword">append</span>(d)</span><br><span class="line"><span class="keyword">print</span>(new_l)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">(<span class="string">'egon'</span>, <span class="number">18</span>, <span class="string">'male'</span>)</span><br><span class="line">(<span class="string">'alex'</span>, <span class="number">73</span>, <span class="string">'male'</span>)</span><br><span class="line">(<span class="string">'egon'</span>, <span class="number">20</span>, <span class="string">'female'</span>)</span><br><span class="line">(<span class="string">'egon'</span>, <span class="number">18</span>, <span class="string">'male'</span>)</span><br><span class="line">(<span class="string">'egon'</span>, <span class="number">18</span>, <span class="string">'male'</span>)</span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">73</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="列表类型，字典类型-方式-去除重复的部分，保证原来的顺序"><a href="#列表类型，字典类型-方式-去除重复的部分，保证原来的顺序" class="headerlink" title="列表类型，字典类型 方式 去除重复的部分，保证原来的顺序"></a>列表类型，字典类型 方式 去除重复的部分，保证原来的顺序</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">l = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">73</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line">new_l = []</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> d <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">        s.append(d)</span><br><span class="line">        new_l.append(d)</span><br><span class="line"><span class="built_in">print</span>(new_l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">73</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="列表类型，字典类型-方式-去除重复的部分，保证原来的顺序-1"><a href="#列表类型，字典类型-方式-去除重复的部分，保证原来的顺序-1" class="headerlink" title="列表类型，字典类型 方式 去除重复的部分，保证原来的顺序"></a>列表类型，字典类型 方式 去除重复的部分，保证原来的顺序</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">l = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">73</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> d <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">        s.append(d)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">73</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="去重，保证原来的顺序"><a href="#去重，保证原来的顺序" class="headerlink" title="去重，保证原来的顺序"></a>去重，保证原来的顺序</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'a'</span>]</span><br><span class="line">l_new = []</span><br><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">item</span> <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">        s.<span class="built_in">add</span>(<span class="keyword">item</span>)</span><br><span class="line">        l_new.append(<span class="keyword">item</span>)</span><br></pre></td></tr></table></figure><h3 id="集合总结"><a href="#集合总结" class="headerlink" title="集合总结"></a>集合总结</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><p>集合能存多个值<br>集合无序<br>集合内元素不能重复<br>集合内的元素必须为不可变类型，但set集合是可变的</p></blockquote><h4 id="用途-1"><a href="#用途-1" class="headerlink" title="用途"></a>用途</h4><blockquote><p>集合是用来进行关系运算，单独取集合的某一个元素是没有意义的，也没有相应的方法<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">交集：<span class="built_in">s1</span> &amp; <span class="built_in">s2</span> 取两个集合的共同部分</span><br><span class="line">差集：<span class="built_in">s1</span> - <span class="built_in">s2</span> 结果存于 <span class="built_in">s1</span> 而不存于 <span class="built_in">s2</span> 的元素集合</span><br><span class="line">补集：<span class="built_in">s1</span> ^ <span class="built_in">s2</span> 扣掉 <span class="built_in">s1</span> 与 <span class="built_in">s2</span> 共同部分，剩下的部分合到一起</span><br><span class="line">并集：<span class="built_in">s1</span> <span class="title">| s2 把两个合到一起，去掉重复</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python集合类型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python字符串类型</title>
      <link href="/2018/07/05/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/07/05/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="str-字符串类型"><a href="#str-字符串类型" class="headerlink" title="str 字符串类型"></a><code>str</code> 字符串类型</h2><h3 id="str-基本使用"><a href="#str-基本使用" class="headerlink" title="str 基本使用"></a><code>str</code> 基本使用</h3><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><blockquote><p>用于 描述型的数据，姓名，性别，地址，国籍 等</p></blockquote><a id="more"></a><h4 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h4><blockquote><p>在单引号，双引号，三引号内包含一串的字符</p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">msg=<span class="string">"hello world"</span>  <span class="comment"># msg=str("hello world") </span></span><br><span class="line"></span><br><span class="line">res1=str(1)</span><br><span class="line">res2=str(1.2)</span><br><span class="line">res3=str([1,2,3])</span><br><span class="line">print(type(res1),type(res2),type(res3))</span><br><span class="line"></span><br><span class="line">info = 'my name is agon'</span><br><span class="line">name = 'egon'    <span class="comment"># name = str('egon')</span></span><br><span class="line">print(name)</span><br><span class="line">print(type(name))</span><br><span class="line">print(id(name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">&lt;class 'str'&gt;</span><br><span class="line">3172826579048</span><br></pre></td></tr></table></figure><h4 id="常用操作-内置的方法"><a href="#常用操作-内置的方法" class="headerlink" title="常用操作+内置的方法"></a>常用操作+内置的方法</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按索引取值（正向取+反向取），只能取</span></span><br><span class="line">msg = <span class="string">'he lo'</span></span><br><span class="line"><span class="built_in">print</span>(msg[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(msg[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">h</span><br><span class="line">l</span><br><span class="line"></span><br><span class="line">msg = <span class="string">'he lo'</span></span><br><span class="line">msg[<span class="number">2</span>] = <span class="string">'A'</span></span><br><span class="line">TypeError: <span class="string">'str'</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="comment"># 字符串不支持更改内容</span></span><br><span class="line"></span><br><span class="line">msg = <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">print</span>(msg[<span class="number">0</span>:])    <span class="comment"># 正向取值</span></span><br><span class="line"><span class="built_in">print</span>(msg[::<span class="number">-1</span>])    <span class="comment"># 反向取值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hello</span><br><span class="line">olleh</span><br></pre></td></tr></table></figure><h4 id="切片（顾头不顾尾，步长）"><a href="#切片（顾头不顾尾，步长）" class="headerlink" title="切片（顾头不顾尾，步长）"></a>切片（顾头不顾尾，步长）</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">msg = 'hello world'</span><br><span class="line"><span class="section">print(msg[0:4])    # 从索引 0 开始 到 4 结束</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hell    <span class="comment"># 遵循 顾头不顾尾 的规则，输出到 o 前面的字符 l 结束</span></span><br><span class="line"></span><br><span class="line"><span class="section">print(msg[0:4:2])    # 步长，隔2步，取一个字符</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从一个大字符串中切除一个子字符串（骨头不顾尾，步长）</span></span><br><span class="line">msg = 'hello world'</span><br><span class="line"><span class="section">print(msg[1:3])</span></span><br><span class="line"><span class="section">print(msg[6:11])</span></span><br><span class="line"><span class="section">print(msg[6:11:2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒着取值，注意方向要一致</span></span><br><span class="line">msg = 'hello world'</span><br><span class="line"><span class="section">print(msg[6:])</span></span><br><span class="line"><span class="section">print(msg[-1:-6:-1])</span></span><br><span class="line"><span class="section">print(msg[-1::-1])</span></span><br><span class="line"><span class="section">print(msg[::-1])</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">inp = <span class="string">'get a.txt'</span></span><br><span class="line"><span class="keyword">cmd</span><span class="bash"> = inp[0:3]</span></span><br><span class="line"><span class="bash">filepath = inp[4:]</span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(cmd)</span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(filepath)</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 输出结果    获取 命令 和 文件名</span></span></span><br><span class="line"><span class="bash">get</span></span><br><span class="line"><span class="bash">a.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">inp = <span class="string">'get a.txt'</span></span><br><span class="line"># inp.<span class="keyword">split</span>()    # 不指定 分割符 默认以空格为分割符</span><br><span class="line"><span class="keyword">res</span> = inp.<span class="keyword">split</span>(<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'get'</span>, <span class="string">'a.txt'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"1234567890"</span></span><br><span class="line">s = <span class="string">"abcdefghij"</span></span><br><span class="line"><span class="built_in">print</span>(s[-1:])      <span class="comment"># 截取最后一个元素</span></span><br><span class="line"><span class="built_in">print</span>(s[0:3])      <span class="comment"># 截取第一位到第三位的字符</span></span><br><span class="line"><span class="built_in">print</span>(s[:])        <span class="comment"># 截取字符串的全部字符</span></span><br><span class="line"><span class="built_in">print</span>(s[6:])       <span class="comment"># 截取第七个字符到结尾</span></span><br><span class="line"><span class="built_in">print</span>(s[:-3])      <span class="comment"># 截取从头开始到倒数第三个字符之前</span></span><br><span class="line"><span class="built_in">print</span>(s[2])        <span class="comment"># 截取第三个字符</span></span><br><span class="line"><span class="built_in">print</span>(s[::-1])     <span class="comment"># 创建一个与原字符串顺序相反的字符串</span></span><br><span class="line"><span class="built_in">print</span>(s[-3:-1])    <span class="comment"># 截取 倒数第三位 和 倒数第一位 之前的字符</span></span><br><span class="line"><span class="built_in">print</span>(s[-3:])      <span class="comment"># 截取 倒数第三位 到结尾</span></span><br><span class="line"><span class="built_in">print</span>(s[:-12:-2])  <span class="comment"># 逆序截取后个数，每 3 个取一个，而且取是逆向取值</span></span><br><span class="line"><span class="built_in">print</span>(s[:10:2])    <span class="comment"># 前 10 个数，每两个取一个</span></span><br></pre></td></tr></table></figure><h4 id="长度len"><a href="#长度len" class="headerlink" title="长度len"></a>长度len</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">'hello world'</span></span><br><span class="line"><span class="built_in">print</span>(len(msg))    <span class="comment"># 长度是11，索引最大到10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="成员运算-in-和-not-in"><a href="#成员运算-in-和-not-in" class="headerlink" title="成员运算 in 和 not in"></a>成员运算 in 和 not in</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">'hello world alex is SB'</span></span><br><span class="line">print(<span class="string">'alex'</span> <span class="keyword">in</span> msg)    <span class="comment"># 判断 子字符串 'alex' 是否在 msg 变量字符串里</span></span><br><span class="line">print(<span class="string">'SB'</span> <span class="keyword">in</span> msg)</span><br><span class="line">print(<span class="string">'egon'</span> <span class="keyword">not</span> <span class="keyword">in</span> msg)</span><br><span class="line">print(<span class="keyword">not</span> <span class="string">'egon'</span> <span class="keyword">in</span> msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">msg = <span class="string">'alex say my name is alex'</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'alex'</span> <span class="keyword">in</span> msg:</span><br><span class="line">    print(<span class="string">'存在'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">存在</span><br><span class="line"></span><br><span class="line">msg = <span class="string">'alex say my name is alex'</span></span><br><span class="line">print(<span class="string">'alex'</span> <span class="keyword">in</span> msg)</span><br><span class="line">print(<span class="string">'alex'</span> <span class="keyword">not</span> <span class="keyword">in</span> msg)    <span class="comment"># 推荐使用这种形式</span></span><br><span class="line">print(<span class="keyword">not</span> <span class="string">'alex'</span> <span class="keyword">in</span> msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h4 id="strip-移除字符串左右两边的字符"><a href="#strip-移除字符串左右两边的字符" class="headerlink" title="strip 移除字符串左右两边的字符"></a>strip 移除字符串左右两边的字符</h4><blockquote><p><code>strip</code> 只能 移除 字符串 左右两边的 字符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'***egon*****'</span></span><br><span class="line"><span class="built_in">print</span>(name.strip(<span class="string">'*'</span>))</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon            <span class="comment"># strip 是生成了一个新的值，并不是改变原值</span></span><br><span class="line">***egon*****</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">name</span> = '     egon   '</span><br><span class="line"><span class="comment"># strip() 不写指定符号，默认去除字符串左右两边的空格</span></span><br><span class="line"><span class="built_in">name</span> = <span class="built_in">name</span>.strip()</span><br><span class="line"><span class="comment"># 将 strip() 生成的新值，重新赋值给 变量name，可以看作是 字符串的变更</span></span><br><span class="line">print(<span class="built_in">name</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">'* / , alex is sb -*=*******'</span></span><br><span class="line"><span class="built_in">print</span>(msg.strip(<span class="string">'*, /-='</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">alex <span class="keyword">is</span> sb</span><br></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">name</span> = input(<span class="string">'&gt;&gt;&gt;: '</span>)</span><br><span class="line"><span class="keyword">name</span> = input(<span class="string">'&gt;&gt;&gt;: '</span>).strip()</span><br><span class="line">print(<span class="keyword">name</span>)</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    <span class="comment"># cmd = input('cmd&gt;&gt;: ')</span></span><br><span class="line">    <span class="comment"># cmd = cmd.strip()    # 主要用于用户输入时，去除左右两边的空格字符</span></span><br><span class="line">    <span class="keyword">cmd</span><span class="bash"> = input(<span class="string">'cmd&gt;&gt;: '</span>).strip()</span></span><br><span class="line"><span class="bash">    <span class="keyword">if</span> len(cmd) == 0:<span class="built_in">continue</span></span></span><br><span class="line"><span class="bash">    <span class="keyword">if</span> cmd == <span class="string">'q'</span>:<span class="built_in">break</span></span></span><br><span class="line"><span class="bash">    <span class="built_in">print</span>(<span class="string">'%s is running'</span> % cmd)</span></span><br></pre></td></tr></table></figure><h4 id="切分（分割）split"><a href="#切分（分割）split" class="headerlink" title="切分（分割）split"></a>切分（分割）split</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">'root:x:0:0:root:/root:/bin/bash'</span></span><br><span class="line"><span class="keyword">print</span>(info)</span><br><span class="line"><span class="keyword">res</span> = info.<span class="keyword">split</span>(<span class="string">':'</span>)  # 不指定分割符，默认从头切到尾</span><br><span class="line"># <span class="keyword">res</span> = info.<span class="keyword">split</span>(<span class="string">':'</span>, maxsplit=-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>, <span class="built_in">type</span>(<span class="keyword">res</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>[<span class="number">0</span>])    # 经过 <span class="keyword">split</span> 分割后，获取下标为 <span class="number">0</span> 的元素</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">roo<span class="variable">t:x</span>:<span class="number">0</span>:<span class="number">0</span>:roo<span class="variable">t:</span>/roo<span class="variable">t:</span>/bin/bash</span><br><span class="line">[<span class="string">'root'</span>, <span class="string">'x'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'root'</span>, <span class="string">'/root'</span>, <span class="string">'/bin/bash'</span>]</span><br><span class="line">root</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmd</span><span class="bash"> = <span class="string">'get a.txt'</span></span></span><br><span class="line"><span class="bash">res = cmd.split()    <span class="comment"># split() 不写参数，默认以空格分割</span></span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(res[0])</span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(res[1])</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 输出结果    获取 命令 和 文件名</span></span></span><br><span class="line"><span class="bash">get</span></span><br><span class="line"><span class="bash">a.txt</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">cmd = <span class="string">'get a.txt 33333'</span></span></span><br><span class="line"><span class="bash">res = cmd.split(<span class="string">' '</span>, maxsplit=1)</span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(res)</span></span><br></pre></td></tr></table></figure><h4 id="循环（循环取值）"><a href="#循环（循环取值）" class="headerlink" title="循环（循环取值）"></a>循环（循环取值）</h4><blockquote><p><code>while</code> 循环取值<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="symbol">'hello</span> world'</span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(msg[n])</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># 输出信息</span><br><span class="line">IndexError: <span class="built_in">string</span> index <span class="keyword">out</span> <span class="keyword">of</span> <span class="keyword">range</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">msg = 'hello world'</span><br><span class="line">n = 0    <span class="comment"># 指定一个计数器</span></span><br><span class="line">while n &lt; len(msg):</span><br><span class="line">    print(msg[n])</span><br><span class="line">    n += 1    <span class="comment"># 自加计数器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">h</span><br><span class="line">e</span><br><span class="line">l</span><br><span class="line">l</span><br><span class="line">o</span><br><span class="line"></span><br><span class="line">w</span><br><span class="line">o</span><br><span class="line">r</span><br><span class="line">l</span><br><span class="line">d</span><br></pre></td></tr></table></figure><h4 id="for循环迭代取值"><a href="#for循环迭代取值" class="headerlink" title="for循环迭代取值"></a>for循环迭代取值</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">msg = 'hello world'</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> msg:</span><br><span class="line">    <span class="keyword">print</span>(item)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line"><span class="built_in">h</span></span><br><span class="line"><span class="built_in">e</span></span><br><span class="line"><span class="keyword">l</span></span><br><span class="line"><span class="keyword">l</span></span><br><span class="line">o</span><br><span class="line"></span><br><span class="line"><span class="built_in">w</span></span><br><span class="line">o</span><br><span class="line"><span class="built_in">r</span></span><br><span class="line"><span class="keyword">l</span></span><br><span class="line"><span class="built_in">d</span></span><br></pre></td></tr></table></figure><h4 id="strip-lstrip-rstrip"><a href="#strip-lstrip-rstrip" class="headerlink" title="strip, lstrip, rstrip"></a><code>strip</code>, <code>lstrip</code>, <code>rstrip</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">'*****hello*****'</span></span><br><span class="line"><span class="built_in">print</span>(name.strip(<span class="string">'*'</span>))    <span class="comment"># 去除左右两边的字符</span></span><br><span class="line"><span class="built_in">print</span>(name.lstrip(<span class="string">'*'</span>))   <span class="comment"># 去除左边的字符</span></span><br><span class="line"><span class="built_in">print</span>(name.rstrip(<span class="string">'*'</span>))   <span class="comment"># 去除右边的字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hello</span><br><span class="line">hello*****</span><br><span class="line">*****hello</span><br></pre></td></tr></table></figure><h4 id="lower-upper"><a href="#lower-upper" class="headerlink" title="lower, upper"></a><code>lower</code>, <code>upper</code></h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name='hello'</span><br><span class="line"><span class="keyword">print</span>(name.<span class="built_in">lower</span>())    <span class="meta"># 转换小写字母</span></span><br><span class="line"><span class="keyword">print</span>(name)            <span class="meta"># lower 方法不改变原值</span></span><br><span class="line"><span class="keyword">print</span>(name.<span class="built_in">upper</span>())    <span class="meta"># 转换大写字母</span></span><br><span class="line"><span class="keyword">print</span>(name)            <span class="meta"># upper 方法不改变原值</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">hello</span><br><span class="line">HELLO</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><h4 id="startswith-endswith"><a href="#startswith-endswith" class="headerlink" title="startswith, endswith"></a><code>startswith</code>, <code>endswith</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">'Hello is run'</span></span><br><span class="line"><span class="keyword">print</span>(name.startswith(<span class="string">'Hello'</span>))    <span class="comment"># 以 Hello 开头</span></span><br><span class="line"><span class="keyword">print</span>(name.endswith(<span class="string">'run'</span>))        <span class="comment"># 以 run 结尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h4 id="format-字符串格式化输出-的-三种方法"><a href="#format-字符串格式化输出-的-三种方法" class="headerlink" title="format 字符串格式化输出 的 三种方法"></a><code>format</code> 字符串格式化输出 的 三种方法</h4><blockquote><p><code>%s</code> 的方式传值需要记住传值位置<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>('name <span class="built_in">is</span> <span class="built_in">%s</span> age <span class="built_in">is</span> <span class="built_in">%s</span>' <span class="symbol">%</span> ('egon', <span class="number">18</span>))</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>缺点严格依赖 <code>%s</code> 的位置</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># format() 里的参数可以不用对应（推荐使用这种方式）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'name is &#123;name&#125; age is &#123;age&#125;'</span>.format(age=<span class="number">18</span>, name=<span class="string">'egon'</span>))</span><br><span class="line"><span class="comment"># 输出方式</span></span><br><span class="line">name <span class="keyword">is</span> egon age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此方法类似 %s 的格式化输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'name is &#123;&#125; age is &#123;&#125;'</span>.format(<span class="string">'egon'</span>, <span class="number">18</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">name <span class="keyword">is</span> egon age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'name is &#123;0&#125;&#123;0&#125;&#123;0&#125; age is &#123;1&#125;'</span>.format(<span class="number">18</span>, <span class="string">'egon'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">name <span class="keyword">is</span> <span class="number">181818</span> age <span class="keyword">is</span> egon</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'&#123;1&#125; &#123;0&#125; &#123;1&#125;'</span>.format(<span class="string">'egon'</span>, <span class="number">18</span>, <span class="string">'male'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">18</span> egon <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'&#123;0&#125; &#123;1&#125; &#123;2&#125;'</span>.format(<span class="string">'egon'</span>, <span class="number">18</span>, <span class="string">'male'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon <span class="number">18</span> male</span><br></pre></td></tr></table></figure><h4 id="split-rsplit"><a href="#split-rsplit" class="headerlink" title="split, rsplit"></a><code>split</code>, <code>rsplit</code></h4><blockquote><p><code>split</code> 可以把 <code>字符串</code> 切割成 <code>列表</code></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmd</span><span class="bash"> = <span class="string">'get|a.txt|3333'</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(cmd.split(<span class="string">'|'</span>, 1))</span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(cmd.rsplit(<span class="string">'|'</span>, 1))</span></span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">'root:x:0:0:root:/root:/bin/bash'</span></span><br><span class="line"><span class="keyword">print</span>(info.<span class="keyword">split</span>(<span class="string">':'</span>))    <span class="comment"># 这里的分割符指定为(:)冒号，默认分隔符为空格</span></span><br><span class="line"><span class="keyword">print</span>(info.<span class="keyword">split</span>(<span class="string">':'</span>, -<span class="number">1</span>))    <span class="comment"># 默认值为 -1，-1 表示从头切到尾</span></span><br><span class="line"></span><br><span class="line">info = <span class="string">'root:x:0:0:root:/root:/bin/bash'</span>     <span class="comment"># 获取第一个 root</span></span><br><span class="line"><span class="keyword">print</span>(info.<span class="keyword">split</span>(<span class="string">':'</span>, <span class="number">1</span>))    <span class="comment"># 1 表示切一次，从左往右切割一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'root'</span>, <span class="string">'x:0:0:root:/root:/bin/bash'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">info</span> = <span class="string">'root:x:0:0:root:/root:/bin/bash'</span></span><br><span class="line">print(<span class="literal">info</span>.rsplit(<span class="string">':'</span>, <span class="number">1</span>))    <span class="comment"># 从右开始切割一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'root:x:0:0:root:/root'</span>, <span class="string">'/bin/bash'</span>]</span><br></pre></td></tr></table></figure><h4 id="join-拼接"><a href="#join-拼接" class="headerlink" title="join 拼接"></a>join 拼接</h4><blockquote><p>join 把 列表 转成 字符串，前提是列表中的所有数据为字符串<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">info</span> = <span class="string">'root:x:0:0:root:/root:/bin/bash'</span></span><br><span class="line">str_to_list = <span class="keyword">info</span>.<span class="keyword">split</span>(<span class="string">':'</span>)</span><br><span class="line">print(str_to_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'root'</span>, <span class="string">'x'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'root'</span>, <span class="string">'/root'</span>, <span class="string">'/bin/bash'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">'root'</span>, <span class="string">'x'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'root'</span>, <span class="string">'/root'</span>, <span class="string">'/bin/bash'</span>]</span><br><span class="line">list_to_str = <span class="string">':'</span>.join(lst)</span><br><span class="line">print(list_to_str)</span><br><span class="line">print(type(list_to_str))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="iterable-参数"><a href="#iterable-参数" class="headerlink" title="iterable 参数"></a>iterable 参数</h4><blockquote><p>可被 for 循环的 全都是 iterable<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i in <span class="keyword">ls</span><span class="variable">t:</span></span><br><span class="line">    <span class="keyword">print</span>(i)</span><br><span class="line"></span><br><span class="line"># 注意：<span class="keyword">join</span> 只能连接 所包含的元素 全都为 字符串类型 的列表</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="string">':'</span>.<span class="keyword">join</span>(lst)</span><br><span class="line">TypeError: sequence item <span class="number">0</span>: expected str instance, <span class="keyword">int</span> found</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="replace-替换字符串"><a href="#replace-替换字符串" class="headerlink" title="replace 替换字符串"></a>replace 替换字符串</h4><blockquote><p><code>replace</code> 不会改变原值<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msg = '<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> alex, alex <span class="built_in">say</span> hello'</span><br><span class="line">print(msg.replace('alex', 'egon'))        <span class="comment"># 不指定，表示全部替换</span></span><br><span class="line">print(msg.replace('alex', 'egon', <span class="number">1</span>))     <span class="comment"># 1 表示 替换第一个</span></span><br><span class="line">print(msg.replace('alex', 'egon', <span class="number">-1</span>))    <span class="comment"># -1 表示全部替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> egon, egon <span class="built_in">say</span> hello</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> egon, alex <span class="built_in">say</span> hello</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> egon, egon <span class="built_in">say</span> hello</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="isdigit-判断-字符串-是否是-纯数字"><a href="#isdigit-判断-字符串-是否是-纯数字" class="headerlink" title="isdigit 判断 字符串 是否是 纯数字"></a><code>isdigit</code> 判断 <code>字符串</code> 是否是 <code>纯数字</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span>(<span class="string">'10101'</span>.isdigit())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'abc123'</span>.isdigit())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><blockquote><p>判断 <code>bytes</code> 和 <code>unicode</code> 类型，是最常用的用于于判断 字符 是否为 “数字” 的方法</p></blockquote><blockquote><p> 猜年龄演示错误结果</p></blockquote><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="string">'abcdefg'</span></span><br><span class="line"><span class="keyword">int</span>(age)</span><br><span class="line"><span class="meta"># 不是整型的报错信息</span></span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> <span class="keyword">int</span>() with base <span class="number">10</span>: <span class="string">'abcdefg'</span></span><br><span class="line"></span><br><span class="line">age = <span class="number">50</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    age = <span class="keyword">input</span>(<span class="string">'&gt;&gt;: '</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> age.isdigit():<span class="keyword">continue</span></span><br><span class="line">    age = <span class="keyword">int</span>(age)</span><br><span class="line">    <span class="keyword">if</span> age &gt; <span class="number">50</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'too big'</span>)</span><br><span class="line">    elif age &lt; <span class="number">50</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'too small'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'you got it'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="find-rfind-index-rindex-coun"><a href="#find-rfind-index-rindex-coun" class="headerlink" title="find, rfind, index, rindex, coun"></a><code>find</code>, <code>rfind</code>, <code>index</code>, <code>rindex</code>, <code>coun</code></h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">'my name is egon, egon is nb'</span></span><br><span class="line"><span class="built_in">print</span>(msg.find(<span class="string">'egon'</span>))    <span class="comment"># 查找 子字符串 在 大字符串中的起始位置</span></span><br><span class="line">                           <span class="comment"># 找的是 'egon' 在大字符串 msg 中的起始索引</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.find(<span class="string">'egon'</span>, <span class="number">1</span>, <span class="number">5</span>)    <span class="comment"># 从 1 开始 到 5 结束</span></span><br><span class="line">                                 <span class="comment"># 顾头不顾尾，找不到则返回 -1 不会报错，找到了则显示索引</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.index(<span class="string">'egon'</span>, <span class="number">1</span>, <span class="number">3</span>))    <span class="comment"># 同上，但是找不到会报错</span></span><br><span class="line"><span class="comment"># 报错信息</span></span><br><span class="line">ValueError: substring <span class="keyword">not</span> found</span><br><span class="line"><span class="built_in">print</span>(msg.index(<span class="string">'egon'</span>))    <span class="comment"># 不写位置参数，和 find() 效果一样</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.rfind(<span class="string">'egon'</span>))</span><br><span class="line"><span class="built_in">print</span>(msg.rindex(<span class="string">'egon'</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.count(<span class="string">'egon'</span>))          <span class="comment"># 统计 子字符串 有多少个</span></span><br><span class="line"><span class="built_in">print</span>(msg.count(<span class="string">'egon'</span>, <span class="number">1</span>, <span class="number">3</span>))    <span class="comment"># 顾头不顾尾，如果不指定范围则查找所有</span></span><br></pre></td></tr></table></figure><h4 id="center-ljust-rjust-zfill"><a href="#center-ljust-rjust-zfill" class="headerlink" title="center, ljust, rjust, zfill"></a><code>center</code>, <code>ljust</code>, <code>rjust</code>, <code>zfill</code></h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'info'</span>.center(<span class="number">30</span>,<span class="string">'#'</span>))    # 居中显示，两个参数，宽度，填充字符</span><br><span class="line"># 输出结果</span><br><span class="line">#############info##############</span><br><span class="line"></span><br><span class="line">print(<span class="string">'info'</span>.ljust(<span class="number">30</span>,<span class="string">'*'</span>))    # 左对齐，两个参数，宽度，填充字符</span><br><span class="line"># 输出结果</span><br><span class="line">info**************************</span><br><span class="line"></span><br><span class="line">print(<span class="string">'info'</span>.rjust(<span class="number">30</span>,<span class="string">'='</span>))    # 右对齐，两个参数，宽度，填充字符</span><br><span class="line"># 输出结果</span><br><span class="line">==========================info</span><br><span class="line"></span><br><span class="line">print(<span class="string">'info'</span>.zfill(<span class="number">30</span>))    # 用 <span class="number">0</span> 填充 和 rjust 效果一样</span><br><span class="line"># 输出结果</span><br><span class="line"><span class="number">00000000000000000000000000</span>info</span><br></pre></td></tr></table></figure><h4 id="expandtabs-控制-tab键-的-空格个数"><a href="#expandtabs-控制-tab键-的-空格个数" class="headerlink" title="expandtabs 控制 tab键 的 空格个数"></a><code>expandtabs</code> 控制 <code>tab</code>键 的 空格个数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'aaabbbb'</span>, end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'cccc'</span>, end=<span class="string">''</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">aaabbbbcccc</span><br><span class="line"></span><br><span class="line">print(aaaa\nbbbb)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">aaaa</span><br><span class="line">bbbb</span><br><span class="line"></span><br><span class="line">print(<span class="string">r'a\tb'</span>)    <span class="comment"># \t 表示制表符 tab，如想取消掉这个制表符效果，在字符串前加 r</span></span><br><span class="line">                  <span class="comment"># r开头的字符串内都是原始字符串，右斜杠没有特殊意义</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'a\tb'</span>)     <span class="comment"># r 表示原始字符串(raw string)</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">a\tb</span><br><span class="line">ab</span><br><span class="line">print(<span class="string">'aaa\tbbb'</span>.expandtabs(<span class="number">3</span>))    <span class="comment"># expandtabs 控制空格数</span></span><br><span class="line">print(<span class="string">'aaa\tbbb'</span>.expandtabs(tabsize=<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">aaa   bbb</span><br></pre></td></tr></table></figure><h4 id="captalize-swapcase-title"><a href="#captalize-swapcase-title" class="headerlink" title="captalize, swapcase, title"></a><code>captalize</code>, <code>swapcase</code>, <code>title</code></h4><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">print</span>(<span class="string">'abc'</span>.capitalize())    <span class="comment"># 首字母大写</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">Abc</span><br><span class="line"></span><br><span class="line"><span class="literal">print</span>(<span class="string">'Ab'</span>.swapcase())    <span class="comment"># 大小写翻转</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">aB</span><br><span class="line"></span><br><span class="line"><span class="literal">print</span>(<span class="string">'my name is egon'</span>.title())    <span class="comment"># 每个单词的首字母大写</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">My <span class="keyword">Name</span> Is Egon</span><br></pre></td></tr></table></figure><h4 id="is数字系列"><a href="#is数字系列" class="headerlink" title="is数字系列"></a>is数字系列</h4><blockquote><p>在 <code>Python3</code> 中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="string">b'4'</span>    <span class="comment"># bytes</span></span><br><span class="line">num2=<span class="string">u'4'</span>    <span class="comment"># unicode, Python3 中无需加 u 就是 unicode</span></span><br><span class="line">num3=<span class="string">'四'</span>    <span class="comment"># 中文/繁体数字 肆</span></span><br><span class="line">num4=<span class="string">'Ⅳ'</span>    <span class="comment"># 罗马数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isdigt 判断字符串是否是 bytes，unicode</span></span><br><span class="line"></span><br><span class="line">print(num1.isdigit())    <span class="comment"># 常用（推荐）</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(num2.isdigit())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(num3.isdigit())    <span class="comment"># 不能判断中文数字</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">print(num4.isdigit())    <span class="comment"># 不能判断罗马数字</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="isnumeric-判断字符串是否是-unicode，中文-繁体数字，罗马数字"><a href="#isnumeric-判断字符串是否是-unicode，中文-繁体数字，罗马数字" class="headerlink" title="isnumeric 判断字符串是否是 unicode，中文/繁体数字，罗马数字"></a><code>isnumeric</code> 判断字符串是否是 <code>unicode</code>，中文/繁体数字，罗马数字</h4><blockquote><p><code>bytes</code> 类型没有 <code>isnumeric</code> 方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="string">b'4'</span>    <span class="comment"># bytes</span></span><br><span class="line">num2=<span class="string">u'4'</span>    <span class="comment"># unicode, Python3 中无需加 u 就是 unicode</span></span><br><span class="line">num3=<span class="string">'四'</span>    <span class="comment"># 中文/繁体数字 肆</span></span><br><span class="line">num4=<span class="string">'Ⅳ'</span>    <span class="comment"># 罗马数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isnumeric: unicode, 中文，罗马</span></span><br><span class="line"></span><br><span class="line">print(num2.isnumeric())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(num3.isnumeric())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(num4.isnumeric())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="isdecimal-判断字符串是否是-uncicode"><a href="#isdecimal-判断字符串是否是-uncicode" class="headerlink" title="isdecimal 判断字符串是否是 uncicode"></a><code>isdecimal</code> 判断字符串是否是 <code>uncicode</code></h4><blockquote><p><code>bytes</code> 类型没有 <code>isdecimal</code> 方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="string">b'4'</span>    <span class="comment"># bytes</span></span><br><span class="line">num2=<span class="string">u'4'</span>    <span class="comment"># unicode, Python3 中无需加 u 就是 unicode</span></span><br><span class="line">num3=<span class="string">'四'</span>    <span class="comment"># 中文/繁体数字 肆</span></span><br><span class="line">num4=<span class="string">'Ⅳ'</span>    <span class="comment"># 罗马数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isdecimal:unicode</span></span><br><span class="line"></span><br><span class="line">print(num2.isdecimal())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(num3.isdecimal())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">print(num4.isdecimal())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>三者 <code>都不能</code> 判断 <code>浮点数</code></p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num5 = <span class="string">'4.3'</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(num5.isdigit()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(num5.isdecimal()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(num5.isnumeric()</span></span>)</span><br></pre></td></tr></table></figure><blockquote><p>总结：<br>最常用的是 <code>isdigit</code>，可以判断 <code>bytes</code> 和 <code>unicode</code> 类型，这也是最常见的数字应用场景<br>如果要判断 中文数字 或 罗马数字，则需要用到 <code>isnumeric</code></p></blockquote><h4 id="is其他"><a href="#is其他" class="headerlink" title="is其他"></a>is其他</h4><blockquote><p>判断字符串内是否是空格<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span>(<span class="string">''</span>.isspace())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'        '</span>.isspace())    <span class="comment"># 判断字符串内是否是空格</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串是否全部由字母组成</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">''</span>.isalpha())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'abcdefg'</span>.isalpha())    <span class="comment"># 判断字符串是否全部由字母组成</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'abc123'</span>.isalpha())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串中是否由字母或数字组成</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">''</span>.isalnum())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'abc123'</span>.isalnum())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'abcdefg'</span>.isalnum())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'123456'</span>.isalnum())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串是否全都是小写字母</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'Garfield'</span>.islower())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'garfield'</span>.islower())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串是否全都是大写字母</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'Garfield'</span>.isupper())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'garfield'</span>.isupper())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'GARFIELD'</span>.isupper())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串是否是标题，也就是单词首字母是否大写</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'Garfield'</span>.istitle())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'garfield'</span>.istitle())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">''</span>.isprintable())</span><br><span class="line"><span class="keyword">print</span>(<span class="string">''</span>.isidentifier())</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="str-字符串类型总结"><a href="#str-字符串类型总结" class="headerlink" title="str 字符串类型总结"></a><code>str</code> 字符串类型总结</h4><blockquote><ol><li>只能存一个值</li><li>有序（能够按索引取值的属于有序的）</li><li>不可变类型<br>不可变：值变，id也变。不可变==可hash<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">'abc'</span></span><br><span class="line"><span class="built_in">print</span>(id(x))</span><br><span class="line">x = <span class="string">'bcd'</span></span><br><span class="line"><span class="built_in">print</span>(id(x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">1695860198624</span><br><span class="line">1695860293792</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.cnblogs.com/linhaifeng/articles/7133357.html#_label3" target="_blank" rel="noopener">http://www.cnblogs.com/linhaifeng/articles/7133357.html#_label3</a></p>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python字符串类型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python字典类型</title>
      <link href="/2018/07/05/Python%E5%AD%97%E5%85%B8%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/07/05/Python%E5%AD%97%E5%85%B8%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="Python-dict-字典类型"><a href="#Python-dict-字典类型" class="headerlink" title="Python dict 字典类型"></a>Python dict 字典类型</h2><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><blockquote><p>可变类型，存放多个值，<code>key:value</code>，<code>key</code> 对 <code>value</code> 有描述性的作用</p></blockquote><a id="more"></a><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><blockquote><p>在 <code>{}</code> 内用逗号分隔 多个元素 每个元素都是 <code>key:value</code> 的形式<br><code>key</code> 必须是不可变类型且唯一，<code>key</code> 通常都是用字符串类型，需要可描述的<br><code>value</code> 可以是任意数据类型<br>即字典的 <code>key</code> 可以是 <code>int</code>, <code>float</code>, <code>tuple</code>, <code>str</code>, 通常是字符串类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">3.1</span>:<span class="number">1</span>, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):<span class="number">2222</span>&#125;  <span class="comment"># d = dict(&#123;3.1:1, (1,2,3):2222&#125;)</span></span><br><span class="line">print(d[(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2222</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d1 = dict(x=<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>)</span><br><span class="line">print(d1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d2 = dict([(<span class="string">'name'</span>, <span class="string">'egon'</span>), [<span class="string">'age'</span>, <span class="number">18</span>], (<span class="string">'sex'</span>, <span class="string">'male'</span>)])</span><br><span class="line">print(d2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;    <span class="comment"># info = dict(&#123;'name': 'egon', 'age': 18&#125;)</span></span><br><span class="line">print(info[<span class="string">'name'</span>])    <span class="comment"># 根据 key 取值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">print(id(info))    <span class="comment"># 修改前，查看 id</span></span><br><span class="line">info[<span class="string">'name'</span>] = <span class="string">'EGON'</span>    <span class="comment"># 根据 key 取值，然后修改 value</span></span><br><span class="line">print(id(info))    <span class="comment"># 修改前，查看 id</span></span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1552302365936</span></span><br><span class="line"><span class="number">1552302365936</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'EGON'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加一个 <code>key</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">d[<span class="string">'sex'</span>] = <span class="string">'male'</span></span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>key</code> 必须是独一无二的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'EGON'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;  <span class="comment"># 只认最后一个key</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>key</code> 必须是不可变类型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, [<span class="number">1</span>, <span class="number">2</span>]: <span class="number">18</span>&#125;</span><br><span class="line">print(info[[<span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: unhashable type: <span class="string">'list'</span></span><br><span class="line"><span class="comment"># 列表是 可变类型，不可hash，不支持key</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>元组是不可变类型，可 <code>hash</code>，支持 <code>key</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, (<span class="number">1</span>, <span class="number">2</span>): <span class="number">18</span>&#125;</span><br><span class="line">print(info[(<span class="number">1</span>, <span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="常用操作-内置方法"><a href="#常用操作-内置方法" class="headerlink" title="常用操作+内置方法"></a>常用操作+内置方法</h3><blockquote><p>按 key 存取值：可存值，也可取值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>&#125;</span><br><span class="line">d[<span class="string">'x'</span>] = <span class="number">2</span></span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>&#125;</span><br><span class="line">print(id(d))</span><br><span class="line">print(d)</span><br><span class="line">d[<span class="string">'x'</span>] = <span class="number">2</span></span><br><span class="line">print(id(d))</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2536822683256</span></span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="number">2536822683256</span></span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>&#125;</span><br><span class="line">d[<span class="string">'y'</span>] = <span class="number">3</span></span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="长度len"><a href="#长度len" class="headerlink" title="长度len"></a>长度<code>len</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(len(info))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">print(len(d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="成员运算-in-和-not-in"><a href="#成员运算-in-和-not-in" class="headerlink" title="成员运算 in 和 not in"></a>成员运算 <code>in</code> 和 <code>not in</code></h3><blockquote><p>判断的是字典的 <code>key</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(<span class="string">'x'</span> <span class="keyword">in</span> info)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">print(<span class="number">18</span> <span class="keyword">in</span> d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">print(<span class="string">'name'</span> <span class="keyword">in</span> d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">del</span> info[<span class="string">'x'</span>]</span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(info.popitem())    <span class="comment"># 随机删，将删除的内容以元组格式返回</span></span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="string">'z'</span>, <span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">d.pop(<span class="string">'xx'</span>)    <span class="comment"># 如果指定了一个不存在的 key</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">KeyError: <span class="string">'xx'</span></span><br><span class="line">d.pop(<span class="string">'sex'</span>, <span class="keyword">None</span>)    <span class="comment"># 指定了 None 就不会报错了</span></span><br><span class="line"></span><br><span class="line">res = d.pop(<span class="string">'sex'</span>, <span class="keyword">None</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop() 删除 key 对应的元素，并返回 value 值</span></span><br><span class="line">res = d.pop(<span class="string">'name'</span>, <span class="keyword">None</span>)    <span class="comment"># 删除存在的 key 时，可以不用写 None</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line">info = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(info.pop(<span class="string">'x'</span>))    <span class="comment"># 根据 key 删除，把删除的 value 返回出来</span></span><br><span class="line">print(info)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(info.pop(<span class="string">'xxxxx'</span>))    <span class="comment"># 如果没有这个 key，在没有指定 default 值的情况下，会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">KeyError: <span class="string">'xxxxx'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(info.pop(<span class="string">'xxxxx'</span>, <span class="string">'没有找到key'</span>))    <span class="comment"># 指定default值的情况下，会输出 default 的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">没有找到key</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(info.pop(<span class="string">'xxxxx'</span>, <span class="keyword">None</span>))    <span class="comment"># 通常 default值 写None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="键keys-，值values-，键值对items"><a href="#键keys-，值values-，键值对items" class="headerlink" title="键keys()，值values()，键值对items()"></a>键<code>keys()</code>，值<code>values()</code>，键值对<code>items()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">d.keys()      <span class="comment"># 取 key</span></span><br><span class="line">d.values()    <span class="comment"># 取 value</span></span><br><span class="line">d.items()     <span class="comment"># 取 key value</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Python2</code> 中字典的格式<br><code>Python 2.7.15</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.keys()</span><br><span class="line">[<span class="string">'age'</span>, <span class="string">'name'</span>]    <span class="comment"># 5个鸡蛋</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.values()</span><br><span class="line">[<span class="number">18</span>, <span class="string">'egon'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.items()</span><br><span class="line">[(<span class="string">'age'</span>, <span class="number">18</span>), (<span class="string">'name'</span>, <span class="string">'egon'</span>)]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg_dic = &#123;</span><br><span class="line"><span class="meta">... </span>    <span class="string">'apple'</span>: <span class="number">10</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'tesla'</span>: <span class="number">100000</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'mac'</span>: <span class="number">3000</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'lenovo'</span>: <span class="number">30000</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'chicken'</span>: <span class="number">10</span>,</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(msg_dic.keys())</span><br><span class="line">[<span class="string">'tesla'</span>, <span class="string">'mac'</span>, <span class="string">'lenovo'</span>, <span class="string">'apple'</span>, <span class="string">'chicken'</span>]    <span class="comment"># 5个鸡蛋</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(msg_dic.values())</span><br><span class="line">[<span class="number">100000</span>, <span class="number">3000</span>, <span class="number">30000</span>, <span class="number">10</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg_dic.items()</span><br><span class="line">[(<span class="string">'tesla'</span>, <span class="number">100000</span>), (<span class="string">'mac'</span>, <span class="number">3000</span>), (<span class="string">'lenovo'</span>, <span class="number">30000</span>), (<span class="string">'apple'</span>, <span class="number">10</span>), (<span class="string">'chicken'</span>, <span class="number">10</span>)]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>Python3</code> 做了优化，节省内存<br><code>Python 3.6.5</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.keys():</span><br><span class="line">    print(k)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</span><br><span class="line">    print(v)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line"><span class="number">18</span></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> d.items():    <span class="comment"># k, v = ('name', 'egon')</span></span><br><span class="line">    print(item)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="string">'name'</span>, <span class="string">'egon'</span>)</span><br><span class="line">(<span class="string">'age'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():    <span class="comment"># k, v = ('name', 'egon')</span></span><br><span class="line">    print(k,v)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">name egon</span><br><span class="line">age <span class="number">18</span></span><br></pre></td></tr></table></figure><blockquote><p><code>python3</code> 做出 <code>python2</code> 中的结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">print(list(d.keys()))</span><br><span class="line">print(list(d.values()))</span><br><span class="line">print(list(d.items()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'age'</span>]</span><br><span class="line">[<span class="string">'egon'</span>, <span class="number">18</span>]</span><br><span class="line">[(<span class="string">'name'</span>, <span class="string">'egon'</span>), (<span class="string">'age'</span>, <span class="number">18</span>)]</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg_dic = &#123;</span><br><span class="line"><span class="meta">... </span>    <span class="string">'apple'</span>: <span class="number">10</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'tesla'</span>: <span class="number">100000</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'mac'</span>: <span class="number">3000</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'lenovo'</span>: <span class="number">30000</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'chicken'</span>: <span class="number">10</span>,</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg_dic.keys()</span><br><span class="line">dict_keys([<span class="string">'apple'</span>, <span class="string">'tesla'</span>, <span class="string">'mac'</span>, <span class="string">'lenovo'</span>, <span class="string">'chicken'</span>])    <span class="comment"># 一只有5个鸡蛋的老母鸡</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = msg_dic.keys()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(res)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict_keys</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(res)</span> <span class="title">is</span> <span class="title">list</span></span></span><br><span class="line"><span class="class"><span class="title">False</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> msg_dic.keys():    <span class="comment"># 这种方式比较鸡肋，不加 .keys() 默认是循环 key</span></span><br><span class="line">    print(k)</span><br><span class="line">等于</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> msg_dic:</span><br><span class="line">    print(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">apple</span><br><span class="line">tesla</span><br><span class="line">mac</span><br><span class="line">lenovo</span><br><span class="line">chicken</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">msg_dic = &#123;</span><br><span class="line">    <span class="string">'apple'</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">'tesla'</span>: <span class="number">100000</span>,</span><br><span class="line">    <span class="string">'mac'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'lenovo'</span>: <span class="number">30000</span>,</span><br><span class="line">    <span class="string">'chicken'</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> msg_dic.values():    <span class="comment"># 只获取value</span></span><br><span class="line">    print(v)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">100000</span></span><br><span class="line"><span class="number">3000</span></span><br><span class="line"><span class="number">30000</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> msg_dic.items():    <span class="comment"># 获取 key 和 value</span></span><br><span class="line">    print(x)</span><br><span class="line"><span class="comment"># [('apple', 10), ('tesla', 100000), ('mac', 3000), ('lenovo', 30000), ('chicken', 10)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="string">'apple'</span>, <span class="number">10</span>)</span><br><span class="line">(<span class="string">'tesla'</span>, <span class="number">100000</span>)</span><br><span class="line">(<span class="string">'mac'</span>, <span class="number">3000</span>)</span><br><span class="line">(<span class="string">'lenovo'</span>, <span class="number">30000</span>)</span><br><span class="line">(<span class="string">'chicken'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [('apple', 10), ('tesla', 100000), ('mac', 3000), ('lenovo', 30000), ('chicken', 10)]</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> msg_dic.items():</span><br><span class="line">    print(x[<span class="number">0</span>], x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">apple <span class="number">10</span></span><br><span class="line">tesla <span class="number">100000</span></span><br><span class="line">mac <span class="number">3000</span></span><br><span class="line">lenovo <span class="number">30000</span></span><br><span class="line">chicken <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [('apple', 10), ('tesla', 100000), ('mac', 3000), ('lenovo', 30000), ('chicken', 10)]</span></span><br><span class="line"><span class="comment"># k, v = ('apple', 10)</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> msg_dic.items():</span><br><span class="line">    print(k, v)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">apple <span class="number">10</span></span><br><span class="line">tesla <span class="number">100000</span></span><br><span class="line">mac <span class="number">3000</span></span><br><span class="line">lenovo <span class="number">30000</span></span><br><span class="line">chicken <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="循环（循环取值）"><a href="#循环（循环取值）" class="headerlink" title="循环（循环取值）"></a>循环（循环取值）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:    <span class="comment"># d 不加 .keys() 默认也是取 key</span></span><br><span class="line">    print(k)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">    print(k, d[k])</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">name egon</span><br><span class="line">age <span class="number">18</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">msg_dic = &#123;</span><br><span class="line">    <span class="string">'apple'</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">'tesla'</span>: <span class="number">100000</span>,</span><br><span class="line">    <span class="string">'mac'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'lenovo'</span>: <span class="number">30000</span>,</span><br><span class="line">    <span class="string">'chicken'</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> msg_dic:</span><br><span class="line">    print(k, msg_dic[k])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">apple <span class="number">10</span></span><br><span class="line">tesla <span class="number">100000</span></span><br><span class="line">mac <span class="number">3000</span></span><br><span class="line">lenovo <span class="number">30000</span></span><br><span class="line">chicken <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">msg_dic = &#123;</span><br><span class="line">    <span class="string">'apple'</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">'tesla'</span>: <span class="number">100000</span>,</span><br><span class="line">    <span class="string">'mac'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'lenovo'</span>: <span class="number">30000</span>,</span><br><span class="line">    <span class="string">'chicken'</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(msg_dic[<span class="string">'applexxxxx'</span>])    <span class="comment"># key 不存在的情况下，会报错</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">KeyError: <span class="string">'applexxxxx'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'applexxxxx'</span> <span class="keyword">in</span> msg_dic:    <span class="comment"># 利用 if 判断 key 是否存在</span></span><br><span class="line">    print(msg_dic[<span class="string">'applexxxxx'</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># 代码比较多</span></span><br><span class="line"></span><br><span class="line">print(msg_dic.get(<span class="string">'applexxxxx'</span>))    <span class="comment"># key 不存在的情况下，默认返回None</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以自定义返回值</span></span><br><span class="line">print(msg_dic.get(<span class="string">'applexxxxx'</span>, <span class="string">'xxxxx'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">xxxxx</span><br></pre></td></tr></table></figure><h4 id="dict-get-取值"><a href="#dict-get-取值" class="headerlink" title="dict.get() 取值"></a><code>dict.get()</code> 取值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">d[<span class="string">'sex'</span>]</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">KeyError: <span class="string">'sex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了避免这种问题</span></span><br><span class="line">res = d.get(<span class="string">'sex'</span>, <span class="string">'没有这个key'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">没有这个key</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">res = d.get(<span class="string">'name'</span>, <span class="keyword">None</span>)    <span class="comment"># 通常写None</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br></pre></td></tr></table></figure><h4 id="dict-popitem-随机删除"><a href="#dict-popitem-随机删除" class="headerlink" title="dict.popitem() 随机删除"></a><code>dict.popitem()</code> 随机删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">res = print(d.popitem())    <span class="comment"># 随机删，将删除的内容以元组格式返回</span></span><br><span class="line">print(d, res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>&#125; (<span class="string">'age'</span>: <span class="number">18</span>)</span><br></pre></td></tr></table></figure><h4 id="dict-update-更新"><a href="#dict-update-更新" class="headerlink" title="dict.update() 更新"></a><code>dict.update()</code> 更新</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">d.update(&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'name'</span>: <span class="string">'EGON'</span>&#125;)  <span class="comment"># 老字典 d 没有的则添加，有的则以新字典为准进行修改</span></span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'EGON'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'x'</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">d1 = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;</span><br><span class="line">d1.update(&#123;<span class="string">'x'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;)    <span class="comment"># 有原值就更新，没有的就新增</span></span><br><span class="line">print(d1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">2</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="dict-setdefault-有则不改，无则增加"><a href="#dict-setdefault-有则不改，无则增加" class="headerlink" title="dict.setdefault() 有则不改，无则增加"></a>dict.setdefault() 有则不改，无则增加</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">res = d.setdefault(<span class="string">'name'</span>: <span class="string">'EGON'</span>&#125;)  <span class="comment"># 当key存在时，不修改值，会返回原值</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">res = d.setdefault(<span class="string">'sex'</span>: <span class="string">'male'</span>&#125;)   <span class="comment"># 当key不存在时，则新增一个元素，会返回一个新值</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">male</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">d.setdefault(<span class="string">'name'</span>: <span class="string">'EGON'</span>&#125;)  <span class="comment"># 当key存在时，不修改值</span></span><br><span class="line">d.setdefault(<span class="string">'sex'</span>: <span class="string">'male'</span>&#125;)   <span class="comment"># 当key不存在时，则新增一个元素</span></span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;.setdefault()    <span class="comment"># 有则不改，无则增加</span></span><br><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;</span><br><span class="line">d.setdefault(<span class="string">'x'</span>, <span class="number">1000</span>)    <span class="comment"># 当key存在时 则不改变 key 对应的值，返回原值</span></span><br><span class="line">res = d.setdefault(<span class="string">'x'</span>, <span class="number">1000</span>)</span><br><span class="line">print(d)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;</span><br><span class="line">d.setdefault(<span class="string">'z'</span>, <span class="number">1000</span>)    <span class="comment"># key不存在 则增加一个 key:value，返回新增的value</span></span><br><span class="line">res = d.setdefault(<span class="string">'z'</span>, <span class="number">1000</span>)</span><br><span class="line">print(d)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">1000</span>&#125;</span><br><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计单词个数</span></span><br><span class="line">统计 s = <span class="string">'hello alex alex say hello sb sb'</span> 中每个单词的个数</span><br><span class="line">结果如：&#123;<span class="string">'hello'</span>: <span class="number">2</span>, <span class="string">'alex'</span>: <span class="number">2</span>, <span class="string">'say'</span>: <span class="number">1</span>, <span class="string">'sb'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">s = <span class="string">'hello alex alex say hello sb sb'</span></span><br><span class="line">words = s.split()</span><br><span class="line">print(words)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'alex'</span>, <span class="string">'alex'</span>, <span class="string">'say'</span>, <span class="string">'hello'</span>, <span class="string">'sb'</span>, <span class="string">'sb'</span>]</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">        d[word] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d[word] += <span class="number">1</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'hello'</span>: <span class="number">2</span>, <span class="string">'alex'</span>: <span class="number">2</span>, <span class="string">'say'</span>: <span class="number">1</span>, <span class="string">'sb'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line">words = s.split()</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="comment"># print(word, words.count(word))</span></span><br><span class="line">    d[word] = words.count(word)</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'hello'</span>: <span class="number">2</span>, <span class="string">'alex'</span>: <span class="number">2</span>, <span class="string">'say'</span>: <span class="number">1</span>, <span class="string">'sb'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line">words = s.split()</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    d.setdefault(word, words.count(word))</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'hello'</span>: <span class="number">2</span>, <span class="string">'alex'</span>: <span class="number">2</span>, <span class="string">'say'</span>: <span class="number">1</span>, <span class="string">'sb'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="dict-fromkeys-用于字典的初始化，快速造出字典"><a href="#dict-fromkeys-用于字典的初始化，快速造出字典" class="headerlink" title="dict.fromkeys 用于字典的初始化，快速造出字典"></a><code>dict.fromkeys</code> 用于字典的初始化，快速造出字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;.fromkeys(序列类型, 值)</span><br><span class="line">序列类型：有索引的类型（字符串，列表，元组）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于字典的初始化</span></span><br><span class="line"><span class="comment"># items = ['name', 'age', 'sex']</span></span><br><span class="line">items = (<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>)</span><br><span class="line">dic = d.fromkeys(items, <span class="keyword">None</span>)</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="keyword">None</span>, <span class="string">'age'</span>: <span class="keyword">None</span>, <span class="string">'sex'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;.fromkeys([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>], <span class="string">'初始值'</span>)</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'初始值'</span>, <span class="string">'age'</span>: <span class="string">'初始值'</span>, <span class="string">'sex'</span>: <span class="string">'初始值'</span>&#125;</span><br><span class="line"></span><br><span class="line">info = &#123;&#125;.fromkeys(<span class="string">'hello'</span>, <span class="keyword">None</span>)</span><br><span class="line">print(info)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'h'</span>: <span class="keyword">None</span>, <span class="string">'e'</span>: <span class="keyword">None</span>, <span class="string">'l'</span>, <span class="keyword">None</span>, <span class="string">'o'</span>, <span class="keyword">None</span>&#125;</span><br><span class="line"><span class="comment"># 字典key 不能重复，所以这里只有一个 l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现 不用 formkeys，从以下元组中取出没一个元素，造一个字典</span></span><br><span class="line">items = (<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>)</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    dic[item] = <span class="keyword">None</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="keyword">None</span>, <span class="string">'age'</span>: <span class="keyword">None</span>, <span class="string">'sex'</span>: <span class="keyword">None</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="dict-字典类型总结"><a href="#dict-字典类型总结" class="headerlink" title="dict 字典类型总结"></a><code>dict</code> 字典类型总结</h3><blockquote><ol><li>能存多个值，没有类型限制</li><li>无序（能够按索引取值的属于有序）</li><li>可变类型<br>可变：值变，id不变。可变==不可hash</li></ol></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.cnblogs.com/linhaifeng/articles/7133357.html#_label6" target="_blank" rel="noopener">http://www.cnblogs.com/linhaifeng/articles/7133357.html#_label6</a></p>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python字典类型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS禁止密码登录</title>
      <link href="/2018/07/03/CentOS%E7%A6%81%E6%AD%A2%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
      <url>/2018/07/03/CentOS%E7%A6%81%E6%AD%A2%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="CentOS-禁止密码登录"><a href="#CentOS-禁止密码登录" class="headerlink" title="CentOS 禁止密码登录"></a>CentOS 禁止密码登录</h2><blockquote><p>允许 <code>sshkey</code> 密钥登录，禁止密码登录</p></blockquote><a id="more"></a><h3 id="编辑-SSH-配置文件"><a href="#编辑-SSH-配置文件" class="headerlink" title="编辑 SSH 配置文件"></a>编辑 <code>SSH</code> 配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">/etc/ssh/sshd_config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到以下配置项</span></span><br><span class="line"><span class="comment">#RSAAuthentication yes</span></span><br><span class="line"><span class="comment">#PubkeyAuthentication yes</span></span><br><span class="line"><span class="comment">#AuthorizedKeysFile .ssh/authorized_keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去调上面 3 行前面的 (#)注释</span></span><br><span class="line"><span class="comment"># 找到下面 1 行</span></span><br><span class="line"></span><br><span class="line"><span class="string">PasswordAuthentication</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">PermitRootLogin</span> <span class="literal">yes</span></span><br><span class="line"><span class="comment"># 修改为</span></span><br><span class="line"><span class="string">PasswordAuthentication</span> <span class="literal">no</span>           <span class="comment"># 禁止密码登录</span></span><br><span class="line"><span class="string">PermitRootLogin</span> <span class="literal">no</span>                  <span class="comment"># 禁止 root 登录</span></span><br><span class="line"><span class="string">PermitRootLogin</span> <span class="string">without-password</span>    <span class="comment"># 禁止 root 密码登录</span></span><br></pre></td></tr></table></figure><h3 id="重启-SSH-服务"><a href="#重启-SSH-服务" class="headerlink" title="重启 SSH 服务"></a>重启 <code>SSH</code> 服务</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl reload sshd</span></span><br><span class="line"><span class="attribute">systemctl -l status sshd</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/u013372487/article/details/71307323" target="_blank" rel="noopener">https://blog.csdn.net/u013372487/article/details/71307323</a></p>]]></content>
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS禁止密码登录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zookeeper可视化界面zkui搭建与配置</title>
      <link href="/2018/06/28/Zookeeper%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2zkui%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/06/28/Zookeeper%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2zkui%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="Zookeeper可视化界面zkui搭建与配置"><a href="#Zookeeper可视化界面zkui搭建与配置" class="headerlink" title="Zookeeper可视化界面zkui搭建与配置"></a>Zookeeper可视化界面zkui搭建与配置</h2><p>一个允许在 <code>Zookeeper</code> 上进行 <code>CRUD</code> 操作的 <code>UI</code> 控制面板。</p><a id="more"></a><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/DeemOpen/zkui" target="_blank" rel="noopener">https://github.com/DeemOpen/zkui</a></p><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><p>jdk 7</p><h3 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h3><blockquote><p><code>zkui</code> 是基于 <code>java</code> 语言开发，首先就要我们安装 <code>jdk</code> 环境。<br>因为 <code>zkui</code> 需要我们手工进行编译、构建和打包，所以还需要安装 <code>maven</code> 环境。</p></blockquote><h3 id="安装-jdk1-7"><a href="#安装-jdk1-7" class="headerlink" title="安装 jdk1.7"></a>安装 jdk1.7</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">tar</span> -zxvf jdk<span class="number">-7</span>u80-linux-x64.tar.gz -<span class="type">C</span> /<span class="class"><span class="keyword">data</span>/</span></span><br><span class="line"><span class="title">chown</span> -<span class="type">R</span> root:root /<span class="class"><span class="keyword">data</span>/jdk1.7.0_80/</span></span><br></pre></td></tr></table></figure><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /etc/profile.d/jdk.sh &lt;&lt; “EOF”</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/data/jdk1.7.0_80</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line">java –version</span><br></pre></td></tr></table></figure><h3 id="生成-zkui-的-jar-包"><a href="#生成-zkui-的-jar-包" class="headerlink" title="生成 zkui 的 jar 包"></a>生成 <code>zkui</code> 的 <code>jar</code> 包</h3><blockquote><p><code>zkui</code> 的源码包，我们可以在 <code>github</code> 上进行下载<br><a href="https://github.com/DeemOpen/zkui.git" target="_blank" rel="noopener">https://github.com/DeemOpen/zkui.git</a><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/data/tools/</span></span><br><span class="line">git clone https:<span class="string">//github.com/DeemOpen/zkui.git</span></span><br><span class="line"><span class="keyword">cd</span> zkui/</span><br><span class="line">ll -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 mvn 命令进行编译构建打包</span></span><br><span class="line">mvn clean install</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>可以看到 <code>maven</code> 打包后生成了 <code>zkui-2.0-SNAPSHOT.jar</code> 和 <code>zkui-2.0-SNAPSHOT-jar-with-dependencies.jar</code> 两个文件，其中 <code>zkui-2.0-SNAPSHOT-jar-with-dependencies.jar</code> 是我们需要的 <code>jar</code> 文件。</p></blockquote><h3 id="启动-zkui"><a href="#启动-zkui" class="headerlink" title="启动 zkui"></a>启动 <code>zkui</code></h3><blockquote><p><code>zkui</code> 运行的 <code>jar</code> 文件生成后，我们就可以直接运行该文件了。<br>在运行该文件之前，我们还需要修改 <code>zkui</code> 的配置文件 <code>config.cfg</code>。<br><code>config.cfg</code> 文件中配置了，<code>zkui</code> 需要连接的 <code>zookeeper</code> 集群的 <code>IP</code> 地址和端口，访问 <code>ui</code> 的用户名和密码，以及 <code>zkui</code> 监听的端口号</p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd zkui/</span><br><span class="line">vim config.cfg</span><br><span class="line">serverPort=9090  <span class="comment"># Web服务端口</span></span><br><span class="line">zkServer=10.1.1.127:2181,10.1.1.128:2181,10.1.1.129:2181  <span class="comment"># 一个或多个 Zookeeper 节点地址</span></span><br><span class="line">ldapAuth=false</span><br><span class="line">ldapDomain=mycompany,mydomain</span><br><span class="line">ldapUrl=ldap://&lt;ldap_host&gt;:&lt;ldap_port&gt;/dc=mycom,dc=com</span><br><span class="line">ldapRoleSet=&#123;<span class="string">"users"</span>: [&#123; <span class="string">"username"</span>:<span class="string">"domain\\user1"</span> , <span class="string">"role"</span>: <span class="string">"ADMIN"</span> &#125;]&#125;</span><br><span class="line">userSet = &#123;<span class="string">"users"</span>: [&#123; <span class="string">"username"</span>:<span class="string">"admin"</span> , <span class="string">"password"</span>:<span class="string">"manager"</span>,<span class="string">"role"</span>: <span class="string">"ADMIN"</span> &#125;,&#123; <span class="string">"username"</span>:<span class="string">"appconfig"</span> , <span class="string">"password"</span>:<span class="string">"appconfig"</span>,<span class="string">"role"</span>: <span class="string">"USER"</span> &#125;]&#125;</span><br></pre></td></tr></table></figure><h4 id="默认用户信息"><a href="#默认用户信息" class="headerlink" title="默认用户信息"></a>默认用户信息</h4><blockquote><p>用户名：Admin（Admin权限，支持CRUD操作）<br>密码：manager<br>用户名：appconfig（Readonly权限，支持读取操作）<br>密码：appconfig</p></blockquote><h4 id="LDAP-配置"><a href="#LDAP-配置" class="headerlink" title="LDAP 配置"></a><code>LDAP</code> 配置</h4><blockquote><p>如果你想使用 <code>LDAP</code> 身份验证，则提供 <code>LDAP url</code>。<br>这将优先于 <code>roleSet property</code> 文件认证。<br><code>ldapUrl=ldap://&lt;ldap_host&gt;:&lt;ldap_port&gt;/dc=mycom,dc=com</code><br>如果不提供此功能，则将使用默认 <code>roleSet</code> 文件认证。</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar zkui<span class="number">-2.0</span>-SNAPSHOT-jar-with-dependencies.jar &gt; /data/app/zkui/logs/stdout.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br><span class="line">netstat -tunlp | grep <span class="number">9090</span></span><br></pre></td></tr></table></figure><p>访问 <a href="http://x.x.x.x:9090" target="_blank" rel="noopener">http://x.x.x.x:9090</a></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.ilanni.com/?p=13646" target="_blank" rel="noopener">https://www.ilanni.com/?p=13646</a></p>]]></content>
      
      <categories>
          
          <category> Zookeeper笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper可视化界面zkui搭建与配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ActiveMQ集群安装与配置</title>
      <link href="/2018/06/27/ActiveMQ%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/06/27/ActiveMQ%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="ActiveMQ集群安装与配置"><a href="#ActiveMQ集群安装与配置" class="headerlink" title="ActiveMQ集群安装与配置"></a>ActiveMQ集群安装与配置</h2><p><code>ActiveMQ</code> 集群是依赖于 <code>ZooKeeper</code> 集群而存在的<br>在此我们把 <code>ZooKeeper</code> 集群和 <code>ActiveMQ</code> 集群安装在同样三台机器上。</p><a id="more"></a><h3 id="ActiveMQ-集群原理"><a href="#ActiveMQ-集群原理" class="headerlink" title="ActiveMQ 集群原理"></a><code>ActiveMQ</code> 集群原理</h3><blockquote><p><code>ActiveMQ</code> 集群原理，使用 <code>ZooKeeper</code> 集群注册所有的 <code>ActiveMQ Broker</code>。只有其中的一个 <code>Broker</code> 可以对外提供服务，被视为 <code>master</code>。而其他的 <code>Broker</code> 处于待机状态，被视为 <code>slave</code>。而此时 <code>slave</code> 只是做数据的主从同步。</p></blockquote><blockquote><p>如果 <code>master</code> 因故障而不能提供服务，<code>ZooKeeper</code> 集群会从 <code>slave</code> 中选举出一个<code>Broker</code> 充当 <code>master</code>。<code>slave</code> 连接 <code>master</code> 并同步它们的存储状态，<code>slave</code> 不接受客户端连接。所有的存储操作都将被复制到连接至 <code>master</code> 的 <code>slave</code> 上。</p></blockquote><blockquote><p>如果 <code>master</code> 宕机了，得到了最新更新的 <code>slave</code> 会成为 <code>master</code>。而故障节点在恢复后会重新加入到集群中并连接 <code>master</code> 进入 <code>slave</code> 模式。</p></blockquote><blockquote><p>需要同步的消息操作都将等待存储状态被复制到其他节点的操作完成后才能完成。</p></blockquote><blockquote><p>所以，如果你配置了 <code>replicas=3</code>，那么假定大小是 <code>(3/2)+1=2</code>。<code>master</code> 将会存储并更新然后等待 <code>(2-1)=1</code> 个 <code>slave</code> 存储和更新完成，才汇报 <code>success</code>。</p></blockquote><blockquote><p>至于为什么是 <code>2-1</code>，熟悉 <code>ZooKeeper</code> 集群的应该知道，有一个 <code>node</code> 要作为观擦者存在。当一个新的 <code>master</code> 被选中，你需要至少保障一个假定 <code>node</code> 在线以能够找到拥有最新状态的 <code>node</code>。这个 <code>node</code> 可以成为新的 <code>Master</code>。因此，推荐运行至少 <code>3</code> 个 <code>replica nodes</code>，以防一个 <code>node</code> 失败了，服务中断。（原理与 <code>Zookeeper</code> 集群的高可用实现方式类似）。</p></blockquote><h3 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h3><blockquote><p>至少需要三台机器，这三台机器都已经安装 <code>ActiveMQ</code> 服务，<code>ZooKeeper</code> 集群也已经配置完毕。<br>这三台机器的 <code>IP</code> 分别为 <code>10.1.1.127</code>，<code>10.1.1.128</code>，<code>10.1.1.129</code></p></blockquote><h4 id="查看-ZooKeeper-集群的情况"><a href="#查看-ZooKeeper-集群的情况" class="headerlink" title="查看 ZooKeeper 集群的情况"></a>查看 <code>ZooKeeper</code> 集群的情况</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="meta">data</span>/app/zookeeper/<span class="keyword">bin/zkServer.sh </span>status</span><br></pre></td></tr></table></figure><blockquote><p>环境初始化完毕后，开始配置 <code>ActiveMQ</code> 集群。</p></blockquote><h4 id="配置-ActiveMQ-集群"><a href="#配置-ActiveMQ-集群" class="headerlink" title="配置 ActiveMQ 集群"></a>配置 <code>ActiveMQ</code> 集群</h4><blockquote><p><code>ActiveMQ</code> 集群的配置比较简单，我们只需要修改 <code>ActiveMQ</code> 的配置文件 <code>activemq.xml</code> 中部分内容即可。<br><code>ActiveMQ</code> 根目录下的 <code>conf/activemq.xml</code> 文件，原来默认内容如下：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">vim conf/activemq.xml +81</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">kahaDB</span> <span class="attr">directory</span>=<span class="string">”$</span></span></span><span class="template-variable">&#123;activemq.data&#125;</span><span class="xml"><span class="tag">/<span class="attr">kahadb</span>”/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>修改后的内容如下：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim conf/activemq.xml +81</span><br><span class="line">&lt;persistenceAdapter&gt;</span><br><span class="line">&lt;replicatedLevelDB</span><br><span class="line">directory=”$&#123;activemq.data&#125;/leveldb”</span><br><span class="line">replicas=”3″</span><br><span class="line">bind=”tcp://0.0.0.0:0″</span><br><span class="line">zkAddress=”10.1.1.127:2181,10.1.1.128:2181,10.1.1.129:2181″</span><br><span class="line">zkSessionTimeout=”4s”</span><br><span class="line">hostname=”10.1.1.127″</span><br><span class="line">sync=”local_disk”</span><br><span class="line">zkPath=”/activemq/leveldb-stores”</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/persistenceAdapter&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配置的含义解释如下：<br>directory：表示 <code>ActiveMQ</code> 集群消息持久化保存到服务器上的路径，注意该路径一定要先创建好。<br>replicas：表示 <code>ActiveMQ</code> 集群的节点个数。<br>bind：表示当这个节点成为 <code>master</code> 后，绑定的机器的地址与端口。此处 <code>0.0.0.0:0</code> 表示绑定到本机所有可用 <code>IP</code>，而端口是随机的。<br>zkAddress：表示 <code>ZooKeeper</code> 的 <code>IP</code> 和 <code>port</code>。如果是 <code>ZooKeeper</code> 集群的话，则用逗号隔开。<br>zkSessionTimeout：表示 <code>ActiveMQ</code> 与 <code>ZooKeeper</code> 集群连接的会话超时时间。<br>hostname：表示本机的 <code>IP</code> 地址。服务器根据不同的 <code>IP</code> 地址做出改变，其他配置相同。<br>sync：在消息被消费完成前，同步信息所存贮的策略。如果有多种策略用逗号隔开，<code>ActiveMQ</code> 会选择较强的策略。而如果有 <code>local_mem</code>，<code>local_disk</code> 这两种策略的话，那么 <code>ActiveMQ</code> 则优先选择 <code>local_disk</code> 策略，存储在本地硬盘。<br>zkPath：表示 <code>ActiveMQ</code> 在 <code>ZooKeeper</code> 集群上创建的 <code>znode</code> 节点的路径，也即是<code>ZooKeeper</code> 选举信息交换的存贮路径。<br>注意：这 <code>3</code> 个 <code>ActiveMQ</code> 节点中的 <code>brokerName</code> 配置必须相同，否则不能加入集群。</p></blockquote><h4 id="启动-ActiveMQ-集群"><a href="#启动-ActiveMQ-集群" class="headerlink" title="启动 ActiveMQ 集群"></a>启动 <code>ActiveMQ</code> 集群</h4><blockquote><p><code>ActiveMQ</code> 集群配置完毕后，我们现在来启动 <code>ActiveMQ</code> 集群。但是在正式启动 <code>ActiveMQ</code> 集群之前，一定要先启动 <code>ZooKeeper</code>集群。</p></blockquote><blockquote><p>要启动 <code>ActiveMQ</code> 集群，我们只需要启动这 <code>3</code> 台服务器的 <code>ActiveMQ</code> 服务即可。如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/<span class="meta">data</span>/app/activemq/<span class="keyword">bin/activemq </span>start</span><br><span class="line"><span class="symbol">ps</span> -ef <span class="title">| grep mq</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>ActiveMQ</code> 集群启动完毕，根据 <code>ZooKeeper</code> 的策略，会从这三台 <code>ActiveMQ</code> 服务器选一台作为 <code>master</code> 对外提供服务，其他两台作为 <code>slave</code> 等待运行，而 <code>slave</code> 只是做数据上的主从同步。</p></blockquote><blockquote><p>所以，<code>ActiveMQ</code> 集群后，访问<br><a href="http://10.1.1.127:8161/admin/" target="_blank" rel="noopener">http://10.1.1.127:8161/admin/</a><br><a href="http://10.1.1.128:8161/admin/" target="_blank" rel="noopener">http://10.1.1.128:8161/admin/</a><br><a href="http://10.1.1.129:8161/admin/" target="_blank" rel="noopener">http://10.1.1.129:8161/admin/</a><br>只会有一个成功</p></blockquote><blockquote><p>那么现在在 <code>ActiveMQ</code> 集群中，如何查看哪一台服务器是 <code>master</code> 节点呢？<br>我们可以通过查看这三台服务器哪一台服务器监听 <code>8161</code> 端口，来判断哪台服务器是 <code>master</code> 节点。</p></blockquote><blockquote><p>现在在切换到服务器上查看监听的端口，如下：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp <span class="string">| grep 8161</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>可以很明显的看出，目前只有 <code>10.1.1.127</code> 这台服务器监听 <code>8161</code> 端口的。那就说明目前10.1.1.127 是 <code>master</code> 节点。其他两个节点是 <code>slave</code> 节点，处于待机状态，没有监听 <code>8161</code> 端口。</p></blockquote><blockquote><p>现在我们再来看访问 <code>10.1.1.127</code> 服务器 <code>ActiveMQ</code> 管理控制台看看，如下：<br><a href="http://10.1.1.127:8161/admin" target="_blank" rel="noopener">http://10.1.1.127:8161/admin</a><br>到此说明 <code>ActiveMQ</code> 集群已经部署完毕。</p></blockquote><h4 id="验证-ActiveMQ-集群高可用"><a href="#验证-ActiveMQ-集群高可用" class="headerlink" title="验证 ActiveMQ 集群高可用"></a>验证 <code>ActiveMQ</code> 集群高可用</h4><blockquote><p>要验证 <code>ActiveMQ</code> 集群的高可用，我们只需要关闭能访问<br><a href="http://x.x.x.x:8161/admin/" target="_blank" rel="noopener">http://x.x.x.x:8161/admin/</a> 的 <code>ActiveMQ</code> 服务，然后访问其他两个。</p></blockquote><blockquote><p>如果其中有一个能访问，那就说明 <code>ActiveMQ+ZooKeeper</code> 集群高可用已经配置成功。<br>通过第四章节，我们知道目前 <code>master</code> 节点是 <code>10.1.1.127</code> 这台服务器。现在我们来关闭<code>10.1.1.127</code> 这台服务器的 <code>ActiveMQ</code> 服务，看看 <code>ActiveMQ</code> 集群，是否能正常访问。如下：</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep mq</span><br><span class="line">kill <span class="number">-9</span> <span class="number">3889</span></span><br></pre></td></tr></table></figure><blockquote><p>我们已经把 <code>10.1.1.127</code> 这台服务器的 <code>ActiveMQ</code> 服务已经关闭了。<br>现在我们再来看看目前哪台服务器是 <code>master</code> 节，也即是查看哪台服务器的 <code>8161</code> 端口对外提供服务器。如下：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp <span class="string">| rep 8161</span></span><br><span class="line">ps -ef <span class="string">| rep mq</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>可以很明显的看出目前 <code>10.1.1.128</code> 这台服务器是 <code>master</code> 节点。现在我再来通过管理控制台访问<code>10.1.1.128</code> 的 <code>8161</code> 端口看看。如下：<br><a href="http://10.1.1.128:8161/admin/" target="_blank" rel="noopener">http://10.1.1.128:8161/admin/</a></p></blockquote><blockquote><p>我们可以很明显的看出 <code>10.1.1.127</code> 这台服务器的 <code>ActiveMQ</code> 服务停止后，并没有影响 <code>ActiveMQ</code> 集群的正常运行。这也就说明了 <code>ActiveMQ</code> 集群是正常工作的。<br>到此，有关 <code>ActiveMQ</code> 集群的搭建与配置已经全部完毕。</p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.ilanni.com/?p=13569" target="_blank" rel="noopener">https://www.ilanni.com/?p=13569</a></p>]]></content>
      
      <categories>
          
          <category> ActiveMQ笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ集群安装与配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ActiveMQ安装与配置</title>
      <link href="/2018/06/27/ActiveMQ%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/06/27/ActiveMQ%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="ActiveMQ安装与配置"><a href="#ActiveMQ安装与配置" class="headerlink" title="ActiveMQ安装与配置"></a>ActiveMQ安装与配置</h2><a id="more"></a><p>操作系统  <code>CentOS7</code><br>建议 <code>ActiveMQ</code> 集群 和 <code>Zookeeper</code> 集群部署在同一台服务器上，否则随着时间的增加，<code>ActiveMQ</code> 集群容易出现假死的情况。</p><h3 id="JMS-支持的消息传递模型"><a href="#JMS-支持的消息传递模型" class="headerlink" title="JMS 支持的消息传递模型"></a>JMS 支持的消息传递模型</h3><blockquote><p>JMS 支持两种消息传递模型：<code>队列（Queue）</code>和 <code>主题（Topic）</code>。</p></blockquote><h3 id="点对点传递模型"><a href="#点对点传递模型" class="headerlink" title="点对点传递模型"></a>点对点传递模型</h3><blockquote><ol><li>点对点（<code>point-to-point</code>，简称 <code>PTP</code>）<code>Queue</code> 消息传递模型。<br> 通过该消息传递模型，一个应用程序（即消息生产者）可以向另外一个应用程序（即消息消费者）发送消息。</li><li>在此传递模型中，消息目的地类型是队列（即 <code>Destination</code> 接口实现类实例由 <code>Session</code> 接口实现类实例通过调用其 <code>createQueue</code> 方法并传入队列名称而创建）。</li><li>消息首先被传送至消息服务器端特定的队列中，然后从此对列中将消息传送至对此队列进行监听的某个消费者。同一个队列可以关联多个消息生产者和消息消费者，但一条消息仅能传递给一个消息消费者。</li><li>如果多个消息消费者正在监听队列上的消息，JMS消息服务器将根据“先来者优先”的原则确定由哪个消息消费者接收下一条消息。</li><li>如果没有消息消费者在监听队列，消息将保留在队列中，直至消息消费者连接到队列为止。这种消息传递模型是传统意义上的懒模型或轮询模型。</li><li>在此模型中，消息不是自动推动给消息消费者的，而是要由消息消费者从队列中请求获得。</li></ol></blockquote><h3 id="发布-订阅传递模型"><a href="#发布-订阅传递模型" class="headerlink" title="发布/订阅传递模型"></a>发布/订阅传递模型</h3><blockquote><ol><li>发布/订阅（<code>publish/subscribe</code>，简称 <code>pub/sub</code>）<code>Topic</code> 消息传递模型。</li><li>通过该消息传递模型，应用程序能够将一条消息发送给多个消息消费者。在此传送模型中，消息目的地类型是主题（即 <code>Destination</code> 接口实现类实例由 <code>Session</code> 接口实现类实例通过调用其 <code>createTopic</code> 方法并传入主题名称而创建）。</li><li>消息首先由消息生产者发布至消息服务器中特定的主题中，然后由消息服务器将消息传送至所有已订阅此主题的消费者。</li><li>主题目标也支持长期订阅。长期订阅表示消费者已注册了主题目标，但在消息到达目标时该消费者可以处于非活动状态。</li><li>当消费者再次处于活动状态时，将会接收该消息。如果消费者均没有注册某个主题目标，该主题只保留注册了长期订阅的非活动消费者的消息。</li><li>与 <code>PTP</code> 消息传递模型不同，<code>pub/sub</code> 消息传递模型允许多个主题订阅者接收同一条消息。<code>JMS</code> 一直保留消息，直至所有主题订阅者都接收到消息为止。</li><li><code>pub/sub</code> 消息传递模型基本上是一个推模型。在该模型中，消息会自动广播，消息消费者无须通过主动请求或轮询主题的方法来获得新的消息。</li></ol></blockquote><h3 id="具体区别对比如下"><a href="#具体区别对比如下" class="headerlink" title="具体区别对比如下"></a>具体区别对比如下</h3><table><thead><tr><th>类型</th><th>Topic</th><th>Queue</th></tr></thead><tbody><tr><td>概要</td><td><code>Publish Subscribe messaging</code> 发布订阅消息</td><td><code>Point-to-Point</code> 点对点</td></tr><tr><td>有无状态</td><td><code>Topic</code> 数据默认不落地，是无状态的。</td><td><code>Queue</code> 数据默认会在 <code>mq</code> 服务器上以文件形式保存，比如<code>Active MQ</code> 一般保存在 <code>$AMQ_HOME/data/kr-store/data</code> 下面。也可以配置成 <code>DB</code> 存储。</td></tr><tr><td>完整性保障</td><td>并不保证 <code>publisher</code> 发布的每条数据，<code>Subscriber</code> 都能接受到。</td><td><code>Queue</code> 保证每条数据都能被 <code>receiver</code> 接收。</td></tr><tr><td>消息是否会丢失</td><td>一般来说 <code>publisher</code> 发布消息到某一个 <code>topic</code> 时，只有正在监听该 <code>topic</code> 地址的 <code>sub</code> 能够接收到消息；如果没有 <code>sub</code> 在监听，该 <code>topic</code> 就丢失了。</td><td><code>Sender</code> 发送消息到目标 <code>Queue</code>，<code>receiver</code> 可以异步接收这个 <code>Queue</code> 上的消息。<code>Queue</code> 上的消息如果暂时没有 <code>receiver</code> 来取，也不会丢失。</td></tr><tr><td>消息发布接收策略</td><td>一对多的消息发布接收策略，监听同一个 <code>topic</code> 地址的多个 <code>sub</code> 都能收到 <code>publisher</code> 发送的消息。<code>Sub</code> 接收完通知 <code>mq</code> 服务器。</td><td>一对一的消息发布接收策略，一个 <code>sender</code> 发送的消息，只能有一个 <code>receiver</code> 接收。<code>receiver</code> 接收完后，通知 <code>mq</code> 服务器已接收，<code>mq</code> 服务器对 <code>queue</code> 里的消息采取删除或其他操作。</td></tr></tbody></table><h3 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h3><p>在此我们安装的是 <code>ActiveMQ 5.14.5</code>，<code>ActiveMQ 5.14.5</code> 使用的是 <code>jdk1.7</code>。<br><code>ActiveMQ 5.15.0</code> 使用的是 <code>jdk1.8</code>。</p><h4 id="安装-jdk1-7"><a href="#安装-jdk1-7" class="headerlink" title="安装 jdk1.7"></a>安装 <code>jdk1.7</code></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/data/</span>tools/</span><br><span class="line">wget -c <span class="string">http:</span><span class="comment">//mirrors.linuxeye.com/jdk/jdk-7u80-linux-x64.tar.gz</span></span><br><span class="line">tar -zxvf jdk<span class="number">-7</span>u80-linux-x64.tar.gz -C <span class="regexp">/data/</span></span><br><span class="line">chown -R <span class="string">root:</span>root  <span class="regexp">/data/</span>jdk1<span class="number">.7</span><span class="number">.0</span>_80</span><br></pre></td></tr></table></figure><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/data/jdk1.7.0_80</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin</span><br><span class="line">source /etc/profile</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="关闭-防火墙-和-selinux，同步服务器时间"><a href="#关闭-防火墙-和-selinux，同步服务器时间" class="headerlink" title="关闭 防火墙 和 selinux，同步服务器时间"></a>关闭 <code>防火墙</code> 和 <code>selinux</code>，同步服务器时间</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ntpdate -u cn.ntp.org.cn</span><br><span class="line">sed -i ‘/SELINUX/s/enforcing/disabled/’ /etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line">systemctl <span class="builtin-name">disable</span> firewalld.service</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure><h3 id="安装-ActiveMQ"><a href="#安装-ActiveMQ" class="headerlink" title="安装 ActiveMQ"></a>安装 ActiveMQ</h3><blockquote><p><code>ActiveMQ</code> 官网<br><a href="http://activemq.apache.org/" target="_blank" rel="noopener">http://activemq.apache.org/</a></p></blockquote><h4 id="下载-ActiveMQ"><a href="#下载-ActiveMQ" class="headerlink" title="下载 ActiveMQ"></a>下载 ActiveMQ</h4><p><a href="http://activemq.apache.org/download.html" target="_blank" rel="noopener">http://activemq.apache.org/download.html</a><br><a href="http://archive.apache.org/dist/activemq/" target="_blank" rel="noopener">http://archive.apache.org/dist/activemq/</a></p><h4 id="下载-ActiveMQ5-14-5"><a href="#下载-ActiveMQ5-14-5" class="headerlink" title="下载 ActiveMQ5.14.5"></a>下载 ActiveMQ5.14.5</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">mkdir</span> -pv /<span class="meta">data</span>/app/activemq</span><br><span class="line"><span class="symbol">cd</span> /<span class="meta">data</span>/tools/</span><br><span class="line"><span class="symbol">wget</span> -c http://mirrors.hust.edu.cn/apache/activemq/<span class="number">5</span>.<span class="number">14</span>.<span class="number">5</span>/apache-activemq-<span class="number">5</span>.<span class="number">14</span>.<span class="number">5</span>-<span class="keyword">bin.tar.gz</span></span><br><span class="line"><span class="keyword">tar </span>-zxvf apache-activemq-<span class="number">5</span>.<span class="number">14</span>.<span class="number">5</span>-<span class="keyword">bin.tar.gz </span>-C /<span class="meta">data</span>/app/activemq –<span class="keyword">strip-components </span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="查看-ActiveMQ-目录结构"><a href="#查看-ActiveMQ-目录结构" class="headerlink" title="查看 ActiveMQ 目录结构"></a>查看 ActiveMQ 目录结构</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ll -h</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>文件名/目录名</th><th>详解</th></tr></thead><tbody><tr><td>activemq-all-5.14.5.jar</td><td><code>ActiveMQ</code> 所有 <code>jar</code></td></tr><tr><td>bin</td><td><code>ActiveMQ</code> 启动命令的二进制执行文件及一些命令脚本</td></tr><tr><td>conf</td><td><code>ActiveMQ</code> 配置目录，包含最基本的 <code>ActiveMQ</code> 配置文件</td></tr><tr><td>data</td><td><code>ActiveMQ</code> 数据目录，默认为空。包含 <code>ActiveMQ</code> 的进程文件、数据文件、日志文件。该目录也是 <code>ActiveMQ</code> 消息持久化的目录</td></tr><tr><td>docs</td><td>用户使用帮助相关文件</td></tr><tr><td>examples</td><td>操作 <code>ActiveMQ</code> 相关实例</td></tr><tr><td>lib</td><td><code>ActiveMQ</code> 需要的类库</td></tr><tr><td>webapps</td><td><code>ActiveMQ</code> 控制台应用目录</td></tr><tr><td>webapps-demo</td><td><code>ActiveMQ</code> 使用实例目录</td></tr><tr><td>LICENSE</td><td><code>ActiveMQ</code> 所有包使用的 <code>Apache</code> 开源消息协议</td></tr><tr><td>NOTICE</td><td><code>ActiveMQ</code> 版权信息</td></tr><tr><td>README</td><td>用户使用引导文件，包括一些文档及 <code>URL</code></td></tr></tbody></table><h4 id="启动-ActiveMQ"><a href="#启动-ActiveMQ" class="headerlink" title="启动 ActiveMQ"></a>启动 <code>ActiveMQ</code></h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/<span class="class"><span class="keyword">data</span>/app/activemq/bin/activemq start</span></span><br><span class="line"><span class="title">tail</span> -f /<span class="class"><span class="keyword">data</span>/app/activemq/<span class="keyword">data</span>/activemq.log</span></span><br></pre></td></tr></table></figure><h4 id="ActiveMQ-启动方式"><a href="#ActiveMQ-启动方式" class="headerlink" title="ActiveMQ 启动方式"></a><code>ActiveMQ</code> 启动方式</h4><blockquote><p>普通启动<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="meta">data</span>/app/activemq/<span class="keyword">bin/activemq </span>start</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>后台启动并指定日志文件<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="regexp">/data/</span>app<span class="regexp">/activemq/</span>bin<span class="regexp">/activemq start &gt; /</span>data<span class="regexp">/app/</span>activemq<span class="regexp">/logs/</span>smlog <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="ActiveMQ-管理控制台"><a href="#ActiveMQ-管理控制台" class="headerlink" title="ActiveMQ 管理控制台"></a><code>ActiveMQ</code> 管理控制台</h3><blockquote><p><code>ActiveMQ</code> 默认的管理后台端口是 <code>8161</code>，默认管理用户名和密码均是 <code>admin</code>。<br><code>ActiveMQ</code> 默认的管理后台端口，可以在 <code>ActiveMQ</code> 的配置文件 <code>jetty.xml</code> 中查看到<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /data/app/activemq/conf/jetty.xml +110</span><br><span class="line">&lt;property <span class="attribute">name</span>=”port” <span class="attribute">value</span>=”8161″/&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>ActiveMQ</code> 默认管理用户名和密码均是 <code>admin</code>，如果要修改默认用户名和密码的话，可以通过修改 <code>jetty-realm.properties</code> 文件来达到目的<br><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /data/app/activemq/conf/jetty-realm.properties</span><br><span class="line"><span class="literal">admin</span>: password@<span class="number">123</span>, <span class="literal">admin</span></span><br><span class="line"><span class="literal">user</span>: <span class="literal">user</span>@<span class="number">123</span>, <span class="literal">user</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注意：<code>ActiveMQ</code> 用户名和密码的格式是<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">username:</span> password, rolename</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="登陆管理控制台"><a href="#登陆管理控制台" class="headerlink" title="登陆管理控制台"></a>登陆管理控制台</h4><p><a href="http://x.x.x.x:8161/admin" target="_blank" rel="noopener">http://x.x.x.x:8161/admin</a></p><h4 id="管理控制台介绍"><a href="#管理控制台介绍" class="headerlink" title="管理控制台介绍"></a>管理控制台介绍</h4><blockquote><p>在 <code>ActiveMQ</code> 的管理控制台，关注比较多的是 <code>Queues队列</code> 和 <code>Topics主题</code>。</p></blockquote><p><code>Queues队列</code> 选项</p><table><thead><tr><th>字段</th><th>详解</th></tr></thead><tbody><tr><td>Number Of Pending Messages</td><td>表示还有多少条消息没有被消费，实际上是表示消息的积压程度。</td></tr><tr><td>Number Of Consumers</td><td>表示在该队列上还有多少消费者在等待接受消息。其实就是消费者的数量。</td></tr><tr><td>Messages Enqueued</td><td>表示生产了多少条消息。</td></tr><tr><td>Messages Dequeued</td><td>表示消费了多少条消息。</td></tr></tbody></table><p><code>Topics主题</code> 选项</p><table><thead><tr><th>字段</th><th>详解</th></tr></thead><tbody><tr><td>Number Of Consumers</td><td>表示在该队列上还有多少消费者在等待接受消息。</td></tr><tr><td>Messages Enqueued</td><td>表示生产了多少条消息。</td></tr><tr><td>Messages Dequeued</td><td>表示消费了多少条消息。</td></tr></tbody></table><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.ilanni.com/?p=13543" target="_blank" rel="noopener">https://www.ilanni.com/?p=13543</a></p>]]></content>
      
      <categories>
          
          <category> ActiveMQ笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ安装与配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>os模块</title>
      <link href="/2018/06/21/os%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/06/21/os%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h2 id="os-模块"><a href="#os-模块" class="headerlink" title="os 模块"></a>os 模块</h2><blockquote><p><code>os</code> 模块是与操作系统交互的一个接口</p></blockquote><a id="more"></a><table><thead><tr><th>模块方法</th><th>注释</th></tr></thead><tbody><tr><td><code>os.getcwd()</code></td><td>获取当前工作目录，即当前 <code>python</code> 脚本工作的目录路径</td></tr><tr><td><code>os.chdir(&quot;dirname&quot;)</code></td><td>改变当前脚本工作目录；相当于 <code>shell</code> 下 <code>cd</code></td></tr><tr><td><code>os.curdir</code></td><td>返回当前目录: (<code>&#39;.&#39;</code>)</td></tr><tr><td><code>os.pardir</code></td><td>获取当前目录的父目录字符串名：(<code>&#39;..&#39;</code>)</td></tr><tr><td><code>os.makedirs(&#39;dirname1/dirname2&#39;)</code></td><td>可生成多层递归目录</td></tr><tr><td><code>os.removedirs(&#39;dirname1&#39;)</code></td><td>若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</td></tr><tr><td><code>os.mkdir(&#39;dirname&#39;)</code></td><td>生成单级目录；相当于 <code>shell</code> 中 <code>mkdir dirname</code></td></tr><tr><td><code>os.rmdir(&#39;dirname&#39;)</code></td><td>删除单级空目录，若目录不为空则无法删除，报错；相当于 <code>shell</code> 中 <code>rmdir dirname</code></td></tr><tr><td><code>os.listdir(&#39;dirname&#39;)</code></td><td>列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</td></tr><tr><td><code>os.remove()</code></td><td>删除一个文件</td></tr><tr><td><code>os.rename(&quot;oldname&quot;,&quot;newname&quot;)</code></td><td>重命名文件/目录</td></tr><tr><td><code>os.stat(&#39;path/filename&#39;)</code></td><td>获取文件/目录信息</td></tr><tr><td><code>os.sep</code></td><td>输出操作系统特定的路径分隔符，Windows下为<code>&quot;\\&quot;</code>，Linux下为<code>&quot;/&quot;</code></td></tr><tr><td><code>os.linesep</code></td><td>输出当前平台使用的行终止符，Windows下为<code>&quot;\t\n&quot;</code>，Linux下为<code>&quot;\n&quot;</code></td></tr><tr><td><code>os.pathsep</code></td><td>输出用于分割文件路径的字符串，Windows下为<code>;</code>，Linux下为<code>:</code></td></tr><tr><td><code>os.name</code></td><td>输出字符串指示当前使用平台。Windows-&gt;<code>&#39;nt&#39;</code>，Linux-&gt;<code>&#39;posix&#39;</code></td></tr><tr><td><code>os.system(&quot;bash command&quot;)</code></td><td>运行<code>shell</code>命令，直接显示</td></tr><tr><td><code>os.environ</code></td><td>获取系统环境变量</td></tr><tr><td><code>os.path.abspath(path)</code></td><td>返回 <code>path</code> 规范化的绝对路径</td></tr><tr><td><code>os.path.split(path)</code></td><td>将 <code>path</code> 分割成目录和文件名二元组返回</td></tr><tr><td><code>os.path.dirname(path)</code></td><td>返回 <code>path</code> 的目录。其实就是 <code>os.path.split(path)</code> 的第一个元素</td></tr><tr><td><code>os.path.basename(path)</code></td><td>返回 <code>path</code> 最后的文件名。如何 <code>path</code> 以 <code>/</code> 或 <code>\</code> 结尾，那么就会返回空值。即 <code>os.path.split(path)</code> 的第二个元素</td></tr><tr><td><code>os.path.exists(path)</code></td><td>如果 <code>path</code> 存在，返回 <code>True</code>；如果 <code>path</code> 不存在，返回 <code>False</code></td></tr><tr><td><code>os.path.isabs(path)</code></td><td>如果 <code>path</code> 是绝对路径，返回 <code>True</code></td></tr><tr><td><code>os.path.isfile(path)</code></td><td>如果 <code>path</code> 是一个存在的文件，返回 <code>True</code>。否则返回 <code>False</code></td></tr><tr><td><code>os.path.isdir(path)</code></td><td>如果 <code>path</code> 是一个存在的目录，则返回 <code>True</code>。否则返回 <code>False</code></td></tr><tr><td><code>os.path.join(path1[, path2[, ...]])</code></td><td>将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</td></tr><tr><td><code>os.path.getatime(path)</code></td><td>返回 <code>path</code> 所指向的文件或者目录的最后存取时间</td></tr><tr><td><code>os.path.getmtime(path)</code></td><td>返回 <code>path</code> 所指向的文件或者目录的最后修改时间</td></tr><tr><td><code>os.path.getsize(path)</code></td><td>返回 <code>path</code> 的大小</td></tr></tbody></table><h3 id="列出指定目录下的所有文件和子目录"><a href="#列出指定目录下的所有文件和子目录" class="headerlink" title="列出指定目录下的所有文件和子目录"></a>列出指定目录下的所有文件和子目录</h3><blockquote><p>包括隐藏文件，并以列表方式打印</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.listdir(<span class="string">r'.'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'01 时间模块.py'</span>, <span class="string">'02 random模块.py'</span>, <span class="string">'03 os模块.py'</span>, <span class="string">'今日内容.txt'</span>]</span><br></pre></td></tr></table></figure><h3 id="获取-文件-目录-信息"><a href="#获取-文件-目录-信息" class="headerlink" title="获取 文件/目录 信息"></a>获取 <code>文件/目录</code> 信息</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">print<span class="params">(os.stat('今日内容.txt')</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">os.stat_result<span class="params">(<span class="attr">st_mode</span>=33206, <span class="attr">st_ino</span>=4503599627409980, <span class="attr">st_dev</span>=239211959, <span class="attr">st_nlink</span>=1, <span class="attr">st_uid</span>=0, <span class="attr">st_gid</span>=0, <span class="attr">st_size</span>=280, <span class="attr">st_atime</span>=1526694304, <span class="attr">st_mtime</span>=1526694304, <span class="attr">st_ctime</span>=1526694102)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件大小，以 bytes 为单位</span></span><br><span class="line">print<span class="params">(os.stat('今日内容.txt')</span><span class="string">.st_size</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">280</span><br></pre></td></tr></table></figure><h3 id="获取-文件-大小信息"><a href="#获取-文件-大小信息" class="headerlink" title="获取 文件 大小信息"></a>获取 <code>文件</code> 大小信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(os.path.getsize(<span class="string">r'E:\PycharmProjects\SH_s1\day07\今日内容.txt'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">280</span></span><br></pre></td></tr></table></figure><h3 id="os-system-quot-bash-command-quot-方法"><a href="#os-system-quot-bash-command-quot-方法" class="headerlink" title="os.system(&quot;bash command&quot;) 方法"></a><code>os.system(&quot;bash command&quot;)</code> 方法</h3><blockquote><p>运行<code>shell</code>命令，直接显示</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.<span class="keyword">system</span>(<span class="string">'tasklist'</span>)  # 输出 Windows 下当前所有进程列表</span><br><span class="line"></span><br><span class="line"># os.<span class="keyword">system</span>() 只是单纯的执行命令，并不能把命令执行后的结果做进一步的处理</span><br><span class="line">res = os.<span class="keyword">system</span>(<span class="string">'tasklist'</span>)</span><br><span class="line">print(<span class="string">'res----&gt;'</span>, res)  # res变量只是命令的执行成功与否的执行状态</span><br><span class="line"># 输出结果</span><br><span class="line">res----&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="os-environ-方法"><a href="#os-environ-方法" class="headerlink" title="os.environ 方法"></a><code>os.environ</code> 方法</h3><blockquote><p>获取系统环境变量</p></blockquote><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">全局的</span><br><span class="line">用于在程序任何地方都需要用到它的结果的时候</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">os</span>.environ[<span class="string">'login'</span>] = <span class="string">'yes'</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.environ[<span class="string">'login'</span>])</span><br><span class="line"># 输出结果</span><br><span class="line">yes</span><br></pre></td></tr></table></figure><h3 id="os-path-split-path-方法"><a href="#os-path-split-path-方法" class="headerlink" title="os.path.split(path) 方法"></a><code>os.path.split(path)</code> 方法</h3><blockquote><p>将 <code>path</code> 分割成 <code>目录</code> 和 <code>文件名</code> 二元组返回</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.split(<span class="string">'/a/b/c/d.txt'</span>))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">(<span class="string">'/a/b/c'</span>, <span class="string">'d.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.split(<span class="string">'/a/b/c/d.txt'</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.split(<span class="string">'/a/b/c/d.txt'</span>)[<span class="number">1</span>])</span><br><span class="line"># 输出结果</span><br><span class="line">/a/b/c</span><br><span class="line">d.txt</span><br></pre></td></tr></table></figure><h3 id="os-path-dirname-path-方法"><a href="#os-path-dirname-path-方法" class="headerlink" title="os.path.dirname(path) 方法"></a><code>os.path.dirname(path)</code> 方法</h3><blockquote><p>返回 <code>path</code> 的 <code>目录</code><br>其实就是 <code>os.path.split(path)</code> 的第一个元素</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="string">'a/b/c/d.txt'</span>))</span><br><span class="line"># 输出结果</span><br><span class="line">a/b/c</span><br></pre></td></tr></table></figure><h3 id="os-path-basename-path-方法"><a href="#os-path-basename-path-方法" class="headerlink" title="os.path.basename(path) 方法"></a><code>os.path.basename(path)</code> 方法</h3><blockquote><p>返回 <code>path</code> 最后的 <code>文件名</code><br>如何 <code>path</code> 以 <code>/</code> 或 <code>\</code> 结尾，那么就会返回空值<br>即 <code>os.path.split(path)</code> 的第二个元素</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.basename(<span class="string">'a/b/c/d.txt'</span>))</span><br><span class="line"># 输出结果</span><br><span class="line">d.txt</span><br></pre></td></tr></table></figure><h3 id="os-path-join-path1-path2-…-方法"><a href="#os-path-join-path1-path2-…-方法" class="headerlink" title="os.path.join(path1[, path2[, …]]) 方法"></a>os.path.join(path1[, path2[, …]]) 方法</h3><blockquote><p>用于拼接路径<br>将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</p></blockquote><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.path.join(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d.txt'</span>))</span><br><span class="line"># 输出结果</span><br><span class="line">a\b\c\d.txt</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(os.path.join(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'D:\\'</span>, <span class="string">'c'</span>, <span class="string">'d.txt'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">D:<span class="string">\c\d.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.join(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'/'</span>, <span class="string">'d.txt'</span>))</span><br><span class="line"># 输出结果</span><br><span class="line">/d.txt</span><br></pre></td></tr></table></figure><h3 id="os-path-normcase-path-方法"><a href="#os-path-normcase-path-方法" class="headerlink" title="os.path.normcase(path) 方法"></a><code>os.path.normcase(path)</code> 方法</h3><blockquote><p>只用于 <code>Windows</code> 系统，规范 Windows 目录<br>在 <code>Windows</code> 平台上会将路径中所有字符转换为小写，将路径中的左斜杠转换为 <code>Windows</code> 中的右斜杠<br>在 <code>Linux</code> 和 <code>Mac</code> 平台上，该函数会原样返回 <code>path</code></p></blockquote><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(os.path.normcase(<span class="string">'c:/windOws\\system32\\'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">c:<span class="string">\windows\system32\</span></span><br></pre></td></tr></table></figure><h3 id="os-path-normpath-path-方法"><a href="#os-path-normpath-path-方法" class="headerlink" title="os.path.normpath(path) 方法"></a><code>os.path.normpath(path)</code> 方法</h3><blockquote><p>用于规范路径<br>如 <code>(..)</code> 点点 <code>(/)</code> 斜杠</p></blockquote><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(os.path.normpath('c:<span class="symbol">\\</span>windOws/a/b/../system32<span class="symbol">\\</span>'))</span><br><span class="line"># 输出结果</span><br><span class="line">c:<span class="symbol">\w</span>indOws<span class="symbol">\a</span><span class="symbol">\s</span>ystem32</span><br><span class="line"></span><br><span class="line">print(os.path.normpath('c://windows<span class="symbol">\\</span>System32<span class="symbol">\\</span>../Temp/'))</span><br><span class="line"># 输出结果</span><br><span class="line">c:<span class="symbol">\w</span>indows<span class="symbol">\T</span>emp</span><br><span class="line"></span><br><span class="line">a = '/Users/jieli/test1/<span class="symbol">\\</span><span class="symbol">\a</span>1/<span class="symbol">\\</span><span class="symbol">\\</span>aa.py/../..'</span><br><span class="line">print(os.path.normpath(a))</span><br><span class="line"># 输出结果</span><br><span class="line">/Users/jieli/test1</span><br></pre></td></tr></table></figure><h3 id="os-路径处理"><a href="#os-路径处理" class="headerlink" title="os 路径处理"></a><code>os</code> 路径处理</h3><blockquote><p>常用路径处理方法</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os<span class="selector-class">.path</span><span class="selector-class">.dirname</span>(os<span class="selector-class">.path</span><span class="selector-class">.dirname</span>(os<span class="selector-class">.path</span><span class="selector-class">.abspath</span>(__file__)))</span><br><span class="line"></span><br><span class="line">os<span class="selector-class">.path</span><span class="selector-class">.dirname</span>(os<span class="selector-class">.path</span><span class="selector-class">.dirname</span>(os<span class="selector-class">.path</span><span class="selector-class">.dirname</span>(os<span class="selector-class">.path</span><span class="selector-class">.abspath</span>(__file__))))</span><br></pre></td></tr></table></figure><blockquote><p><code>OpenStack</code> 中获取路径方式</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">OpenStack 获取路径方式</span><br><span class="line">res = <span class="built_in">os</span>.<span class="built_in">path</span>.join(</span><br><span class="line">    <span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__),</span><br><span class="line">    <span class="string">'..'</span>,</span><br><span class="line">    <span class="string">'..'</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.normpath(res))</span><br><span class="line"># 输出结果</span><br><span class="line">E:\PycharmProjects\SH_s1\day07\<span class="number">03</span> <span class="built_in">os</span>模块.py\..\..</span><br><span class="line">E:\PycharmProjects\SH_s1</span><br><span class="line"></span><br><span class="line"># 合并一下</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.normpath(</span><br><span class="line">    <span class="built_in">os</span>.<span class="built_in">path</span>.join(</span><br><span class="line">        <span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__),</span><br><span class="line">        <span class="string">'..'</span>,</span><br><span class="line">        <span class="string">'..'</span></span><br><span class="line">    )</span><br><span class="line">))</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"></span><br><span class="line">import <span class="built_in">os</span>,sys</span><br><span class="line">possible_topdir = <span class="built_in">os</span>.<span class="built_in">path</span>.normpath(<span class="built_in">os</span>.<span class="built_in">path</span>.join(</span><br><span class="line">    <span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__),</span><br><span class="line">    <span class="built_in">os</span>.pardir,    # 上一级</span><br><span class="line">    <span class="built_in">os</span>.pardir,</span><br><span class="line">    <span class="built_in">os</span>.pardir</span><br><span class="line">))</span><br><span class="line">sys.<span class="built_in">path</span>.<span class="built_in">insert</span>(<span class="number">0</span>, possible_topdir)</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.cnblogs.com/linhaifeng/articles/6384466.html#_label3" target="_blank" rel="noopener">http://www.cnblogs.com/linhaifeng/articles/6384466.html#_label3</a></p>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> os模块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>调整Linux的网络栈Buffer_Size来提升网络性能</title>
      <link href="/2018/06/20/%E8%B0%83%E6%95%B4Linux%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A0%88Buffer_Size%E6%9D%A5%E6%8F%90%E5%8D%87%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD/"/>
      <url>/2018/06/20/%E8%B0%83%E6%95%B4Linux%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A0%88Buffer_Size%E6%9D%A5%E6%8F%90%E5%8D%87%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>调整 <code>Linux</code> 的网络栈 <code>Buffer Size</code> 来提升网络性能</p><blockquote><p>有两台位于不同数据中心的服务器，都用来处理很多并行的大文件传输。但是处理大文件，网络性能非常差。并且涉及到一个大文件，会导致性能降级。怎样通过调整 <code>Linux</code>下面的 <code>TCP</code> 来解决这个问题？</p></blockquote><a id="more"></a><blockquote><p>默认，<code>Linux</code> 的 <code>stack</code> 是没有为广域网之间的大文件高速传输而配置的，这样做是为了节约内存资源。为了使连接的系统服务之间能有更加高速的网络处理更多的网络包，你可以很容易的通过增加网络 <code>buffer size</code> 来调整 <code>Linux</code> 网络 <code>stack</code>。</p></blockquote><blockquote><p>默认的 <code>Linux buffer size</code> 的最大值是非常小的，<code>tcp</code> 的内存是基于系统的内存自动计算的，你能通过键入以下命令找到实际的值</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/proc/</span>sys<span class="regexp">/net/i</span>pv4<span class="regexp">/tcp_mem</span></span><br></pre></td></tr></table></figure><blockquote><p>默认的和最大的接收数据包内存大小</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>core/rmem_default</span><br><span class="line">cat <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>core/rmem_max</span><br></pre></td></tr></table></figure><blockquote><p>默认的和最大的发送数据包内存的大小</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>core/wmem_default</span><br><span class="line">cat <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>core/wmem_max</span><br></pre></td></tr></table></figure><blockquote><p>最大的内存 buffers 的选项</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/proc/</span>sys<span class="regexp">/net/</span>core<span class="regexp">/optmem_max</span></span><br></pre></td></tr></table></figure><h3 id="调整值"><a href="#调整值" class="headerlink" title="调整值"></a>调整值</h3><blockquote><p>为所有的协议队列设置操作系统层面的最大的发送 <code>buffer size(wmem)</code> 和 接收 <code>buffer size (rmem)</code>为 12MB。换句话说，设置内存数量，分配给每一个为了传送文件而打开或者是创建的 <code>tcp socket</code>。</p></blockquote><blockquote><p>警告！在大多数的 Linux 中 <code>rmem_max</code> 和 <code>wmem_max</code> 被分配的值为 128k，在一个低延迟的网络环境中，或者是 apps 比如 DNS、Web Server，这或许是足够的。尽管如此，如果延迟太大，默认的值可能就太小了，所以请记录以下在你的服务器上用来提高内存使用方法的设置。</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'net.core.wmem_max=12582912'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br><span class="line">echo <span class="string">'net.core.rmem_max=12582912'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>还需要设置 <code>minimum size</code>, <code>initial size</code>, and <code>maximum size</code> in bytes</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 'net.ipv4.tcp_rmem= <span class="number">1024</span>0 <span class="number">8738</span>0 <span class="number">12582912</span>' &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo 'net.ipv4.tcp_wmem= <span class="number">1024</span>0 <span class="number">8738</span>0 <span class="number">12582912</span>' &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>打开 <code>window scaling</code>，这是一个用来扩展传输窗口的选项</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'net.ipv4.tcp_window_scaling = 1'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>确保定义在 <code>RFC1323</code> 中的 <code>timestamps</code> 打开</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'net.ipv4.tcp_timestamps = 1'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>确保 select acknowledgments</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'net.ipv4.tcp_sack = 1'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>这个 “select acknowledgments” 不知道该如何翻译，翻译为“选择确认？”</p></blockquote><blockquote><p>当连接关闭的时候，<code>TCP</code> 默认缓存了很多连接指标在 <code>route cache</code> 中，以至于在不久的将来，连接建立的时候，可以用这些值来设置初始化条件。通常，这提升了整体的性能，但是，有时候会引起性能下降， 如果设置的话，<code>TCP</code> 在关闭的时候不缓存这些指标。</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'net.ipv4.tcp_no_metrics_save = 1'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>当 <code>interface</code> 接收到的数据包数量比内核处理速度的快的时候， 设置 <code>input</code> 队列最大的 <code>packets</code> 数量值。</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'net.core.netdev_max_backlog = 5000'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>现在重载这些改变，使其生效</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sysctl -p</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>tcpdump</code> 命令查看 通过 <code>eth0</code> 数据包流量的变化</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tcpdump</span> -ni eth0</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://segmentfault.com/a/1190000000473365" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000473365</a></p><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ul><li>请参考内核文档<a href="http://www.cyberciti.biz/files/linux-kernel/Documentation/networking/ip-sysctl.txt" target="_blank" rel="noopener">/networking/ip-sysctl.txt</a>获取更加多的信息</li><li>请查看 <code>sysctl</code> 的 <code>man</code> 手册</li></ul>]]></content>
      
      <categories>
          
          <category> Linux内核优化笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调整Linux的网络栈Buffer_Size来提升网络性能 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat中Connector常用配置</title>
      <link href="/2018/06/15/Tomcat%E4%B8%ADConnector%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/06/15/Tomcat%E4%B8%ADConnector%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="Tomcat-中-Connector-常用配置"><a href="#Tomcat-中-Connector-常用配置" class="headerlink" title="Tomcat 中 Connector 常用配置"></a>Tomcat 中 Connector 常用配置</h2><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>BIO</td><td>阻塞式 <code>I/O</code>，采用传统的 <code>java I/O</code> 进行操作，该模式下每个请求都会创建一个线程，适用于并发量小的场景</td></tr><tr><td>NIO</td><td>同步非阻塞，比传统 <code>BIO</code> 能更好的支持大并发，<code>Tomcat 8.0</code> 后默认采用该模式</td></tr><tr><td>APR</td><td><code>Tomcat</code> 以JNI形式调用http服务器的核心动态链接库来处理文件读取或网络传输操作，需要编译安装 <code>APR</code> 库</td></tr><tr><td>AIO</td><td>异步非阻塞，Tomcat 8.0 后支持</td></tr></tbody></table><blockquote><p>配置方法：在 <code>tomcat/conf/</code> 下 <code>server.xml</code></p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`&lt;Connector <span class="attribute">port</span>=<span class="string">"8080"</span> <span class="attribute">protocol</span>=<span class="string">"HTTP/1.1"</span>/&gt;`</span><br><span class="line">BIO: <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Protocol"</span></span><br><span class="line">NIO: <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span><br><span class="line">AIO: <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Nio2Protocol"</span></span><br><span class="line">APR: <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span></span><br></pre></td></tr></table></figure><p><code>BIO（blocking I/O）</code> 阻塞式 <code>I/O</code> 操作，表示 <code>Tomcat</code> 使用的是传统的 <code>Java I/O</code> 操作（即 <code>java.io</code> 包及其子包）。<br>默认的模式，性能最差，没有经过任何优化处理和支持。</p><p><code>NIO（non-blocking I/O）</code> Java SE 1.4 及后续版本提供的一种新的 I/O 操作方式（即 <code>java.nio</code> 包及其子包）。<br>Java nio 是一个基于缓冲区、并能提供非阻塞 <code>I/O</code> 操作的 <code>Java API</code>。<br>拥有比传统 <code>I/O</code> 操作（BIO）更好的并发运行性能。<br>要让 <code>Tomcat</code> 以 <code>NIO</code> 模式来运行，修改配置文件：<code>tomcat/conf/server.xml</code></p><p>修改以下内容<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector <span class="attribute">port</span>=<span class="string">"8080"</span> <span class="attribute">protocol</span>=<span class="string">"HTTP/1.1"</span></span><br><span class="line">         <span class="attribute">connectionTimeout</span>=<span class="string">"20000"</span></span><br><span class="line">         <span class="attribute">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>修改 protocol 的值为 org.apache.coyote.http11.Http11NioProtocol<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector <span class="attribute">port</span>=<span class="string">"8080"</span></span><br><span class="line">           <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span><br><span class="line">           <span class="attribute">connectionTimeout</span>=<span class="string">"20000"</span></span><br><span class="line">           <span class="attribute">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>重启 <code>Tomcat</code> 后生效</p><p>在 Tomcat 6.0 之后，提供了 NIO 的方式，可以有效的提升性能，特别是在大量长连接/数据上传+下载等 Web 应用中<br>此时 portocal=”org.apache.coyote.http11.Http11NioProtocol”<br><code>Tomcat</code> 支持：<code>BIO</code>，<code>NIO</code>，<code>NIO2</code>，<code>APR</code> 四种 <code>I/O</code> 模式，<code>Tomcat 8.5</code> 之前 默认为 BIO</p><p><code>Tomcat 8.5 and 9.0 have completely dropped the BIO connector.</code><br><code>Tomcat 8.5</code> 和 <code>9.0</code> 完全删除了 <code>BIO</code> 连接器<br>默认 <code>NIO</code> 模式</p><p>对于互联网应用，我们应该在 NIO、NIO2 之间做选择，因为它能够有效的提升性能（主要是并发能力）<br>其中 NIO2 即为 AIO，需要 JDK 1.7+、Linux 2.6+ 才能支持。<br>BIO：JDK 1.5+，tomcat 5.x+<br>NIO：JDK 1.6+，tomcat 6.x+<br>NIO2：JDK 1.7+，tomcat 7.x+<br>为了保守起见，我们暂且基于 NIO 模式</p><h3 id="查看-Tomcat-Connector-运行模式"><a href="#查看-Tomcat-Connector-运行模式" class="headerlink" title="查看 Tomcat Connector 运行模式"></a>查看 Tomcat Connector 运行模式</h3><p>方法一：在 <a href="http://x.x.x.x:8080/manager/status" target="_blank" rel="noopener">http://x.x.x.x:8080/manager/status</a> 中查看服务器状态 </p><p>方法二：根据 <code>Tomcat</code> 启动日志信息判断<br>BIO<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">INFO</span>: <span class="selector-tag">Initializing</span> <span class="selector-tag">ProtocolHandler</span> <span class="selector-attr">["http-bio-8080"]</span></span><br><span class="line"><span class="selector-tag">Aug</span> 04, 2015 10<span class="selector-pseudo">:20</span><span class="selector-pseudo">:35</span> <span class="selector-tag">PM</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span> <span class="selector-tag">init</span></span><br></pre></td></tr></table></figure></p><p>NIO<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">INFO</span>: <span class="selector-tag">Initializing</span> <span class="selector-tag">ProtocolHandler</span> <span class="selector-attr">["http-nio-8080"]</span></span><br><span class="line"><span class="selector-tag">Aug</span> 04, 2015 10<span class="selector-pseudo">:27</span><span class="selector-pseudo">:58</span> <span class="selector-tag">PM</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span> <span class="selector-tag">init</span></span><br></pre></td></tr></table></figure></p><p>APR<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">INFO</span>: <span class="selector-tag">Initializing</span> <span class="selector-tag">ProtocolHandler</span> <span class="selector-attr">["http-apr-8080"]</span></span><br><span class="line"><span class="selector-tag">Aug</span> 04, 2015 10<span class="selector-pseudo">:33</span><span class="selector-pseudo">:45</span> <span class="selector-tag">PM</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span> <span class="selector-tag">init</span></span><br></pre></td></tr></table></figure></p><blockquote><p>整合<code>Tomcat apr</code></p></blockquote><p>设置环境变量<br>方法一：在 <code>tomcat/bin/catalina.sh</code> 中增加1行<br>在 <code>echo “Using CATALINA_BASE: $CATALINA_BASE”</code> 的上一行添加<br>CATALINA_OPTS=”-Djava.library.path=/data/apr/lib”</p><p>方法二：在 <code>/etc/profile</code> 中加入<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">CATALINA_OPTS</span>=-Djava.library.path=/usr/local/apr/lib</span><br></pre></td></tr></table></figure></p><blockquote><p>使配置生效<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure></p></blockquote><p>修改配置文件<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim tomcat/conf/server.xml </span><br><span class="line">&lt;Connector <span class="attribute">port</span>=<span class="string">"8080"</span> <span class="attribute">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attribute">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attribute">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 `protocol` 的值为 `org.apache.coyote.http11.Http11NioProtocol`</span></span><br><span class="line">&lt;Connector <span class="attribute">port</span>=<span class="string">"8080"</span></span><br><span class="line">           <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span></span><br><span class="line">           <span class="attribute">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attribute">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>重启 <code>Tomcat</code>，启动日志出现以下内容证明此时以 <code>APR</code> 模式启动 </p><p>参考文档：<br><a href="https://blog.csdn.net/fd2025/article/details/80007435" target="_blank" rel="noopener">https://blog.csdn.net/fd2025/article/details/80007435</a></p>]]></content>
      
      <categories>
          
          <category> Tomcat笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat中Connector常用配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>回到页首按钮显示百分比</title>
      <link href="/2018/06/11/%E5%9B%9E%E5%88%B0%E9%A1%B5%E9%A6%96%E6%8C%89%E9%92%AE%E6%98%BE%E7%A4%BA%E7%99%BE%E5%88%86%E6%AF%94/"/>
      <url>/2018/06/11/%E5%9B%9E%E5%88%B0%E9%A1%B5%E9%A6%96%E6%8C%89%E9%92%AE%E6%98%BE%E7%A4%BA%E7%99%BE%E5%88%86%E6%AF%94/</url>
      <content type="html"><![CDATA[<h2 id="回到页首按钮显示百分比"><a href="#回到页首按钮显示百分比" class="headerlink" title="回到页首按钮显示百分比"></a>回到页首按钮显示百分比</h2><blockquote><p><code>Back-to-top</code> 按钮显示百分比</p></blockquote><a id="more"></a><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><blockquote><p>Next主题配置文件 <code>/hexo/themes/next/_config.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line"><span class="attr">  scrollpercent:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>将 <code>scrollpercen:</code> 的值改为 <code>true</code> 即可</p></blockquote>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回到页首按钮显示百分比 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo添加在线联系</title>
      <link href="/2018/06/10/Hexo%E6%B7%BB%E5%8A%A0%E5%9C%A8%E7%BA%BF%E8%81%94%E7%B3%BB/"/>
      <url>/2018/06/10/Hexo%E6%B7%BB%E5%8A%A0%E5%9C%A8%E7%BA%BF%E8%81%94%E7%B3%BB/</url>
      <content type="html"><![CDATA[<h2 id="Hexo添加在线联系"><a href="#Hexo添加在线联系" class="headerlink" title="Hexo添加在线联系"></a>Hexo添加在线联系</h2><blockquote><p>当有用户在网页上给你留言后会通过邮件或者微信通知你，可以及时的解答用户的疑问。</p></blockquote><a id="more"></a><h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><blockquote><p>首先到 <code>DaoVoice</code> 上注册一个账号，注册完成后会得到一个 <code>app_id</code><br><a href="http://dashboard.daovoice.io" target="_blank" rel="noopener">http://dashboard.daovoice.io</a></p></blockquote><h3 id="获取-appid-的步骤"><a href="#获取-appid-的步骤" class="headerlink" title="获取 appid 的步骤"></a>获取 <code>appid</code> 的步骤</h3><blockquote><p>在 <code>DaoVoice</code> 的应用设置 -&gt; 安装到网站中的找到自己的 app_id<br>然后在主题 <code>/next/layout/_partials/head.swig</code> 文件中最后添加代码</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.daovoice %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">  (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice")</span></span><br><span class="line"><span class="xml">  daovoice('init', &#123;</span></span><br><span class="line"><span class="xml">      app_id: "</span><span class="template-variable">&#123;&#123;theme.daovoice_app_id&#125;&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">  daovoice('update');</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h3 id="主题配置文件中添加配置"><a href="#主题配置文件中添加配置" class="headerlink" title="主题配置文件中添加配置"></a>主题配置文件中添加配置</h3><blockquote><p>在主题配置文件 <code>/next/_config.yml</code> 中添加相应的配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Online contact</span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">这里输入前面获取的app_id</span></span><br></pre></td></tr></table></figure><h3 id="调整位置"><a href="#调整位置" class="headerlink" title="调整位置"></a>调整位置</h3><blockquote><p>最后聊天图标的位置可能和一些东西重叠<br>这个使用可以在控制面板中应用设置 -&gt; 聊天设置里面设置相对右边和底部的位置</p></blockquote><p>参考文档<br><a href="https://www.ezlippi.com/blog/2018/01/next-chat.html" target="_blank" rel="noopener">https://www.ezlippi.com/blog/2018/01/next-chat.html</a><br><a href="https://meta.tn/a/c40f12eb1b892bbb8cda053c03c688e3f20e4f642164080ef463cd4a7bc3b042" target="_blank" rel="noopener">https://meta.tn/a/c40f12eb1b892bbb8cda053c03c688e3f20e4f642164080ef463cd4a7bc3b042</a><br><a href="http://www.niww.me/2018/03/02/hexo-daovoice/" target="_blank" rel="noopener">http://www.niww.me/2018/03/02/hexo-daovoice/</a></p>]]></content>
      
      <categories>
          
          <category> Hexo笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo添加在线联系 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next主题背景</title>
      <link href="/2018/06/10/Next%E4%B8%BB%E9%A2%98%E8%83%8C%E6%99%AF/"/>
      <url>/2018/06/10/Next%E4%B8%BB%E9%A2%98%E8%83%8C%E6%99%AF/</url>
      <content type="html"><![CDATA[<h2 id="Next主题背景个性化DIY"><a href="#Next主题背景个性化DIY" class="headerlink" title="Next主题背景个性化DIY"></a>Next主题背景个性化DIY</h2><blockquote><p>整理了一下博客，加个背景图片（BackGroundImage）<br>调整一下视觉感官，<code>背景图片</code> 是动态变化的，每次刷新都会更新一张图</p></blockquote><a id="more"></a><h3 id="一个图片网站"><a href="#一个图片网站" class="headerlink" title="一个图片网站"></a>一个图片网站</h3><blockquote><p>分享一个非常 <code>Nice</code> 的图片网站，感觉这个国外的图片社区网站真的秒杀一众图片网站啊，不仅图片质量高，免费，而且还提供了随机拉取图片的服务 <code>API</code>，太赞，对于想实现动态背景，简直是福音<br><a href="https://source.unsplash.com/" target="_blank" rel="noopener">https://source.unsplash.com/</a></p></blockquote><h3 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h3><blockquote><p>修改 <code>\themes\next\source\css\_custom\custom.styl</code> 文件<br>这个是 <code>Next</code> 故意留给用户自己个性化定制一些样式的文件，添加以下代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(https://source.unsplash.com/random/1600x900);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>URL</code> 括号中直接添加图片的地址链接，也可以置换成你所喜欢的任意图片。<br><code>repeat</code>、<code>attachment</code>、<code>position</code> 就是调整图片的位置，不重复出现、不滚动等。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next主题背景 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>添加看板娘</title>
      <link href="/2018/06/10/%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
      <url>/2018/06/10/%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
      <content type="html"><![CDATA[<h2 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h2><a id="more"></a><p>实现效果</p><blockquote><p>用 <code>Git Bash Here</code> 在站点根目录执行如下代码</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> D:\hexo\</span><br><span class="line">npm install hexo-helper-live2d <span class="params">--save</span></span><br></pre></td></tr></table></figure><p><del>然后打开 <code>/themes/next/layout/_layout.swig</code> 将下面代码放到 <code>&lt;/body&gt;</code> 之前</del><br><del>{ { live2d() } }</del><br><strong>注意：由于官方更新了包，所以画删除线的不用做了</strong></p><blockquote><p>然后在这里可以看到一些已有的模型，记下想要的模型名字，使用安装命令<br><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">https://huaji8.top/post/live2d-plugin-2.0/</a></p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="string">"模型的包名"</span></span><br></pre></td></tr></table></figure><blockquote><p>模型的包名</p></blockquote><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-<span class="keyword">model</span>-chitose</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-epsilon2_1</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-gf</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haru/<span class="number">01</span> (use npm install --save live2d-widget-<span class="keyword">model</span>-haru)</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haru/<span class="number">02</span> (use npm install --save live2d-widget-<span class="keyword">model</span>-haru)</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haruto</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-hibiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-hijiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-izumi</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-koharu</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-miku</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-ni-j</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nico</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nietzsche</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nipsilon</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nito</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-shizuku</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-tororo</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-tsumiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-unitychan</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-wanko</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-z16</span><br></pre></td></tr></table></figure><blockquote><p>以 hijiki 为例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> <span class="string">"live2d-widget-model-hijiki"</span> <span class="comment">--save</span></span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@<span class="number">1.2</span><span class="number">.4</span> (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@<span class="number">1.2</span><span class="number">.4</span>: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (<span class="keyword">current</span>: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span><br><span class="line"></span><br><span class="line">+ live2d-widget-<span class="keyword">model</span>-hijiki@<span class="number">1.0</span><span class="number">.5</span></span><br><span class="line">added <span class="number">1</span> <span class="keyword">package</span> <span class="keyword">and</span> audited <span class="number">3800</span> packages <span class="keyword">in</span> <span class="number">8.046</span>s</span><br><span class="line"><span class="keyword">found</span> <span class="number">2</span> <span class="keyword">low</span> severity vulnerabilities</span><br><span class="line">  run <span class="string">`npm audit fix`</span> <span class="keyword">to</span> fix them, <span class="keyword">or</span> <span class="string">`npm audit`</span> <span class="keyword">for</span> details</span><br><span class="line"></span><br><span class="line">$ npm <span class="keyword">install</span> live2d-widget-<span class="keyword">model</span>-tororo <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="在-配置文件-末尾添加代码"><a href="#在-配置文件-末尾添加代码" class="headerlink" title="在 配置文件 末尾添加代码"></a>在 <code>配置文件</code> 末尾添加代码</h3><blockquote><p>安装完成后，还需要在一些小小的修改<br>在 <code>_config.yml</code>（<code>Hexo站点</code> 或 <code>Next主题</code> 皆可）中，加入以下内容</p><p><code>/blog/_config.yml</code><br>或<br><code>/blog/next/themes/_config.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 看板娘</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">     enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">     scriptFrom:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">     pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line"><span class="attr">     pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line"><span class="attr">     pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line"><span class="attr">     model:</span></span><br><span class="line"><span class="attr">       use:</span> <span class="string">live2d-widget-model-hijiki</span></span><br><span class="line"><span class="attr">     display:</span></span><br><span class="line"><span class="attr">       position:</span> <span class="string">right</span></span><br><span class="line"><span class="attr">       width:</span> <span class="number">150</span></span><br><span class="line"><span class="attr">       height:</span> <span class="number">300</span></span><br><span class="line"><span class="attr">     mobile:</span></span><br><span class="line"><span class="attr">       show:</span> <span class="literal">true</span>    <span class="comment"># false 手机端不显示</span></span><br></pre></td></tr></table></figure><h3 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>              <span class="comment"># 是否开启</span></span><br><span class="line"><span class="attr">  scriptFrom:</span> <span class="string">local</span>         <span class="comment"># 默认</span></span><br><span class="line"><span class="attr">  pluginRootPath:</span> <span class="string">live2dw/</span>  <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line"><span class="attr">  pluginJsPath:</span> <span class="string">lib/</span>        <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line"><span class="attr">  pluginModelPath:</span> <span class="string">assets/</span>  <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr    # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg       # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">live2d-widget-model-wanko</span> <span class="comment"># 调用模型名，必须要先下载</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">right</span>         <span class="comment"># 在博客的左边还是右边显示</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">150</span>              <span class="comment"># 边框宽度</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">300</span>             <span class="comment"># 边框高度</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">true</span>              <span class="comment"># 是否在手机上显示</span></span><br><span class="line">    <span class="comment"># use: wanko            # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko    # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br></pre></td></tr></table></figure><blockquote><p>根据需要可修改use:后的包名；调整长度和宽度；选择是否停用插件等。</p></blockquote><p>参考文档<br><a href="https://wangyuyang.me/2018/04/06/对基于HEXO的NexT主题的美化/" target="_blank" rel="noopener">https://wangyuyang.me/2018/04/06/对基于HEXO的NexT主题的美化/</a><br><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</a><br><a href="https://alvabill.ml/hexo搭建个人博客-NexT主题优化/" target="_blank" rel="noopener">https://alvabill.ml/hexo搭建个人博客-NexT主题优化/</a></p>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 添加看板娘 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Chrome自带的长截屏功能</title>
      <link href="/2018/06/10/Chrome%E8%87%AA%E5%B8%A6%E7%9A%84%E9%95%BF%E6%88%AA%E5%B1%8F%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/06/10/Chrome%E8%87%AA%E5%B8%A6%E7%9A%84%E9%95%BF%E6%88%AA%E5%B1%8F%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<h2 id="Chrome自带的长截屏功能"><a href="#Chrome自带的长截屏功能" class="headerlink" title="Chrome自带的长截屏功能"></a>Chrome自带的长截屏功能</h2><blockquote><p>在 <code>Google Chrome</code> 里面，打开开发人员工具 <code>按F12</code><br>或<br>网站上任意空白处右键 – 选择 “检查” 或者“审查元素”</p><p>快捷键 <code>Ctrl + Shift + P</code>，会看到右边的审查元素出现了一个输入框<br>输入 <code>screenshot</code> 然后回车<br>保存图片</p></blockquote>]]></content>
      
      <categories>
          
          <category> Chrome笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome自带的长截屏功能 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Chevereto图床</title>
      <link href="/2018/06/10/Chevereto%E5%9B%BE%E5%BA%8A/"/>
      <url>/2018/06/10/Chevereto%E5%9B%BE%E5%BA%8A/</url>
      <content type="html"><![CDATA[<h2 id="Chevereto图床"><a href="#Chevereto图床" class="headerlink" title="Chevereto图床"></a>Chevereto图床</h2><blockquote><p><code>Chevereto</code> 是一款采用 <code>PHP</code> 语言开发的网络相册脚本程序，支持多语言，提供中文语言包的下载的开源在线图片存储分享服务系统，支持本地上传和在线获取两种图像上传方式，并集成了 <code>TinyURL</code> 网址缩短服务。<br><code>Chevereto</code> 这套程序可以像 <code>Discuz</code> 或 <code>WordPress</code> 一样随意架设在任何空间上。<br>而它的功能除了一般图片空间单纯的从电脑上传图片外，也支援利用网址也可以上传，最屌的是还有 <code>TinyURL</code> 的缩短网址的功能可以使用，因此这套 <code>Chevereto</code> 可以说是比市面上的图片空间好太多了。<br>他是把图片上传到空间的，相信一般大家都一定会使用免费空间，在此建议大家在挑主机时尽可能使用 <code>cPanel</code> 的空间，因为可以使用 <code>cPanel</code> 特有的 <code>「Cron Jobs」</code> 来备份你上传的图片。</p></blockquote><a id="more"></a><blockquote><p><code>Chevereto</code> 是一款分享照片的程序，可以非常轻松得在自己的服务器上搭建照片分享程序，功能强大，外观精美。<br><code>Chevereto</code> 本身是收费使用的，一次性付费，终身使用，但是其开源版本可以免费使用。<br><a href="https://chevereto.com/" target="_blank" rel="noopener">https://chevereto.com/</a><br><a href="https://github.com/Chevereto/Chevereto-Free" target="_blank" rel="noopener">https://github.com/Chevereto/Chevereto-Free</a><br><a href="https://chevereto.com/docs/requirements" target="_blank" rel="noopener">https://chevereto.com/docs/requirements</a></p></blockquote><h3 id="Clevereto-错误-404-解决方法"><a href="#Clevereto-错误-404-解决方法" class="headerlink" title="Clevereto 错误 404 解决方法"></a>Clevereto 错误 <code>404</code> 解决方法</h3><blockquote><p>如果 <code>Web服务</code> 是 <code>Nginx</code>，基本第一步安装好后再次打开网站会出现 <code>404</code> 错误。<br>因为 <code>Chevereto</code> 默认提供基于 <code>Apache</code> 环境的伪静态规则</p></blockquote><blockquote><p>需要设置以下 <code>Rewrite</code> 伪静态规则<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">if</span> (-f <span class="variable">$request_filename</span>/index.html)&#123;</span><br><span class="line">        <span class="attribute">rewrite</span> (.*) <span class="variable">$1</span>/index.html <span class="literal">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">if</span> (-f <span class="variable">$request_filename</span>/index.php)&#123;</span><br><span class="line">        <span class="attribute">rewrite</span> (.*) <span class="variable">$1</span>/index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        <span class="attribute">rewrite</span> (.*) /index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /api.php;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /admin &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> /admin/index.php?<span class="variable">$args</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="官方推荐配置"><a href="#官方推荐配置" class="headerlink" title="官方推荐配置"></a>官方推荐配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disable access to .ht* files</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /\.ht</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable access to sensitive files in app path</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /(app|content|lib)/.*\.(po|php|lock|sql)$</span> &#123;</span><br><span class="line">  <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable log on not found images + image replacement</span></span><br><span class="line"><span class="comment"># Image not found replacement</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* (jpe?g|png|gif)</span> &#123;</span><br><span class="line">    <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> /content/images/system/default/<span class="number">404</span>.gif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable CORS header (avoids font rendering issues)</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.(ttf|ttc|otf|eot|woff|woff2|font.css|css|js)$</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin <span class="string">"*"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Force serve upload path as static content</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /images</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pretty URLs</span></span><br><span class="line"><span class="comment"># Route dynamic request to index.php</span></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文档</p><blockquote><p><a href="https://www.zhujibiji.com/2017/11/install-chevere-to-build-your-image-sharing-website/" target="_blank" rel="noopener">https://www.zhujibiji.com/2017/11/install-chevere-to-build-your-image-sharing-website/</a><br><a href="https://lala.im/2478.html" target="_blank" rel="noopener">https://lala.im/2478.html</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 图床笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chevereto图床 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于图床的选择</title>
      <link href="/2018/06/10/%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%BA%8A%E7%9A%84%E9%80%89%E6%8B%A9/"/>
      <url>/2018/06/10/%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%BA%8A%E7%9A%84%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<h2 id="关于图床的选择"><a href="#关于图床的选择" class="headerlink" title="关于图床的选择"></a>关于图床的选择</h2><h3 id="为什么要使用图床？"><a href="#为什么要使用图床？" class="headerlink" title="为什么要使用图床？"></a>为什么要使用图床？</h3><blockquote><p>Hexo 文章中的图片，我们可以放到本地，然后一起部署到 <code>Github</code> 中，这样完全没有问题。<br>然而 github pages 空间毕竟有限（貌似只有 <code>300M</code>）,另外图片的管理太混乱了，一些原创的图片可能被盗链。</p></blockquote><a id="more"></a><blockquote><p>很多技术人写作都用的是 <code>MarkDown</code> 轻量级标记语言进行博客写作，这种写作让我们不用像使用 Word 那样那么麻烦地调整排版和格式，只需专心写作并且照样完成排版的一种方式。<br>但是，基本所有支持 <code>MarkDown</code> 本地写作工具都只能采用导入本地图片引用的方式，对于一篇需要大量图片阐述的文章以及该文章上传至网络图片丢失，这不得不是个很糟糕的问题。<br>那么有什么比较好的解决方式吗？<br>很多人采用的图片寄存于网络，用服务厂商作为图片存储的地方，大家都叫为 <code>「图床」</code> 。</p></blockquote><blockquote><p>那么像 CSDN 博客、简书平台不是都可以吗？<br>是的，它们平台写文章的时候都可以导入图片然后得到一个图片网络地址。<br>但是，图片数量多，一张一张上传，这不是贼烦嘛！<br>那么有专门可以作 <code>「图床」</code> 功能的服务商吗？<br>有的，比如七牛云。</p></blockquote><p><strong>网上谷歌搜下还是能搜到很多图床网站的，先随便列举一些</strong></p><h3 id="公共图床"><a href="#公共图床" class="headerlink" title="公共图床"></a>公共图床</h3><h4 id="SM-MS"><a href="#SM-MS" class="headerlink" title="SM.MS"></a>SM.MS</h4><blockquote><p><a href="https://sm.ms/" target="_blank" rel="noopener">https://sm.ms/</a><br>SM.MS 是由 V2EX @Showfom 自建的，无外链限制，无流量限制的图床，支持 HTTPS，速度不错，已经运行两年多了。</p></blockquote><h4 id="极简图床"><a href="#极简图床" class="headerlink" title="极简图床"></a>极简图床</h4><blockquote><p><a href="https://jiantuku.com/#/" target="_blank" rel="noopener">https://jiantuku.com/#/</a></p></blockquote><h4 id="路过图床"><a href="#路过图床" class="headerlink" title="路过图床"></a>路过图床</h4><blockquote><p><a href="https://imgchr.com/" target="_blank" rel="noopener">https://imgchr.com/</a></p></blockquote><h4 id="Imgur"><a href="#Imgur" class="headerlink" title="Imgur"></a>Imgur</h4><blockquote><p><a href="https://imgur.com/" target="_blank" rel="noopener">https://imgur.com/</a><br>Imgur 是一家国外老牌的图片存储服务商，国外速度很快，口碑不错，支持 HTTPS。<br>但是国内速度很不稳定，所以追求国内速度的同学慎用。</p></blockquote><h4 id="Qchan图床"><a href="#Qchan图床" class="headerlink" title="Qchan图床"></a>Qchan图床</h4><p><a href="http://tuchuang.org/" target="_blank" rel="noopener">http://tuchuang.org/</a></p><h4 id="微博图床"><a href="#微博图床" class="headerlink" title="微博图床"></a>微博图床</h4><blockquote><p>微博图床，可以自定义支持七牛，界面简洁美观，支持 Chrome 插件，注册后还可以同步上传历史。</p></blockquote><h3 id="自建图床"><a href="#自建图床" class="headerlink" title="自建图床"></a>自建图床</h3><blockquote><p>目前自建图床方案有两种</p><ol><li>是利用云服务商提供的存储服务来作为图床，通过 API 来管理图片</li><li>是在 VPS 上安装开源的图片或文件管理程序，只要能提供外链，基本都可以作为图床来用。</li></ol></blockquote><h4 id="建图床（云服务）"><a href="#建图床（云服务）" class="headerlink" title="建图床（云服务）"></a>建图床（云服务）</h4><blockquote><p>七牛云，又拍云，阿里云OSS</p></blockquote><h4 id="自建图床（开源方案）"><a href="#自建图床（开源方案）" class="headerlink" title="自建图床（开源方案）"></a>自建图床（开源方案）</h4><blockquote><p>如果你有 VPS，并且网络速度 OK 的话，自建图床也是一个不错的选择。</p></blockquote><h5 id="Lychee"><a href="#Lychee" class="headerlink" title="Lychee"></a>Lychee</h5><blockquote><p><a href="https://github.com/electerious/Lychee" target="_blank" rel="noopener">https://github.com/electerious/Lychee</a><br>Lychee 是一个开源免费的基于 PHP 的图片管理系统，支持 Docker 部署，<br>可以直接当做图床来用，Lychee 还支持很多扩展。</p></blockquote><h5 id="树洞外链"><a href="#树洞外链" class="headerlink" title="树洞外链"></a>树洞外链</h5><blockquote><p><a href="https://yun.aoaoao.me/" target="_blank" rel="noopener">https://yun.aoaoao.me/</a><br><a href="https://github.com/HFO4/shudong-share" target="_blank" rel="noopener">https://github.com/HFO4/shudong-share</a><br>树洞外链 是一款免费开源的 PHP 外链网盘系统，界面简洁友好，<br>支持七牛、本地、远程、阿里云OSS、又拍云五种储存方式，<br>支持多用户系统，多上传方案策略。</p></blockquote><h5 id="Chevereto"><a href="#Chevereto" class="headerlink" title="Chevereto"></a>Chevereto</h5><blockquote><p><a href="https://chevereto.com/" target="_blank" rel="noopener">https://chevereto.com/</a><br><a href="https://github.com/Chevereto/Chevereto-Free" target="_blank" rel="noopener">https://github.com/Chevereto/Chevereto-Free</a><br><a href="https://chevereto.com/docs/requirements" target="_blank" rel="noopener">https://chevereto.com/docs/requirements</a><br>Chevereto 是一款分享照片的程序，可以非常轻松得在自己的服务器上搭建照片分享程序，功能强大，外观精美。<br>Chevereto 本身是收费使用的，一次性付费，终身使用，但是其开源版本可以免费使用。</p></blockquote><p><strong>使用图床的目的是希望文章的图片资源能有更好的加载速度和稳定的显示效果</strong>。</p>]]></content>
      
      <categories>
          
          <category> 图床笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于图床的选择 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java虚拟机之堆溢出处理</title>
      <link href="/2018/06/10/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B9%8B%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%84%E7%90%86/"/>
      <url>/2018/06/10/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B9%8B%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="Java-虚拟机之堆溢出处理"><a href="#Java-虚拟机之堆溢出处理" class="headerlink" title="Java 虚拟机之堆溢出处理"></a>Java 虚拟机之堆溢出处理</h2><p>在 Java 程序的运行过程中，如果堆空间不足，则有可能抛出内存溢出错误 <code>(Out Of Memory)</code>，简称为 <code>OOM</code>。</p><a id="more"></a><blockquote><p>如下文字显示了典型的堆内存溢出</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.lang</span><span class="selector-class">.OutOfMemoryError</span>: Java heap space at geym<span class="selector-class">.zbase</span><span class="selector-class">.ch3</span><span class="selector-class">.heap</span><span class="selector-class">.DumpOOM</span><span class="selector-class">.main</span>(DumpOOM<span class="selector-class">.java</span>:<span class="number">20</span>)</span><br></pre></td></tr></table></figure><blockquote><p>一旦发生这类问题，系统就会被迫退出。如果发生在生产环境，可能会引起严重的业务中断。<br>为了能够不断改善系统，避免或减少这类错误的发生，需要在发生错误时，获得尽可能多的现场信息，以帮助研发人员排查现场问题。</p></blockquote><blockquote><p>Java 虚拟机提供了参数 <code>-XX:+HeapDumpOnOutOfMemoryError</code>，使用该参数，可以在内存溢出时导出整个堆信息。<br>和它配合使用的还有 <code>-XX:HeapDumpPath</code>，可以指定导出堆的存放路径。</p></blockquote><blockquote><p>使用如下参数执行上述代码</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms5m -Xmx20m -<span class="string">XX:</span>+HeapDumpOnOutOfMemoryError -<span class="string">XX:</span>HeapDumpPath=<span class="regexp">/data/</span>app<span class="regexp">/tomcat/</span>logs/P02.dump</span><br></pre></td></tr></table></figure><blockquote><p>显然 <code>20M</code> 堆空间不足以容纳 <code>25M</code> 内存，系统比如发生内存溢出，在发生错误后，控制台输出如下 </p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.OutOfMemoryError</span>: Java heap space Dumping heap to /data/app/tomcat/logs/P02<span class="selector-class">.dump</span>... Heap dump file created [<span class="number">23067302</span> bytes <span class="keyword">in</span> <span class="number">0.160</span> secs] Exception <span class="keyword">in</span> thread “main” java<span class="selector-class">.lang</span><span class="selector-class">.OutOfMemoryError</span>: Java heap space at geym<span class="selector-class">.zbase</span><span class="selector-class">.ch3</span><span class="selector-class">.heap</span><span class="selector-class">.DumpOOM</span><span class="selector-class">.main</span>(DumpOOM<span class="selector-class">.java</span>:<span class="number">19</span>)</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，虚拟机将当前的堆导出，并保存到 <code>/data/app/tomcat/logs/P02.dump</code> 文件下<br>启动最小空间 <code>5M</code>，配了 <code>20M</code> 最大空间 ，发生了 <code>内存溢出错误</code>，dump 路径为 <code>/data/app/tomcat/logs/P02.dump</code>  使用 MAT 等工具打开该文件进行分析，可以很容易地找到这些 <code>byte</code> 数组和保存它们的 <code>Vector</code> 对象实例</p></blockquote>]]></content>
      
      <categories>
          
          <category> Java笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java虚拟机之堆溢出处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python编译安装</title>
      <link href="/2018/06/08/Python%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
      <url>/2018/06/08/Python%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<blockquote><p>一般情况下，Linux 都会预装 Python，但是这个预装的 Python 版本一般都比较低，很多 Python 的新特性都没有，必须重新安装新一点的版本<br>Python下载地址<br><a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a><br><a href="https://www.python.org/ftp/python/" target="_blank" rel="noopener">https://www.python.org/ftp/python/</a><br><a href="https://www.python.org/ftp/python/2.7.15/" target="_blank" rel="noopener">https://www.python.org/ftp/python/2.7.15/</a><br><a href="https://www.python.org/ftp/python/3.7.3" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.7.3/</a></p></blockquote><a id="more"></a><h3 id="查看-Python-版本"><a href="#查看-Python-版本" class="headerlink" title="查看 Python 版本"></a>查看 Python 版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS 6.x</span></span><br><span class="line">Python 2.6.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS 7.x</span></span><br><span class="line">python 2.7.5</span><br></pre></td></tr></table></figure><p><del>做好链接，保留旧版本 python</del><br><del>cd /usr/bin/</del><br><del>cp /usr/bin/python /usr/bin/python_bak</del></p><p><del>如果发现 yum 不能用了，解决 yum 无法使用的问题</del><br><del>因为 yum 依赖系统默认安装的 python 版本, 处理如下：</del><br><del>vim /usr/bin/yum</del><br><del>#!/usr/bin/python</del><br><del>修改为-&gt; #!/usr/bin/python2.6 或 #!/usr/bin/env python2.6</del><br><del>import sys</del><br><del>try:</del><br>    <del>import yum</del><br><del>except ImportError:</del><br><del>……省略……</del></p><p><strong>这里不更改 <code>原 Python 版本</code></strong></p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install readline readline-devel sqlite sqlite-devel zlib zlib-devel openssl openssl-devel bzip2 bzip2-devel bzip2-libs</span><br></pre></td></tr></table></figure><blockquote><p>缺少 <code>readline</code> 支持的 <code>IPython</code><br>WARNING: IPython History requires SQLite, your history will not be saved<br>WARNING: Readline services not available or not loaded.<br>WARNING: The auto-indent feature requires the readline library</p></blockquote><h3 id="下载Python"><a href="#下载Python" class="headerlink" title="下载Python"></a>下载Python</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz</span><br><span class="line">wget -c https://www.python.org/ftp/python/2.7.15/Python-2.7.15.tar.xz</span><br></pre></td></tr></table></figure><h3 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h3><h4 id="安装Python-2-7-15"><a href="#安装Python-2-7-15" class="headerlink" title="安装Python 2.7.15"></a>安装Python 2.7.15</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf Python-2.7.15.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-2.7.15/</span><br><span class="line">./configure \</span><br><span class="line">--prefix=/data/python2.7.15 --<span class="built_in">enable</span>-optimizations</span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="安装Python-3-7-3"><a href="#安装Python-3-7-3" class="headerlink" title="安装Python 3.7.3"></a>安装Python 3.7.3</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf Python-3.7.3.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-3.7.3/</span><br><span class="line">./configure \</span><br><span class="line">--prefix=/data/python3.7.3 --<span class="built_in">enable</span>-optimizations</span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">/data/python3.7.3/bin/pip3 install --upgrade pip</span><br></pre></td></tr></table></figure><p>CentOS下安装python3.7.0以上版本时报错<br><code>ModuleNotFoundError: No module named &#39;_ctypes&#39;</code>的解决办法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ModuleNotFoundError: No module named <span class="string">'_ctypes'</span></span><br><span class="line"></span><br><span class="line">3.7 版本需要一个新的包libffi-devel，安装此包之后再次进行编译安装即可。</span><br><span class="line">yum -y install libffi-devel</span><br></pre></td></tr></table></figure><h4 id="添加Python环境变量"><a href="#添加Python环境变量" class="headerlink" title="添加Python环境变量"></a>添加Python环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile.d/python.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PY_HOME=/data/python3.7.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$PY_HOME</span>/bin</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p><del>PS：如果安装 easy_intall 时报 zlib 没有安装，Linux下直接 yum -y install zlib zlib-devel，然后重新编译 Python2.7.15 继续就可以了</del><br><del>cp /usr/bin/python /usr/bin/python_bak</del><br><del>ln -svnf /data/python2.7.15/bin/python2.7 /usr/bin/python</del></p><h3 id="setuptools安装"><a href="#setuptools安装" class="headerlink" title="setuptools安装"></a>setuptools安装</h3><blockquote><p>下载地址<br><a href="https://pypi.python.org/pypi/setuptools" target="_blank" rel="noopener">https://pypi.python.org/pypi/setuptools</a><br><a href="https://pypi.python.org/simple/setuptools/" target="_blank" rel="noopener">https://pypi.python.org/simple/setuptools/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://files.pythonhosted.org/packages/1d/64/a18a487b4391a05b9c7f938b94a16d80305bf0369c6b0b9509e86165e1d3/setuptools-41.0.1.zip</span><br><span class="line">tar -zxvf setuptools-41.0.1.zip</span><br><span class="line"><span class="built_in">cd</span> setuptools-41.0.1/</span><br><span class="line">python3 setup.py build</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure><h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><blockquote><p>pip 下载地址<br><a href="https://pypi.org/project/pip/" target="_blank" rel="noopener">https://pypi.org/project/pip/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://files.pythonhosted.org/packages/93/ab/f86b61bef7ab14909bd7ec3cd2178feb0a1c86d451bc9bccd5a1aedcde5f/pip-19.1.1.tar.gz</span><br><span class="line">tar -xvf pip-19.1.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> pip-19.1.1/</span><br><span class="line">python3 setup.py build</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure><h3 id="安装IPython"><a href="#安装IPython" class="headerlink" title="安装IPython"></a>安装IPython</h3><blockquote><p>IPython 是一个 python 的交互式 Shell，比默认的 Python Shell 好用一点，支持变量自动补全，自动缩进，支持 Bash Shell 命令，内置了许多很有用的功能和函数<br>IPython 下载地址<br><a href="https://pypi.org/project/ipython/" target="_blank" rel="noopener">https://pypi.org/project/ipython/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf ipython-7.5.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ipython-7.5.0/</span><br><span class="line">python3 setup.py build</span><br><span class="line">python3 setup.py install</span><br><span class="line">或</span><br><span class="line">pip install ipython</span><br></pre></td></tr></table></figure><h3 id="pip-安装-python-第三方库"><a href="#pip-安装-python-第三方库" class="headerlink" title="pip 安装 python 第三方库"></a>pip 安装 python 第三方库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br><span class="line">pip3 install pyapi-gitlab</span><br><span class="line">pip3 install readline</span><br><span class="line">pip3 install rlcompleter2</span><br></pre></td></tr></table></figure><h3 id="Python-组件更新"><a href="#Python-组件更新" class="headerlink" title="Python 组件更新"></a>Python 组件更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade pip</span><br><span class="line">pip3 install --upgrade setuptools</span><br><span class="line">pip3 install --upgrade requests</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python编译安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shell脚本日志切割</title>
      <link href="/2018/06/08/Shell%E8%84%9A%E6%9C%AC%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/"/>
      <url>/2018/06/08/Shell%E8%84%9A%E6%9C%AC%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/</url>
      <content type="html"><![CDATA[<h3 id="Shell-脚本日志切割"><a href="#Shell-脚本日志切割" class="headerlink" title="Shell 脚本日志切割"></a>Shell 脚本日志切割</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim logcut.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">day=$(date +<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">yesterday=$(date -d <span class="string">"yesterday"</span> +%Y-%m-%d)</span><br><span class="line">logsdir=(/data/app/*/logs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> logdir <span class="keyword">in</span> <span class="variable">$&#123;logsdir[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> logfile <span class="keyword">in</span> $(ls <span class="variable">$&#123;logdir[@]&#125;</span> | egrep <span class="string">"stdout.log|catalina.out"</span>)</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        cp <span class="variable">$logdir</span>/<span class="variable">$logfile</span> <span class="variable">$logdir</span>/<span class="variable">$&#123;logfile%.log&#125;</span>.<span class="variable">$&#123;day&#125;</span>.<span class="built_in">log</span></span><br><span class="line">        cp <span class="variable">$logs</span>/<span class="variable">$file</span> <span class="variable">$logs</span>/<span class="variable">$&#123;file%.out&#125;</span>.<span class="variable">$&#123;day&#125;</span>.out</span><br><span class="line">        cat /dev/null &gt; <span class="variable">$logdir</span>/<span class="variable">$logfile</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Shell笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell脚本日志切割 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shell脚本日志压缩</title>
      <link href="/2018/06/08/Shell%E8%84%9A%E6%9C%AC%E6%97%A5%E5%BF%97%E5%8E%8B%E7%BC%A9/"/>
      <url>/2018/06/08/Shell%E8%84%9A%E6%9C%AC%E6%97%A5%E5%BF%97%E5%8E%8B%E7%BC%A9/</url>
      <content type="html"><![CDATA[<h3 id="Shell-脚本日志压缩打包"><a href="#Shell-脚本日志压缩打包" class="headerlink" title="Shell 脚本日志压缩打包"></a>Shell 脚本日志压缩打包</h3><blockquote><p>压缩 <code>7</code> 天前日志<br>每个月 <code>1</code> 号，创建上个月的目录，<code>年-月</code> <code>2018-04</code><br>将 <code>gz</code> 压缩文件拷贝到 <code>年-月</code> <code>2018-04</code> 目录中</p></blockquote><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vim compresslog.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">day=$(date +<span class="string">"%d"</span>)</span><br><span class="line">month=$(date +<span class="string">"%Y-%d"</span>)</span><br><span class="line">lastmonth=$(date +<span class="string">"%Y-%m"</span> -d <span class="string">"last month"</span>)</span><br><span class="line">lastweek=$(date +<span class="string">"%Y-%m-%d"</span> -d <span class="string">"last week"</span>)</span><br><span class="line">logsdir=(/data/app/*/logs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> logs <span class="keyword">in</span> <span class="variable">$&#123;logsdir[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    find <span class="variable">$logs</span>/ -mtime +7 -regextype posix-extended -regex <span class="string">".*\.(log|out|txt)"</span> -<span class="built_in">exec</span> gzip &#123;&#125; \;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">[ <span class="variable">$day</span> == 01 ] &amp;&amp; <span class="built_in">cd</span> <span class="variable">$&#123;logsdir[@]&#125;</span> &amp;&amp; mkdir -pv <span class="variable">$lastmonth</span></span><br><span class="line"><span class="keyword">for</span> logdir <span class="keyword">in</span> <span class="variable">$&#123;logsdir[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    [ -d <span class="variable">$logdir</span>/<span class="variable">$lastmonth</span> ] || mkdir -pv <span class="variable">$logdir</span>/<span class="variable">$lastmonth</span></span><br><span class="line">    mv <span class="variable">$logdir</span>/*gz <span class="variable">$logdir</span>/<span class="variable">$lastmonth</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Shell笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell脚本日志压缩 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LVM 磁盘扩展</title>
      <link href="/2018/06/07/LVM%E7%A3%81%E7%9B%98%E6%89%A9%E5%B1%95/"/>
      <url>/2018/06/07/LVM%E7%A3%81%E7%9B%98%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h2 id="LVM-磁盘扩展"><a href="#LVM-磁盘扩展" class="headerlink" title="LVM 磁盘扩展"></a>LVM 磁盘扩展</h2><a id="more"></a><h3 id="查看磁盘空间"><a href="#查看磁盘空间" class="headerlink" title="查看磁盘空间"></a>查看磁盘空间</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">df -h</span></span><br></pre></td></tr></table></figure><h3 id="查看-LV-信息"><a href="#查看-LV-信息" class="headerlink" title="查看 LV 信息"></a>查看 LV 信息</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lvs</span></span><br></pre></td></tr></table></figure><h3 id="查看-VG-信息"><a href="#查看-VG-信息" class="headerlink" title="查看 VG 信息"></a>查看 VG 信息</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vgs</span></span><br></pre></td></tr></table></figure><h3 id="创建-PV"><a href="#创建-PV" class="headerlink" title="创建 PV"></a>创建 PV</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pvcreate <span class="regexp">/dev/</span>vdb</span><br></pre></td></tr></table></figure><h3 id="扩展已有的-VG-容量"><a href="#扩展已有的-VG-容量" class="headerlink" title="扩展已有的 VG 容量"></a>扩展已有的 VG 容量</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgextend vgdata <span class="regexp">/dev/</span>vdb</span><br></pre></td></tr></table></figure><blockquote><p><code>Couldn&#39;t&#39; create temporary archive name.</code><br>因为磁盘实在太小了或已经没有空间了，无法执行，删除一些数据就好了</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vgextend vgdata /dev/sda</span><br><span class="line">Volume<span class="built_in"> group </span><span class="string">"vgdata"</span> successfully extended</span><br></pre></td></tr></table></figure><h3 id="查看-VG-信息-1"><a href="#查看-VG-信息-1" class="headerlink" title="查看 VG 信息"></a>查看 VG 信息</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vgs</span></span><br></pre></td></tr></table></figure><h3 id="扩展已有-LV-容量"><a href="#扩展已有-LV-容量" class="headerlink" title="扩展已有 LV 容量"></a>扩展已有 LV 容量</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lvextend -l +<span class="number">100</span>%FREE <span class="meta-keyword">/dev/</span>vgdata/lvdata</span><br><span class="line">lvextend -L +<span class="number">99.99</span>G -n <span class="meta-keyword">/dev/</span>vgdata/lvdata</span><br><span class="line">lvextend -L +<span class="number">1020</span>M -n <span class="meta-keyword">/dev/</span>vgdata/lvdata</span><br></pre></td></tr></table></figure><blockquote><p>-L    # 指定逻辑卷的大小，单位为 <code>kKmMgGtT</code> 字节，也就是 <code>Size</code><br>-l    # 指定逻辑卷的大小，单位为 <code>PE</code> 数</p></blockquote><h3 id="重新加载逻辑卷"><a href="#重新加载逻辑卷" class="headerlink" title="重新加载逻辑卷"></a>重新加载逻辑卷</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 加载 ext 文件系统</span></span><br><span class="line">resize2fs <span class="meta-keyword">/dev/</span>vgdata/lvdata</span><br><span class="line"></span><br><span class="line"><span class="meta"># 加载 xfs 文件系统</span></span><br><span class="line">xfs_growfs <span class="meta-keyword">/dev/</span>vgdata/lvdata</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LVM笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LVM 磁盘扩展 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>创建LVM</title>
      <link href="/2018/06/07/LVM%E5%88%9B%E5%BB%BA/"/>
      <url>/2018/06/07/LVM%E5%88%9B%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="创建-LVM"><a href="#创建-LVM" class="headerlink" title="创建 LVM"></a>创建 LVM</h2><blockquote><p>LVM 创建过程<br><code>创建PV</code> -&gt; <code>创建VG</code> -&gt; <code>创建LV</code> -&gt; <code>格式化LV</code> -&gt; <code>mount挂载</code></p><p>常用命令<br><code>pvcreate</code> 设备名<br><code>vgcreate</code> 卷组名 物理卷<br><code>lvcreate</code> <code>-L</code> 大小 <code>-n</code> 逻辑卷名 卷组名</p></blockquote><a id="more"></a><h3 id="LVM-常用命令表"><a href="#LVM-常用命令表" class="headerlink" title="LVM 常用命令表"></a>LVM 常用命令表</h3><table><thead><tr><th>功能</th><th>管理物理卷</th><th>管理卷组</th><th>管理逻辑卷</th></tr></thead><tbody><tr><td>Scan 扫描</td><td>pvscan</td><td>vgscan</td><td>lvscan</td></tr><tr><td>Create 创建</td><td><code>pvcreate</code></td><td><code>vgcreate</code></td><td><code>lvcreate</code></td></tr><tr><td>Display 显示</td><td>pvdisplay</td><td>vgdisplay</td><td>lvdisplay</td></tr><tr><td>Remove 删除</td><td>pvremove</td><td>vgremove</td><td>lvremove</td></tr><tr><td>Extend 扩展</td><td></td><td><code>vgextend</code></td><td><code>lvextend</code></td></tr><tr><td>Reduce 减少</td><td></td><td>vgreduce</td><td>lvreduce</td></tr></tbody></table><h3 id="安装-LVM"><a href="#安装-LVM" class="headerlink" title="安装 LVM"></a>安装 LVM</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> lvm2</span><br></pre></td></tr></table></figure><h3 id="创建-PV"><a href="#创建-PV" class="headerlink" title="创建 PV"></a>创建 PV</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pvcreate /dev/vdb</span><br><span class="line">Physical <span class="keyword">volume</span><span class="bash"> <span class="string">"/dev/vdb"</span> successfully created</span></span><br></pre></td></tr></table></figure><h3 id="创建-VG"><a href="#创建-VG" class="headerlink" title="创建 VG"></a>创建 VG</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vgcreate vgdata /dev/vdb</span><br><span class="line">Volume<span class="built_in"> group </span><span class="string">"vgdata"</span> successfully created</span><br></pre></td></tr></table></figure><h3 id="创建-LV"><a href="#创建-LV" class="headerlink" title="创建 LV"></a>创建 LV</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lvcreate -L <span class="number">49.99</span>G -n lvdata vgdata /dev/vdb</span><br><span class="line">Logical <span class="keyword">volume</span><span class="bash"> <span class="string">"lvdata"</span> created.</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">lvcreate -L 99.99G -n lvdata vgdata /dev/vdb</span></span><br><span class="line"><span class="bash">Logical volume <span class="string">"lvdata"</span> created.</span></span><br></pre></td></tr></table></figure><h3 id="文件系统格式化"><a href="#文件系统格式化" class="headerlink" title="文件系统格式化"></a>文件系统格式化</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 格式化 ext 文件系统</span></span><br><span class="line">mkfs.ext4 <span class="meta-keyword">/dev/</span>vgdata/lvdata</span><br><span class="line"></span><br><span class="line"><span class="meta"># 格式化 xfs 文件系统</span></span><br><span class="line">mkfs.xfs <span class="meta-keyword">/dev/</span>vgdata/lvdata</span><br></pre></td></tr></table></figure><h3 id="挂载逻辑卷到目录"><a href="#挂载逻辑卷到目录" class="headerlink" title="挂载逻辑卷到目录"></a>挂载逻辑卷到目录</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mkdir</span> -pv /<span class="class"><span class="keyword">data</span></span></span><br><span class="line"><span class="title">mount</span> /dev/vgdata/lvdata /<span class="class"><span class="keyword">data</span></span></span><br></pre></td></tr></table></figure><h3 id="编辑-etc-fstab"><a href="#编辑-etc-fstab" class="headerlink" title="编辑 /etc/fstab"></a>编辑 /etc/fstab</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="string">/etc/fstab</span></span><br><span class="line"><span class="string">...</span>省略<span class="string">...</span></span><br><span class="line"><span class="string">/dev/mapper/vgdata-lvdata</span>                 <span class="string">/data</span>   xfs     defaults        0 0</span><br><span class="line"><span class="string">...</span>省略<span class="string">...</span></span><br></pre></td></tr></table></figure><p>### </p>]]></content>
      
      <categories>
          
          <category> LVM笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建LVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next添加文章结束标记</title>
      <link href="/2018/06/07/Next%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E7%BB%93%E6%9D%9F%E6%A0%87%E8%AE%B0/"/>
      <url>/2018/06/07/Next%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E7%BB%93%E6%9D%9F%E6%A0%87%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="添加文章结束标记"><a href="#添加文章结束标记" class="headerlink" title="添加文章结束标记"></a>添加文章结束标记</h3><blockquote><p>编辑 <code>/hexo/themes/next/layout/_macro/post.swig</code> 文件<br>在 <code>if theme.wechat_subscriber.enabled and not is_index</code> 上面添加如下代码</p></blockquote><a id="more"></a><h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>---------------- The End ----------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.wechat_subscriber.enabled and not is_index %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'wechat-subscriber.swig' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h3 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">————— The <span class="keyword">End</span> —————</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next添加文章结束标记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next添加音乐</title>
      <link href="/2018/06/06/Next%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90/"/>
      <url>/2018/06/06/Next%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90/</url>
      <content type="html"><![CDATA[<h3 id="Next-添加音乐"><a href="#Next-添加音乐" class="headerlink" title="Next 添加音乐"></a>Next 添加音乐</h3><blockquote><p>去网易云音乐搜索喜欢的音乐，点击生成外链播放器，复制代码直接放到博文末尾即可<br><code>height</code> 设为 <code>0</code> 可隐藏播放器，但仍然可以播放音乐<br><code>auto</code> 设成 <code>0</code> 可手动播放，默认是 <code>1</code> 自动播放</p></blockquote><a id="more"></a><blockquote><p>编辑 <code>/hexo/themes/next/layout/_custom/sidebar.swig</code> 文件里，播放器会显示在站点预览中<br>或<br>编辑 <code>/hexo/themes/next/layout/_macro/sidebar.swig</code> 文件里</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将代码粘贴到一个合适的位置</span></span><br><span class="line">&lt;iframe <span class="attribute">frameborder</span>=<span class="string">"no"</span> <span class="attribute">border</span>=<span class="string">"0"</span> <span class="attribute">marginwidth</span>=<span class="string">"0"</span> <span class="attribute">marginheight</span>=<span class="string">"0"</span> <span class="attribute">width</span>=330 <span class="attribute">height</span>=110 </span><br><span class="line"><span class="attribute">src</span>=<span class="string">"//music.163.com/outchain/player?type=0&amp;id=2188265841&amp;auto=1&amp;height=90"</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next添加音乐 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo添加分类及标签</title>
      <link href="/2018/06/06/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/"/>
      <url>/2018/06/06/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<h3 id="Hexo添加分类及标签"><a href="#Hexo添加分类及标签" class="headerlink" title="Hexo添加分类及标签"></a>Hexo添加分类及标签</h3><h3 id="创建-分类-选项"><a href="#创建-分类-选项" class="headerlink" title="创建 分类 选项"></a>创建 <code>分类</code> 选项</h3><blockquote><p>生成 <code>分类</code> 页并添加 <code>type</code> 属性<br>打开命令行，进入博客所在文件夹，执行命令</p></blockquote><a id="more"></a><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>categories</span><br></pre></td></tr></table></figure><blockquote><p>成功后会提示</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~<span class="regexp">/hexo/</span><span class="keyword">source</span><span class="regexp">/categories/i</span>ndex.md</span><br></pre></td></tr></table></figure><blockquote><p>根据上面的路径，找到 <code>index.md</code> 这个文件，打开后默认内容是这样的</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-06</span><span class="bullet">-06</span> <span class="number">22</span><span class="string">:49:07</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><blockquote><p>添加 <code>type: &quot;categories&quot;</code> 到内容中，添加后是这样的</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-06</span><span class="bullet">-06</span> <span class="number">22</span><span class="string">:49:07</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="给文章添加-“categories”-属性"><a href="#给文章添加-“categories”-属性" class="headerlink" title="给文章添加 “categories” 属性"></a>给文章添加 <code>“categories”</code> 属性</h3><blockquote><p>打开需要添加分类的文章，为其添加 <code>categories</code> 属性<br>下方的 <code>categories: Hexo笔记</code> 表示添加这篇文章到 <code>Hexo笔记</code> 这个分类<br>注意：<code>hexo</code> 一篇文章只能属于一个分类，也就是说如果在 <code>- Hexo笔记</code> 下方添加 <code>- xxx</code><br><code>hexo</code> 不会产生两个分类，而是把分类嵌套（即该文章属于 <code>- Hexo笔记</code> 下的 <code>- xxx</code> 分类）</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo添加分类及标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-06</span><span class="bullet">-06</span> <span class="number">22</span><span class="string">:44:41</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo笔记</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><blockquote><p>至此，成功给文章添加分类，点击首页的 <code>分类</code> 可以看到该分类下的所有文章<br>当然，只有添加了 <code>categories: xxx</code> 的文章才会被收录到首页的 <code>分类</code> 中</p></blockquote><h3 id="创建标签选项"><a href="#创建标签选项" class="headerlink" title="创建标签选项"></a>创建<code>标签</code>选项</h3><blockquote><p>生成 <code>标签</code> 页并添加 <code>type</code> 属性<br>打开命令行，进入博客所在文件夹，执行命令</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>tags</span><br></pre></td></tr></table></figure><blockquote><p>成功后会提示</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~<span class="regexp">/hexo/</span><span class="keyword">source</span><span class="regexp">/tags/i</span>ndex.md</span><br></pre></td></tr></table></figure><blockquote><p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-06</span><span class="bullet">-06</span> <span class="number">22</span><span class="string">:49:07</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><blockquote><p>添加 <code>type: &quot;tags&quot;</code> 到内容中，添加后是这样的</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-06</span><span class="bullet">-06</span> <span class="number">22</span><span class="string">:49:07</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><blockquote><p>给文章添加<code>tags</code>属性<br>打开需要添加标签的文章，为其添加 <code>tags</code> 属性<br>下方的<br><code>tags:</code><br><code>Hexo添加分类及标签</code><br><code>- 表格</code><br><code>- 表单验证</code><br>就是这篇文章的标签了</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo添加分类及标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-06</span><span class="bullet">-06</span> <span class="number">22</span><span class="string">:49:07</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo笔记</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo添加分类及标签</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">表格</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">表单验证</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><blockquote><p>至此，成功给文章添加分类，点击首页的<code>标签</code>可以看到该标签下的所有文章<br>当然，只有添加了 <code>tags: xxx</code> 的文章才会被收录到首页的<code>标签</code>中<br>细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的<br>所以我们可以打开 \hexo\scaffolds/post.md 文件，在 <code>tages:</code>上面加入<code>categories:</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">/hexo/scaffolds/post.md</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>保存后执行<code>hexo new &quot;文章名&quot;</code>命令生成的文件，页面里就有<code>categories:</code>项了<br><code>\hexo\scaffolds\</code> 目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值</p></blockquote>]]></content>
      
      <categories>
          
          <category> Hexo笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo添加分类及标签 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo设置网站的图标Favicon</title>
      <link href="/2018/06/06/Hexo%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%AB%99%E7%9A%84%E5%9B%BE%E6%A0%87Favicon/"/>
      <url>/2018/06/06/Hexo%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%AB%99%E7%9A%84%E5%9B%BE%E6%A0%87Favicon/</url>
      <content type="html"><![CDATA[<h3 id="Hexo-设置网站的图标-Favicon"><a href="#Hexo-设置网站的图标-Favicon" class="headerlink" title="Hexo 设置网站的图标 Favicon"></a>Hexo 设置网站的图标 Favicon</h3><blockquote><p>ico图标使用 <code>32x32</code><br>去别的网站下载或 PS 制作，并将图标名称改为 favicon.ico<br>然后把图标放在 <code>\next\themes\next\source\images\</code> 目录下<br>也可以放在 <code>hexo\source\images</code> 目录下，这个目录没有可以自己手动创建</p></blockquote><a id="more"></a><h3 id="修改-next主题配置文件，-next-themes-next-config-yml-文件"><a href="#修改-next主题配置文件，-next-themes-next-config-yml-文件" class="headerlink" title="修改 next主题配置文件，\next\themes\next\_config.yml 文件"></a>修改 <code>next主题配置文件</code>，<code>\next\themes\next\_config.yml</code> 文件</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">favicon:</span></span><br><span class="line"><span class="symbol">  small:</span> <span class="meta-keyword">/images/</span>favicon<span class="number">-16</span>x16-next.png</span><br><span class="line">  <span class="meta">#medium: /images/favicon-32x32-next.png</span></span><br><span class="line"><span class="symbol">  medium:</span> <span class="meta-keyword">/images/</span>favicon.ico</span><br><span class="line"><span class="symbol">  apple_touch_icon:</span> <span class="meta-keyword">/images/</span>apple-touch-icon-next.png</span><br><span class="line"><span class="symbol">  safari_pinned_tab:</span> <span class="meta-keyword">/images/</span>logo.svg</span><br><span class="line">  <span class="meta">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="meta">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Hexo笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo设置网站的图标Favicon </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next添加访问量</title>
      <link href="/2018/06/06/Next%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F/"/>
      <url>/2018/06/06/Next%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F/</url>
      <content type="html"><![CDATA[<h3 id="Next添加访问量"><a href="#Next添加访问量" class="headerlink" title="Next添加访问量"></a>Next添加访问量</h3><blockquote><p>使用 Next 主题自带的不蒜子统计，仅限于在文章页面显示阅读量，不在首页显示</p></blockquote><a id="more"></a><h3 id="修改-themes-next-config-yml-文件"><a href="#修改-themes-next-config-yml-文件" class="headerlink" title="修改 themes\next\ _config.yml 文件"></a>修改 <code>themes\next\ _config.yml</code> 文件</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  # count values only <span class="keyword">if</span> the other configs are <span class="literal">false</span></span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  # custom uv span <span class="keyword">for</span> the whole site</span><br><span class="line">  site_uv: <span class="literal">true</span></span><br><span class="line">  site_uv_header: &lt;i <span class="attribute">class</span>=<span class="string">"fa fa-user"</span>&gt;&lt;/i&gt; 访问人数(UV)</span><br><span class="line">  site_uv_footer: 人</span><br><span class="line">  # custom pv span <span class="keyword">for</span> the whole site</span><br><span class="line">  site_pv: <span class="literal">true</span></span><br><span class="line">  site_pv_header: &lt;i <span class="attribute">class</span>=<span class="string">"fa fa-eye"</span>&gt;&lt;/i&gt; 总访问量(PV)</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span <span class="keyword">for</span> one<span class="built_in"> page </span>only</span><br><span class="line">  page_pv: <span class="literal">true</span></span><br><span class="line">  page_pv_header: &lt;i <span class="attribute">class</span>=<span class="string">"fa fa-file-o"</span>&gt;&lt;/i&gt; 浏览</span><br><span class="line">  page_pv_footer: 次</span><br></pre></td></tr></table></figure><blockquote><p>总访问量 <code>(PV)</code> 总访问量<br>独立访客 <code>(UV)</code> 访问人数<br>网站的浏览次数为 <code>PV</code><br>网站的访客数为 <code>UV</code><br><code>PV</code> 计算方式，单个用户连续点击 N 篇文章，记录 N 次访问量<br><code>UV</code> 计算方式，单个用户连续点击 N 篇文章，只记录 1 次访客数<br>可以根据需要添加相应的统计功能</p></blockquote><h3 id="查看底部显示效果"><a href="#查看底部显示效果" class="headerlink" title="查看底部显示效果"></a>查看底部显示效果</h3>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next添加访问量 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next修改小型代码块颜色</title>
      <link href="/2018/06/06/Next%E4%BF%AE%E6%94%B9%E5%B0%8F%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E9%A2%9C%E8%89%B2/"/>
      <url>/2018/06/06/Next%E4%BF%AE%E6%94%B9%E5%B0%8F%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E9%A2%9C%E8%89%B2/</url>
      <content type="html"><![CDATA[<h3 id="Next-修改小型代码块颜色"><a href="#Next-修改小型代码块颜色" class="headerlink" title="Next 修改小型代码块颜色"></a>Next 修改小型代码块颜色</h3><blockquote><p>修改 <code>\themes\next\source\css\ _variables\base.styl</code> 文件<br>可以加入自定义颜色，如下中已经给出了许多种颜色</p></blockquote><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// Colors</span><br><span class="line">// colors for use across theme.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">whitesmoke   = <span class="comment">#f5f5f5</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">gainsboro    = <span class="comment">#eee</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">gray-lighter = <span class="comment">#ddd</span></span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="meta">$</span><span class="bash">blue         = <span class="comment">#0684bd</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">blue-deep    = <span class="comment">#262a30</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">orange       = <span class="comment">#fc6423</span></span></span><br></pre></td></tr></table></figure><h3 id="修改-code-background-与-code-foreground-的值"><a href="#修改-code-background-与-code-foreground-的值" class="headerlink" title="修改 $code-background 与 $code-foreground 的值"></a>修改 $code-background 与 $code-foreground 的值</h3><blockquote><p>以下的各个参数自己根据需求进行设置即可</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Code &amp; Code Blocks</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line"><span class="variable">$code</span>-<span class="attribute">font-family</span>               = <span class="variable">$font</span>-family-monospace</span><br><span class="line"><span class="variable">$code</span>-<span class="attribute">font-size</span>                 = <span class="number">13px</span></span><br><span class="line"><span class="variable">$code</span>-foreground                = <span class="variable">$black</span>-light  <span class="comment">//设置成自己喜欢的颜色即可</span></span><br><span class="line"><span class="variable">$code</span>-<span class="attribute">background</span>                = <span class="variable">$gainsboro</span>    //设置成自己喜欢的颜色即可</span><br><span class="line"><span class="variable">$code</span>-<span class="attribute">border-radius</span>             = <span class="number">4px</span></span><br></pre></td></tr></table></figure><blockquote><p>在 <code>\themes\next\source\css\ _variables\base.styl</code> 文件内还有很多的参数，可以酌情进行修改</p></blockquote>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next修改小型代码块颜色 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next头像圆形旋转</title>
      <link href="/2018/06/06/Next%E5%A4%B4%E5%83%8F%E5%9C%86%E5%BD%A2%E6%97%8B%E8%BD%AC/"/>
      <url>/2018/06/06/Next%E5%A4%B4%E5%83%8F%E5%9C%86%E5%BD%A2%E6%97%8B%E8%BD%AC/</url>
      <content type="html"><![CDATA[<h3 id="头像变成圆形，鼠标停留在上面发生旋转效果"><a href="#头像变成圆形，鼠标停留在上面发生旋转效果" class="headerlink" title="头像变成圆形，鼠标停留在上面发生旋转效果"></a>头像变成圆形，鼠标停留在上面发生旋转效果</h3><blockquote><p>介绍一下实现头像圆形，鼠标经过旋转或者一直让旋转效果<br>修改 Hexo 目录下 <code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code> 文件</p></blockquote><a id="more"></a><h3 id="头像圆形修改"><a href="#头像圆形修改" class="headerlink" title="头像圆形修改"></a>头像圆形修改</h3><blockquote><p>修改 <code>sidebar-author.styl</code> 文件中 <code>.site-author-image</code> CSS 样式如下</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*头像圆形*/</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鼠标经过旋转修改"><a href="#鼠标经过旋转修改" class="headerlink" title="鼠标经过旋转修改"></a>鼠标经过旋转修改</h3><blockquote><p>修改 <code>sidebar-author.styl</code> 文件，添加 CSS 样式 <code>img:hover</code> 如下代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改 <code>sidebar-author.styl</code> 文件中 <code>.site-author-image</code> CSS 样式如下</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法二：修改 <code>themes/next/source/css/_common/components/sidebar/sidebar-author.styl</code></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">96px</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="comment">/* start*/</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span></span><br><span class="line">  webkit-transition: <span class="number">1.4s</span> all;</span><br><span class="line">  <span class="attribute">moz-transition</span>: <span class="number">1.4s</span> all;</span><br><span class="line">  <span class="attribute">ms-transition</span>: <span class="number">1.4s</span> all;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1.4s</span> all;</span><br><span class="line">  <span class="comment">/* end */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* start */</span></span><br><span class="line"><span class="selector-class">.site-author-image</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#55DAE1</span>;</span><br><span class="line">  <span class="attribute">webkit-transform</span>: <span class="built_in">rotate</span>(360deg) <span class="built_in">scale</span>(1.1);</span><br><span class="line">  <span class="attribute">moz-transform</span>: <span class="built_in">rotate</span>(360deg) <span class="built_in">scale</span>(1.1);</span><br><span class="line">  <span class="attribute">ms-transform</span>: <span class="built_in">rotate</span>(360deg) <span class="built_in">scale</span>(1.1);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg) <span class="built_in">scale</span>(1.1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* end */</span></span><br></pre></td></tr></table></figure><h3 id="头像循环旋转效果修改"><a href="#头像循环旋转效果修改" class="headerlink" title="头像循环旋转效果修改"></a>头像循环旋转效果修改</h3><blockquote><p>修改 <code>sidebar-author.styl</code> 文件，添加如下代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改 <code>sidebar-author.styl</code> 文件中 <code>.site-author-image</code> CSS 样式如下</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置循环动画：animation:动画名称 动画播放时长单位秒或微秒</span></span><br><span class="line"><span class="comment">    动画播放的速度曲线linear为匀速 动画播放次数infinite为循环播放; */</span></span><br><span class="line">  <span class="attribute">-webkit-animation</span>: play <span class="number">3s</span> linear infinite;</span><br><span class="line">  <span class="attribute">-moz-animation</span>: play <span class="number">3s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>: play <span class="number">3s</span> linear infinite;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度</span></span><br><span class="line"><span class="comment">  -webkit-transition: -webkit-transform 1.5s ease-out;</span></span><br><span class="line"><span class="comment">  -moz-transition: -moz-transform 1.5s ease-out;</span></span><br><span class="line"><span class="comment">  transition: transform 1.5s ease-out;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>鼠标经过停止头像旋转：修改 <code>sidebar-author.styl</code> 文件，添加 CSS 样式 <code>img:hover</code> 如下代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 */</span></span><br><span class="line">  <span class="attribute">-webkit-animation-play-state</span>:paused;</span><br><span class="line">  <span class="attribute">animation-play-state</span>:paused;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度</span></span><br><span class="line"><span class="comment">  -webkit-transform: rotateZ(360deg);</span></span><br><span class="line"><span class="comment">  -moz-transform: rotateZ(360deg);</span></span><br><span class="line"><span class="comment">  transform: rotateZ(360deg);*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next头像圆形旋转 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next设置首页隐藏指定文章</title>
      <link href="/2018/06/06/Next%E8%AE%BE%E7%BD%AE%E9%A6%96%E9%A1%B5%E9%9A%90%E8%97%8F%E6%8C%87%E5%AE%9A%E6%96%87%E7%AB%A0/"/>
      <url>/2018/06/06/Next%E8%AE%BE%E7%BD%AE%E9%A6%96%E9%A1%B5%E9%9A%90%E8%97%8F%E6%8C%87%E5%AE%9A%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h3 id="Next设置首页隐藏指定文章"><a href="#Next设置首页隐藏指定文章" class="headerlink" title="Next设置首页隐藏指定文章"></a>Next设置首页隐藏指定文章</h3><blockquote><p>修改 next 主题文件夹下的 layout 中的 index.swig 文件<br>定位修改 post_template.render(post, true)</p></blockquote><a id="more"></a><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">\themes\next\layout\index.swig</span></span><br><span class="line"><span class="xml">...省略...</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"posts"</span> <span class="attr">class</span>=<span class="string">"posts-expand"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> post <span class="keyword">in</span> page.posts %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> post.visible !== 'hide' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123; post_template.render(post, true) &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml">...省略...</span></span><br></pre></td></tr></table></figure><blockquote><p>其中修改的是为文章的首页显示添加判断条件</p></blockquote><h3 id="在新的-post-中添加-visible-字段来控制是否首页显示"><a href="#在新的-post-中添加-visible-字段来控制是否首页显示" class="headerlink" title="在新的 post 中添加 visible 字段来控制是否首页显示"></a>在新的 post 中添加 visible 字段来控制是否首页显示</h3><blockquote><p>例如：当前这篇文章</p></blockquote><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: Next设置首页隐藏指定文章</span><br><span class="line">date: 2018<span class="string">-06</span><span class="string">-06</span> 01:08:59</span><br><span class="line">categories: Next笔记</span><br><span class="line"><span class="keyword">tags:</span> Next设置首页隐藏指定文章</span><br><span class="line">visible: hide</span><br></pre></td></tr></table></figure><blockquote><p>这里如果加上 hide 则该文章就不会在文章首页显示，如果留空则表示默认显示</p></blockquote>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next设置首页隐藏指定文章 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shadowsocks 安装</title>
      <link href="/2018/06/06/Shadowsocks%E5%AE%89%E8%A3%85/"/>
      <url>/2018/06/06/Shadowsocks%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="Shadowsocks-安装"><a href="#Shadowsocks-安装" class="headerlink" title="Shadowsocks 安装"></a>Shadowsocks 安装</h1><a id="more"></a><h2 id="CentOS7-yum-安装-pip"><a href="#CentOS7-yum-安装-pip" class="headerlink" title="CentOS7 yum 安装 pip"></a>CentOS7 yum 安装 pip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install python-pip</span><br></pre></td></tr></table></figure><h2 id="升级-pip"><a href="#升级-pip" class="headerlink" title="升级 pip"></a>升级 pip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure><h2 id="安装-shadowsocks"><a href="#安装-shadowsocks" class="headerlink" title="安装 shadowsocks"></a>安装 shadowsocks</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install shadowsocks</span><br><span class="line"><span class="built_in">which</span> ssserver</span><br></pre></td></tr></table></figure><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /data/app/shadowsocks/&#123;bin,config,logs,tmp&#125;</span><br></pre></td></tr></table></figure><h2 id="创建-systemctl-启动文件"><a href="#创建-systemctl-启动文件" class="headerlink" title="创建 systemctl 启动文件"></a>创建 systemctl 启动文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/systemd/system/shadowsocks.service</span></span><br><span class="line">vim /usr/lib/systemd/system/shadowsocks.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line"></span><br><span class="line">WorkingDirectory=/data/app/shadowsocks</span><br><span class="line">Environment=SHADOWSOCKS_HOME=/data/app/shadowsocks</span><br><span class="line">Environment=CONF_DIR=/data/app/shadowsocks/config</span><br><span class="line">Environment=PID_DIR=/data/app/shadowsocks/tmp</span><br><span class="line">Environment=LOG_DIR=/data/app/shadowsocks/logs</span><br><span class="line">EnvironmentFile=/data/app/shadowsocks/config/shadowsocks.json</span><br><span class="line">PIDFile=/data/app/shadowsocks/tmp/ssserver.pid</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/bin/ssserver -c <span class="variable">$&#123;CONF_DIR&#125;</span>/shadowsocks.json -d start \</span><br><span class="line">                    --pid-file <span class="variable">$&#123;PID_DIR&#125;</span>/ssserver.pid \</span><br><span class="line">                    --<span class="built_in">log</span>-file <span class="variable">$&#123;LOG_DIR&#125;</span>/ssserver.log</span><br><span class="line"></span><br><span class="line">Restart=on-abort</span><br><span class="line">RestartSec=10s</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/app/shadowsocks/config/</span><br><span class="line">vim shadowsocks.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"x.x.x.x"</span>,    <span class="comment"># 公网IP</span></span><br><span class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"port_password"</span>:&#123;</span><br><span class="line">        <span class="string">"60000"</span>:<span class="string">"Password0"</span>,</span><br><span class="line">        <span class="string">"60001"</span>:<span class="string">"Password1"</span>,</span><br><span class="line">        <span class="string">"60002"</span>:<span class="string">"Password2"</span>,</span><br><span class="line">        <span class="string">"60002"</span>:<span class="string">"Password3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"timeout"</span>:300,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start shadowsocks</span><br><span class="line">systemctl -l status shadowsocks</span><br><span class="line">systemctl <span class="built_in">enable</span> shadowsocks</span><br><span class="line">systemctl stop shadowsocks</span><br><span class="line">systemctl restart shadowsocks</span><br><span class="line">journalctl -fu shadowsocks</span><br><span class="line"></span><br><span class="line">tail -f /data/app/shadowsocks/logs/ssserver.log</span><br><span class="line">ps -ef | grep shadowsocks</span><br><span class="line">cat /data/app/shadowsocks/tmp/ssserver.pid</span><br></pre></td></tr></table></figure><h2 id="Firewalld-防火墙设置"><a href="#Firewalld-防火墙设置" class="headerlink" title="Firewalld 防火墙设置"></a>Firewalld 防火墙设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line">systemctl -l status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙，添加的端口也可以看到</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="comment"># 显示所有公共区域（public）所有设置</span></span><br><span class="line">firewall-cmd --zone=public --list-all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看开放的服务</span></span><br><span class="line">firewall-cmd --list-services</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示服务列表</span></span><br><span class="line">firewall-cmd --get-services</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久添加开放端口</span></span><br><span class="line">firewall-cmd --zone=public --permanent --add-port=8888/tcp</span><br><span class="line">firewall-cmd --zone=public --permanent --add-port=1194/udp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询刚插入的规则是否生效</span></span><br><span class="line">firewall-cmd --zone=public --query-port=1985/tcp</span><br><span class="line"><span class="comment"># 查询指定的端口是否永久开放</span></span><br><span class="line">firewall-cmd --zone=public --permanent --query-port=1985/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久删除正在开放的端口</span></span><br><span class="line">firewall-cmd --zone=public --permanent --remove-port=8080/tcp</span><br><span class="line">firewall-cmd --zone=public --permanent --remove-port=1194/udp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有打开的端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line">firewall-cmd --zone=dmz --list-ports</span><br></pre></td></tr></table></figure><h2 id="安装-gevent"><a href="#安装-gevent" class="headerlink" title="安装 gevent"></a>安装 gevent</h2><blockquote><p>可以提高 Shadowsocks 的性能。CentOS 下安装 gevent 依赖 libevent 和 greenlet<br>可以获得更好的性能，不管效果怎样，还是装个吧…</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 libevent</span></span><br><span class="line">yum -y install libevent</span><br><span class="line"><span class="comment"># 安装 gevent</span></span><br><span class="line">pip install gevent</span><br></pre></td></tr></table></figure><h2 id="安装-M2Crypto"><a href="#安装-M2Crypto" class="headerlink" title="安装 M2Crypto"></a>安装 M2Crypto</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 M2Crypto</span></span><br><span class="line">pip install M2Crypto</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Shadowsocks笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shadowsocks 安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat APR 安装</title>
      <link href="/2018/06/05/Tomcat-APR%E5%AE%89%E8%A3%85/"/>
      <url>/2018/06/05/Tomcat-APR%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="Tomcat-APR-安装"><a href="#Tomcat-APR-安装" class="headerlink" title="Tomcat APR 安装"></a>Tomcat APR 安装</h2><blockquote><p><code>APR(Apache portable Run-time libraries)</code> 可移植运行时库，是 <code>Apache HTTP</code> 服务的支持库，提供了一组映射到下层操作系统的 API。<code>Tomcat</code> 将以 <code>JNI</code> 的形式调用 <code>Apache HTTP</code> 服务器的核心动态链接库来处理文件读取或网络传输操作，从而大大地提高 <code>Tomcat</code> 对静态文件的处理性能。改善 <code>Tomcat</code> 对静态文件的处理性能，同时如果使用了 <code>HTTPS</code> 方式传输的话，也可以提升 <code>SSL</code> 的处理性能。默认情况下，<code>Tomcat</code> 是用 <code>BIO</code> 的方式来实现网络通信的，性能非常低。<code>Tomcat apr</code> 也是在 <code>Tomcat</code> 上运行高并发应用的首选模式。<code>APR</code> 使用 <code>JNI</code> 的方式来读取文件以及进行网络传输，从操作系统级别来解决异步的 <code>I/O</code> 问题，大幅度的提高性能。如果操作系统不支持某个特定的功能，<code>APR</code> 将提供一个模拟的实现，这样程序员使用 <code>APR</code> 编写真正可在不同平台上移植的程序</p></blockquote><a id="more"></a><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Tomcat 和 <span class="keyword">JDK</span></span><br><span class="line"><span class="keyword">yum </span><span class="keyword">install </span>-y apr-devel</span><br><span class="line">yum <span class="keyword">install </span>-y gcc gcc-devel</span><br><span class="line">yum <span class="keyword">install </span>-y openssl openssl-devel</span><br><span class="line">yum <span class="keyword">install </span>-y expat-devel</span><br></pre></td></tr></table></figure><h3 id="下载-apr"><a href="#下载-apr" class="headerlink" title="下载 apr"></a>下载 apr</h3><blockquote><p>下载地址：<a href="https://apr.apache.org/download.cgi" target="_blank" rel="noopener">https://apr.apache.org/download.cgi</a></p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/data/</span>tools/</span><br><span class="line">wget -c <span class="string">http:</span><span class="comment">//mirrors.shu.edu.cn/apache//apr/apr-1.6.3.tar.gz</span></span><br><span class="line">wget -c <span class="string">http:</span><span class="comment">//mirrors.shu.edu.cn/apache//apr/apr-util-1.6.1.tar.gz</span></span><br><span class="line">wget -c <span class="string">http:</span><span class="comment">//mirrors.shu.edu.cn/apache//apr/apr-iconv-1.2.2.tar.gz</span></span><br></pre></td></tr></table></figure><h3 id="安装-apr"><a href="#安装-apr" class="headerlink" title="安装 apr"></a>安装 apr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压并进入解压目录</span></span><br><span class="line"><span class="built_in">cd</span> /data/tools/</span><br><span class="line">tar -zxvf apr-1.6.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> apr-1.6.3/</span><br><span class="line"><span class="comment"># 配置，安装在 /data/ 目录下</span></span><br><span class="line">./configure --prefix=/data/apr</span><br><span class="line"><span class="comment"># 报错信息</span></span><br><span class="line">config.status: executing libtool commands</span><br><span class="line">rm: cannot remove <span class="string">'libtoolT'</span>: No such file or directory</span><br><span class="line">config.status: executing default commands</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方法</span></span><br><span class="line"><span class="comment"># 编辑 configure 文件</span></span><br><span class="line"><span class="built_in">cd</span> apr-1.6.3/</span><br><span class="line">vim configure</span><br><span class="line">把 <span class="variable">$RM</span> <span class="string">"<span class="variable">$cfgfile</span>"</span> 这行代码注释掉</span><br><span class="line">或 把 <span class="variable">$RM</span> <span class="string">"<span class="variable">$cfgfile</span>"</span> 这行删除掉</span><br><span class="line">或 写成 <span class="variable">$RM</span> -f <span class="string">"<span class="variable">$cfgfile</span>"</span></span><br><span class="line">重新再运行 ./configure 就可以了</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="安装-apr-iconv"><a href="#安装-apr-iconv" class="headerlink" title="安装 apr-iconv"></a>安装 apr-iconv</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压并进入解压目录</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/data/tools/</span></span><br><span class="line">tar -zxvf apr-iconv-1.2.2.tar.gz</span><br><span class="line"><span class="keyword">cd</span> apr-iconv-1.2.2/</span><br><span class="line"><span class="comment"># 配置，安装在 /data/ 目录下</span></span><br><span class="line"><span class="string">./configure</span> \</span><br><span class="line"><span class="params">--prefix=/data/apr-iconv</span> \</span><br><span class="line"><span class="params">--with-apr=/data/apr</span></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="安装-apr-util"><a href="#安装-apr-util" class="headerlink" title="安装 apr-util"></a>安装 apr-util</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 解压并进入解压目录</span></span><br><span class="line">cd /data/tools/</span><br><span class="line">tar -zxvf apr-util<span class="number">-1.6</span><span class="number">.1</span>.tar.gz</span><br><span class="line">cd apr-util<span class="number">-1.6</span><span class="number">.1</span>/</span><br><span class="line"><span class="meta"># 配置，安装在 /data/ 目录下</span></span><br><span class="line">./configure \</span><br><span class="line">--prefix=/data/apr-util \</span><br><span class="line">--with-apr=/data/apr \</span><br><span class="line">--with-apr-iconv=/data/apr-iconv/bin/apriconv</span><br><span class="line"></span><br><span class="line"><span class="meta"># 编译安装</span></span><br><span class="line"><span class="built_in">make</span> -j <span class="number">4</span></span><br><span class="line"><span class="meta"># 报错信息</span></span><br><span class="line">xml/apr_xml.c:<span class="number">35</span>:<span class="number">19</span>: fatal <span class="built_in">error</span>: expat.h: No such file <span class="keyword">or</span> directory</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> &lt;expat.h&gt;</span></span><br><span class="line">                   ^</span><br><span class="line">compilation terminated.</span><br><span class="line"><span class="built_in">make</span>[<span class="number">1</span>]: *** [xml/apr_xml.lo] <span class="built_in">Error</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">make</span>[<span class="number">1</span>]: Leaving directory `/data/tools/apr-util<span class="number">-1.6</span><span class="number">.1</span>'</span><br><span class="line"><span class="built_in">make</span>: *** [all-recursive] <span class="built_in">Error</span> <span class="number">1</span></span><br><span class="line"><span class="meta"># 解决办法</span></span><br><span class="line"><span class="meta"># 缺少 expat 开发库，安装 expat 库</span></span><br><span class="line">yum install -y expat-devel</span><br><span class="line"></span><br><span class="line"><span class="meta"># 重新执行</span></span><br><span class="line"><span class="built_in">make</span> -j <span class="number">4</span></span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><h3 id="配置-Tomcat-使用-apr-库"><a href="#配置-Tomcat-使用-apr-库" class="headerlink" title="配置 Tomcat 使用 apr 库"></a>配置 Tomcat 使用 apr 库</h3><blockquote><p>什么是 <code>tomcat-native</code> ？<br><code>tomcat-native</code> 库为 <code>Tomcat</code> 提供了本地实现<br><code>tomcat-native</code> 依赖于三个组件：<code>APR</code>，<code>OpenSSL</code>，<code>JDK</code></p></blockquote><blockquote><p>大致就是通过 <code>tomcat-native</code> 库，使 <code>tomcat</code> 运行时通过 <code>APR</code> 更多的调用本地 <code>API</code>，达到提升性能的目的。<br>由于依赖关系，安装时，先安装 <code>APR</code>，<code>OpenSSL</code>，然后再安装 <code>tomcat-native</code>，最后配置 <code>tomcat</code> 启动时依赖的库路径。</p></blockquote><h3 id="安装配置-Tomcat-native"><a href="#安装配置-Tomcat-native" class="headerlink" title="安装配置 Tomcat native"></a>安装配置 Tomcat native</h3><blockquote><p>具体的安装步骤其实在 tomcat 自带的 tomcat-native.tar.gz 文件中就有</p></blockquote><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 Tomcat bin 目录</span></span><br><span class="line">cd /data/app/tomcat/bin/</span><br><span class="line"><span class="comment"># 解压 tomcat-native.tar.gz 后进入解压目录</span></span><br><span class="line">tar -zxvf tomcat-native.tar.gz</span><br><span class="line"><span class="comment"># cd tomcat-native-1.2.8-src/native/  # Tomcat7</span></span><br><span class="line">cd tomcat-native-<span class="number">1.1</span>.<span class="number">33</span>-src/jni/native/</span><br><span class="line"><span class="comment"># 配置 指定 JDK 的目录并加入 SSL</span></span><br><span class="line">./configure \</span><br><span class="line">--prefix=<span class="regexp">/data/apr</span> \</span><br><span class="line">--<span class="keyword">with</span>-apr=<span class="regexp">/data/apr</span><span class="regexp">/bin/apr</span>-<span class="number">1</span>-config \</span><br><span class="line">--<span class="keyword">with</span>-java-home=<span class="regexp">/data/jdk</span>1.<span class="number">8.0_172</span> \</span><br><span class="line">--<span class="keyword">with</span>-ssl=yes</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make -j <span class="number">4</span></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="symbol">warning:</span> remember to run <span class="string">'libtool --finish /usr/local/apr/lib'</span></span><br><span class="line">libtool --finish /data/apr/<span class="class"><span class="keyword">lib</span></span></span><br><span class="line">-<span class="symbol">bash:</span> <span class="symbol">libtool:</span> command not found</span><br><span class="line">yum -y install libtool libtool-devel</span><br><span class="line">libtool --finish /data/apr/<span class="class"><span class="keyword">lib</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################################################################################################</span></span><br><span class="line">cd tomcat-native-<span class="number">1.2</span>.<span class="number">16</span>-src/native/</span><br><span class="line">/data/apr/build-<span class="number">1</span>/libtool --mode=install /bin/install -c -m <span class="number">755</span> libtcnative-<span class="number">1</span>.la /data/apr/<span class="class"><span class="keyword">lib</span></span></span><br><span class="line"><span class="symbol">libtool:</span> <span class="symbol">install:</span> /bin/install -c -m <span class="number">755</span> .libs/libtcnative-<span class="number">1</span>.so.<span class="number">0.2</span>.<span class="number">16</span> /data/apr/<span class="class"><span class="keyword">lib</span>/<span class="title">libtcnative</span>-1.<span class="title">so</span>.0.2.16</span></span><br><span class="line"><span class="symbol">libtool:</span> <span class="symbol">install:</span> (cd /data/apr/<span class="class"><span class="keyword">lib</span> &amp;&amp; &#123; <span class="title">ln</span> -<span class="title">s</span> -<span class="title">f</span> <span class="title">libtcnative</span>-1.<span class="title">so</span>.0.2.16 <span class="title">libtcnative</span>-1.<span class="title">so</span>.0 || &#123; <span class="title">rm</span> -<span class="title">f</span> <span class="title">libtcnative</span>-1.<span class="title">so</span>.0 &amp;&amp; <span class="title">ln</span> -<span class="title">s</span> <span class="title">libtcnative</span>-1.<span class="title">so</span>.0.2.16 <span class="title">libtcnative</span>-1.<span class="title">so</span>.0;</span> &#125;; &#125;)</span><br><span class="line"><span class="symbol">libtool:</span> <span class="symbol">install:</span> (cd /data/apr/<span class="class"><span class="keyword">lib</span> &amp;&amp; &#123; <span class="title">ln</span> -<span class="title">s</span> -<span class="title">f</span> <span class="title">libtcnative</span>-1.<span class="title">so</span>.0.2.16 <span class="title">libtcnative</span>-1.<span class="title">so</span> || &#123; <span class="title">rm</span> -<span class="title">f</span> <span class="title">libtcnative</span>-1.<span class="title">so</span> &amp;&amp; <span class="title">ln</span> -<span class="title">s</span> <span class="title">libtcnative</span>-1.<span class="title">so</span>.0.2.16 <span class="title">libtcnative</span>-1.<span class="title">so</span>;</span> &#125;; &#125;)</span><br><span class="line"><span class="symbol">libtool:</span> <span class="symbol">install:</span> /bin/install -c -m <span class="number">755</span> .libs/libtcnative-<span class="number">1</span>.lai /data/apr/<span class="class"><span class="keyword">lib</span>/<span class="title">libtcnative</span>-1.<span class="title">la</span></span></span><br><span class="line"><span class="symbol">libtool:</span> <span class="symbol">install:</span> /bin/install -c -m <span class="number">755</span> .libs/libtcnative-<span class="number">1</span>.a /data/apr/<span class="class"><span class="keyword">lib</span>/<span class="title">libtcnative</span>-1.<span class="title">a</span></span></span><br><span class="line"><span class="symbol">libtool:</span> <span class="symbol">install:</span> chmod <span class="number">644</span> /data/apr/<span class="class"><span class="keyword">lib</span>/<span class="title">libtcnative</span>-1.<span class="title">a</span></span></span><br><span class="line"><span class="symbol">libtool:</span> <span class="symbol">install:</span> ranlib /data/apr/<span class="class"><span class="keyword">lib</span>/<span class="title">libtcnative</span>-1.<span class="title">a</span></span></span><br><span class="line"><span class="symbol">libtool:</span> <span class="symbol">finish:</span> PATH=<span class="string">"/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/data/jdk1.8.0_144/bin:/data/jdk1.8.0_144/jre/bin:/root/bin:/sbin"</span> ldconfig -n /data/apr/<span class="class"><span class="keyword">lib</span></span></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Libraries have been installed <span class="symbol">in:</span></span><br><span class="line">   /data/apr/<span class="class"><span class="keyword">lib</span></span></span><br><span class="line"></span><br><span class="line">If you ever happen to want to link against installed libraries</span><br><span class="line">in a given directory, LIBDIR, you must either use libtool, and</span><br><span class="line">specify the full pathname <span class="keyword">of</span> the library, or use the <span class="string">'-LLIBDIR'</span></span><br><span class="line">flag during linking and <span class="keyword">do</span> at least one <span class="keyword">of</span> the <span class="symbol">following:</span></span><br><span class="line">   - add LIBDIR to the <span class="string">'LD_LIBRARY_PATH'</span> environment variable</span><br><span class="line">     during execution</span><br><span class="line">   - add LIBDIR to the <span class="string">'LD_RUN_PATH'</span> environment variable</span><br><span class="line">     during linking</span><br><span class="line">   - use the <span class="string">'-Wl,-rpath -Wl,LIBDIR'</span> linker flag</span><br><span class="line">   - have your system administrator add LIBDIR to <span class="string">'/etc/ld.so.conf'</span></span><br><span class="line"></span><br><span class="line">See any operating system documentation about shared libraries <span class="keyword">for</span></span><br><span class="line">more information, such <span class="keyword">as</span> the ld(<span class="number">1</span>) and ld.so(<span class="number">8</span>) manual pages.</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 apr 加载到 ldconfig 中</span></span><br><span class="line">vim /etc/ld.so.conf.d/apr.conf</span><br><span class="line">/data/apr/<span class="class"><span class="keyword">lib</span></span></span><br><span class="line">/data/apr-util/<span class="class"><span class="keyword">lib</span></span></span><br><span class="line">/data/apr-iconv/<span class="class"><span class="keyword">lib</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载以下 ldconfig</span></span><br><span class="line">ldconfig -v | grep apr</span><br><span class="line">/data/apr/<span class="class"><span class="keyword">lib</span>:</span></span><br><span class="line">libapr-<span class="number">1</span>.so.<span class="number">0</span> -&gt; libapr-<span class="number">1</span>.so.<span class="number">0.6</span>.<span class="number">3</span></span><br><span class="line">/data/apr-util/<span class="class"><span class="keyword">lib</span>:</span></span><br><span class="line">libaprutil-<span class="number">1</span>.so.<span class="number">0</span> -&gt; libaprutil-<span class="number">1</span>.so.<span class="number">0.6</span>.<span class="number">1</span></span><br><span class="line">/data/apr-iconv/<span class="class"><span class="keyword">lib</span>:</span></span><br><span class="line">libapriconv-<span class="number">1</span>.so.<span class="number">0</span> -&gt; libapriconv-<span class="number">1</span>.so.<span class="number">0.2</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="CentOS-6-x-安装配置-Tomcat-native"><a href="#CentOS-6-x-安装配置-Tomcat-native" class="headerlink" title="CentOS 6.x 安装配置 Tomcat native"></a>CentOS 6.x 安装配置 Tomcat native</h4><blockquote><p><code>CentOS 6.x</code> 会出现以下这类问题</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">checking OpenSSL library <span class="built_in">version</span> &gt;= <span class="number">1.0</span><span class="number">.2</span>... </span><br><span class="line">Found   OPENSSL_VERSION_NUMBER <span class="number">0x1000105f</span> (OpenSSL <span class="number">1.0</span><span class="number">.1</span>e <span class="number">11</span> Feb <span class="number">2013</span>)</span><br><span class="line">Require OPENSSL_VERSION_NUMBER <span class="number">0x1000200f</span> <span class="keyword">or</span> greater (<span class="number">1.0</span><span class="number">.2</span>)</span><br><span class="line">configure: <span class="keyword">error</span>: Your <span class="built_in">version</span> <span class="keyword">of</span> OpenSSL <span class="keyword">is</span> <span class="keyword">not</span> compatible <span class="keyword">with</span> this <span class="built_in">version</span> <span class="keyword">of</span> tcnative</span><br></pre></td></tr></table></figure><blockquote><p><code>OpenSSL</code> 版本与 <code>tcnative</code> 版本不兼容<br><code>CentOS 7.2</code> 或以上版本不会出现这类问题<br>需要手工安装 <code>OpenSSL 1.0.2</code> 或以上版本</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 OpenSSL</span></span><br><span class="line">wget -c https:<span class="string">//www.openssl.org/source/openssl-1.0.2p.tar.gz</span></span><br><span class="line">或</span><br><span class="line">wget -c https:<span class="string">//www.openssl.org/source/openssl-1.1.0i.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 OpenSSL</span></span><br><span class="line">tar -xvf openssl-1.1.0i.tar.gz</span><br><span class="line"><span class="keyword">cd</span> openssl-1.1.0i/</span><br><span class="line"><span class="string">./config</span> <span class="params">--prefix=/usr/local/openssl</span></span><br><span class="line"><span class="string">./config</span> -t</span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 openssl 的 lib 加入系统 ldconfig 中</span></span><br><span class="line">vim /etc/ld.so.conf.d/openssl.conf</span><br><span class="line">/usr/local/openssl/<span class="class"><span class="keyword">lib</span></span></span><br><span class="line"><span class="comment"># 加载一下</span></span><br><span class="line">ldconfig -v</span><br><span class="line">ldconfig -v | grep libssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 OpenSSL 版本</span></span><br><span class="line">/usr/local/openssl/bin/openssl version -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果遇到以下错误</span></span><br><span class="line"><span class="symbol">openssl:</span> error <span class="keyword">while</span> loading shared <span class="symbol">libraries:</span> libssl.so.<span class="number">1.1</span>: cannot open shared object <span class="symbol">file:</span> No such file or directory</span><br><span class="line"><span class="symbol">openssl:</span> error <span class="keyword">while</span> loading shared <span class="symbol">libraries:</span> libcrypto.so.<span class="number">1.1</span>: cannot open shared object <span class="symbol">file:</span> No such file or directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是由于 OpenSSL 库的位置不正确造成的</span></span><br><span class="line"><span class="comment"># 做一下软链接，就好了</span></span><br><span class="line">ln -svnf /usr/local/openssl/<span class="class"><span class="keyword">lib</span>/<span class="title">libssl</span>.<span class="title">so</span>.1.1 /<span class="title">usr</span>/<span class="title">lib64</span>/<span class="title">libssl</span>.<span class="title">so</span>.1.1</span></span><br><span class="line">ln -svnf /usr/local/openssl/<span class="class"><span class="keyword">lib</span>/<span class="title">libcrypto</span>.<span class="title">so</span>.1.1 /<span class="title">usr</span>/<span class="title">lib64</span>/<span class="title">libcrypto</span>.<span class="title">so</span>.1.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">vim /etc/profile.d/openssl.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">export OPENSSL_HOME=<span class="regexp">/usr/local</span><span class="regexp">/openssl</span></span><br><span class="line"><span class="regexp">export PATH=$PATH:$OPENSSL_HOME/bin</span></span><br><span class="line">openssl version -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或把原来的命令备份一下，做个软链接</span></span><br><span class="line">ll -h /usr/bin/openssl</span><br><span class="line">mv /usr/bin/openssl&#123;,_bak&#125;</span><br><span class="line">mv /usr/<span class="keyword">include</span>/openssl&#123;,openssl_bak&#125;</span><br><span class="line">ln -svnf /usr/local/openssl/bin/openssl /usr/bin/openssl</span><br><span class="line">ln -svnf /usr/local/openssl/<span class="keyword">include</span>/openssl /usr/<span class="keyword">include</span>/openssl</span><br></pre></td></tr></table></figure><h3 id="有-两-种方式配置-Tomcat-使用-apr-库"><a href="#有-两-种方式配置-Tomcat-使用-apr-库" class="headerlink" title="有 两 种方式配置 Tomcat 使用 apr 库"></a>有 两 种方式配置 Tomcat 使用 apr 库</h3><h4 id="方式一：配置-Tomcat-Native-环境变量"><a href="#方式一：配置-Tomcat-Native-环境变量" class="headerlink" title="方式一：配置 Tomcat Native 环境变量"></a>方式一：配置 <code>Tomcat Native</code> 环境变量</h4><blockquote><p>在 <code>Linux</code> 系统中，只要 <code>$LD_LIBRARY_PATH</code> 变量值所在路径包含 <code>Tomcat</code> 本地库<br>默认就使用 <code>org.apache.coyote.http11.Http11AprProtocol</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile.d/apr.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/data/apr/lib</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h4 id="方式二：将-apr-库路径参数添加到-Tomcat-系统变量中（推荐）"><a href="#方式二：将-apr-库路径参数添加到-Tomcat-系统变量中（推荐）" class="headerlink" title="方式二：将 apr 库路径参数添加到 Tomcat 系统变量中（推荐）"></a>方式二：将 <code>apr</code> 库路径参数添加到 <code>Tomcat</code> 系统变量中（推荐）</h4><blockquote><p>编辑 <code>$CATALINA_HOME/bin/setenv.sh</code> 文件（如果文件不存在，新建文件）</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">CATALINA_OPTS</span>=<span class="string">"<span class="variable">$CATALINA_OPTS</span> -Djava.library.path=/data/apr/lib"</span></span><br></pre></td></tr></table></figure><blockquote><p>修改 <code>$TOMCAT_HOME/conf/server.xml</code></p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">"8000"</span></span><br><span class="line">           protocol=<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span></span><br><span class="line">           connectionTimeout=<span class="string">"20000"</span></span><br><span class="line">           redirectPort=<span class="string">"8443"</span></span><br><span class="line">protocal 修改为 org<span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.http11</span><span class="selector-class">.Http11AprProtocol</span>，重启 tomcat</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote><p>启动 <code>Tomcat</code>，若在控制台或日志出现类似如下示例信息<br>则表示 <code>APR</code> 配置成功</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">INFO</span>: <span class="selector-tag">Loaded</span> <span class="selector-tag">APR</span> <span class="selector-tag">based</span> <span class="selector-tag">Apache</span> <span class="selector-tag">Tomcat</span> <span class="selector-tag">Native</span> <span class="selector-tag">library</span> 1<span class="selector-class">.1</span><span class="selector-class">.33</span>.</span><br></pre></td></tr></table></figure><blockquote><p>检查是否安装成功<br>如果看到下面的启动日志，表示成功</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Sep</span> 17, 2017 1<span class="selector-pseudo">:59</span><span class="selector-pseudo">:19</span> <span class="selector-tag">PM</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span> <span class="selector-tag">start</span></span><br><span class="line"><span class="selector-tag">INFO</span>: <span class="selector-tag">Starting</span> <span class="selector-tag">ProtocolHandler</span> <span class="selector-attr">["http-apr-8080"]</span></span><br><span class="line"><span class="selector-tag">Sep</span> 17, 2017 1<span class="selector-pseudo">:59</span><span class="selector-pseudo">:19</span> <span class="selector-tag">PM</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span> <span class="selector-tag">start</span></span><br><span class="line"><span class="selector-tag">INFO</span>: <span class="selector-tag">Starting</span> <span class="selector-tag">ProtocolHandler</span> <span class="selector-attr">["ajp-apr-8009"]</span></span><br><span class="line"><span class="selector-tag">Sep</span> 17, 2017 1<span class="selector-pseudo">:59</span><span class="selector-pseudo">:19</span> <span class="selector-tag">PM</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.startup</span><span class="selector-class">.Catalina</span> <span class="selector-tag">start</span></span><br><span class="line"><span class="selector-tag">INFO</span>: <span class="selector-tag">Server</span> <span class="selector-tag">startup</span> <span class="selector-tag">in</span> 31002 <span class="selector-tag">ms</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Tomcat笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat APR 安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>不通过inventory文件，指定host运行Ansible</title>
      <link href="/2018/06/05/%E4%B8%8D%E9%80%9A%E8%BF%87inventory%E6%96%87%E4%BB%B6%EF%BC%8C%E6%8C%87%E5%AE%9Ahost%E8%BF%90%E8%A1%8CAnsible/"/>
      <url>/2018/06/05/%E4%B8%8D%E9%80%9A%E8%BF%87inventory%E6%96%87%E4%BB%B6%EF%BC%8C%E6%8C%87%E5%AE%9Ahost%E8%BF%90%E8%A1%8CAnsible/</url>
      <content type="html"><![CDATA[<h3 id="如何不通过-inventory-文件，直接指定-host-运行-Ansible？"><a href="#如何不通过-inventory-文件，直接指定-host-运行-Ansible？" class="headerlink" title="如何不通过 inventory 文件，直接指定 host 运行 Ansible？"></a>如何不通过 inventory 文件，直接指定 host 运行 Ansible？</h3><blockquote><p>使用过 ansible 的都知道，不管是运行 Ad-Hoc 还是 playbook，都需要指定一个 inventory 文件，或者使用默认的 inventory 文件。但是现在有一个主机，它尚未在 inventory 文件中配置，那么我们该如何用 ansible 对其进行操作呢？</p></blockquote><a id="more"></a><blockquote><p>一般我们执行都是这样的</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ansible 192.168.35.215 -m ping</span><br><span class="line">192.168.35.215 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这时需要在 inventory 文件 <code>/etc/ansible/hosts</code> 中配置 192.168.35.215 信息</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[NgxProxy]</span></span><br><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.35</span><span class="selector-class">.215</span></span><br></pre></td></tr></table></figure><blockquote><p>如果没有在 inventory 文件中配置该主机信息，又想用 ansible 对其进行操作<br>就需要用到逗号 <code>,</code> 字符，使用方法如下</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Host <span class="keyword">and</span> IP address</span><br><span class="line">ansible <span class="keyword">all</span> -i example.com,</span><br><span class="line">ansible <span class="keyword">all</span> -i <span class="number">93.184</span>.<span class="number">216.119</span>,</span><br><span class="line"></span><br><span class="line"># Requires <span class="symbol">'hosts</span>: <span class="keyword">all</span>' <span class="keyword">in</span> your playbook</span><br><span class="line">ansible-playbook -i example.com, playbook.yml</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，需要指定范围为 <code>all</code></p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ansible all -i 192.168.35.215, -m ping</span><br><span class="line">192.168.35.215 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Ansible笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 如何不通过 inventory 文件，直接指定 host 运行 Ansible？ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next给博客生成一个站点地图</title>
      <link href="/2018/06/04/Next%E7%BB%99%E5%8D%9A%E5%AE%A2%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE/"/>
      <url>/2018/06/04/Next%E7%BB%99%E5%8D%9A%E5%AE%A2%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h3 id="给博客生成一个站点地图"><a href="#给博客生成一个站点地图" class="headerlink" title="给博客生成一个站点地图"></a>给博客生成一个站点地图</h3><a id="more"></a><h3 id="安装-hexo-generator-seo-friendly-sitemap"><a href="#安装-hexo-generator-seo-friendly-sitemap" class="headerlink" title="安装 hexo-generator-seo-friendly-sitemap"></a>安装 hexo-generator-seo-friendly-sitemap</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-seo-friendly-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h3 id="在站点配置文件-config-yml-中添加"><a href="#在站点配置文件-config-yml-中添加" class="headerlink" title="在站点配置文件 _config.yml 中添加"></a>在<code>站点配置</code>文件 _config.yml 中添加</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sitemap:</span></span><br><span class="line"><span class="symbol">    path:</span> sitemap.xml</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next给博客生成一个站点地图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next给博客添加feed</title>
      <link href="/2018/06/04/Next%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0feed/"/>
      <url>/2018/06/04/Next%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0feed/</url>
      <content type="html"><![CDATA[<h3 id="给博客添加-feed"><a href="#给博客添加-feed" class="headerlink" title="给博客添加 feed"></a>给博客添加 feed</h3><a id="more"></a><h3 id="安装-hexo-generator-feed"><a href="#安装-hexo-generator-feed" class="headerlink" title="安装 hexo-generator-feed"></a>安装 hexo-generator-feed</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h3 id="配置到站点配置文件-config-yml"><a href="#配置到站点配置文件-config-yml" class="headerlink" title="配置到站点配置文件 _config.yml"></a>配置到站点配置文件 _config.yml</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Extensions</span></span><br><span class="line"><span class="meta">## Plugins: http:<span class="comment">//hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">#RSS订阅</span></span><br><span class="line"><span class="symbol">plugin:</span></span><br><span class="line">- hexo-generator-feed</span><br><span class="line"><span class="meta">#Feed Atom</span></span><br><span class="line"><span class="symbol">feed:</span></span><br><span class="line"><span class="symbol">type:</span> atom</span><br><span class="line"><span class="symbol">path:</span> atom.xml</span><br><span class="line"><span class="symbol">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="最后，在你-next-主题下的-config-yml-下，添加-RSS-订阅链接即可"><a href="#最后，在你-next-主题下的-config-yml-下，添加-RSS-订阅链接即可" class="headerlink" title="最后，在你 next 主题下的 _config.yml 下，添加 RSS 订阅链接即可"></a>最后，在你 next 主题下的 _config.yml 下，添加 RSS 订阅链接即可</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">rss:</span> /atom.xml</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next给博客添加feed </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Typora快捷键</title>
      <link href="/2018/06/04/Typora%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2018/06/04/Typora%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h1 id="Typora常用快捷键"><a href="#Typora常用快捷键" class="headerlink" title="Typora常用快捷键"></a>Typora常用快捷键</h1><a id="more"></a><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>新建界面窗口</td><td><code>Ctrl + Shift + N</code></td></tr><tr><td>新建文件</td><td><code>Ctrl + N</code></td></tr><tr><td>打开文件</td><td><code>Ctrl + O</code></td></tr><tr><td>无序列表</td><td>输入 <code>-</code> 之后输入空格</td></tr><tr><td>有序列表</td><td>输入 <code>数字+“.”</code> 之后输入空格</td></tr><tr><td>任务列表</td><td><code>- [空格] 空格 文字</code></td></tr><tr><td>插入标题</td><td><code>Ctrl + 数字</code>，<code>Ctrl+1</code>，<code>Ctrl+2</code>，<code>Ctrl+3</code>，<code>Ctrl+4</code>，<code>Ctrl+5</code>，<code>Ctrl+6</code></td></tr><tr><td>插入表格</td><td><code>Ctrl + T</code></td></tr><tr><td>生成目录</td><td><code>[TOC]</code> 按回车</td></tr><tr><td>选中一整行</td><td><code>Ctrl + L</code></td></tr><tr><td>选中单词</td><td><code>Ctrl + D</code></td></tr><tr><td>选中相同格式的文字</td><td><code>Ctrl + E</code></td></tr><tr><td>跳转到文章开头</td><td><code>Ctrl + Home</code></td></tr><tr><td>跳转到文章结尾</td><td><code>Ctrl + End</code></td></tr><tr><td>搜索</td><td><code>Ctrl + F</code></td></tr><tr><td>替换</td><td><code>Ctrl + H</code></td></tr><tr><td>插入引用</td><td>输入<code>&gt; 后输入空格</code> 或 <code>Ctrl+Shift+Q</code></td></tr><tr><td>代码块</td><td><code>Ctrl + Shift + K</code></td></tr><tr><td>公式块</td><td><code>Ctrl + Shift + M</code></td></tr><tr><td>加粗</td><td><code>Ctrl + B</code></td></tr><tr><td>斜体</td><td><code>Ctrl + I</code></td></tr><tr><td>下划线</td><td><code>Ctrl + U</code></td></tr><tr><td>删除线</td><td><code>Alt + Shift + 5</code></td></tr><tr><td>插入图片</td><td>直接拖动到指定位置即可 或 <code>Ctrl+Shift+I</code></td></tr><tr><td>插入链接</td><td><code>Ctrl + K</code></td></tr><tr><td>分割线</td><td><code>---</code></td></tr></tbody></table><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://zhuangzhuang.cf/2019-01-29/typora/" target="_blank" rel="noopener">https://zhuangzhuang.cf/2019-01-29/typora/</a><br><a href="https://www.jianshu.com/p/183a25b91182" target="_blank" rel="noopener">https://www.jianshu.com/p/183a25b91182</a><br><a href="https://www.jianshu.com/p/e14af490ff68" target="_blank" rel="noopener">https://www.jianshu.com/p/e14af490ff68</a></p>]]></content>
      
      <categories>
          
          <category> Typora笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora快捷键 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx安全加固心得</title>
      <link href="/2018/06/04/Nginx%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA%E5%BF%83%E5%BE%97/"/>
      <url>/2018/06/04/Nginx%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<h3 id="Nginx安全加固心得"><a href="#Nginx安全加固心得" class="headerlink" title="Nginx安全加固心得"></a>Nginx安全加固心得</h3><blockquote><p>Nginx 发展多年，自身的安全漏洞比较少，发现软件漏洞，一般利用软件包管理器升级一下就好了。<br>本文侧重讲述的不是 Nginx 自身的安全，而是利用 Nginx 来加固 Web应用，干一些应用防火墙（WAF）干的活。<br>在做安全加固的时候，我们一定要头脑清晰，手里拿着刀，一刀一刀的切，将我们不想要的流量干掉，除去隐患。</p></blockquote><a id="more"></a><h3 id="屏蔽-IP"><a href="#屏蔽-IP" class="headerlink" title="屏蔽 IP"></a>屏蔽 IP</h3><blockquote><p>假设我们的网站只是一个国内小站，有着公司业务，不是靠广告生存的那种，那么可以用 Geoip 模块封杀掉除中国和美国外的所有IP。这样可以过滤大部分来自国外的恶意扫描或者无用访问。不用担心封杀了网络蜘蛛。主流的网络蜘蛛（百度/谷歌/必应/搜狗）已经包含在了我们的IP范围内了。如果是公网的登录后台，更应该屏蔽彻底一点。</p></blockquote><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( $geoip_country_code !~  ^(<span class="literal">CN</span>|US)$ ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>（很多人担心geoip库不够准确，诚然，中国城市级别的IP段会有误差，但是国家级别的IP段一般是没有问题的，并且geoip库可以随时在线更新）</p></blockquote><h3 id="封杀各种-user-agent"><a href="#封杀各种-user-agent" class="headerlink" title="封杀各种  user-agent"></a>封杀各种  user-agent</h3><blockquote><p>user-agent 也即浏览器标识，每个正常的web请求都包含用户的浏览器信息，除非经过伪装，恶意扫描工具一般都会在user-agent里留下某些特征字眼，比如 scan，nmap 等。我们可以用正则匹配这些字眼，从而达到过滤的目的，请根据需要调整。</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($http_user_agent ~* <span class="string">"java|python|perl|ruby|curl|bash|echo|uname|base64|decode|md5sum|select|concat|httprequest|httpclient|nmap|scan"</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">403</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($http_user_agent ~* <span class="string">""</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">403</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里分析得不够细致，具体的非法 user-agent 还得慢慢从日志中逐个提取。<br>通过上面两个大招，相信你的日志里很快就会有大量的 403 记录。，我们接着干。<br>如果网站提供公共 api，注意与开发者约定好 UA，防止撞墙</p></blockquote><h3 id="封杀特定的-URL"><a href="#封杀特定的-URL" class="headerlink" title="封杀特定的 URL"></a>封杀特定的 URL</h3><blockquote><p>特定的文件扩展名，比如 .bak</p></blockquote><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(bak|<span class="type">save</span>|<span class="type">sh</span>|<span class="type">sql</span>|<span class="type">mdb</span>|<span class="type">svn</span>|<span class="type">git</span>|<span class="type">old</span>)$ &#123;</span><br><span class="line">    <span class="built_in">rewrite</span> ^/(.*)$  $host  permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>知名程序，比如 phpmyadmin</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">/(admin</span>|phpadmin|status) &#123;</span><br><span class="line">    <span class="keyword">deny</span> all; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>封杀特定的 http 方法和行为，比如</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($request_method !~ ^(GET<span class="params">|POST|</span>HEAD)$ ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">405</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($http_range ~ <span class="string">"\d&#123;9,&#125;"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="强制网站使用域名访问，可以逃过IP扫描，比如"><a href="#强制网站使用域名访问，可以逃过IP扫描，比如" class="headerlink" title="强制网站使用域名访问，可以逃过IP扫描，比如"></a>强制网站使用域名访问，可以逃过IP扫描，比如</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( $host !~* <span class="string">'abc.com'</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">403</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="url-参数过滤敏感字，比如"><a href="#url-参数过滤敏感字，比如" class="headerlink" title="url 参数过滤敏感字，比如"></a>url 参数过滤敏感字，比如</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">if</span> (<span class="variable">$query_string</span> <span class="regexp">~* "union.*select.*\(")</span> &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span>  <span class="variable">$host</span>  <span class="literal">permanent</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$query_string</span> <span class="regexp">~* "concat.*\(")</span> &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span>  <span class="variable">$host</span>  <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="强制要求referer"><a href="#强制要求referer" class="headerlink" title="强制要求referer"></a>强制要求referer</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($http_referer = <span class="string">""</span> ) ｛</span><br><span class="line">    <span class="keyword">return</span> <span class="number">403</span><span class="comment">;</span></span><br><span class="line">｝</span><br></pre></td></tr></table></figure><blockquote><p>如果不想用403，也可以rewrite一个url，比如一个400页面</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>400 Bad Request<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"white"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>400 Bad Request<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>nginx/1.2.0<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>可以将上述规则结合起来使用，同时匹配多条规则时才会封杀，<br>下面是一个来自老外的稍微复杂一点的例子：</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">set</span> <span class="variable">$add</span> <span class="number">1</span>;</span><br><span class="line">   <span class="attribute">location</span> /index.php &#123;</span><br><span class="line">       <span class="attribute">limit_except</span> GET POST &#123;</span><br><span class="line">           <span class="attribute">deny</span> all;</span><br><span class="line">       &#125;    </span><br><span class="line">       <span class="attribute">set</span> <span class="variable">$ban</span> <span class="string">""</span>;</span><br><span class="line">       <span class="attribute">if</span> (<span class="variable">$http_referer</span> = <span class="string">""</span> ) &#123;<span class="attribute">set</span> <span class="variable">$ban</span> <span class="variable">$ban</span><span class="variable">$add</span>;&#125;</span><br><span class="line">       <span class="attribute">if</span> (<span class="variable">$request_method</span> = POST ) &#123;<span class="attribute">set</span> <span class="variable">$ban</span> <span class="variable">$ban</span><span class="variable">$add</span>;&#125;</span><br><span class="line">       <span class="attribute">if</span> (<span class="variable">$query_string</span> = <span class="string">"action=login"</span> )&#123;<span class="attribute">set</span> <span class="variable">$ban</span> <span class="variable">$ban</span><span class="variable">$add</span>;&#125;</span><br><span class="line">       <span class="attribute">if</span> (<span class="variable">$ban</span> = <span class="number">111</span> ) &#123;                   </span><br><span class="line">           <span class="attribute">access_log</span> /var/log/[<span class="number">133</span>]nginx/ban IP;</span><br><span class="line">           <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">       &#125;               </span><br><span class="line">       <span class="attribute">proxy_pass</span> http://127.0.0.1:8000; <span class="comment">#here is a patch</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>其它方法</strong></p><h3 id="封杀IP"><a href="#封杀IP" class="headerlink" title="封杀IP"></a>封杀IP</h3><blockquote><p>定时做日志分析，手动将恶意IP加入 iptables 拒绝名单，推荐使用 ipset 模块。</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ipset ipset-service</span><br><span class="line">ipset create badip hash:net maxelem 65535iptables -I INPUT -m <span class="builtin-name">set</span> --match-<span class="builtin-name">set</span> badip src -p tcp --dport 80 -j DROP/etc/init.d/iptables saveipset <span class="builtin-name">add</span> badip 1.1.1.2ipset <span class="builtin-name">add</span> badip 2.2.2.0/24/etc/init.d/ipset save</span><br></pre></td></tr></table></figure><blockquote><p>ipset 还支持 timeout，类似 redis 的 TTL，timeout 之后会自动删除，比较人性化。<br>比如下面的例子就是 timeout 默认 3600 秒，支持自定义 timeout</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ipset</span> destroy <span class="keyword">badip</span></span><br><span class="line"><span class="keyword">ipset </span>create <span class="keyword">badip </span>hash:net maxelem <span class="number">65535</span> timeout <span class="number">3600</span>ipset <span class="keyword">add </span><span class="keyword">badip </span><span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>ipset <span class="keyword">add </span><span class="keyword">badip </span><span class="number">2</span>.<span class="number">2</span>.<span class="number">2</span>.<span class="number">0</span>/<span class="number">24</span> timeout <span class="number">60</span>ipset <span class="keyword">add </span><span class="keyword">badip </span><span class="number">3</span>.<span class="number">3</span>.<span class="number">3</span>.<span class="number">0</span>/<span class="number">24</span> timeout <span class="number">7200</span></span><br></pre></td></tr></table></figure><blockquote><p>在日志分析的自动化程度比较高，准确率比较好的情况下，可以考虑通过条件触发 ipset。</p></blockquote><h3 id="限速"><a href="#限速" class="headerlink" title="限速"></a>限速</h3><blockquote><p>适当限制客户端的请求带宽，请求频率，请求连接数，这里不展开论述。根据具体需求，阀值应当稍稍宽泛一点。特别要注意办公室/网吧场景的用户，他们的特点是多人使用同一个网络出口。</p></blockquote><h3 id="目录只读"><a href="#目录只读" class="headerlink" title="目录只读"></a>目录只读</h3><blockquote><p>如果没有上传需求，完全可以把网站根目录弄成只读的，加固安全。<br>做了一点小动作，给网站根目录搞了一个只读的挂载点。这里假设网站根目录为 /var/www/html</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv <span class="string">/data</span></span><br><span class="line">mkdir -pv <span class="string">/var/www/html</span></span><br><span class="line">mount <span class="params">--bind</span> <span class="string">/data</span> <span class="string">/var/www/html</span></span><br><span class="line">mount -o remount,ro <span class="params">--bind</span> <span class="string">/data</span> <span class="string">/var/www/html</span></span><br></pre></td></tr></table></figure><blockquote><p>网站内容实际位于/data，网站内容更新就往/data里更新，目录/var/www/html无法执行任何写操作，否则会报错“Read-only file system”，极大程度上可以防止提权篡改。</p></blockquote><h3 id="overlayfs"><a href="#overlayfs" class="headerlink" title="overlayfs"></a>overlayfs</h3><blockquote><p>这种方法跟上面的方法类似，但是有所区别<br>假设网站根目录/var/www/html有一个目录upload是要求可读写的，其他只读即可，那么仔细看下面的操作</p></blockquote><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -<span class="built_in">pv</span> /data/<span class="built_in">lower</span></span><br><span class="line">mkdir -<span class="built_in">pv</span> /data/<span class="built_in">upper</span></span><br><span class="line">mkdir -<span class="built_in">pv</span> /data/worker</span><br><span class="line">mv /<span class="built_in">var</span>/www/html/upload /data/<span class="built_in">upper</span>/</span><br><span class="line">mv /<span class="built_in">var</span>/www/html/* /data/<span class="built_in">lower</span>/</span><br><span class="line">mount -<span class="built_in">t</span> overlayfs overlay -o <span class="built_in">lower</span>=/data/<span class="built_in">lower</span>,<span class="built_in">upper</span>=/data/<span class="built_in">upper</span>,workdir=/data/worker /<span class="built_in">var</span>/www/html</span><br></pre></td></tr></table></figure><blockquote><p>这样就完美实现了读写分离，底层目录只读，上层目录可写。<br>如果程序被篡改，上层目录 /data/upper 除了 upload 内容之外，还会生成其他文件。<br>overlayfs 因为特殊的机制，建议使用 Linux 内核4.0+，否则比较消耗硬盘的 inode。</p></blockquote><h3 id="定时总结和丰富过滤规则"><a href="#定时总结和丰富过滤规则" class="headerlink" title="定时总结和丰富过滤规则"></a>定时总结和丰富过滤规则</h3>]]></content>
      
      <categories>
          
          <category> Nginx笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx安全加固心得 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next设置阅读全文</title>
      <link href="/2018/06/03/Next%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87/"/>
      <url>/2018/06/03/Next%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87/</url>
      <content type="html"><![CDATA[<h2 id="如何设置「阅读全文」？"><a href="#如何设置「阅读全文」？" class="headerlink" title="如何设置「阅读全文」？"></a>如何设置「阅读全文」？</h2><a id="more"></a><blockquote><p>在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。<br>NexT 提供三种方式来控制文章在首页的显示方式。<br>也就是说，在首页显示文章的摘录并显示 <strong>阅读全文</strong> 按钮，可以通过以下方法：</p></blockquote><ol><li>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo 提供的方式 推荐</li><li>在文章的 <a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="noopener">front-matter</a> 中添加 <code>description</code>，并提供文章摘录</li><li>自动形成摘要，在 主题配置文件 中添加：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>  <span class="comment"># 改成 true</span></span><br><span class="line"><span class="attr">  length:</span> <span class="number">150</span>  <span class="comment"># 默认展示的高度</span></span><br></pre></td></tr></table></figure><p>默认截取的长度为 <code>150</code> 字符，可以根据需要自行设定<br>建议使用 <code>&lt;!-- more --&gt;</code>（即第一种方式），除了可以精确控制需要显示的摘录内容以外，<br>这种方式也可以让 Hexo 中的插件更好的识别。</p><blockquote><p><code>需要注意的是</code>，点击「阅读全文」之后，文章会自动定位到 所在位置，想要修改成从头阅读需要修改 主题配置文件 _config.yml 文件：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Automatically scroll page to section <span class="built_in">which</span> is under &lt;!-- more --&gt; mark.</span></span><br><span class="line">scroll_to_more: false</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next设置阅读全文 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next开启站内搜索</title>
      <link href="/2018/06/03/Next%E5%BC%80%E5%90%AF%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
      <url>/2018/06/03/Next%E5%BC%80%E5%90%AF%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/</url>
      <content type="html"><![CDATA[<h3 id="Next-如何开启站内搜索？"><a href="#Next-如何开启站内搜索？" class="headerlink" title="Next 如何开启站内搜索？"></a>Next 如何开启站内搜索？</h3><blockquote><p> NexT 主题支持集成 Swiftype、微搜索、Local Search 和 Algolia,Swiftype 和 Algolia 都只有一段时间的试用期，可以采用 Hexo 提供的Local Search，原理是通过 hexo-generator-search 插件在本地生成一个 search.xml 文件，搜索的时候从这个文件中根据关键字检索出相应的链接。</p></blockquote><a id="more"></a><p><strong> Local Search 由 <a href="https://github.com/iissnan/hexo-theme-next/pull/694" target="_blank" rel="noopener">flashlab</a> 贡献 </strong></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="安装-hexo-generator-search"><a href="#安装-hexo-generator-search" class="headerlink" title="安装 hexo-generator-search"></a>安装 hexo-generator-search</h4><blockquote><p>在站点的根目录下执行以下命令</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h4 id="安装-hexo-generator-searchdb，在站点的根目录下执行以下命令"><a href="#安装-hexo-generator-searchdb，在站点的根目录下执行以下命令" class="headerlink" title="安装 hexo-generator-searchdb，在站点的根目录下执行以下命令"></a>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><h4 id="启用搜索"><a href="#启用搜索" class="headerlink" title="启用搜索"></a>启用搜索</h4><blockquote><p>编辑 <code>站点配置</code> 文件，新增以下内容到任意位置</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><blockquote><p>编辑 <code>主题配置</code> 文件，启用本地搜索功能</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Next笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next开启站内搜索 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kickstart自动应答文件</title>
      <link href="/2018/06/03/Kickstart%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%E6%96%87%E4%BB%B6/"/>
      <url>/2018/06/03/Kickstart%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="Kickstart-自动应答文件"><a href="#Kickstart-自动应答文件" class="headerlink" title="Kickstart 自动应答文件"></a>Kickstart 自动应答文件</h3><a id="more"></a><p><strong>Cobbler</strong></p><p>vim /var/lib/cobbler/kickstarts/centos7.5-ks.cfg<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Cobbler for Kickstart Configurator for CentOS 7 by clsn</span></span><br><span class="line">install</span><br><span class="line">url <span class="params">--url=</span>$tree</span><br><span class="line">text</span><br><span class="line">lang en_US.UTF-8</span><br><span class="line">keyboard us</span><br><span class="line">zerombr</span><br><span class="line">bootloader <span class="params">--location=mbr</span> <span class="params">--driveorder=sda</span> <span class="params">--append=</span><span class="string">"crashkernel=auto rhgb quiet"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Network information</span></span><br><span class="line">$SNIPPET<span class="params">('network_config')</span></span><br><span class="line"><span class="comment">#network --bootproto=dhcp --device=eth0 --onboot=yes --noipv6 --hostname=CentOS7</span></span><br><span class="line"></span><br><span class="line">timezone <span class="params">--utc</span> Asia/Shanghai</span><br><span class="line">authconfig <span class="params">--enableshadow</span> <span class="params">--passalgo=sha512</span></span><br><span class="line">rootpw  <span class="params">--iscrypted</span> $default_password_crypted</span><br><span class="line">clearpart <span class="params">--all</span> <span class="params">--initlabel</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disk partitioning information</span></span><br><span class="line">part pv.374 <span class="params">--fstype=</span><span class="string">"lvmpv"</span> <span class="params">--ondisk=sda</span> <span class="params">--size=2052</span></span><br><span class="line">part pv.671 <span class="params">--fstype=</span><span class="string">"lvmpv"</span> <span class="params">--ondisk=sda</span> <span class="params">--size=20484</span></span><br><span class="line">part pv.639 <span class="params">--fstype=</span><span class="string">"lvmpv"</span> <span class="params">--ondisk=sda</span> <span class="params">--size=1</span> <span class="params">--grow</span></span><br><span class="line">part <span class="string">/boot</span> <span class="params">--fstype=</span><span class="string">"xfs"</span> <span class="params">--ondisk=sda</span> <span class="params">--size=500</span></span><br><span class="line">volgroup vgswap <span class="params">--pesize=4096</span> pv.374</span><br><span class="line">volgroup vgroot <span class="params">--pesize=4096</span> pv.671</span><br><span class="line">volgroup vgdata <span class="params">--pesize=4096</span> pv.639</span><br><span class="line">logvol /  <span class="params">--fstype=</span><span class="string">"xfs"</span> <span class="params">--size=20480</span> <span class="params">--name=lvroot</span> <span class="params">--vgname=vgroot</span></span><br><span class="line">logvol swap  <span class="params">--fstype=</span><span class="string">"swap"</span> <span class="params">--size=2048</span> <span class="params">--name=lvswap</span> <span class="params">--vgname=vgswap</span></span><br><span class="line">logvol <span class="string">/data</span>  <span class="params">--fstype=</span><span class="string">"xfs"</span> <span class="params">--size=1</span> <span class="params">--grow</span> <span class="params">--name=lvdata</span> <span class="params">--vgname=vgdata</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">firstboot <span class="params">--disable</span></span><br><span class="line">selinux <span class="params">--disabled</span></span><br><span class="line">firewall <span class="params">--disabled</span></span><br><span class="line">logging <span class="params">--level=info</span></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line">%pre</span><br><span class="line">$SNIPPET<span class="params">('log_ks_pre')</span></span><br><span class="line">$SNIPPET<span class="params">('kickstart_start')</span></span><br><span class="line">$SNIPPET<span class="params">('pre_install_network_config')</span></span><br><span class="line"><span class="comment"># Enable installation monitoring</span></span><br><span class="line">$SNIPPET<span class="params">('pre_anamon')</span></span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%packages</span><br><span class="line">@^minimal</span><br><span class="line">@compat-libraries</span><br><span class="line">@core</span><br><span class="line">@debugging</span><br><span class="line">@development</span><br><span class="line">bash-completion</span><br><span class="line">chrony</span><br><span class="line">dos2unix</span><br><span class="line">kexec-tools</span><br><span class="line">lrzsz</span><br><span class="line">nmap</span><br><span class="line">sysstat</span><br><span class="line">telnet</span><br><span class="line">tree</span><br><span class="line">vim</span><br><span class="line">wget</span><br><span class="line">net-tools</span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%post</span><br><span class="line">systemctl disable postfix.service</span><br><span class="line">%end</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Cobbler笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kickstart自动应答文件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo安装</title>
      <link href="/2018/06/03/Hexo%E5%AE%89%E8%A3%85/"/>
      <url>/2018/06/03/Hexo%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h3 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h3><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。<br>Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><a id="more"></a><h3 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h3><blockquote><p>进入 D:\Blog\gmlyo\ 自定义目录，右键鼠标，点击 Git Bash Here，输入 npm 命令即可安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">右击 Git Bash Here</span><br><span class="line"><span class="built_in">cd</span> /d/Blog/gmlyo/</span><br><span class="line"></span><br><span class="line">npm install hexo -g 或 npm install hexo-cli -g</span><br><span class="line">hexo init 或 hexo init blog; <span class="built_in">cd</span> blog/</span><br><span class="line"><span class="comment"># 第一句是安装 hexo</span></span><br><span class="line"><span class="comment"># 第二句是安装 hexo 部署到 git page 的 deployer</span></span><br><span class="line"><span class="comment"># 两个都需要安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hexo 初始化配置（有点漫长的等待。。。）</span></span><br><span class="line">npm init</span><br><span class="line">Hexo 初始化完成后，Hexo 将会在指定文件夹中新建所需要的文件</span><br><span class="line"></span><br><span class="line">hexo clean  <span class="comment"># 清楚 public 目录，不然有时因为缓存问题，服务器更新不了主题</span></span><br><span class="line">hexo g      <span class="comment"># 或 hexo generate</span></span><br><span class="line">hexo s      <span class="comment"># 或 hexo server</span></span><br></pre></td></tr></table></figure><blockquote><p> 可以在打开浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看</p></blockquote><h3 id="查看-hexo-版本信息"><a href="#查看-hexo-版本信息" class="headerlink" title="查看 hexo 版本信息"></a>查看 hexo 版本信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 hexo 版本信息</span></span><br><span class="line">hexo -v</span><br><span class="line">hexo: 3.7.1</span><br><span class="line">hexo-cli: 1.1.0</span><br><span class="line">os: Windows_NT 10.0.16299 win32 x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 10.3.0</span><br><span class="line">v8: 6.6.346.32-node.9</span><br><span class="line">uv: 1.20.3</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.14.0</span><br><span class="line">modules: 64</span><br><span class="line">nghttp2: 1.29.0</span><br><span class="line">napi: 3</span><br><span class="line">openssl: 1.1.0h</span><br><span class="line">icu: 61.1</span><br><span class="line">unicode: 10.0</span><br><span class="line">cldr: 33.0</span><br><span class="line">tz: 2018c</span><br></pre></td></tr></table></figure><h3 id="常用-Hexo-命令"><a href="#常用-Hexo-命令" class="headerlink" title="常用 Hexo 命令"></a>常用 Hexo 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成静态文件，会在当前目录下生成一个新的叫做 public 的文件夹</span></span><br><span class="line">hexo generate (hexo g)</span><br><span class="line"><span class="comment"># 启动本地 Web 服务，用于博客的预览</span></span><br><span class="line">hexo server (hexo s)</span><br><span class="line"><span class="comment"># 部署播客到远端（比如github, heroku等平台）</span></span><br><span class="line">hexo deploy (hexo d)</span><br></pre></td></tr></table></figure><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span>      <span class="comment"># 新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment"># 新建页面</span></span><br></pre></td></tr></table></figure><h3 id="常用简写"><a href="#常用简写" class="headerlink" title="常用简写"></a>常用简写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><h3 id="常用组合"><a href="#常用组合" class="headerlink" title="常用组合"></a>常用组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g    <span class="comment"># 生成部署</span></span><br><span class="line">hexo s -g    <span class="comment"># 生成预览</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Hexo笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo安装 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 绑定自定义域名</title>
      <link href="/2018/06/03/Hexo%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
      <url>/2018/06/03/Hexo%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
      <content type="html"><![CDATA[<h3 id="如何将自己购买的域名连接到-Github-Pages？"><a href="#如何将自己购买的域名连接到-Github-Pages？" class="headerlink" title="如何将自己购买的域名连接到 Github Pages？"></a>如何将自己购买的域名连接到 Github Pages？</h3><a id="more"></a><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在 source 目录下新建 CNAME 文件，在首行添加网站域名</span><br><span class="line">如：www.gmlyo.com</span><br><span class="line">注意前面没有 https:<span class="regexp">//</span>，http:<span class="regexp">//</span> 等信息，然后重新重新生成并部署站点</span><br><span class="line">hexo clean  <span class="comment"># 清楚 public 目录，不然有时因为缓存问题，服务器更新不了主题</span></span><br><span class="line">hexo g      <span class="comment"># hexo generade</span></span><br><span class="line">hexo d      <span class="comment"># hexo deploy</span></span><br><span class="line">或</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h3 id="设置域名解析"><a href="#设置域名解析" class="headerlink" title="设置域名解析"></a>设置域名解析</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、先添加一个CNAME，主机记录写@，后面记录值写上你的 xxx<span class="selector-class">.github</span><span class="selector-class">.io</span></span><br><span class="line"><span class="number">2</span>、再添加一个CNAME，主机记录写www，后面记录值也是 xxx<span class="selector-class">.github</span><span class="selector-class">.io</span></span><br><span class="line">这样别人用 www 和不用 www 都能访问你的网站</span><br><span class="line">其实 www 的方式，会先解析成 https:<span class="comment">//xxx.github.io，然后根据 CNAME 再变成 http://www.gmlyo.com，即中间是经过一次转换的。</span></span><br><span class="line">注：除了使用 CNAME 记录也有人使用 A 记录，后面的记录值是写 Github Page 里面的 IP 地址，但有时候 IP 地址会更改，导致最后解析不正确，所以还是推荐用 CNAME 别名记录要好些，不建议用 IP。</span><br><span class="line"><span class="number">3</span>、等待<span class="number">10</span>分钟左右，域名生效后刷新浏览器，使用自定义域名访问网站即可</span><br></pre></td></tr></table></figure><h3 id="Hexo-部署后，CNAME-会被自动删除，如何解决？"><a href="#Hexo-部署后，CNAME-会被自动删除，如何解决？" class="headerlink" title="Hexo 部署后，CNAME 会被自动删除，如何解决？"></a>Hexo 部署后，CNAME 会被自动删除，如何解决？</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将需要上传至 Github 的文件放在 source 目录下</span><br><span class="line">如：CNAME, README<span class="selector-class">.md</span>, favicon<span class="selector-class">.ico</span>, images 目录等</span><br><span class="line">将这些都放在 source 目录下，每次上传就不会消失了</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Hexo笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo 绑定自定义域名 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 删除文章</title>
      <link href="/2018/06/03/Hexo%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0/"/>
      <url>/2018/06/03/Hexo%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h3 id="Hexo-如何删除文章？"><a href="#Hexo-如何删除文章？" class="headerlink" title="Hexo 如何删除文章？"></a>Hexo 如何删除文章？</h3><a id="more"></a> <figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">删除文章的过程很简单，先删除本地文件，然后通过生成和部署命令将远程仓库中的文件也一并删除。</span><br><span class="line">以最开始默认形成的 hello-world.md 这篇文章为例</span><br><span class="line">首先进入 D:<span class="symbol">\B</span>log<span class="symbol">\g</span>mlyo<span class="symbol">\s</span>ource<span class="symbol">\_</span>posts<span class="symbol">\ </span>文件夹中</span><br><span class="line">找到 hello-world.md 文件，在本地直接执行删除。</span><br><span class="line"></span><br><span class="line">然后依次执行</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line">再去主页查看就会发现博客上面已经什么都没有了</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Hexo笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo 删除文章 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
