<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>G加菲</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.gmlyo.com/"/>
  <updated>2018-09-01T08:43:58.200Z</updated>
  <id>http://www.gmlyo.com/</id>
  
  <author>
    <name>G加菲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker export 命令</title>
    <link href="http://www.gmlyo.com/2018/09/01/Docker-export-%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/09/01/Docker-export-命令/</id>
    <published>2018-09-01T08:42:53.000Z</published>
    <updated>2018-09-01T08:43:58.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-export-命令"><a href="#Docker-export-命令" class="headerlink" title="Docker export 命令"></a>Docker export 命令</h1><a id="more"></a><p><strong>docker export :</strong> 将文件系统作为一个 tar 归档文件导出到 STDOUT。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-o :</strong> 将输入内容写到文件。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将 <code>id</code> 为 <code>a404c6c174a2</code> 的容器按日期保存为 tar 文件。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="title">@localhost</span> ~]# docker export -o mysql-`date +<span class="symbol">%Y</span><span class="symbol">%m</span><span class="symbol">%d</span>`.tar a<span class="number">404</span><span class="keyword">c</span><span class="number">6</span><span class="keyword">c</span><span class="number">174</span>a<span class="number">2</span></span><br><span class="line">[root<span class="title">@localhost</span> ~]# ls mysql-`date +<span class="symbol">%Y</span><span class="symbol">%m</span><span class="symbol">%d</span>`.tar</span><br><span class="line">mysql<span class="number">-20160711</span>.tar</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-export-命令&quot;&gt;&lt;a href=&quot;#Docker-export-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker export 命令&quot;&gt;&lt;/a&gt;Docker export 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker export 命令" scheme="http://www.gmlyo.com/tags/Docker-export-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker logs 命令</title>
    <link href="http://www.gmlyo.com/2018/09/01/Docker%20logs%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/09/01/Docker logs 命令/</id>
    <published>2018-09-01T08:38:24.000Z</published>
    <updated>2018-09-01T08:39:11.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-logs-命令"><a href="#Docker-logs-命令" class="headerlink" title="Docker logs 命令"></a>Docker logs 命令</h1><a id="more"></a><p><strong>docker logs :</strong> 获取容器的日志</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-f :</strong> 跟踪日志输出</li><li><strong>–since :</strong> 显示某个开始时间的所有日志</li><li><strong>-t :</strong> 显示时间戳</li><li><strong>–tail :</strong>仅列出最新N条容器日志</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>跟踪查看容器 mynginx 的日志输出。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@localhost ~]</span># docker logs -f mynginx</span><br><span class="line"><span class="number">192.168.239.1</span> - - <span class="string">[10/Jul/2016:16:53:33 +0000]</span> <span class="string">"<span class="keyword">GET</span> / HTTP/1.1"</span> <span class="number">200</span> <span class="number">612</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36"</span> <span class="string">"-"</span></span><br><span class="line"><span class="number">2016</span>/<span class="number">07</span>/<span class="number">10</span> <span class="number">16</span>:<span class="number">53</span>:<span class="number">33</span> <span class="string">[error]</span> <span class="number">5</span>#<span class="number">5</span>: *<span class="number">1</span> open() <span class="string">"/usr/share/nginx/html/favicon.ico"</span> failed (<span class="number">2</span>: No such file or directory), client: <span class="number">192.168.239.1</span>, server: localhost, request: <span class="string">"<span class="keyword">GET</span> /favicon.ico HTTP/1.1"</span>, host: <span class="string">"192.168.239.130"</span>, referrer: <span class="string">"http://192.168.239.130/"</span></span><br><span class="line"><span class="number">192.168.239.1</span> - - <span class="string">[10/Jul/2016:16:53:33 +0000]</span> <span class="string">"<span class="keyword">GET</span> /favicon.ico HTTP/1.1"</span> <span class="number">404</span> <span class="number">571</span> <span class="string">"http://192.168.239.130/"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36"</span> <span class="string">"-"</span></span><br><span class="line"><span class="number">192.168.239.1</span> - - <span class="string">[10/Jul/2016:16:53:59 +0000]</span> <span class="string">"<span class="keyword">GET</span> / HTTP/1.1"</span> <span class="number">304</span> <span class="number">0</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36"</span> <span class="string">"-"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>查看容器 mynginx 从 2016年7月1日 后的最新 10条 日志。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs <span class="attribute">--since</span>=<span class="string">"2016-07-01"</span> <span class="attribute">--tail</span>=10 mynginx</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.runoob.com/docker/docker-logs-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-logs-command.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-logs-命令&quot;&gt;&lt;a href=&quot;#Docker-logs-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker logs 命令&quot;&gt;&lt;/a&gt;Docker logs 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker logs 命令" scheme="http://www.gmlyo.com/tags/Docker-logs-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker attach 命令</title>
    <link href="http://www.gmlyo.com/2018/09/01/Docker%20attach%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/09/01/Docker attach 命令/</id>
    <published>2018-09-01T08:03:04.000Z</published>
    <updated>2018-09-01T08:04:05.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-attach-命令"><a href="#Docker-attach-命令" class="headerlink" title="Docker attach 命令"></a>Docker attach 命令</h1><a id="more"></a><p><strong>docker attach :</strong> 连接到正在运行中的容器。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span></span><br></pre></td></tr></table></figure><p>要 attach 上去的容器必须正在运行，可以同时连接上同一个 container 来共享屏幕（与 screen 命令的 attach 类似）。</p><p>官方文档中说 attach 后可以通过 <code>CTRL-C</code> 来 detach，但实际上经过测试，如果 container 当前在运行 bash，<code>CTRL-C</code> 自然是当前行的输入，没有退出；如果 container 当前正在前台运行进程，如输出 nginx 的 access.log 日志，<code>CTRL-C</code> 不仅会导致退出容器，而且还 stop 了。这不是我们想要的，detach 的意思按理应该是脱离容器终端，但容器依然运行。好在 attach 是可以带上 <code>--sig-proxy=false</code> 来确保 <code>CTRL-D</code> 或 <code>CTRL-C</code> 不会关闭容器。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>容器 mynginx 将访问日志指到标准输出，连接到容器查看访问信息。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@localhost ~]</span># docker attach --sig-proxy=false mynginx</span><br><span class="line"><span class="number">192.168.239.1</span> - - <span class="string">[10/Jul/2016:16:54:26 +0000]</span> <span class="string">"<span class="keyword">GET</span> / HTTP/1.1"</span> <span class="number">304</span> <span class="number">0</span> <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36"</span> <span class="string">"-"</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-attach-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-attach-command.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-attach-命令&quot;&gt;&lt;a href=&quot;#Docker-attach-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker attach 命令&quot;&gt;&lt;/a&gt;Docker attach 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker attach 命令" scheme="http://www.gmlyo.com/tags/Docker-attach-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker top 命令</title>
    <link href="http://www.gmlyo.com/2018/08/31/Docker%20top%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/08/31/Docker top 命令/</id>
    <published>2018-08-31T10:00:01.000Z</published>
    <updated>2018-09-01T05:29:05.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-top-命令"><a href="#Docker-top-命令" class="headerlink" title="Docker top 命令"></a>Docker top 命令</h1><a id="more"></a><p><strong>docker top :</strong> 查看容器中运行的进程信息，支持 ps 命令参数。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[ps OPTIONS]</span></span><br></pre></td></tr></table></figure><p>容器运行时不一定有 /bin/bash 终端来交互执行 top 命令，而且容器还不一定有 top 命令，可以使用docker top 来实现查看 container 中正在运行的进程。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>查看容器 mymysql 的进程信息。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@localhost mysql]</span># <span class="selector-tag">docker</span> <span class="selector-tag">top</span> <span class="selector-tag">mymysql</span></span><br><span class="line"><span class="selector-tag">UID</span>    <span class="selector-tag">PID</span>    <span class="selector-tag">PPID</span>    <span class="selector-tag">C</span>      <span class="selector-tag">STIME</span>   <span class="selector-tag">TTY</span>  <span class="selector-tag">TIME</span>       <span class="selector-tag">CMD</span></span><br><span class="line">999    40347  40331   18     00<span class="selector-pseudo">:58</span>   ?    00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:02</span>   <span class="selector-tag">mysqld</span></span><br></pre></td></tr></table></figure><p>查看所有运行容器的进程信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  `docker ps | grep Up | awk <span class="string">'&#123;print $1&#125;'</span>`; <span class="keyword">do</span> <span class="built_in">echo</span> \ &amp;&amp; docker top <span class="variable">$i</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-top-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-top-command.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-top-命令&quot;&gt;&lt;a href=&quot;#Docker-top-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker top 命令&quot;&gt;&lt;/a&gt;Docker top 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker top 命令" scheme="http://www.gmlyo.com/tags/Docker-top-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker inspect 命令</title>
    <link href="http://www.gmlyo.com/2018/08/31/Docker%20inspect%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/08/31/Docker inspect 命令/</id>
    <published>2018-08-31T09:55:20.000Z</published>
    <updated>2018-08-31T09:55:28.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-inspect-命令"><a href="#Docker-inspect-命令" class="headerlink" title="Docker inspect 命令"></a>Docker inspect 命令</h1><a id="more"></a><p><strong>docker inspect :</strong> 获取容器/镜像的元数据。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect <span class="string">[OPTIONS]</span> NAME|ID <span class="string">[NAME|ID...]</span></span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-f :</strong> 指定返回值的模板文件。</li><li><strong>-s :</strong> 显示总的文件大小。</li><li><strong>–type :</strong> 为指定类型返回JSON。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>获取镜像 mysql:5.6 的元信息。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">runoob<span class="variable">@runoob</span><span class="symbol">:~</span><span class="variable">$ </span>docker inspect <span class="symbol">mysql:</span><span class="number">5.6</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"sha256:2c0964ec182ae9a045f866bbc2553087f6e42bfc16074a74fb820af235f070ec"</span>,</span><br><span class="line">        <span class="string">"RepoTags"</span>: [</span><br><span class="line">            <span class="string">"mysql:5.6"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"RepoDigests"</span>: [],</span><br><span class="line">        <span class="string">"Parent"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"Comment"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2016-05-24T04:01:41.168371815Z"</span>,</span><br><span class="line">        <span class="string">"Container"</span>: <span class="string">"e0924bc460ff97787f34610115e9363e6363b30b8efa406e28eb495ab199ca54"</span>,</span><br><span class="line">        <span class="string">"ContainerConfig"</span>: &#123;</span><br><span class="line">            <span class="string">"Hostname"</span>: <span class="string">"b0cf605c7757"</span>,</span><br><span class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"AttachStdin"</span>: <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">"AttachStdout"</span>: <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">"AttachStderr"</span>: <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">"ExposedPorts"</span>: &#123;</span><br><span class="line">                <span class="string">"3306/tcp"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>获取正在运行的容器 mymysql 的 IP。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runoob<span class="variable">@runoob</span><span class="symbol">:~</span><span class="variable">$ </span>docker inspect --format=<span class="string">'&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;'</span> mymysql</span><br><span class="line"><span class="number">172.17</span>.<span class="number">0</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-inspect-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-inspect-command.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-inspect-命令&quot;&gt;&lt;a href=&quot;#Docker-inspect-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker inspect 命令&quot;&gt;&lt;/a&gt;Docker inspect 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker inspect 命令" scheme="http://www.gmlyo.com/tags/Docker-inspect-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker ps 命令</title>
    <link href="http://www.gmlyo.com/2018/08/31/Docker%20ps%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/08/31/Docker ps 命令/</id>
    <published>2018-08-31T09:33:14.000Z</published>
    <updated>2018-08-31T09:37:58.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-ps-命令"><a href="#Docker-ps-命令" class="headerlink" title="Docker ps 命令"></a>Docker ps 命令</h1><a id="more"></a><p><strong>docker ps :</strong> 列出容器</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps <span class="string">[OPTIONS]</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-a :</strong> 显示所有的容器，包括未运行的。</li><li><strong>-f :</strong> 根据条件过滤显示的内容。</li><li><strong>–format :</strong> 指定返回值的模板文件。</li><li><strong>-l :</strong> 显示最近创建的容器。</li><li><strong>-n :</strong> 列出最近创建的n个容器。</li><li><strong>–no-trunc :</strong> 不截断输出。</li><li><strong>-q :</strong> 静默模式，只显示容器编号。</li><li><strong>-s :</strong> 显示总的文件大小。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>列出所有在运行的容器信息</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                ...  PORTS                    NAMES</span><br><span class="line"><span class="number">09</span>b93464c2f7   nginx:latest   <span class="string">"nginx -g 'daemon off"</span> ...  <span class="number">80</span>/tcp, <span class="number">443</span>/tcp          myrunoob</span><br><span class="line"><span class="number">96</span>f7f14e99ab   mysql:<span class="number">5.6</span>      <span class="string">"docker-entrypoint.sh"</span> ...  <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">3306</span>-&gt;<span class="number">3306</span>/tcp   mymysql</span><br></pre></td></tr></table></figure><p>列出最近创建的 5 个容器信息</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">runoob@runo<span class="symbol">ob:</span>~$ docker ps -<span class="built_in">n</span> <span class="number">5</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                   CREATED           </span><br><span class="line"><span class="number">09</span>b93464c2f7        ngi<span class="symbol">nx:la</span>test        <span class="string">"nginx -g 'daemon off"</span>    <span class="number">2</span> <span class="built_in">days</span> ago   ...     </span><br><span class="line">b8573233d675        ngi<span class="symbol">nx:la</span>test        <span class="string">"/bin/bash"</span>               <span class="number">2</span> <span class="built_in">days</span> ago   ...     </span><br><span class="line">b1a0703e41e7        ngi<span class="symbol">nx:la</span>test        <span class="string">"nginx -g 'daemon off"</span>    <span class="number">2</span> <span class="built_in">days</span> ago   ...    </span><br><span class="line">f46fb1dec520        <span class="number">5</span>c6e1090e771        <span class="string">"/bin/sh -c 'set -x \t"</span>   <span class="number">2</span> <span class="built_in">days</span> ago   ...   </span><br><span class="line">a63b4a5597de        <span class="number">860</span>c279d2fec        <span class="string">"bash"</span>                    <span class="number">2</span> <span class="built_in">days</span> ago   ...</span><br></pre></td></tr></table></figure><p>列出所有创建的容器ID</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">runoob</span><span class="comment">@runoob:~$ docker ps -a -q</span></span><br><span class="line"><span class="number">09</span>b93464c2f7</span><br><span class="line"><span class="keyword">b8573233d675</span></span><br><span class="line"><span class="keyword">b1a0703e41e7</span></span><br><span class="line"><span class="keyword">f46fb1dec520</span></span><br><span class="line"><span class="keyword">a63b4a5597de</span></span><br><span class="line"><span class="keyword">6a4aa42e947b</span></span><br><span class="line"><span class="keyword">de7bb36e7968</span></span><br><span class="line"><span class="keyword">43a432b73776</span></span><br><span class="line"><span class="keyword">664a8ab1a585</span></span><br><span class="line"><span class="keyword">ba52eb632bbd</span></span><br><span class="line"><span class="keyword">...</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-ps-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-ps-command.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-ps-命令&quot;&gt;&lt;a href=&quot;#Docker-ps-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker ps 命令&quot;&gt;&lt;/a&gt;Docker ps 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker ps 命令" scheme="http://www.gmlyo.com/tags/Docker-ps-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker exec 命令</title>
    <link href="http://www.gmlyo.com/2018/08/31/Docker%20exec%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/08/31/Docker exec 命令/</id>
    <published>2018-08-31T09:04:54.000Z</published>
    <updated>2018-08-31T09:25:12.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-exec-命令"><a href="#Docker-exec-命令" class="headerlink" title="Docker exec 命令"></a>Docker exec 命令</h1><a id="more"></a><p><strong>docker exec ：</strong> 在运行的容器中执行命令</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-d :</strong> 分离模式: 在后台运行</li><li><strong>-i :</strong> 即使没有附加也保持 STDIN 打开</li><li><strong>-t :</strong> 分配一个伪终端</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>在容器 mynginx 中以交互模式执行容器内 /root/runoob.sh 脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker <span class="built_in">exec</span> -it mynginx /bin/sh /root/runoob.sh</span><br><span class="line">http://www.runoob.com/</span><br></pre></td></tr></table></figure><p>在容器 mynginx 中开启一个交互模式的终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker <span class="built_in">exec</span> -i -t  mynginx /bin/bash</span><br><span class="line">root@b1a0703e41e7:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-exec-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-exec-command.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-exec-命令&quot;&gt;&lt;a href=&quot;#Docker-exec-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker exec 命令&quot;&gt;&lt;/a&gt;Docker exec 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker exec 命令" scheme="http://www.gmlyo.com/tags/Docker-exec-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker pause/unpause 命令</title>
    <link href="http://www.gmlyo.com/2018/08/31/Docker%20pause%20unpause%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/08/31/Docker pause unpause 命令/</id>
    <published>2018-08-31T09:03:29.000Z</published>
    <updated>2018-08-31T09:23:50.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-pause-unpause-命令"><a href="#Docker-pause-unpause-命令" class="headerlink" title="Docker pause/unpause 命令"></a>Docker pause/unpause 命令</h1><a id="more"></a><p><strong>docker pause :</strong> 暂停容器中所有的进程。<br><strong>docker unpause :</strong> 恢复容器中所有的进程。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pause <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br><span class="line">docker unpause <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>暂停数据库容器 db01 提供服务。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">pause</span> db01</span><br></pre></td></tr></table></figure><p>恢复数据库容器 db01 提供服务。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> unpause db01</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-pause-unpause-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-pause-unpause-command.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-pause-unpause-命令&quot;&gt;&lt;a href=&quot;#Docker-pause-unpause-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker pause/unpause 命令&quot;&gt;&lt;/a&gt;Docker pause/unpause 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker pause/unpause 命令" scheme="http://www.gmlyo.com/tags/Docker-pause-unpause-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker rm 命令</title>
    <link href="http://www.gmlyo.com/2018/08/31/Docker%20rm%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/08/31/Docker rm 命令/</id>
    <published>2018-08-31T08:57:24.000Z</published>
    <updated>2018-08-31T09:24:17.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-rm-命令"><a href="#Docker-rm-命令" class="headerlink" title="Docker rm 命令"></a>Docker rm 命令</h1><a id="more"></a><p><strong>docker rm ：</strong>删除一个或多少容器</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-f :</strong> 通过SIGKILL信号强制删除一个运行中的容器</li><li><strong>-l :</strong> 移除容器间的网络连接，而非容器本身</li><li><strong>-v :</strong> 删除与容器关联的卷</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>强制删除容器 db01、db02</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> rm -f db01 db02</span><br></pre></td></tr></table></figure><p>移除容器 nginx01 对容器 db01 的连接，连接名 db</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">rm</span> -<span class="keyword">l</span> <span class="keyword">db</span></span><br></pre></td></tr></table></figure><p>删除容器 nginx01，并删除容器挂载的数据卷</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -v <span class="symbol">nginx01</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-rm-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-rm-command.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-rm-命令&quot;&gt;&lt;a href=&quot;#Docker-rm-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker rm 命令&quot;&gt;&lt;/a&gt;Docker rm 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker rm 命令" scheme="http://www.gmlyo.com/tags/Docker-rm-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker kill 命令</title>
    <link href="http://www.gmlyo.com/2018/08/31/Docker%20kill%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/08/31/Docker kill 命令/</id>
    <published>2018-08-31T08:50:31.000Z</published>
    <updated>2018-08-31T09:23:14.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-kill-命令"><a href="#Docker-kill-命令" class="headerlink" title="Docker kill 命令"></a>Docker kill 命令</h1><a id="more"></a><p><strong>docker kill :</strong> 杀掉一个运行中的容器。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-s :</strong> 向容器发送一个信号</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>杀掉运行中的容器 mynginx<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">kill</span> -<span class="keyword">s</span> <span class="keyword">KILL</span> mynginx</span><br><span class="line">mynginx</span><br></pre></td></tr></table></figure></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-kill-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-kill-command.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-kill-命令&quot;&gt;&lt;a href=&quot;#Docker-kill-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker kill 命令&quot;&gt;&lt;/a&gt;Docker kill 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker kill 命令" scheme="http://www.gmlyo.com/tags/Docker-kill-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker start/stop/restart 命令</title>
    <link href="http://www.gmlyo.com/2018/08/31/Docker%20start%20stop%20restart%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/08/31/Docker start stop restart 命令/</id>
    <published>2018-08-31T08:46:15.000Z</published>
    <updated>2018-08-31T09:25:57.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-start-stop-restart-命令"><a href="#Docker-start-stop-restart-命令" class="headerlink" title="Docker start/stop/restart 命令"></a>Docker start/stop/restart 命令</h1><a id="more"></a><p><strong>docker start: </strong> 启动一个或多少已经被停止的容器<br><strong>docker stop: </strong> 停止一个运行中的容器<br><strong>docker restart: </strong> 重启容器</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br><span class="line">docker stop <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br><span class="line">docker restart <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>启动已被停止的容器 myrunoob</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="literal">start</span> myrunoob</span><br></pre></td></tr></table></figure><p>停止运行中的容器 myrunoob</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">stop</span> myrunoob</span><br></pre></td></tr></table></figure><p>重启容器 myrunoob</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker restart myrunoob</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-start-stop-restart-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-start-stop-restart-command.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-start-stop-restart-命令&quot;&gt;&lt;a href=&quot;#Docker-start-stop-restart-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker start/stop/restart 命令&quot;&gt;&lt;/a&gt;Docker start/stop/restart 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker start/stop/restart 命令" scheme="http://www.gmlyo.com/tags/Docker-start-stop-restart-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker create 命令</title>
    <link href="http://www.gmlyo.com/2018/08/31/Docker%20create%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/08/31/Docker create 命令/</id>
    <published>2018-08-31T03:00:27.000Z</published>
    <updated>2018-08-31T03:37:05.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-create-命令"><a href="#Docker-create-命令" class="headerlink" title="Docker create 命令"></a>Docker create 命令</h1><a id="more"></a><p><strong>docker create ：</strong>创建一个新的容器但不启动它</p><p>用法同 <a href="https://www.gmlyo.com/2018/08/27/Docker%20run%20%E5%91%BD%E4%BB%A4/">docker run</a></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create <span class="string">[OPTIONS]</span> IMAGE <span class="string">[COMMAND]</span> <span class="string">[ARG...]</span></span><br></pre></td></tr></table></figure><p>语法同 <a href="https://www.gmlyo.com/2018/08/27/Docker%20run%20%E5%91%BD%E4%BB%A4/">docker run</a></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>使用 docker 镜像 nginx:latest 创建一个容器，并将容器命名为 myrunoob</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">create</span>  <span class="comment">--name myrunoob  nginx:latest</span></span><br><span class="line"><span class="number">09</span>b93464c2f75b7b69f83d56a9cfc23ceb50a48a9db7652ee4c27e3e2cb1961f</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-create-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-create-command.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-create-命令&quot;&gt;&lt;a href=&quot;#Docker-create-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker create 命令&quot;&gt;&lt;/a&gt;Docker create 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker create 命令" scheme="http://www.gmlyo.com/tags/Docker-create-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>find 命令结合 exec 和 xargs 使用的区别</title>
    <link href="http://www.gmlyo.com/2018/08/30/find%E5%91%BD%E4%BB%A4%E7%BB%93%E5%90%88exec%E5%92%8Cxargs%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.gmlyo.com/2018/08/30/find命令结合exec和xargs使用的区别/</id>
    <published>2018-08-30T14:11:42.000Z</published>
    <updated>2018-08-30T14:23:52.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="find-命令结合-exec-和-xargs-使用的区别"><a href="#find-命令结合-exec-和-xargs-使用的区别" class="headerlink" title="find 命令结合 exec 和 xargs 使用的区别"></a>find 命令结合 exec 和 xargs 使用的区别</h2><a id="more"></a><table><thead><tr><th></th><th>-exec</th><th>xargs</th></tr></thead><tbody><tr><td>区别一</td><td>该参数是将查找的结果文件名逐个传递给后面的命令执行，如果文件比较多则执行的效率会较低</td><td>该命令是将查找的结果一次性传给后面的命令执行，命令执行效率高，可以使用 -n 参数控制一次传递文件的个数</td></tr><tr><td>区别二</td><td>文件名有空格等特殊字符也照常处理</td><td>处理特殊的文件名（例如：文件名有空格）需要采用特殊的方式<br>(find . -name “edu” -print0</td></tr></tbody></table><p>使用 <code>-exec</code> 选项命令操作示例及结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从命令执行的结果可以看到，每次获得一个文件就输出一次</span></span><br><span class="line">find . -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">echo</span> oldboyedu &#123;&#125; \ ;</span><br><span class="line">oldboyedu ./.viminfo</span><br><span class="line">oldboyedu ./anaconda-ks.cfg</span><br><span class="line">oldboyedu ./install.log</span><br><span class="line">oldboyedu ./install.log.syslog</span><br><span class="line">oldboyedu ./.bash_logout</span><br><span class="line">oldboyedu ./.cshrc</span><br><span class="line">oldboyedu ./ls.txt</span><br><span class="line">oldboyedu ./.bash_history</span><br><span class="line">oldboyedu ./.lesshst</span><br><span class="line">oldboyedu ./oldboy. Log</span><br><span class="line">oldboyedu ./<span class="built_in">test</span>. txt</span><br><span class="line">oldboyedu ./.tcshrc</span><br><span class="line">oldboyedu ./GB2312.txt</span><br><span class="line">oldboyedu ./.bash_profile</span><br><span class="line">oldboyedu ./.bashrc</span><br></pre></td></tr></table></figure><p>使用 <code>xargs</code> 命令操作示例及结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出结果只有一行，xargs 获取到所有文件名一次性输出</span></span><br><span class="line">find . -<span class="built_in">type</span> f | xargs <span class="built_in">echo</span> oldboyedu</span><br><span class="line">oldboyedu ./.viminfo ./anaconda-ks.cfg ./install.log ./install.log.syslog ./.bash_logout ./.cshrc ./ls.txt ./.bash_history ./.lesshst ./oldboy.log ./test.txt ./.tcshrc ./GB2312.txt ./.bash_profile ./.bashrc</span><br></pre></td></tr></table></figure><p><code>xargs</code> 还能控制每行输出的参数个数，示例如下，更多使用方法见 <code>xargs</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 -n 3 指定每次输出 3 个参数</span></span><br><span class="line">find . -<span class="built_in">type</span> f | xargs -n 3 <span class="built_in">echo</span> oldboyedu</span><br><span class="line">oldboyedu ./.viminfo ./anaconda-ks.cfg ./install.log</span><br><span class="line">oldboyedu ././install.log.syslog ./.bash_logout ./.cshrc</span><br><span class="line">oldboyedu ./ls.txt ./.bash_history ./.lesshst</span><br><span class="line">oldboyedu ./oldboy.log ./test.txt ./.tcshrc</span><br><span class="line">oldboyedu ./GB2312.txt ./.bash_profile ./.bashrc</span><br></pre></td></tr></table></figure><p>验证区别二的案例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文件名带有空格的特殊文件</span></span><br><span class="line">touch <span class="string">"oldboy edu"</span></span><br><span class="line">ll -h <span class="string">"oldboy edu"</span></span><br><span class="line">-rw-r--r-- 1 root root 0 May 17 16:30 oldboy edu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -exec 参数正常使用</span></span><br><span class="line">find . -name <span class="string">"*oldboy*"</span> -<span class="built_in">exec</span> ls -lh &#123;&#125; \;</span><br><span class="line">-rw-r--r-- 1 root root 0 May 17 16:30 ./oldboy edu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 xargs 命令无法正常打印</span></span><br><span class="line">find . -name <span class="string">"*edu*"</span> | xargs ls -lh</span><br><span class="line">ls: cannot access ./oldboy: No such file or directory</span><br><span class="line">ls: cannot access edu: No such file or directory</span><br><span class="line">find . -name <span class="string">"*edu*"</span> -print0 | xargs -0 ls -lh</span><br><span class="line">-rw-r--r-- 1 root root 0 May 17 16:30 . /oldboy edu</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;find-命令结合-exec-和-xargs-使用的区别&quot;&gt;&lt;a href=&quot;#find-命令结合-exec-和-xargs-使用的区别&quot; class=&quot;headerlink&quot; title=&quot;find 命令结合 exec 和 xargs 使用的区别&quot;&gt;&lt;/a&gt;find 命令结合 exec 和 xargs 使用的区别&lt;/h2&gt;
    
    </summary>
    
      <category term="Linux笔记" scheme="http://www.gmlyo.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="find 命令结合 exec 和 xargs 使用的区别" scheme="http://www.gmlyo.com/tags/find-%E5%91%BD%E4%BB%A4%E7%BB%93%E5%90%88-exec-%E5%92%8C-xargs-%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>Docker run 命令</title>
    <link href="http://www.gmlyo.com/2018/08/27/Docker%20run%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com/2018/08/27/Docker run 命令/</id>
    <published>2018-08-27T15:17:24.000Z</published>
    <updated>2018-08-31T09:30:07.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-run-命令"><a href="#Docker-run-命令" class="headerlink" title="Docker run 命令"></a>Docker run 命令</h1><a id="more"></a><p><strong>docker run ：</strong>创建一个新的容器并运行一个命令</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="string">[OPTIONS]</span> IMAGE <span class="string">[COMMAND]</span> <span class="string">[ARG...]</span></span><br></pre></td></tr></table></figure><p>OPTIONS 说明：</p><ul><li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-p:</strong> 端口映射，格式为：主机(宿主)端口:容器端口</li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><strong>–name=”nginx-lb”:</strong> 为容器指定一个名称；</li><li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li><li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li><li><strong>-h “mars”:</strong> 指定容器的hostname；</li><li><strong>-e username=”ritchie”:</strong> 设置环境变量；</li><li><strong>–env-file=[]:</strong> 从指定文件读入环境变量；</li><li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”:</strong> 绑定容器到指定CPU运行；</li><li><strong>-m :</strong> 设置容器使用内存最大值；</li><li><strong>–net=”bridge”:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li><li><strong>–link=[]:</strong> 添加链接到另一个容器；</li><li><strong>–expose=[]:</strong> 开放一个端口或一组端口；</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>使用 docker 镜像 nginx:latest 以后台模式启动一个容器,并将容器命名为 mynginx。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> <span class="comment">--name mynginx -d nginx:latest</span></span><br></pre></td></tr></table></figure><p>使用镜像 nginx:latest 以后台模式启动一个容器,并将容器的 80 端口映射到主机随机端口。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -P -d nginx:latest</span></span><br></pre></td></tr></table></figure><p>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口，主机的目录 /data 映射到容器的 /data。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">docker</span> run -p <span class="number">80</span>:<span class="number">80</span> -v /<span class="class"><span class="keyword">data</span>:/<span class="keyword">data</span> -d nginx:latest</span></span><br></pre></td></tr></table></figure><p>绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 127.0.0.1:80:8080/tcp ubuntu bash</span></span><br></pre></td></tr></table></figure><p>使用镜像 nginx:latest 以交互模式启动一个容器,在容器内执行 /bin/bash 命令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -it nginx:latest /bin/bash</span></span><br><span class="line"><span class="bash">root@b8573233d675:/<span class="comment">#</span></span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.runoob.com/docker/docker-run-command.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-run-command.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-run-命令&quot;&gt;&lt;a href=&quot;#Docker-run-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker run 命令&quot;&gt;&lt;/a&gt;Docker run 命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://www.gmlyo.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker run 命令" scheme="http://www.gmlyo.com/tags/Docker-run-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器</title>
    <link href="http://www.gmlyo.com/2018/08/27/Python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://www.gmlyo.com/2018/08/27/Python装饰器/</id>
    <published>2018-08-27T15:17:24.000Z</published>
    <updated>2018-08-30T08:42:45.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-装饰器"><a href="#Python-装饰器" class="headerlink" title="Python 装饰器"></a>Python 装饰器</h2><a id="more"></a><h3 id="什么是装饰器？"><a href="#什么是装饰器？" class="headerlink" title="什么是装饰器？"></a>什么是装饰器？</h3><p>装饰指的是为被装饰对象添加新的功能<br>器指的是工具</p><p>装饰器本身可以是任意可调用对象，被装饰的对象也可以是任意可调用的对象</p><blockquote><p>目的：<br>写一个函数用来为另一个函数添加新功能，需要遵循开放封闭原则<br>对修改（源代码+调用方式）封闭的，对扩展是开放的<br>不修改被装饰对象的源代码<br>不修改被装饰对象的调用方式</p></blockquote><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果（3秒后获得结果）</span></span><br><span class="line">welcome to index page</span><br></pre></td></tr></table></figure><blockquote><p>需求：为 index() 函数增加（装饰）一个统计时间的功能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一个时间段</span></span><br><span class="line">start = time.time()</span><br><span class="line">index()</span><br><span class="line">stop = time.time()</span><br><span class="line">print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.004941940307617</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>time.time()</code> 获取当前时间秒数的表达形式<br>以 1970 年为基准，当前时间减去 1970 年，中间经过的秒数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">print(time.time())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1535380439.073392</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="为无参函数做装饰"><a href="#为无参函数做装饰" class="headerlink" title="为无参函数做装饰"></a>为无参函数做装饰</h3><blockquote><p>为无参函数做装饰</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(func)</span>:</span>  <span class="comment"># func = index</span></span><br><span class="line">    start = time.time()    <span class="comment"># 统计起始时间</span></span><br><span class="line">    func()  <span class="comment"># index()</span></span><br><span class="line">    stop = time.time()     <span class="comment"># 统计结束时间</span></span><br><span class="line">    print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line"></span><br><span class="line">timmer(index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.0023746490478516</span></span><br></pre></td></tr></table></figure><blockquote><p>这里更改了被装饰对象的调用方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func=最原始的index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        func()       <span class="comment"># 最原始的index()</span></span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">f = outter(index)    <span class="comment"># f = wrapper</span></span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.0037789344787598</span></span><br></pre></td></tr></table></figure><blockquote><p>原功能该执行还是执行，并且再加上统计运行时间的功能</p></blockquote><blockquote><p>上面修改了被装饰对象的调用方式<br>把 <code>f=outter(index)</code> 改成 <code>index=outter(index)</code> 就行了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func=最原始的index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        func()       <span class="comment"># 指向最原始的index()</span></span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index = outter(index)    <span class="comment"># index = wrapper</span></span><br><span class="line">index()    <span class="comment"># wrapper()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.0034096240997314</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="为有参函数做装饰"><a href="#为有参函数做装饰" class="headerlink" title="为有参函数做装饰"></a>为有参函数做装饰</h3><blockquote><p>为有参函数做装饰</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'welcome %s to home page'</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index = outter(index)    <span class="comment"># index = wrapper</span></span><br><span class="line">index()</span><br><span class="line"></span><br><span class="line">home = outter(home)</span><br><span class="line">home(<span class="string">'egon'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.003574848175049</span></span><br><span class="line">welcome egon to home page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">2.003159523010254</span></span><br></pre></td></tr></table></figure><h3 id="为有函数返回值的函数做装饰"><a href="#为有函数返回值的函数做装饰" class="headerlink" title="为有函数返回值的函数做装饰"></a>为有函数返回值的函数做装饰</h3><blockquote><p>为有函数返回值的函数做装饰</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'welcome %s to home page'</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index = outter(index)    <span class="comment"># index = wrapper</span></span><br><span class="line">res = index()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">0.5007188320159912</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="装饰器语法糖"><a href="#装饰器语法糖" class="headerlink" title="装饰器语法糖"></a>装饰器语法糖</h3><blockquote><p>在 被装饰对象 正上方，单独一行写上 <code>@装饰器函数名</code><br>Python 会自上而下运行代码<br>一旦运行到 <code>@装饰器函数名</code> 的位置，Python解释器就会立刻将正下方函数当做参数传给 <code>装饰器函数</code><br>然后将返回的结果，重新赋值 给 函数（函数变量名）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer    # index = timmer(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer    # home = timmer(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'welcome %s to home page'</span> % name)</span><br><span class="line"></span><br><span class="line">index = timmer(index)    <span class="comment"># index = wrapper</span></span><br><span class="line">home = timmer(home)</span><br><span class="line"></span><br><span class="line">res = index()</span><br><span class="line">print(res)</span><br><span class="line">home(<span class="string">'egon'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">0.5015261173248291</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line">welcome egon to home page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">1.0023066997528076</span></span><br></pre></td></tr></table></figure><h3 id="认证功能装饰器"><a href="#认证功能装饰器" class="headerlink" title="认证功能装饰器"></a>认证功能装饰器</h3><blockquote><p>为被装饰对象添加认证功能</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_userinfo = &#123;<span class="string">'user'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> current_userinfo[<span class="string">'user'</span>]:</span><br><span class="line">            <span class="comment"># res = func(*args, **kwargs)</span></span><br><span class="line">            <span class="comment"># return res</span></span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        user = input(<span class="string">'please input your username: '</span>).strip()</span><br><span class="line">        pwd = input(<span class="string">'please input your password: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">            print(<span class="string">'login successfull'</span>)</span><br><span class="line">            <span class="comment"># 保存登录状态</span></span><br><span class="line">            current_userinfo[<span class="string">'user'</span>] = user</span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'user or password error'</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter    # index = outter(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter    # home = outter(home)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'welcome %s'</span> % name)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line">res = home(<span class="string">'egon'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">please input your username: egon</span><br><span class="line">please input your password: <span class="number">123</span></span><br><span class="line">login successfull</span><br><span class="line">welcome to index page</span><br><span class="line">welcome egon</span><br></pre></td></tr></table></figure><h3 id="多个装饰器的执行顺序"><a href="#多个装饰器的执行顺序" class="headerlink" title="多个装饰器的执行顺序"></a>多个装饰器的执行顺序</h3><blockquote><p>为一个被装饰对象，同时添加多个装饰器<br>同时添加多个装饰器的执行顺序</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_userinfo = &#123;<span class="string">'user'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(func)</span>:</span>    <span class="comment"># func = wrapper1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper2</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper2......'</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的 index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper1</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper1......'</span>)</span><br><span class="line">        <span class="keyword">if</span> current_userinfo[<span class="string">'user'</span>]:</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        user = input(<span class="string">'please input your username: '</span>).strip()</span><br><span class="line">        pwd = input(<span class="string">'please input your password: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">            print(<span class="string">'login successfull'</span>)</span><br><span class="line">            <span class="comment"># 保存登录状态</span></span><br><span class="line">            current_userinfo[<span class="string">'user'</span>] = user</span><br><span class="line">            res = func(*args, **kwargs)    <span class="comment"># 调用最原始的index</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'user or password error'</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper1</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer    # index = timmer(wrapper1)</span></span><br><span class="line"><span class="meta">@outter    # outter(最原始的index) ==&gt; wrapper1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">index()    <span class="comment"># index ==&gt; wrapper2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">wrapper2......</span><br><span class="line">wrapper1......</span><br><span class="line">please input your username: egon</span><br><span class="line">please input your password: <span class="number">123</span></span><br><span class="line">login successfull</span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">11.453307151794434</span></span><br></pre></td></tr></table></figure><blockquote><p><code>@timmer</code> 在前，<code>@outter</code> 在后<br>代码会统计 <code>outter()</code> 和 <code>index()</code> 的总时间，这不是我们想要的效果<br>我们只要统计 <code>index()</code> 的运行时间</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_userinfo = &#123;<span class="string">'user'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(func)</span>:</span>    <span class="comment"># func = wrapper1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper2</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper2......'</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        print(<span class="string">'run time is %s'</span> % (stop - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的 index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper1</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper1......'</span>)</span><br><span class="line">        <span class="keyword">if</span> current_userinfo[<span class="string">'user'</span>]:</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        user = input(<span class="string">'please input your username: '</span>).strip()</span><br><span class="line">        pwd = input(<span class="string">'please input your password: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">            print(<span class="string">'login successfull'</span>)</span><br><span class="line">            <span class="comment"># 保存登录状态</span></span><br><span class="line">            current_userinfo[<span class="string">'user'</span>] = user</span><br><span class="line">            res = func(*args, **kwargs)    <span class="comment"># 调用最原始的index</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'user or password error'</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper1</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="meta">@timmer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">index()    <span class="comment"># index ==&gt; wrapper2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">wrapper1......</span><br><span class="line">please input your username: egon</span><br><span class="line">egon</span><br><span class="line">please input your password: <span class="number">123</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">login successfull</span><br><span class="line">wrapper2......</span><br><span class="line">welcome to index page</span><br><span class="line">run time <span class="keyword">is</span> <span class="number">3.003432512283325</span></span><br></pre></td></tr></table></figure><blockquote><p><code>@outter</code> 在前，<code>@timmer</code> 在后</p></blockquote><p><strong>总结：可以连续写多个装饰器，处于最顶层的装饰器先执行</strong></p><h3 id="有参装饰器"><a href="#有参装饰器" class="headerlink" title="有参装饰器"></a>有参装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_userinfo = &#123;<span class="string">'user'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(engine = <span class="string">'file'</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的index</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> engine == <span class="string">'file'</span>:</span><br><span class="line">                <span class="keyword">if</span> current_userinfo[<span class="string">'user'</span>]:</span><br><span class="line">                    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">                user = input(<span class="string">'please input your username: '</span>).strip()</span><br><span class="line">                pwd = input(<span class="string">'please input your password: '</span>).strip()</span><br><span class="line">                <span class="keyword">if</span> user == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">                    print(<span class="string">'login successfull'</span>)</span><br><span class="line">                    <span class="comment"># 保存登录状态</span></span><br><span class="line">                    current_userinfo[<span class="string">'user'</span>] = user</span><br><span class="line">                    res = func(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'user or password error'</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">'mysql'</span>:</span><br><span class="line">                print(<span class="string">'mysql 的认证机制'</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">'ldap'</span>:</span><br><span class="line">                print(<span class="string">'ldap 的认证机制'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'不支持该engine'</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outter</span><br><span class="line"></span><br><span class="line">x = auth(engine = <span class="string">'file'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@x    # @autter  # index = outter(最原始的index)  # index = wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">please input your username: egon</span><br><span class="line">please input your password: <span class="number">123</span></span><br><span class="line">login successfull</span><br><span class="line">welcome to index page</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = auth(engine = <span class="string">'mysql'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">mysql 的认证机制</span><br></pre></td></tr></table></figure><blockquote><p>合并一下 <code>x = auth(engine = &#39;file&#39;)</code> 和 <code>@x</code><br><code>auth(engine = &#39;file&#39;)</code><br>这就是有参装饰器</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_userinfo = &#123;<span class="string">'user'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(engine = <span class="string">'file'</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(func)</span>:</span>    <span class="comment"># func = 最原始的index</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> engine == <span class="string">'file'</span>:</span><br><span class="line">                <span class="keyword">if</span> current_userinfo[<span class="string">'user'</span>]:</span><br><span class="line">                    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">                user = input(<span class="string">'please input your username: '</span>).strip()</span><br><span class="line">                pwd = input(<span class="string">'please input your password: '</span>).strip()</span><br><span class="line">                <span class="keyword">if</span> user == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">                    print(<span class="string">'login successfull'</span>)</span><br><span class="line">                    <span class="comment"># 保存登录状态</span></span><br><span class="line">                    current_userinfo[<span class="string">'user'</span>] = user</span><br><span class="line">                    res = func(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'user or password error'</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">'mysql'</span>:</span><br><span class="line">                print(<span class="string">'mysql 的认证机制'</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">'ldap'</span>:</span><br><span class="line">                print(<span class="string">'ldap 的认证机制'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'不支持该engine'</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(engine = 'mysql')    # @autter  # index = outter(最原始的index)  # index = wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'welcome to index page'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(engine = 'file')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'welcome %s'</span> % name)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">index()       <span class="comment"># warpper()</span></span><br><span class="line">home(<span class="string">'egon'</span>)  <span class="comment"># warpper('egon')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">mysql 的认证机制</span><br><span class="line">ldap 的认证机制</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python-装饰器&quot;&gt;&lt;a href=&quot;#Python-装饰器&quot; class=&quot;headerlink&quot; title=&quot;Python 装饰器&quot;&gt;&lt;/a&gt;Python 装饰器&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python装饰器" scheme="http://www.gmlyo.com/tags/Python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python闭包函数</title>
    <link href="http://www.gmlyo.com/2018/08/27/Python%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0/"/>
    <id>http://www.gmlyo.com/2018/08/27/Python闭包函数/</id>
    <published>2018-08-27T11:00:40.000Z</published>
    <updated>2018-08-27T13:57:31.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-闭包函数"><a href="#Python-闭包函数" class="headerlink" title="Python 闭包函数"></a>Python 闭包函数</h2><a id="more"></a><p><strong>前提：函数的作用域关系是在函数定义阶段就已经固定死的，与调用位置无关</strong></p><h3 id="闭包函数介绍"><a href="#闭包函数介绍" class="headerlink" title="闭包函数介绍"></a>闭包函数介绍</h3><blockquote><ol><li>定义在函数的内部的函数</li><li>该内部函数包含对其外层函数作用域名字的引用</li></ol></blockquote><blockquote><p>闭包函数通常需要结合函数对象的概念，将闭包函数返回到外部使用</p></blockquote><p><strong>示例一</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line">x = <span class="number">200</span></span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></p><p><strong>示例二</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">300</span></span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></p><p><strong>示例三</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">300</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">        x = <span class="number">400</span></span><br><span class="line">        f()</span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><blockquote><p><code>闭</code> 指的是 -&gt; 定义在函数的内部的函数<br><code>闭</code> 指的就是将一个函数闭合在另一个函数内部<br><code>包</code> 指的是 -&gt; 该内部函数包含对其外层函数作用域名字的引用</p></blockquote><h3 id="闭包函数的使用"><a href="#闭包函数的使用" class="headerlink" title="闭包函数的使用"></a>闭包函数的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><blockquote><p>闭包函数的基本形式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><p><strong>求两个数的和</strong></p><blockquote><p>直接通过参数为其传值</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum2</span><span class="params">(x, y)</span></span><span class="symbol">:</span></span><br><span class="line">    res = x + y</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">sum2(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>将 值 包给 函数 sum2</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(x, y)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># x = 1</span></span><br><span class="line">    <span class="comment"># y = 2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum2</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">        res = x + y</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> sum2</span><br><span class="line"></span><br><span class="line">sum2 = outter(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">sum2()</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.<span class="built_in">get</span>(<span class="string">'https://www.jd.com'</span>)</span><br><span class="line"><span class="meta"># <span class="meta-keyword">if</span> response.status_code = 200:</span></span><br><span class="line"><span class="built_in">print</span>(response.<span class="built_in">text</span>)</span><br></pre></td></tr></table></figure><blockquote><p>通过参数的形式为函数体传值</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">def <span class="built_in">get</span>(url):</span><br><span class="line">    response = requests.<span class="built_in">get</span>(url)</span><br><span class="line">    <span class="built_in">print</span>(len(response.<span class="built_in">text</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">get</span>(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"><span class="built_in">get</span>(<span class="string">'https://www.jd.com'</span>)</span><br><span class="line"><span class="built_in">get</span>(<span class="string">'https://www.tmall.com'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>将值包给函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># url = 'https://www.jd.com'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        print(len(response.text))</span><br><span class="line">    <span class="keyword">return</span> get</span><br><span class="line"></span><br><span class="line">jd = outter(<span class="string">'https://www.jd.com'</span>)</span><br><span class="line">jd()</span><br><span class="line">jd()</span><br><span class="line">jd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">117377</span></span><br><span class="line"><span class="number">117377</span></span><br><span class="line"><span class="number">117377</span></span><br><span class="line"></span><br><span class="line">baidu = outter(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">baidu()</span><br><span class="line">baidu()</span><br><span class="line">baidu()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">2443</span></span><br><span class="line"><span class="number">2443</span></span><br><span class="line"><span class="number">2443</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> foo</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line">print(f)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python-闭包函数&quot;&gt;&lt;a href=&quot;#Python-闭包函数&quot; class=&quot;headerlink&quot; title=&quot;Python 闭包函数&quot;&gt;&lt;/a&gt;Python 闭包函数&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python闭包函数" scheme="http://www.gmlyo.com/tags/Python%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 函数之 global 与 nonlocal 关键字</title>
    <link href="http://www.gmlyo.com/2018/08/26/Python%E5%87%BD%E6%95%B0%E4%B9%8Bglobal%E4%B8%8Enonlocal%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://www.gmlyo.com/2018/08/26/Python函数之global与nonlocal关键字/</id>
    <published>2018-08-26T03:11:40.000Z</published>
    <updated>2018-08-26T07:51:35.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-函数-global-与-nonlocal-关键字"><a href="#Python-函数-global-与-nonlocal-关键字" class="headerlink" title="Python 函数 global 与 nonlocal 关键字"></a>Python 函数 global 与 nonlocal 关键字</h2><a id="more"></a><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><blockquote><p>global 是用于在函数内去修改全局作用域的名字</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="keyword">func</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = []</span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="keyword">func</span><span class="params">()</span>:</span></span><br><span class="line">    x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 执行结果</span></span><br><span class="line">[]</span><br></pre></td></tr></table></figure><blockquote><p>在局部名称空间，修改一个可变类型的变量名字</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = []</span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="keyword">func</span><span class="params">()</span>:</span></span><br><span class="line">    x.append(<span class="number">1</span>)    <span class="meta"># 在局部名称空间，修改一个可变类型的变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 执行结果</span></span><br><span class="line">[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>局部名称空间</code> 造一个值覆盖全局的变量名字<br><code>global</code> 在局部声明名字是来自于全局的</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="keyword">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x    <span class="meta"># 在 局部名称空间 造一个值覆盖全局的名字</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 执行结果</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h3><blockquote><p><code>global</code> 修改的是 <code>全局名称空间</code> 的所定义 的 名字<br>但无法修改 当前层函数的 外面一层 的 局部名字</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">222</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    x = <span class="number">111</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">        global x</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">    f2()</span><br><span class="line">    print(<span class="string">'f1---&gt;'</span>, x)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">f1---&gt; <span class="number">111</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p><code>nonlocal</code> 声明变量是来自于当前层外层的名字<br>只能找到 当前层函数 的外面一层的 名字<br>如果没有则抛出异常：<code>SyntaxError: no binding for nonlocal &#39;x&#39; found</code><br>必须是在函数内，不能跳出函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">222</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># x = 111</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">    f2()</span><br><span class="line">    print(<span class="string">'f1---&gt;'</span>, x)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">SyntaxError: no binding <span class="keyword">for</span> <span class="keyword">nonlocal</span> <span class="string">'x'</span> found</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">222</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    x = <span class="number">111</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">        nonlocal x</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">    f2()</span><br><span class="line">    print(<span class="string">'f1---&gt;'</span>, x)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">print(<span class="string">'global===&gt;'</span>, x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">f1---&gt; <span class="number">0</span></span><br><span class="line">global===&gt; <span class="number">222</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python-函数-global-与-nonlocal-关键字&quot;&gt;&lt;a href=&quot;#Python-函数-global-与-nonlocal-关键字&quot; class=&quot;headerlink&quot; title=&quot;Python 函数 global 与 nonlocal 关键字&quot;&gt;&lt;/a&gt;Python 函数 global 与 nonlocal 关键字&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python 函数之 global 与 nonlocal 关键字" scheme="http://www.gmlyo.com/tags/Python-%E5%87%BD%E6%95%B0%E4%B9%8B-global-%E4%B8%8E-nonlocal-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>Python名称空间与作用域</title>
    <link href="http://www.gmlyo.com/2018/08/23/Python%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://www.gmlyo.com/2018/08/23/Python名称空间与作用域/</id>
    <published>2018-08-23T11:20:56.000Z</published>
    <updated>2018-08-25T12:19:10.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-名称空间与作用域"><a href="#Python-名称空间与作用域" class="headerlink" title="Python 名称空间与作用域"></a>Python 名称空间与作用域</h2><a id="more"></a><h3 id="什么是名称空间？"><a href="#什么是名称空间？" class="headerlink" title="什么是名称空间？"></a>什么是名称空间？</h3><p>名称空间就是存放名字与值绑定映射关系的地方<br>要取到值必须通过名字才能找到，而名字又在名称空间中存放着，所以在取值时首先是去名称空间中找名字<br>找到了名字就拿到值的内存地址了</p><h3 id="名称空间氛围三种"><a href="#名称空间氛围三种" class="headerlink" title="名称空间氛围三种"></a>名称空间氛围三种</h3><h4 id="内置名称空间"><a href="#内置名称空间" class="headerlink" title="内置名称空间"></a>内置名称空间</h4><blockquote><p>存放的 python 解释器自带的名字<br>生命周期：在解释器启动时生成，在解释器关闭时回收<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(len)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">print</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line">&lt;built-<span class="keyword">in</span> <span class="function"><span class="keyword">function</span></span> len&gt;</span><br><span class="line">&lt;built-<span class="keyword">in</span> <span class="function"><span class="keyword">function</span></span> <span class="built_in">max</span>&gt;</span><br><span class="line">&lt;built-<span class="keyword">in</span> <span class="function"><span class="keyword">function</span></span> <span class="built_in">print</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="全局名称空间"><a href="#全局名称空间" class="headerlink" title="全局名称空间"></a>全局名称空间</h4><blockquote><p>除了内置的与局部的之外的名字，都属于全局名称空间<br>生命周期：在程序文件执行时就立刻生成，在程序执行完毕后就回收</p></blockquote><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">x</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">y</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line">    <span class="attr">x</span> = <span class="number">1</span></span><br><span class="line">    <span class="attr">y</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> y &gt; x:</span><br><span class="line">    <span class="attr">z</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="局部名称空间"><a href="#局部名称空间" class="headerlink" title="局部名称空间"></a>局部名称空间</h4><blockquote><p>存放的是函数内部定义的名字<br>生命周期：在调用函数时临时生成，在调用函数结束后，立刻回收<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h4><blockquote><p>内置名称空间 -&gt; 全局名称空间 -&gt; 局部名称空间</p></blockquote><p><strong>全局查找</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span> = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># len = 100</span></span><br><span class="line">print(<span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> <span class="function"><span class="keyword">function</span> <span class="title">len</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>局部查找</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">len = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    len = <span class="number">2222</span></span><br><span class="line">    print(len)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">2222</span></span><br></pre></td></tr></table></figure><blockquote><p>加载名称空间的目的是为了将名字与值的绑定关系存放起来，存的目的是为取，也就是说，当我们在查找名字时，必然是在三者之一找到</p></blockquote><h4 id="查找顺序"><a href="#查找顺序" class="headerlink" title="查找顺序"></a>查找顺序</h4><blockquote><p>局部名称空间 -&gt; 全局名称空间 -&gt; 内置名称空间<br>基于当前所在的位置往后查找<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = 100</span><br><span class="line">y = 200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：函数的形参名属于局部名称空间</span></span><br><span class="line">def foo(x, y):</span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">foo(1, 2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">1, 2</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><strong>示例一</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 打印 <code>from f2</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from f2'</span>)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>示例二</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 找到局部名称变量 <code>x</code></li><li>打印 <code>from f2 x</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        x = <span class="number">2</span></span><br><span class="line">        print(<span class="string">'from f2'</span>, x)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2 <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>示例三</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 找到 名字变量 <code>x</code></li><li><code>f2()</code> 打印  <code>from f2 1</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># x = 2</span></span><br><span class="line">        print(<span class="string">'from f2'</span>, x)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2 <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>示例四</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 最终没有找到 名字变量 <code>x</code></li><li>抛出异常<code>NameError: name &#39;x&#39; is not defined</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># x = 1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># x = 2</span></span><br><span class="line">        print(<span class="string">'from f2'</span>, x)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">NameError: name <span class="string">'x'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>示例五</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在 全局名称空间 里找到 名字变量 <code>x</code></li><li><code>f2()</code> 打印 <code>from f2 111</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># x = 1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># x = 2</span></span><br><span class="line">        print(<span class="string">'from f2'</span>, x)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2 <span class="number">111</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>示例六</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在 全局名称空间 里找到 名字变量 <code>x</code></li><li><code>f2()</code> 打印 <code>from f2 111</code><br>注：名称空间并不是往上找，只要有就能找到<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># x = 1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># x = 2</span></span><br><span class="line">        print(<span class="string">'from f2'</span>, x)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">x = <span class="number">111</span></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2 <span class="number">111</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>示例七</strong></p><blockquote><p>顺序</p><ol><li>调用 <code>f1()</code> 找到  <code>f2()</code></li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在局部名称空间没有 名字变量 <code>x</code>，继续往外层寻找</li><li><code>f2()</code> 在 全局名称空间 里找到 名字变量 <code>x</code></li><li>名字变量 <code>x=2222</code> 被重新赋值 <code>x=111</code></li><li><code>f2()</code> 打印 <code>from f2 111</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">2222</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># x = 1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># x = 2</span></span><br><span class="line">        print(<span class="string">'from f2'</span>, x)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">x = <span class="number">111</span></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2 <span class="number">111</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote><p>域是范围，作用域指的是作用范围</p></blockquote><h4 id="分为两大类"><a href="#分为两大类" class="headerlink" title="分为两大类"></a>分为两大类</h4><h5 id="全局作用范围"><a href="#全局作用范围" class="headerlink" title="全局作用范围"></a>全局作用范围</h5><blockquote><p>包含 <code>内置名称空间</code> 与 <code>全局名称空间</code> 中的名字<br>特点：全局有效，全局存活<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">            print(len)</span><br><span class="line">        f3()</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(len)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;build-<span class="keyword">in</span> function len&gt;</span><br><span class="line">&lt;build-<span class="keyword">in</span> function len&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>内置名字，具备一个特点，无论在任何位置，都能访问的到<br>这叫全局有效</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">            print(x)</span><br><span class="line">        f3()</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="局部作用范围"><a href="#局部作用范围" class="headerlink" title="局部作用范围"></a>局部作用范围</h5><blockquote><p>包含 <code>局部名称空间</code> 的名字<br>特点：局部有效，临时存活</p></blockquote><h5 id="gloabls-与-locals"><a href="#gloabls-与-locals" class="headerlink" title="gloabls 与 locals"></a>gloabls 与 locals</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(globals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> function globals&gt;</span><br></pre></td></tr></table></figure><blockquote><p>返回 <code>全局作用域</code> 中的名字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1111111111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(globals())    <span class="comment"># 返回 全局作用域 中的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> function globals&gt;</span><br><span class="line">&#123;<span class="string">'__name__'</span>: <span class="string">'__main__'</span>, <span class="string">'__doc__'</span>: <span class="keyword">None</span>, <span class="string">'__package__'</span>: <span class="keyword">None</span>, <span class="string">'__loader__'</span>: &lt;_frozen_importlib_external.SourceFileLoader object at <span class="number">0x7fa1f58357f0</span>&gt;, <span class="string">'__spec__'</span>: <span class="keyword">None</span>, <span class="string">'__annotations__'</span>: &#123;&#125;, <span class="string">'__builtins__'</span>: &lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">'__file__'</span>: <span class="string">'/data/app/SH_weekend_s2/day04/04_名称空间与作用域.py'</span>, <span class="string">'__cached__'</span>: <span class="keyword">None</span>, <span class="string">'x'</span>: <span class="number">1111111111</span>, <span class="string">'foo'</span>: &lt;function foo at <span class="number">0x7fa1f5766bf8</span>&gt;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看 <code>全局名称空间</code> 包含的 <code>内置名称空间</code> 的名字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1111111111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(dir(globals()[<span class="string">'__builtins__'</span>]))  <span class="comment"># 返回 全局作用域中 包含的 内置名称空间 的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'ArithmeticError'</span>, <span class="string">'AssertionError'</span>, <span class="string">'AttributeError'</span>, <span class="string">'BaseException'</span>, <span class="string">'BlockingIOError'</span>, <span class="string">'BrokenPipeError'</span>, <span class="string">'BufferError'</span>, <span class="string">'BytesWarning'</span>, <span class="string">'ChildProcessError'</span>, <span class="string">'ConnectionAbortedError'</span>, <span class="string">'ConnectionError'</span>, <span class="string">'ConnectionRefusedError'</span>, <span class="string">'ConnectionResetError'</span>, <span class="string">'DeprecationWarning'</span>, <span class="string">'EOFError'</span>, <span class="string">'Ellipsis'</span>, <span class="string">'EnvironmentError'</span>, <span class="string">'Exception'</span>, <span class="string">'False'</span>, <span class="string">'FileExistsError'</span>, <span class="string">'FileNotFoundError'</span>, <span class="string">'FloatingPointError'</span>, <span class="string">'FutureWarning'</span>, <span class="string">'GeneratorExit'</span>, <span class="string">'IOError'</span>, <span class="string">'ImportError'</span>, <span class="string">'ImportWarning'</span>, <span class="string">'IndentationError'</span>, <span class="string">'IndexError'</span>, <span class="string">'InterruptedError'</span>, <span class="string">'IsADirectoryError'</span>, <span class="string">'KeyError'</span>, <span class="string">'KeyboardInterrupt'</span>, <span class="string">'LookupError'</span>, <span class="string">'MemoryError'</span>, <span class="string">'ModuleNotFoundError'</span>, <span class="string">'NameError'</span>, <span class="string">'None'</span>, <span class="string">'NotADirectoryError'</span>, <span class="string">'NotImplemented'</span>, <span class="string">'NotImplementedError'</span>, <span class="string">'OSError'</span>, <span class="string">'OverflowError'</span>, <span class="string">'PendingDeprecationWarning'</span>, <span class="string">'PermissionError'</span>, <span class="string">'ProcessLookupError'</span>, <span class="string">'RecursionError'</span>, <span class="string">'ReferenceError'</span>, <span class="string">'ResourceWarning'</span>, <span class="string">'RuntimeError'</span>, <span class="string">'RuntimeWarning'</span>, <span class="string">'StopAsyncIteration'</span>, <span class="string">'StopIteration'</span>, <span class="string">'SyntaxError'</span>, <span class="string">'SyntaxWarning'</span>, <span class="string">'SystemError'</span>, <span class="string">'SystemExit'</span>, <span class="string">'TabError'</span>, <span class="string">'TimeoutError'</span>, <span class="string">'True'</span>, <span class="string">'TypeError'</span>, <span class="string">'UnboundLocalError'</span>, <span class="string">'UnicodeDecodeError'</span>, <span class="string">'UnicodeEncodeError'</span>, <span class="string">'UnicodeError'</span>, <span class="string">'UnicodeTranslateError'</span>, <span class="string">'UnicodeWarning'</span>, <span class="string">'UserWarning'</span>, <span class="string">'ValueError'</span>, <span class="string">'Warning'</span>, <span class="string">'ZeroDivisionError'</span>, <span class="string">'__build_class__'</span>, <span class="string">'__debug__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__import__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'abs'</span>, <span class="string">'all'</span>, <span class="string">'any'</span>, <span class="string">'ascii'</span>, <span class="string">'bin'</span>, <span class="string">'bool'</span>, <span class="string">'breakpoint'</span>, <span class="string">'bytearray'</span>, <span class="string">'bytes'</span>, <span class="string">'callable'</span>, <span class="string">'chr'</span>, <span class="string">'classmethod'</span>, <span class="string">'compile'</span>, <span class="string">'complex'</span>, <span class="string">'copyright'</span>, <span class="string">'credits'</span>, <span class="string">'delattr'</span>, <span class="string">'dict'</span>, <span class="string">'dir'</span>, <span class="string">'divmod'</span>, <span class="string">'enumerate'</span>, <span class="string">'eval'</span>, <span class="string">'exec'</span>, <span class="string">'exit'</span>, <span class="string">'filter'</span>, <span class="string">'float'</span>, <span class="string">'format'</span>, <span class="string">'frozenset'</span>, <span class="string">'getattr'</span>, <span class="string">'globals'</span>, <span class="string">'hasattr'</span>, <span class="string">'hash'</span>, <span class="string">'help'</span>, <span class="string">'hex'</span>, <span class="string">'id'</span>, <span class="string">'input'</span>, <span class="string">'int'</span>, <span class="string">'isinstance'</span>, <span class="string">'issubclass'</span>, <span class="string">'iter'</span>, <span class="string">'len'</span>, <span class="string">'license'</span>, <span class="string">'list'</span>, <span class="string">'locals'</span>, <span class="string">'map'</span>, <span class="string">'max'</span>, <span class="string">'memoryview'</span>, <span class="string">'min'</span>, <span class="string">'next'</span>, <span class="string">'object'</span>, <span class="string">'oct'</span>, <span class="string">'open'</span>, <span class="string">'ord'</span>, <span class="string">'pow'</span>, <span class="string">'print'</span>, <span class="string">'property'</span>, <span class="string">'quit'</span>, <span class="string">'range'</span>, <span class="string">'repr'</span>, <span class="string">'reversed'</span>, <span class="string">'round'</span>, <span class="string">'set'</span>, <span class="string">'setattr'</span>, <span class="string">'slice'</span>, <span class="string">'sorted'</span>, <span class="string">'staticmethod'</span>, <span class="string">'str'</span>, <span class="string">'sum'</span>, <span class="string">'super'</span>, <span class="string">'tuple'</span>, <span class="string">'type'</span>, <span class="string">'vars'</span>, <span class="string">'zip'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看 <code>局部作用域</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1111111111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(locals() <span class="keyword">is</span> globals())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在全局作用范围内查看，<code>locals()</code> 和 <code>gloables()</code> 是一样的<br>全局查看就是 优先查看自己，再查看局部的<br>在全局作用范围查看检索范围就是 全局名称空间，以及内置名称空间<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1111111111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    y = <span class="number">2</span></span><br><span class="line">    print(locals())</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="string">'y'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="打破函数层级限制的解决方案"><a href="#打破函数层级限制的解决方案" class="headerlink" title="打破函数层级限制的解决方案"></a>打破函数层级限制的解决方案</h3><blockquote><p>如何打破函数层级的访问限制？<br>让能够在任意位置都可以访问到一个内部函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>)</span><br><span class="line">    inner()</span><br><span class="line"></span><br><span class="line">outter()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> inner</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>如何在任何位置都能访问到 inner() 函数？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function outter.&lt;locals&gt;.inner at <span class="number">0x7f2b7b0a0c80</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>返回 inner() 的存地址<br>return inner，注意这里 inner 不能加括号<br>然后调用 <code>outter()</code> 函数，将其赋值给 一个 <code>全局名称空间</code> 的名字变量<br>打印这个名字变量，输出 <code>inner()</code> 的内存地址</p></blockquote><blockquote><p>名字变量 加 <code>括号</code> 执行，就可以访问 内部函数<code>inner()</code> 内的内容了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> inner</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>定义个 <code>全局名称空间</code> foo() 函数<br>通过 foo() 调用 <code>全局名称空间</code> 的 名字变量 <code>f</code>，也能访问到 内部函数inner() 内的内容了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(f)</span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function outter.&lt;locals&gt;.inner at <span class="number">0x7f8aaa6f6c80</span>&gt;</span><br><span class="line"><span class="keyword">from</span> inner</span><br></pre></td></tr></table></figure><p><strong>基于函数对象的概念将一个内部函数返回到全局使用，从而打破了函数的的层级限制</strong></p><blockquote><p>也可以将 内部函数 inner() 返回到 foo() 内</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    f = outter()</span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> inner</span><br></pre></td></tr></table></figure><p><strong>函数的作用域关系是在函数定义阶段就已经固定死的，与函数的调用位置无关</strong><br><strong>即在调用函数时，一定要跑到定义函数的位置寻找作用域关系</strong></p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><strong>示例一</strong></p><blockquote><p>注意查看 x 变量的位置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>, x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">222</span></span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> inner <span class="number">111</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>示例二</strong></p><blockquote><p>注意查看 x 变量的位置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">33333</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>, x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">222</span></span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> inner <span class="number">33333</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>示例三</strong></p><blockquote><p>注意查看 x 变量的位置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">111</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from inner'</span>, x)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">x = <span class="number">4444</span></span><br><span class="line">f = outter()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">222</span></span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> inner <span class="number">4444</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python-名称空间与作用域&quot;&gt;&lt;a href=&quot;#Python-名称空间与作用域&quot; class=&quot;headerlink&quot; title=&quot;Python 名称空间与作用域&quot;&gt;&lt;/a&gt;Python 名称空间与作用域&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python名称空间与作用域" scheme="http://www.gmlyo.com/tags/Python%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Python 函数嵌套</title>
    <link href="http://www.gmlyo.com/2018/08/21/Python%E5%87%BD%E6%95%B0%E5%B5%8C%E5%A5%97/"/>
    <id>http://www.gmlyo.com/2018/08/21/Python函数嵌套/</id>
    <published>2018-08-21T08:07:37.000Z</published>
    <updated>2018-08-21T08:07:51.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-函数嵌套"><a href="#Python-函数嵌套" class="headerlink" title="Python 函数嵌套"></a>Python 函数嵌套</h2><a id="more"></a><h3 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h3><blockquote><p>在调用一个函数时，其内部的代码又调用了其他的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from bar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> foo</span><br><span class="line"><span class="keyword">from</span> bar</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>求两个数的最大值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>求四个数的最大值<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def <span class="keyword">max</span><span class="number">4</span>(a, b, <span class="keyword">c</span>, d):</span><br><span class="line">    res<span class="number">1</span> = <span class="keyword">max</span><span class="number">2</span>(a, b):</span><br><span class="line">    res<span class="number">2</span> = <span class="keyword">max</span><span class="number">2</span>(res<span class="number">1</span>, <span class="keyword">c</span>)</span><br><span class="line">    res<span class="number">3</span> = <span class="keyword">max</span><span class="number">2</span>(res<span class="number">2</span>, d)</span><br><span class="line">    return res<span class="number">3</span></span><br><span class="line"></span><br><span class="line">print(<span class="keyword">max</span><span class="number">4</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="函数的嵌套定义"><a href="#函数的嵌套定义" class="headerlink" title="函数的嵌套定义"></a>函数的嵌套定义</h3><blockquote><p>在一个函数的内部又定义了另外一个函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from f2'</span>)</span><br><span class="line"></span><br><span class="line">print(f1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function f1 at <span class="number">0x00000288E1A51E18</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from f2'</span>)</span><br><span class="line">    print(x)</span><br><span class="line">    print(f2)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&lt;function f1.&lt;locals&gt;.f2 at <span class="number">0x0000024BD90F89D8</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'from f2'</span>)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python-函数嵌套&quot;&gt;&lt;a href=&quot;#Python-函数嵌套&quot; class=&quot;headerlink&quot; title=&quot;Python 函数嵌套&quot;&gt;&lt;/a&gt;Python 函数嵌套&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python 函数嵌套" scheme="http://www.gmlyo.com/tags/Python-%E5%87%BD%E6%95%B0%E5%B5%8C%E5%A5%97/"/>
    
  </entry>
  
  <entry>
    <title>Python 函数对象</title>
    <link href="http://www.gmlyo.com/2018/08/20/Python%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/"/>
    <id>http://www.gmlyo.com/2018/08/20/Python函数对象/</id>
    <published>2018-08-20T09:56:49.000Z</published>
    <updated>2018-08-20T23:52:52.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-函数对象"><a href="#Python-函数对象" class="headerlink" title="Python 函数对象"></a>Python 函数对象</h2><a id="more"></a><blockquote><p>函数是第一类对象，意味着函数可以当做数据去使用</p></blockquote><h3 id="可以被引用"><a href="#可以被引用" class="headerlink" title="可以被引用"></a>可以被引用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line"></span><br><span class="line">print(foo)</span><br><span class="line">func = foo</span><br><span class="line">print(func)</span><br><span class="line">func()    <span class="comment"># 加括号运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function foo at <span class="number">0x00000221E334E18</span>&gt;</span><br><span class="line">&lt;function foo at <span class="number">0x00000221E334E18</span>&gt;</span><br><span class="line"><span class="keyword">from</span> foo</span><br></pre></td></tr></table></figure><h3 id="可以当做参数传给另外一个函数"><a href="#可以当做参数传给另外一个函数" class="headerlink" title="可以当做参数传给另外一个函数"></a>可以当做参数传给另外一个函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x)</span>:</span>    <span class="comment"># x=foo 的内存地址</span></span><br><span class="line">    print(x)</span><br><span class="line">    x()    <span class="comment"># 在调用 bar 的时候触发 foo</span></span><br><span class="line"></span><br><span class="line">bar(foo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function foo at <span class="number">0x00000221E334E18</span>&gt;</span><br><span class="line"><span class="keyword">from</span> foo</span><br></pre></td></tr></table></figure><h3 id="可以当作函数的返回值"><a href="#可以当作函数的返回值" class="headerlink" title="可以当作函数的返回值"></a>可以当作函数的返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> foo</span><br><span class="line"></span><br><span class="line">f = bar()</span><br><span class="line">print(f)</span><br><span class="line">print(f <span class="keyword">is</span> foo)</span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function foo at <span class="number">0x00000221E334E18</span>&gt;</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">from</span> foo</span><br></pre></td></tr></table></figure><h3 id="可以当作容器类型的元素"><a href="#可以当作容器类型的元素" class="headerlink" title="可以当作容器类型的元素"></a>可以当作容器类型的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f2'</span>)</span><br><span class="line"></span><br><span class="line">l = [f1, f2]</span><br><span class="line">print(l)</span><br><span class="line">l[<span class="number">1</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[&lt;function f1 at <span class="number">0x000001E9A24A89D8</span>&gt;, &lt;function f2 at <span class="number">0x000001E9A24A8A60</span>&gt;]</span><br><span class="line"><span class="keyword">from</span> f2</span><br></pre></td></tr></table></figure><h3 id="示例（基于函数对象思想）"><a href="#示例（基于函数对象思想）" class="headerlink" title="示例（基于函数对象思想）"></a>示例（基于函数对象思想）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'pay function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'withdraw'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'auth function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shopping</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'shopping function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transer</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'transfer function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"""</span></span><br><span class="line"><span class="string">    1 支付</span></span><br><span class="line"><span class="string">    2 取款</span></span><br><span class="line"><span class="string">    3 购物</span></span><br><span class="line"><span class="string">    4 转账</span></span><br><span class="line"><span class="string">    5 退出</span></span><br><span class="line"><span class="string">    """</span>)</span><br><span class="line">    choice = input(<span class="string">'请输入您要执行的操作：'</span>).strip()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">'1'</span>:</span><br><span class="line">        pay()</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">'2'</span>:</span><br><span class="line">        withdraw()</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">'3'</span>:</span><br><span class="line">        shopping()</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">'4'</span>:</span><br><span class="line">        transfer()</span><br><span class="line">    <span class="keyword">elif</span> choice == <span class="string">"5"</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'输入错误，请重新输入'</span>)</span><br></pre></td></tr></table></figure><p><strong>示例优化01</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'pay function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'withdraw'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'auth function'</span>)</span><br><span class="line"></span><br><span class="line">func_dic = &#123;&#125;</span><br><span class="line">    <span class="string">'1'</span>: pay, </span><br><span class="line">    <span class="string">'2'</span>: withdraw, </span><br><span class="line">    <span class="string">'3'</span>: auth</span><br><span class="line"></span><br><span class="line">print(func_dic)</span><br><span class="line">func_dic[<span class="string">'2'</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="string">'1'</span>: &lt;function pay at <span class="number">0x0000029EF7F589D8</span>&gt;, <span class="string">'2'</span>: &lt;function withdraw at <span class="number">0x0000029EF7F58A60</span>&gt;, <span class="string">'3'</span>: &lt;function auth at <span class="number">0x0000029EF7F58AE8</span>&gt;&#125;</span><br><span class="line">withdraw function</span><br></pre></td></tr></table></figure><p><strong>示例优化02</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'pay function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'withdraw'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'auth function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shopping</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'shopping function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transer</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'transfer function'</span>)</span><br><span class="line"></span><br><span class="line">func_dic = &#123;</span><br><span class="line">    <span class="string">'1'</span>: pay, </span><br><span class="line">    <span class="string">'2'</span>: withdraw, </span><br><span class="line">    <span class="string">'3'</span>: auth,</span><br><span class="line">    <span class="string">'4'</span>: shopping,</span><br><span class="line">    <span class="string">'5'</span>: transfer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"""</span></span><br><span class="line"><span class="string">    1 支付</span></span><br><span class="line"><span class="string">    2 取款</span></span><br><span class="line"><span class="string">    3 认证</span></span><br><span class="line"><span class="string">    4 购物</span></span><br><span class="line"><span class="string">    5 转账</span></span><br><span class="line"><span class="string">    """</span>)</span><br><span class="line">    choice = input(<span class="string">'请输入您要执行的操作（按q退出）：'</span>).strip()    <span class="comment"># choice = '1'</span></span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">'q'</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> choice <span class="keyword">not</span> <span class="keyword">in</span> func_dic:</span><br><span class="line">        print(<span class="string">'输入错误，请重新输入'</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    func_dic[choice]()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python-函数对象&quot;&gt;&lt;a href=&quot;#Python-函数对象&quot; class=&quot;headerlink&quot; title=&quot;Python 函数对象&quot;&gt;&lt;/a&gt;Python 函数对象&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python 函数对象" scheme="http://www.gmlyo.com/tags/Python-%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>
