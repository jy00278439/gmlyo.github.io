<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>G加菲</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.gmlyo.com/"/>
  <updated>2018-08-20T04:30:58.008Z</updated>
  <id>http://www.gmlyo.com/</id>
  
  <author>
    <name>G加菲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 函数参数-命名关键字参数</title>
    <link href="http://www.gmlyo.com//blog/2018/08/20/Python%20%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0-%E5%91%BD%E5%90%8D%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%82%E6%95%B0/"/>
    <id>http://www.gmlyo.com//blog/2018/08/20/Python 函数参数-命名关键字参数/</id>
    <published>2018-08-20T03:39:10.000Z</published>
    <updated>2018-08-20T04:30:58.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-函数参数-命名关键字参数"><a href="#Python-函数参数-命名关键字参数" class="headerlink" title="Python 函数参数-命名关键字参数"></a>Python 函数参数-命名关键字参数</h2><h3 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h3><a id="more"></a><h4 id="函数参数格式"><a href="#函数参数格式" class="headerlink" title="函数参数格式"></a>函数参数格式</h4><blockquote><p><code>def foo(位置形参, 默认形参, **args, 命名关键字参数, **kwargs)</code></p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, <span class="attribute">y</span>=1, *<span class="number">*a</span>rgs, m, **kwargs):</span><br><span class="line">    <span class="builtin-name">print</span>(x, y, args, m, kwargs)</span><br></pre></td></tr></table></figure><blockquote><p><code>m</code> 为 命名关键字参数</p></blockquote><blockquote><p>命名关键字参数：<br>凡是在 <code>*</code> 后 <code>**</code> 之前定义的的参数称之为 命名关键字参数<br><code>注意：</code> 在调用函数时，传值的形式必须是 key=value 的形式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, *, m, n)</span>:</span></span><br><span class="line">    print(x, y, m, n)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: foo() takes <span class="number">2</span> positional arguments but <span class="number">4</span> were given</span><br></pre></td></tr></table></figure><blockquote><p>需要改成</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y, *, m, n):</span><br><span class="line">    <span class="builtin-name">print</span>(x, y, m, n)</span><br><span class="line"></span><br><span class="line">foo(1, 2, <span class="attribute">n</span>=3, <span class="attribute">m</span>=4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">1 2 4 3</span><br></pre></td></tr></table></figure><blockquote><p>以下 m=1 表示为命名关键字参数指定一个默认值</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y, *, <span class="attribute">m</span>=1, n):</span><br><span class="line">    <span class="builtin-name">print</span>(x, y, m, n)</span><br><span class="line"></span><br><span class="line">foo(1, 2, <span class="attribute">n</span>=3)    # <span class="attribute">m</span>=1 命名关键字参数有值了，可以不传值</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">1 2 1 3</span><br></pre></td></tr></table></figure><h4 id="命名关键字参数示例"><a href="#命名关键字参数示例" class="headerlink" title="命名关键字参数示例"></a>命名关键字参数示例</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y, <span class="number">*a</span>rgs, <span class="attribute">m</span>=1, n):</span><br><span class="line">    <span class="builtin-name">print</span>(x, y, m, n)</span><br><span class="line">    <span class="builtin-name">print</span>(args)</span><br><span class="line"></span><br><span class="line">foo(1, 2, 3, 4, 5, <span class="attribute">n</span>=222, <span class="attribute">m</span>=11)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">1 2 11 222</span><br><span class="line">(3, 4, 5)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y=<span class="number">1</span>, *args, m, **kwargs)</span>:</span></span><br><span class="line">    print(x, y, args, m, kwargs)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, m=<span class="number">200</span>, n=<span class="number">300</span>, a=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="number">200</span> &#123;<span class="string">'n'</span>: <span class="number">300</span>, <span class="string">'a'</span>: <span class="number">400</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="常用函数参数形式"><a href="#常用函数参数形式" class="headerlink" title="常用函数参数形式"></a>常用函数参数形式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    index(*args, **kwargs)</span><br></pre></td></tr></table></figure><blockquote><p>示例：求和函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> args:</span><br><span class="line">        res += item</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python-函数参数-命名关键字参数&quot;&gt;&lt;a href=&quot;#Python-函数参数-命名关键字参数&quot; class=&quot;headerlink&quot; title=&quot;Python 函数参数-命名关键字参数&quot;&gt;&lt;/a&gt;Python 函数参数-命名关键字参数&lt;/h2&gt;&lt;h3 id=&quot;命名关键字参数&quot;&gt;&lt;a href=&quot;#命名关键字参数&quot; class=&quot;headerlink&quot; title=&quot;命名关键字参数&quot;&gt;&lt;/a&gt;命名关键字参数&lt;/h3&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python 函数参数-命名关键字参数" scheme="http://www.gmlyo.com/tags/Python-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0-%E5%91%BD%E5%90%8D%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python函数参数-可变长参数</title>
    <link href="http://www.gmlyo.com//blog/2018/08/15/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0-%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/"/>
    <id>http://www.gmlyo.com//blog/2018/08/15/Python函数参数-可变长参数/</id>
    <published>2018-08-15T07:24:51.000Z</published>
    <updated>2018-08-15T12:56:05.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python函数参数-可变长参数"><a href="#Python函数参数-可变长参数" class="headerlink" title="Python函数参数-可变长参数"></a>Python函数参数-可变长参数</h2><a id="more"></a><h3 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h3><blockquote><p>指的是在调用函数时，传入的实参个数可以不固定<br>实参两种形式：</p><ol><li>位置实参</li><li>关键字实参<br>所以对应的，形参也必须对应两种解决方案，专门用于接收溢出的位置实参和关键字实参</li></ol></blockquote><h3 id="接收溢出的位置实参"><a href="#接收溢出的位置实参" class="headerlink" title="接收溢出的位置实参"></a>接收溢出的位置实参</h3><blockquote><p><code>星（*）</code>：接收溢出的位置实参，存成元组类型，然后赋值给（<code>*</code>）后边跟的那个变量名</p></blockquote><h4 id="用法一：在形参中使用（-）"><a href="#用法一：在形参中使用（-）" class="headerlink" title="用法一：在形参中使用（*）"></a>用法一：在形参中使用（*）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, *args)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)    <span class="comment"># 3, 4, 5 是溢出的</span></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span>, <span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)    <span class="comment"># 3, 4, 5, 6, 7, 8, 9 是溢出的</span></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><h4 id="用法二：在实参中用（-）"><a href="#用法二：在实参中用（-）" class="headerlink" title="用法二：在实参中用（*）"></a>用法二：在实参中用（*）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, *args)</span>:</span>    <span class="comment"># args = ((3, 4, 5, 6, 7, 8, 9))</span></span><br><span class="line">    print(x, y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><blockquote><p>实参中使用星（*），将实参打散成位置实参，再传值给形参</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, *args)</span>:</span>    <span class="comment"># args = (3, 4, 5, 6, 7, 8, 9)</span></span><br><span class="line">    print(x, y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, *(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))    <span class="comment"># foo(1, 2, 3, 4, 5, 6, 7, 8, 9)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, *args)</span>:</span>    <span class="comment"># args = (3, 4, 5,)</span></span><br><span class="line">    print(x, y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, *[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])    <span class="comment"># foo(1, 2, 3, 4, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">def</span> <span class="selector-tag">foo</span>(x, y, *args):</span><br><span class="line">    <span class="selector-tag">print</span>(x, y)</span><br><span class="line">    <span class="selector-tag">print</span>(z)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">foo</span>(<span class="number">1</span>, <span class="number">2</span>, *<span class="string">'abc'</span>)  # <span class="selector-tag">foo</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line"><span class="selector-tag">1</span> <span class="selector-tag">2</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><h4 id="注意以下传参问题："><a href="#注意以下传参问题：" class="headerlink" title="注意以下传参问题："></a>注意以下传参问题：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, *(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))    <span class="comment"># foo(1, 2, 3, 4, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: foo() takes <span class="number">2</span> positional arguments but <span class="number">5</span> were given</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">foo(*(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># foo(1, 2, 3, 4, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: foo() takes <span class="number">2</span> positional arguments but <span class="number">5</span> were given</span><br></pre></td></tr></table></figure><blockquote><p>示例：求和函数，传一堆数字，求这堆数字的和</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def my_sum(*<span class="keyword">args</span>):</span><br><span class="line">    <span class="keyword">res</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n in arg<span class="variable">s:</span></span><br><span class="line">        <span class="keyword">res</span> = <span class="keyword">res</span> + n</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">res</span></span><br><span class="line"></span><br><span class="line">res1 = my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">res2 = my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">res3 = my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(res1)</span><br><span class="line"><span class="keyword">print</span>(res2)</span><br><span class="line"><span class="keyword">print</span>(res3)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><h3 id="接收溢出的关键字实参"><a href="#接收溢出的关键字实参" class="headerlink" title="接收溢出的关键字实参"></a>接收溢出的关键字实参</h3><blockquote><p><code>星星（**）</code>：接收溢出的关键字实参，存成字典类型，然后赋值给（<code>**</code>）后面跟的那个变量名</p></blockquote><h4 id="用法一：在形参中使用（-）-1"><a href="#用法一：在形参中使用（-）-1" class="headerlink" title="用法一：在形参中使用（**）"></a>用法一：在形参中使用（<code>**</code>）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, **kwargs)</span>:</span>    <span class="comment"># kwargs=&#123;'a':2, 'b':4, 'c':4&#125;</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, a=<span class="number">2</span>, b=<span class="number">3</span>, c=<span class="number">4</span>, y=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">2</span>, <span class="string">'b'</span>: <span class="number">4</span>, <span class="string">'c'</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="用法二：在实参中使用（-）"><a href="#用法二：在实参中使用（-）" class="headerlink" title="用法二：在实参中使用（**）"></a>用法二：在实参中使用（<code>**</code>）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, **kwargs)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, &#123;<span class="string">'a'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">10</span>, <span class="string">'y'</span>:<span class="number">111</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="string">'a'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">10</span>, <span class="string">'y'</span>:<span class="number">111</span>&#125;</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1 赋值给了 x<br>{‘a’:2, ‘c’:3, ‘b’:10, ‘y’:111} 赋值给了 y<br>没有溢出的关键字参数，所以 **kwargs 为空</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, **kwargs)</span>:</span>    <span class="comment"># kwargs=&#123;'a':2, 'c':3, 'b':10&#125;</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, **&#123;<span class="string">'a'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">10</span>, <span class="string">'y'</span>:<span class="number">111</span>&#125;)  <span class="comment"># foo&#123;1, y=111, a=2, b=10, c=3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">111</span></span><br><span class="line">&#123;<span class="string">'a'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">10</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1 赋值给了 x<br>111 赋值给了 y<br>{‘a’:2, ‘c’:3, ‘b’:10} 为溢出的关键字参数，赋值给了 **kwargs</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, **kwargs)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, **&#123;<span class="string">'a'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;)  <span class="comment"># foo(1, c=3, a=2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: foo() missing <span class="number">1</span> required positional argument: <span class="string">'y'</span></span><br><span class="line">缺少<span class="number">1</span>个所需的位置参数：<span class="string">'y'</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：把字典里的每个值取出来，分别赋值给 x, y, z</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">foo(d[<span class="string">'x'</span>], d[<span class="string">'y'</span>], d[<span class="string">'z'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">foo(**d)  <span class="comment"># foo(x=1, y=2, z=3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>, <span class="string">'a'</span>: <span class="number">10</span>&#125;</span><br><span class="line">foo(**d)  <span class="comment"># foo(x=1, y=2, z=3, a=10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: foo() got an unexpected keyword argument: <span class="string">'a'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>,&#125;</span><br><span class="line">foo(**d)  <span class="comment"># foo(x=1, y=2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">TypeError: foo() missing <span class="number">1</span> required positional argument: <span class="string">'z'</span></span><br></pre></td></tr></table></figure><h3 id="接收任意形式，任意长度的参数"><a href="#接收任意形式，任意长度的参数" class="headerlink" title="接收任意形式，任意长度的参数"></a>接收任意形式，任意长度的参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args, **kwargs)</span>:</span>  <span class="comment"># args=(1, 2, 3)</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>示例场景</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def <span class="built_in">index</span>(name, gender):</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'welcome %s gender is %s'</span> % (name, gender))</span><br><span class="line"></span><br><span class="line">def wrapper(*<span class="keyword">args</span>, **kwargs):  # <span class="keyword">args</span>=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)  kwargs=&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;</span><br><span class="line">    <span class="built_in">index</span>(*<span class="keyword">args</span>, **kwargs)  # <span class="built_in">index</span>(*(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), **&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;)  # <span class="built_in">index</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="keyword">a</span>=<span class="number">1</span>,<span class="keyword">b</span>=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">wrapper(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="keyword">a</span>=<span class="number">1</span>, <span class="keyword">b</span>=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line">TypeError: <span class="built_in">index</span>() got <span class="keyword">an</span> unexpected keyword <span class="keyword">argument</span> <span class="string">'a'</span></span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def <span class="built_in">index</span>(name, gender):</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'welcome %s gender is %s'</span> % (name, gender))</span><br><span class="line"></span><br><span class="line">def wrapper(*<span class="keyword">args</span>, **kwargs):  # <span class="keyword">args</span>=(<span class="string">'zhangsan'</span>,<span class="string">'male'</span>)  kwargs=&#123;&#125;</span><br><span class="line">    <span class="built_in">index</span>(*<span class="keyword">args</span>, **kwargs)  # <span class="built_in">index</span>(*(<span class="string">'zhangsan'</span>,<span class="string">'male'</span>), **&#123;&#125;)  # <span class="built_in">index</span>(<span class="string">'zhangsan'</span>,<span class="string">'male'</span>)</span><br><span class="line"></span><br><span class="line"># wrapper(<span class="string">'zhangsan'</span>, <span class="string">'male'</span>)</span><br><span class="line"># wrapper(gender=<span class="string">'male'</span>, name=<span class="string">'zhangsan'</span>)</span><br><span class="line">wrapper(<span class="string">'zhangsan'</span>, gender=<span class="string">'male'</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line">welcome zhangsan gender <span class="keyword">is</span> male</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python函数参数-可变长参数&quot;&gt;&lt;a href=&quot;#Python函数参数-可变长参数&quot; class=&quot;headerlink&quot; title=&quot;Python函数参数-可变长参数&quot;&gt;&lt;/a&gt;Python函数参数-可变长参数&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python函数参数-可变长参数" scheme="http://www.gmlyo.com/tags/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0-%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python函数参数</title>
    <link href="http://www.gmlyo.com//blog/2018/08/12/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/"/>
    <id>http://www.gmlyo.com//blog/2018/08/12/Python函数参数/</id>
    <published>2018-08-12T14:30:50.000Z</published>
    <updated>2018-08-20T04:33:21.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python函数参数"><a href="#Python函数参数" class="headerlink" title="Python函数参数"></a>Python函数参数</h2><a id="more"></a><h3 id="函数的参数氛围两大类：形参与实参"><a href="#函数的参数氛围两大类：形参与实参" class="headerlink" title="函数的参数氛围两大类：形参与实参"></a>函数的参数氛围两大类：形参与实参</h3><blockquote><p>形参：指的是在定义函数时，括号指定的参数，本质就是“变量名”<br>实参：指的是在调用函数时，括号内传入的值，本质就是值</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y):  # <span class="attribute">x</span>=1, <span class="attribute">y</span>=2</span><br><span class="line">    <span class="builtin-name">print</span>(x)</span><br><span class="line">    <span class="builtin-name">print</span>(y)</span><br><span class="line"></span><br><span class="line">foo(1, 2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><blockquote><p>只有在调用函数时才会在函数体内发生实参（值）与形参（变量名）的绑定关系<br>该绑定关系只在调用函数时临时生效，在调用函数结束后就解除绑定</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span>  <span class="comment"># x=1, y=2</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1.3</span>, &#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1.3</span></span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在传值的时候没有类型限制</p></blockquote><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><blockquote><p>位置形参：在定义函数时，按照从左到右的顺序依次定义的形参称之为位置形参<br>位置实参：在调用函数时，按照从左到右的顺序依次传入的值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x, y, z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>位置形参：在定义函数时，按照从左到右的顺序依次定义的形参称之为位置形参<br>凡是按照位置定义的形参，在调用函数时必须为其传值，多一个不行少一个也不行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x, y, z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: foo() missing <span class="number">1</span> required positional argument: <span class="string">'z'</span></span><br><span class="line"><span class="comment"># 缺少 1 个所需的位置参数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x, y, z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: foo() takes <span class="number">3</span> positional arguments but <span class="number">4</span> were given</span><br></pre></td></tr></table></figure><blockquote><p>位置实参：在调用函数时，按照从左到右的顺序依次传入的值<br>在传值时按照顺序与形参一一对应</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x, y, z)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>缺点：基于位置的方式传值，按照顺序与形参一一对应，对应错了，传值就错了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name, sex, age)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(sex)</span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line">register(<span class="string">'egon'</span>, <span class="string">'male'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">male</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h3><blockquote><p>关键字实参：在调用函数时，按照 key=value 的形式定义的实参，称之为关键字实参<br>在传值时，可以完全打乱顺序，仍然能为指定的参数传值</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def register(name, sex, age):</span><br><span class="line">    <span class="builtin-name">print</span>(name)</span><br><span class="line">    <span class="builtin-name">print</span>(sex)</span><br><span class="line">    <span class="builtin-name">print</span>(age)</span><br><span class="line"></span><br><span class="line">register(<span class="attribute">name</span>=<span class="string">'egon'</span>, <span class="attribute">sex</span>=<span class="string">'male'</span>, <span class="attribute">age</span>=18)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">male</span><br><span class="line">18</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name, sex, age)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(sex)</span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line">register(sex=<span class="string">'male'</span>, age=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: register() missing <span class="number">1</span> required positional argument: <span class="string">'name'</span></span><br></pre></td></tr></table></figure><blockquote><p>在调用函数时，可以混合使用位置实参和关键字实参<br>但是位置实参必须在关键字实参的左边</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name, sex, age)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(sex)</span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line">register(name=<span class="string">'egon'</span>, <span class="string">'male'</span>, age=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">SyntaxError: positional argument follows keyword argument</span><br></pre></td></tr></table></figure><blockquote><p>不能为同一个形参重复传值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name, sex, age)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(sex)</span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line">register(<span class="string">'male'</span>, name=<span class="string">'egon'</span>, age=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: register() got multiple value <span class="keyword">for</span> argument <span class="string">'name'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name, sex, age)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(sex)</span><br><span class="line">    print(age)</span><br><span class="line"></span><br><span class="line">register(<span class="string">'egon'</span>, age=<span class="number">18</span>, sex=<span class="string">'male'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">male</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><blockquote><p>形参在定义时就已经为其赋值<br>可以传值也可以不传值<br>经常需要变得参数定义成位置形参，变化较小的参数定义成默认参数（形参）<br>注意：</p><ol><li>在定义阶段已经赋值，在调用阶段可以不用为其传值</li><li>默认参数的定义应该在位置形参右边</li><li>默认参数通常应该定义成不可变类型</li></ol></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y, <span class="attribute">z</span>=3):</span><br><span class="line">    <span class="builtin-name">print</span>(x)</span><br><span class="line">    <span class="builtin-name">print</span>(y)</span><br><span class="line">    <span class="builtin-name">print</span>(z)</span><br><span class="line"></span><br><span class="line">foo(1, 2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><blockquote><p>如需传值，以新的值为准</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y, <span class="attribute">z</span>=3):</span><br><span class="line">    <span class="builtin-name">print</span>(x)</span><br><span class="line">    <span class="builtin-name">print</span>(y)</span><br><span class="line">    <span class="builtin-name">print</span>(z)</span><br><span class="line"></span><br><span class="line">foo(1, 2, 4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><blockquote><p>经常需要变得参数定义成位置形参，变化较小的参数定义成默认参数（形参）</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def register(name, <span class="attribute">sex</span>=<span class="string">'female'</span>, age):</span><br><span class="line">    <span class="builtin-name">print</span>(name)</span><br><span class="line">    <span class="builtin-name">print</span>(sex)</span><br><span class="line">    <span class="builtin-name">print</span>(age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">SyntxError: non-default argument follows<span class="built_in"> default </span>argument</span><br></pre></td></tr></table></figure><blockquote><p>默认参数的定义应该在位置形参右边</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def <span class="keyword">register</span>(name, age, sex=<span class="string">'female'</span>):</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="built_in">print</span>(sex)</span><br><span class="line">    <span class="built_in">print</span>(age)</span><br><span class="line"></span><br><span class="line"><span class="keyword">register</span>(<span class="string">'wxx'</span>, <span class="number">38</span>)</span><br><span class="line"><span class="keyword">register</span>(<span class="string">'lxx'</span>, <span class="number">48</span>)</span><br><span class="line"><span class="keyword">register</span>(<span class="string">'cxx'</span>, <span class="number">28</span>)</span><br><span class="line"><span class="keyword">register</span>(<span class="string">'alex'</span>, <span class="number">73</span>, <span class="string">'male'</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">wxx</span><br><span class="line">female</span><br><span class="line"><span class="number">38</span></span><br><span class="line">lxx</span><br><span class="line">female</span><br><span class="line"><span class="number">48</span></span><br><span class="line">cxx</span><br><span class="line">female</span><br><span class="line"><span class="number">28</span></span><br><span class="line">alex</span><br><span class="line">male</span><br><span class="line"><span class="number">73</span></span><br></pre></td></tr></table></figure><blockquote><p>默认形参的值只在定义阶段生效一次，在函数定义之后发生的改动无效</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z=m)</span>:</span></span><br><span class="line">    print(<span class="string">'x: %s'</span> % x)</span><br><span class="line">    print(<span class="string">'y: %s'</span> % y)</span><br><span class="line">    print(<span class="string">'z: %s'</span> % z)</span><br><span class="line"></span><br><span class="line">m = <span class="number">123456</span></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">x: <span class="number">1</span></span><br><span class="line">y: <span class="number">2</span></span><br><span class="line">z: <span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>默认参数通常应该定义成不可变类型</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def foo(name, hobby, l=[]):  # 这里 l=[] 默认参数为可变类型</span><br><span class="line">    l.append(hobby)</span><br><span class="line">    print(<span class="string">'%s 的爱好是 %s'</span> <span class="comment">% (name, l))</span></span><br><span class="line"></span><br><span class="line">foo(<span class="string">'张三'</span>, <span class="string">'read'</span>)</span><br><span class="line">foo(<span class="string">'李四'</span>, <span class="string">'吃饭'</span>)</span><br><span class="line">foo(<span class="string">'王五'</span>, <span class="string">'睡觉'</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line">张三 的爱好是 [<span class="string">'read'</span>]</span><br><span class="line">李四 的爱好是 [<span class="string">'read'</span>, <span class="string">'吃饭'</span>]</span><br><span class="line">王五 的爱好是 [<span class="string">'read'</span>, <span class="string">'吃饭'</span>, <span class="string">'睡觉'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>问题：三次调用之间彼此之间有关联，一次调用基于上次的结果继续调用<br>注意：函数定义的时候一定要做到函数的解耦合性</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def foo(name, hobby,):</span><br><span class="line">    l = []</span><br><span class="line">    l.append(hobby)</span><br><span class="line">    print(<span class="string">'%s 的爱好是 %s'</span> <span class="comment">% (name, l))</span></span><br><span class="line"></span><br><span class="line">foo(<span class="string">'张三'</span>, <span class="string">'read'</span>)</span><br><span class="line">foo(<span class="string">'李四'</span>, <span class="string">'吃饭'</span>)</span><br><span class="line">foo(<span class="string">'王五'</span>, <span class="string">'睡觉'</span>)</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line">张三 的爱好是 [<span class="string">'read'</span>]</span><br><span class="line">李四 的爱好是 [<span class="string">'吃饭'</span>]</span><br><span class="line">王五 的爱好是 [<span class="string">'睡觉'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name, hobby, l=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> l <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        l = []</span><br><span class="line">    l.append(hobby)</span><br><span class="line">    print(<span class="string">'%s 的爱好是 %s'</span> % (name, l))</span><br><span class="line"></span><br><span class="line">foo(<span class="string">'张三'</span>, <span class="string">'read'</span>, [<span class="string">'music'</span>, <span class="string">'movie'</span>]])</span><br><span class="line">foo(<span class="string">'李四'</span>, <span class="string">'吃饭'</span>, [<span class="string">'撸串'</span>,])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">张三 的爱好是 [<span class="string">'music'</span>, <span class="string">'movie'</span>, <span class="string">'read'</span>]</span><br><span class="line">张三 的爱好是 [<span class="string">'撸串'</span>, <span class="string">'吃饭'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name, hobby, l=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> l <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        l = []</span><br><span class="line">    l.append(hobby)</span><br><span class="line">    print(<span class="string">'%s 的爱好是 %s'</span> % (name, l))</span><br><span class="line"></span><br><span class="line">l1 = []</span><br><span class="line">foo(<span class="string">'张三'</span>, <span class="string">'read'</span>, l1)</span><br><span class="line">foo(<span class="string">'张三'</span>, <span class="string">'音乐'</span>, l1)</span><br><span class="line">foo(<span class="string">'张三'</span>, <span class="string">'旅行'</span>, l1)</span><br><span class="line">foo(<span class="string">'李四'</span>, <span class="string">'吃饭'</span>)</span><br><span class="line">foo(<span class="string">'王五'</span>, <span class="string">'睡觉'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">张三 的爱好是 [<span class="string">'read'</span>, <span class="string">'音乐'</span>, <span class="string">'旅行'</span>]</span><br><span class="line">李四 的爱好是 [<span class="string">'吃饭'</span>]</span><br><span class="line">王五 的爱好是 [<span class="string">'睡觉'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python函数参数&quot;&gt;&lt;a href=&quot;#Python函数参数&quot; class=&quot;headerlink&quot; title=&quot;Python函数参数&quot;&gt;&lt;/a&gt;Python函数参数&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python函数参数" scheme="http://www.gmlyo.com/tags/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack_network模块</title>
    <link href="http://www.gmlyo.com//blog/2018/08/08/SaltStack_network%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.gmlyo.com//blog/2018/08/08/SaltStack_network模块/</id>
    <published>2018-08-08T10:08:09.000Z</published>
    <updated>2018-08-08T10:08:59.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="network模块"><a href="#network模块" class="headerlink" title="network模块"></a>network模块</h2><a id="more"></a><p>返回 Minion 主机的网络信息</p><h3 id="获取-minion01-主机-ping-域名信息"><a href="#获取-minion01-主机-ping-域名信息" class="headerlink" title="获取 minion01 主机 ping 域名信息"></a>获取 minion01 主机 ping 域名信息</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'minion01'</span> network<span class="selector-class">.ping</span> www<span class="selector-class">.baidu</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><h3 id="获取-minion-的主机名"><a href="#获取-minion-的主机名" class="headerlink" title="获取 minion 的主机名"></a>获取 minion 的主机名</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> network.get_hostname</span><br></pre></td></tr></table></figure><h3 id="获取指定网络接口的-mac-地址"><a href="#获取指定网络接口的-mac-地址" class="headerlink" title="获取指定网络接口的 mac 地址"></a>获取指定网络接口的 mac 地址</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> network<span class="selector-class">.hw_addr</span> eth0</span><br></pre></td></tr></table></figure><h3 id="获取主机是否在某个子网内"><a href="#获取主机是否在某个子网内" class="headerlink" title="获取主机是否在某个子网内"></a>获取主机是否在某个子网内</h3><blockquote><p>在就返回True，如果不在的话就返回 False，多子网用空格隔开<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt '*' network.in_subnet <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="查看-minion-端绑定的-IP-地址"><a href="#查看-minion-端绑定的-IP-地址" class="headerlink" title="查看 minion 端绑定的 IP 地址"></a>查看 minion 端绑定的 IP 地址</h3><blockquote><p>多 IP 也会显示出来，127.0.0.1 除外<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> network.ip_addrs</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="显示所有接口的详细信息"><a href="#显示所有接口的详细信息" class="headerlink" title="显示所有接口的详细信息"></a>显示所有接口的详细信息</h3><blockquote><p>但是别名的网卡类似于 eth0:1 这种不会显示<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> network.interfaces</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="显示指定网卡接口上面的-IP"><a href="#显示指定网卡接口上面的-IP" class="headerlink" title="显示指定网卡接口上面的 IP"></a>显示指定网卡接口上面的 IP</h3><blockquote><p>只会显示IP不会显示其他内容<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> network<span class="selector-class">.interface_ip</span> eth0</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>network.interface 会连网关子网掩码也显示</p></blockquote><h3 id="修改某一个-minion-的主机名"><a href="#修改某一个-minion-的主机名" class="headerlink" title="修改某一个 minion 的主机名"></a>修改某一个 minion 的主机名</h3><blockquote><p>显然这一步操作只适合在初始化的时候而且不适合执行所有主机<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'agent1.salt'</span> network<span class="selector-class">.mod_hostname</span> test1.salt</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="显示的-ping-的结果信息"><a href="#显示的-ping-的结果信息" class="headerlink" title="显示的 ping 的结果信息"></a>显示的 ping 的结果信息</h3><blockquote><p>如果不加 return_boolean=True 显示的是 ping 的结果信息，加了就是如果 ping 通了就返回 True，ping不通就返回 False<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> network<span class="selector-class">.ping</span> www<span class="selector-class">.baidu</span><span class="selector-class">.com</span> return_boolean=True timeout=<span class="number">3</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>timeout=3 就是 ping 的时间，3秒超时这样能快速返回结果<br>这个其实挺好用的，比如我们可以测试哪些主机的 DNS 设置有问题不能正常解析啊，或者是我们内网 DNS 指向了一个非公网的域名解析，可以通过这个看哪些主机设置了内网 DNS 而哪些没设置内网 DNS</p></blockquote><h3 id="获取主机所属的子网"><a href="#获取主机所属的子网" class="headerlink" title="获取主机所属的子网"></a>获取主机所属的子网</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> network.subnets</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;network模块&quot;&gt;&lt;a href=&quot;#network模块&quot; class=&quot;headerlink&quot; title=&quot;network模块&quot;&gt;&lt;/a&gt;network模块&lt;/h2&gt;
    
    </summary>
    
      <category term="SaltStack笔记" scheme="http://www.gmlyo.com/categories/SaltStack%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SaltStack_network模块" scheme="http://www.gmlyo.com/tags/SaltStack-network%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack_host模块</title>
    <link href="http://www.gmlyo.com//blog/2018/08/08/SaltStack_hosts%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.gmlyo.com//blog/2018/08/08/SaltStack_hosts模块/</id>
    <published>2018-08-08T09:58:35.000Z</published>
    <updated>2018-08-08T09:58:49.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hosts-模块"><a href="#hosts-模块" class="headerlink" title="hosts 模块"></a>hosts 模块</h2><a id="more"></a><blockquote><p>通过这个命令可以查看详细用法<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> sys<span class="selector-class">.doc</span> hosts</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>我们生产中如果没有用内建 DNS 服务，使用 hosts 模块修改 /etc/hosts 还是经常会用到的</p></blockquote><h3 id="hosts-add-host-追加"><a href="#hosts-add-host-追加" class="headerlink" title="hosts.add_host 追加"></a>hosts.add_host 追加</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> hosts.add_host <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.113</span> minion01</span><br><span class="line"># hosts.add 会先判断 /etc/hosts 里面有没有这个 <span class="built_in">IP</span> <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.113</span></span><br><span class="line"># 如果有 minion01 会将 alias 名追加到这个 <span class="built_in">IP</span> 后面，跟之前的解析别名一起使用这个 <span class="built_in">IP</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salt '*' hosts.add_host <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span> minion01</span><br><span class="line"># 如果没有这个 IP，则会新创建一行 hosts 记录，但是 <span class="number">192.168</span><span class="number">.1</span><span class="number">.113</span> 那条还是存在的。两条记录</span><br></pre></td></tr></table></figure><h3 id="hosts-set-host-覆盖"><a href="#hosts-set-host-覆盖" class="headerlink" title="hosts.set_host 覆盖"></a>hosts.set_host 覆盖</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> hosts<span class="selector-class">.set_host</span> <span class="number">192.168</span>.<span class="number">1.114</span> minion02</span><br><span class="line">hosts<span class="selector-class">.set_host</span> 这个的不同之处就是，如果这个 IP 不存在则创建新的一条 hosts 记录，如果 hosts 存在这个 IP 的解析记录。会完全覆盖掉</span><br><span class="line">也就是旧的 IP 解析记录完全变成现在的结果</span><br></pre></td></tr></table></figure><h3 id="hosts-rm-host-删除"><a href="#hosts-rm-host-删除" class="headerlink" title="hosts.rm_host 删除"></a>hosts.rm_host 删除</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt '*' hosts.rm_host <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span> minion02</span><br><span class="line"># 删除 <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span> minion02 这条解析记录</span><br><span class="line"># 如果 <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span> 这行有多条解析记录，而只会删除 minion02 这条记录，其他的 <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span> xxx.xxx，还会存在不会删除，可以说是有选择性的删除</span><br></pre></td></tr></table></figure><blockquote><p>查看 hosts 解析的用法</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span> 这个 IP 对应的别名解析</span><br><span class="line">salt '*' hosts.get_alias <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span></span><br><span class="line"># 如果有则返回对应的 hosts 别名解析记录，没有则什么都不返回</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 这个就是返回 minion01 在 /etc/hosts 里面对应的 IP</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.get_ip minion01</span><br><span class="line"><span class="meta"># 但是有个问题，如果有多条只会返回文件最上方的那一条对应的 IP 地址</span></span><br></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果有这条别名解析记录，则返回<span class="literal">True</span>，如果没有则返回<span class="literal">False</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.has_pair <span class="number">192.168</span><span class="number">.1</span><span class="number">.113</span> minion01</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 类似于 cat /etc/hosts 的操作</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.list_hosts</span><br><span class="line"><span class="meta"># 不同的是，这相当于一个汇总，会以第一行是 IP：下一行是其对应的别名解析的方式来呈现</span></span><br><span class="line"><span class="meta"># 比如一个 IP 有好几行的解析，这所有的解析记录都会汇总到这个 IP 下面，注释过的别名解析的行不会出现在这个汇总信息里面</span></span><br></pre></td></tr></table></figure><h3 id="dnsutil-模块"><a href="#dnsutil-模块" class="headerlink" title="dnsutil 模块"></a>dnsutil 模块</h3><blockquote><p>Minion 主机通用 DNS 操作<br>添加 192.168.2.71 <a href="http://www.test.com" target="_blank" rel="noopener">www.test.com</a> 到 minion01 端 /etc/hosts 下<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'minion01'</span> dnsutil<span class="selector-class">.hosts_append</span> /etc/hosts <span class="number">192.168</span>.<span class="number">2.71</span> www<span class="selector-class">.test</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hosts-模块&quot;&gt;&lt;a href=&quot;#hosts-模块&quot; class=&quot;headerlink&quot; title=&quot;hosts 模块&quot;&gt;&lt;/a&gt;hosts 模块&lt;/h2&gt;
    
    </summary>
    
      <category term="SaltStack笔记" scheme="http://www.gmlyo.com/categories/SaltStack%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SaltStack_host模块" scheme="http://www.gmlyo.com/tags/SaltStack-host%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack_group模块</title>
    <link href="http://www.gmlyo.com//blog/2018/08/08/SaltStack_group%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.gmlyo.com//blog/2018/08/08/SaltStack_group模块/</id>
    <published>2018-08-08T09:56:25.000Z</published>
    <updated>2018-08-08T09:58:03.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="group-模块"><a href="#group-模块" class="headerlink" title="group 模块"></a>group 模块</h2><a id="more"></a><h3 id="添加指定用户组"><a href="#添加指定用户组" class="headerlink" title="添加指定用户组"></a>添加指定用户组</h3><blockquote><p>group.add 方法<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> group.add user1 1000</span></span><br><span class="line">salt-minion02:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="返回用户组信息"><a href="#返回用户组信息" class="headerlink" title="返回用户组信息"></a>返回用户组信息</h3><blockquote><p>group.info 方法<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@salt-master</span> <span class="string">~]#</span> <span class="string">salt</span> <span class="string">'salt-minion02'</span> <span class="string">group.info</span> <span class="string">user1</span></span><br><span class="line"><span class="attr">salt-minion02:</span></span><br><span class="line"><span class="bullet">    -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">    gid:</span></span><br><span class="line">        <span class="number">1000</span></span><br><span class="line"><span class="attr">    members:</span></span><br><span class="line"><span class="attr">    name:</span></span><br><span class="line">        <span class="string">user1</span></span><br><span class="line"><span class="attr">    passwd:</span></span><br><span class="line">        <span class="string">x</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="返回所有用户组的信息"><a href="#返回所有用户组的信息" class="headerlink" title="返回所有用户组的信息"></a>返回所有用户组的信息</h3><blockquote><p>group.getent 方法<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">[root@salt-master ~]# salt 'salt-minion02' group.getent</span><br><span class="line">salt-minion02:</span><br><span class="line">    |_</span><br><span class="line">      -<span class="ruby">---------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">0</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          root</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">1</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">          - bin</span></span><br><span class="line"><span class="ruby">          - daemon</span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          bin</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">2</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">          - bin</span></span><br><span class="line"><span class="ruby">          - daemon</span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          daemon</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">3</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">          - bin</span></span><br><span class="line"><span class="ruby">          - adm</span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          sys</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">4</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">          - adm</span></span><br><span class="line"><span class="ruby">          - daemon</span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          adm</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">5</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          tty</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">6</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          disk</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">      ----------</span></span><br><span class="line"><span class="ruby">      <span class="symbol">gid:</span></span></span><br><span class="line"><span class="ruby">          <span class="number">7</span></span></span><br><span class="line"><span class="ruby">      <span class="symbol">members:</span></span></span><br><span class="line"><span class="ruby">          - daemon</span></span><br><span class="line"><span class="ruby">      <span class="symbol">name:</span></span></span><br><span class="line"><span class="ruby">          lp</span></span><br><span class="line"><span class="ruby">      <span class="symbol">passwd:</span></span></span><br><span class="line"><span class="ruby">          x</span></span><br><span class="line"><span class="ruby">    <span class="params">|_</span></span></span><br><span class="line"><span class="ruby">.......</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="添加一个用户到指定组中"><a href="#添加一个用户到指定组中" class="headerlink" title="添加一个用户到指定组中"></a>添加一个用户到指定组中</h3><blockquote><p>group.adduser 方法<br>必须是一个已经存在的组和已存在的用户<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> group.adduser user1 zabbix</span></span><br><span class="line">salt-minion02:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="将用户从用户组中移除"><a href="#将用户从用户组中移除" class="headerlink" title="将用户从用户组中移除"></a>将用户从用户组中移除</h3><blockquote><p>group.deluser 方法<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> group.deluser user1 zabbix</span></span><br><span class="line">salt-minion02:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="移除指定用户组"><a href="#移除指定用户组" class="headerlink" title="移除指定用户组"></a>移除指定用户组</h3><blockquote><p>group.delete 方法<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> group.delete user1</span></span><br><span class="line">salt-minion02:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;group-模块&quot;&gt;&lt;a href=&quot;#group-模块&quot; class=&quot;headerlink&quot; title=&quot;group 模块&quot;&gt;&lt;/a&gt;group 模块&lt;/h2&gt;
    
    </summary>
    
      <category term="SaltStack笔记" scheme="http://www.gmlyo.com/categories/SaltStack%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SaltStack_group模块" scheme="http://www.gmlyo.com/tags/SaltStack-group%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack_user模块</title>
    <link href="http://www.gmlyo.com//blog/2018/08/08/SaltStack_user%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.gmlyo.com//blog/2018/08/08/SaltStack_user模块/</id>
    <published>2018-08-08T09:02:12.000Z</published>
    <updated>2018-08-08T09:02:48.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h2><a id="more"></a><blockquote><p>用于用户管理，如创建用户，删除用户，更改用户信息等<br>官方文档<br><a href="https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.useradd.html" target="_blank" rel="noopener">https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.useradd.html</a></p></blockquote><blockquote><p>在 minion 端上创建一个用户</p></blockquote><p><strong>语法</strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> user.<span class="built_in">add</span> name <span class="symbol">&lt;uid&gt;</span> <span class="symbol">&lt;gid&gt;</span> <span class="symbol">&lt;groups&gt;</span> <span class="symbol">&lt;home&gt;</span> <span class="symbol">&lt;shell&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><blockquote><p>创建一个 test 用户，其它都和 useradd 一样默认<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">salt * user.add test</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> user.add test 610 605 zabbix /home/test /bin/bash</span></span><br><span class="line">salt-minion02:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h3><blockquote><p>user.info 方法<br>返回用户信息<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@salt-master</span> <span class="string">~]#</span> <span class="string">salt</span> <span class="string">'salt-minion02'</span> <span class="string">user.info</span> <span class="string">test</span></span><br><span class="line"><span class="attr">salt-minion02:</span></span><br><span class="line"><span class="bullet">    -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">    fullname:</span></span><br><span class="line"><span class="attr">    gid:</span></span><br><span class="line">        <span class="number">605</span></span><br><span class="line"><span class="attr">    groups:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">zabbix</span></span><br><span class="line"><span class="attr">    home:</span></span><br><span class="line">        <span class="string">/home/test</span></span><br><span class="line"><span class="attr">    homephone:</span></span><br><span class="line"><span class="attr">    name:</span></span><br><span class="line">        <span class="string">test</span></span><br><span class="line"><span class="attr">    passwd:</span></span><br><span class="line">        <span class="string">x</span></span><br><span class="line"><span class="attr">    roomnumber:</span></span><br><span class="line"><span class="attr">    shell:</span></span><br><span class="line">        <span class="string">/bin/bash</span></span><br><span class="line"><span class="attr">    uid:</span></span><br><span class="line">        <span class="number">610</span></span><br><span class="line"><span class="attr">    workphone:</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="获取所有系统用户信息的列表"><a href="#获取所有系统用户信息的列表" class="headerlink" title="获取所有系统用户信息的列表"></a>获取所有系统用户信息的列表</h3><blockquote><p>user.getent 方法<br>返回所有系统用户信息的列表<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@salt-master</span> <span class="string">~]#</span> <span class="string">salt</span> <span class="string">'salt-minion02'</span> <span class="string">user.getent</span> </span><br><span class="line"><span class="attr">salt-minion02:</span></span><br><span class="line">    <span class="string">|_</span></span><br><span class="line"><span class="bullet">      -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">      fullname:</span></span><br><span class="line">          <span class="string">root</span></span><br><span class="line"><span class="attr">      gid:</span></span><br><span class="line">          <span class="number">0</span></span><br><span class="line"><span class="attr">      groups:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      home:</span></span><br><span class="line">          <span class="string">/root</span></span><br><span class="line"><span class="attr">      homephone:</span></span><br><span class="line"><span class="attr">      name:</span></span><br><span class="line">          <span class="string">root</span></span><br><span class="line"><span class="attr">      passwd:</span></span><br><span class="line">          <span class="string">x</span></span><br><span class="line"><span class="attr">      roomnumber:</span></span><br><span class="line"><span class="attr">      shell:</span></span><br><span class="line">          <span class="string">/bin/bash</span></span><br><span class="line"><span class="attr">      uid:</span></span><br><span class="line">          <span class="number">0</span></span><br><span class="line"><span class="attr">      workphone:</span></span><br><span class="line">    <span class="string">|_</span></span><br><span class="line"><span class="bullet">      -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">      fullname:</span></span><br><span class="line">          <span class="string">bin</span></span><br><span class="line"><span class="attr">      gid:</span></span><br><span class="line">          <span class="number">1</span></span><br><span class="line"><span class="attr">      groups:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">bin</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">daemon</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">sys</span></span><br><span class="line"><span class="attr">      home:</span></span><br><span class="line">          <span class="string">/bin</span></span><br><span class="line"><span class="attr">      homephone:</span></span><br><span class="line"><span class="attr">      name:</span></span><br><span class="line">          <span class="string">bin</span></span><br><span class="line"><span class="attr">      passwd:</span></span><br><span class="line">          <span class="string">x</span></span><br><span class="line"><span class="attr">      roomnumber:</span></span><br><span class="line"><span class="attr">      shell:</span></span><br><span class="line">          <span class="string">/sbin/nologin</span></span><br><span class="line"><span class="attr">      uid:</span></span><br><span class="line">          <span class="number">1</span></span><br><span class="line"><span class="attr">      workphone:</span></span><br><span class="line">  <span class="string">......</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="查看所有用户"><a href="#查看所有用户" class="headerlink" title="查看所有用户"></a>查看所有用户</h3><blockquote><p>查看所有用户<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">salt</span> * <span class="selector-tag">user</span><span class="selector-class">.list_users</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="列出指定用户所属组的列表"><a href="#列出指定用户所属组的列表" class="headerlink" title="列出指定用户所属组的列表"></a>列出指定用户所属组的列表</h3><blockquote><p>user.list_groups 方法<br>列出指定用户所属组的列表<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> user.list_groups zabbix</span></span><br><span class="line">salt-minion02.contoso.com:</span><br><span class="line">    - zabbix</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="创建用户指定-shell"><a href="#创建用户指定-shell" class="headerlink" title="创建用户指定 shell"></a>创建用户指定 shell</h3><blockquote><p>创建用户时指定 shell<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt * user.<span class="builtin-name">add</span> test <span class="attribute">shell</span>=/sbin/nologin</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="创建用户时指定不创建家目录"><a href="#创建用户时指定不创建家目录" class="headerlink" title="创建用户时指定不创建家目录"></a>创建用户时指定不创建家目录</h3><blockquote><p>创建用户时指定不创建家目录<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt * user.<span class="builtin-name">add</span> test <span class="attribute">createhome</span>=<span class="literal">False</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="创建用户时指定附加组"><a href="#创建用户时指定附加组" class="headerlink" title="创建用户时指定附加组"></a>创建用户时指定附加组</h3><blockquote><p>创建用户时指定附加组<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt * user.<span class="builtin-name">add</span> test <span class="attribute">groups</span>=nginx</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="将用户加入到其他组，为附加组"><a href="#将用户加入到其他组，为附加组" class="headerlink" title="将用户加入到其他组，为附加组"></a>将用户加入到其他组，为附加组</h3><blockquote><p>将 test 用户加入到 nginx 组，此为附加组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt * user.chgroups <span class="built_in">test</span> nginx</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="查看用户所有的组"><a href="#查看用户所有的组" class="headerlink" title="查看用户所有的组"></a>查看用户所有的组</h3><blockquote><p>查看 test 用户所有的组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt * user.list_groups <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><blockquote><p>user.delete 方法<br>删除 test 用户<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt * user.<span class="keyword">delete</span> test <span class="built_in">remove</span>=True</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在 minion 端删除一个用户<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> user.delete test</span></span><br><span class="line">salt-minion02:</span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h3><blockquote><p>user.rename 方法<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@salt</span>-master ~]<span class="meta"># salt <span class="string">'salt-minion02'</span> user.rename test testuser</span></span><br><span class="line">salt-minion02.contoso.com:</span><br><span class="line">    <span class="literal">False</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>虽然返回 False 但是操作是成功完成了的</p></blockquote><h3 id="编辑-user-sls-文件"><a href="#编辑-user-sls-文件" class="headerlink" title="编辑 user.sls 文件"></a>编辑 user.sls 文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">/srv/salt/nginx/create_users.sls</span></span><br><span class="line"><span class="comment"># user</span></span><br><span class="line"><span class="attr">nginx_user:</span></span><br><span class="line">  <span class="string">user.present:</span>               <span class="comment"># 用户创建</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    - createhome:</span> <span class="literal">False</span>       <span class="comment"># 不用家目录</span></span><br><span class="line"><span class="attr">    - gid_from_name:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">    - shell:</span> <span class="string">/sbin/nologin</span>    <span class="comment"># 指定shell</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;user模块&quot;&gt;&lt;a href=&quot;#user模块&quot; class=&quot;headerlink&quot; title=&quot;user模块&quot;&gt;&lt;/a&gt;user模块&lt;/h2&gt;
    
    </summary>
    
      <category term="SaltStack笔记" scheme="http://www.gmlyo.com/categories/SaltStack%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SaltStack_user模块" scheme="http://www.gmlyo.com/tags/SaltStack-user%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack_archive模块</title>
    <link href="http://www.gmlyo.com//blog/2018/08/08/SaltStack_archive%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.gmlyo.com//blog/2018/08/08/SaltStack_archive模块/</id>
    <published>2018-08-08T05:02:01.000Z</published>
    <updated>2018-08-08T05:48:03.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="archive-模块"><a href="#archive-模块" class="headerlink" title="archive 模块"></a>archive 模块</h2><a id="more"></a><blockquote><p>主要用于打包，压缩和归档使用<br>官方文档<br><a href="https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.archive.html" target="_blank" rel="noopener">https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.archive.html</a><br>实现系统层面的压缩包调用，支持 gunzip、gzip、rar、tar、unrar、unzip 等</p></blockquote><blockquote><p>可以设置为 “jinja” 或另一个受支持的模板引擎，以便在执行之前呈现命令参数<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">''</span> archive<span class="selector-class">.tar</span> cjvf /tmp/salt<span class="selector-class">.tar</span><span class="selector-class">.bz2</span> &#123;&#123;grains.saltpath&#125;&#125; template=jinja</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>将 /tmp/file_1,/tmp/file_2 打包压缩成 tarfile.tar.bz2 文件 到 /tmp 目录下<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">''</span> archive<span class="selector-class">.tar</span> cjvf /tmp/tarfile<span class="selector-class">.tar</span><span class="selector-class">.bz2</span> /tmp/file_1,/tmp/file_2</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>解压缩 foo.tar 文件到 /target/directory 目录下<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> archive<span class="selector-class">.tar</span> xf foo<span class="selector-class">.tar</span> dest=/target/directory</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>执行压缩命令<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">salt '*' archive.tar zcvf /root/test.tar.gz /root/python,/root/testa</span><br><span class="line">192.168.10.249:</span><br><span class="line">-<span class="ruby"> <span class="symbol">tar:</span> Removing leading <span class="string">`/' from member names</span></span></span><br><span class="line"><span class="ruby">- <span class="regexp">/root/python</span><span class="regexp">/</span></span></span><br><span class="line"><span class="ruby">- <span class="regexp">/root/python</span><span class="regexp">/p2</span></span></span><br><span class="line"><span class="ruby">- <span class="regexp">/root/python</span><span class="regexp">/p1</span></span></span><br><span class="line"><span class="ruby">- <span class="regexp">/root/testa</span></span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>通过该方法压缩的文件，解压后带有全路径，可通过 cwd 指定执行的目录<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> archive<span class="selector-class">.tar</span> zcvf /root/test/test<span class="selector-class">.tar</span><span class="selector-class">.gz</span> python,testa cwd=/root</span><br><span class="line"><span class="number">192.168</span>.<span class="number">10.249</span>:</span><br><span class="line">python/</span><br><span class="line">python/p2</span><br><span class="line">python/p1</span><br><span class="line">testa</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>执行解压缩命令<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">salt '*' archive.tar zxvf /root/test/test.tar.gz dest=/root/test</span><br><span class="line">192.168.10.249:</span><br><span class="line">-<span class="ruby"> python/</span></span><br><span class="line"><span class="ruby">- python/p2</span></span><br><span class="line"><span class="ruby">- python/p1</span></span><br><span class="line"><span class="ruby">- testa</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 采用 gzip 压缩 sourcefile.txt 文件</span></span><br><span class="line">salt <span class="string">'*'</span> archive.gzip sourcefile.txt</span><br><span class="line"></span><br><span class="line"><span class="meta"># 采用 gzip 压缩 test.txt 文件</span></span><br><span class="line">salt <span class="string">'minion01'</span> archive.gzip test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta"># 采用 gunzip 解压 sourcefile.txt.gz 包</span></span><br><span class="line">salt <span class="string">'*'</span> archive.gunzip sourcefile.txt.gz</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压在 /root 目录下</span></span><br><span class="line">salt <span class="string">'minion01'</span> archive.tar xf <span class="regexp">/tmp/</span>access.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩在 /tmp 目录下</span></span><br><span class="line">salt <span class="string">'minion01'</span> archive.tar  <span class="regexp">/tmp/</span>test.txt</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 打包指定文件，多个文件使用空隔分开，打包后的名称为 <span class="keyword">test</span>.<span class="keyword">zip</span></span><br><span class="line">salt minion* archive.cmd_zip /opt/<span class="keyword">test</span>.<span class="keyword">zip</span> /tmp/<span class="keyword">test</span>.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line"># 打包目录</span><br><span class="line">salt minion* archive.cmd_zip /opt/<span class="keyword">test</span>.<span class="keyword">zip</span> /tmp/init</span><br><span class="line"></span><br><span class="line"># 将 init.<span class="keyword">zip</span> 解压至 /root 目录下面</span><br><span class="line">salt minion* archive.cmd_unzip /opt/init.<span class="keyword">zip</span> /root/</span><br><span class="line"></span><br><span class="line"># 将 <span class="keyword">test</span>.<span class="keyword">sh</span> 打包为 <span class="keyword">test</span>.<span class="keyword">sh</span>.gz，打包后就在当前目录</span><br><span class="line">salt minion* archive.gzip /tmp/<span class="keyword">test</span>.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line"># 将 <span class="keyword">test</span>.<span class="keyword">sh</span>.gz 解压，解压后就在当前目录</span><br><span class="line">salt minion* archive.gunzip /tmp/<span class="keyword">test</span>.<span class="keyword">sh</span>.gz</span><br><span class="line"></span><br><span class="line"># 对 /tmp/init 目录打包后压缩为 tar.gz</span><br><span class="line">salt minion* archive.tar czvf /opt/init.tar.gz /tmp/init</span><br><span class="line"></span><br><span class="line"># 解压 init.tar.gz，默认放到 /root 目录下面，因为 minion 进程是以 root 用户启动的</span><br><span class="line">salt minion* archive.tar xvzf /opt/init.tar.gz</span><br></pre></td></tr></table></figure><h3 id="api-调用"><a href="#api-调用" class="headerlink" title="api 调用"></a>api 调用</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">client</span>.cmd(<span class="string">'*'</span>, <span class="string">'archive.gunzip'</span>, [<span class="string">'sourcefile.txt.gz'</span>])</span><br><span class="line"><span class="keyword">client</span>.cmd(<span class="string">'minion01'</span>, <span class="string">'archive.tar'</span>, [<span class="string">'xf'</span>, <span class="string">'/tmp/access.tar.gz'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>通过 Python 扩展模块，使用 API<br>通过调用 master client 模块，实例化一个 LocalClient 对象，再调用 cmd() 方法来实现<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># API 实现 archive.gzip</span></span><br><span class="line">vim archive_gzip.py</span><br><span class="line">import salt.<span class="keyword">client</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">client</span> = salt.<span class="keyword">client</span>.LocalClient()</span><br><span class="line">res = <span class="keyword">client</span>.cmd(<span class="string">'*'</span>, <span class="string">'archive.gzip'</span>, <span class="string">'/tmp/test.txt'</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 执行结果返回一个字典</span></span><br><span class="line">&#123;<span class="string">'minion01'</span>: <span class="string">'/tmp/test.txt.gz'</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;archive-模块&quot;&gt;&lt;a href=&quot;#archive-模块&quot; class=&quot;headerlink&quot; title=&quot;archive 模块&quot;&gt;&lt;/a&gt;archive 模块&lt;/h2&gt;
    
    </summary>
    
      <category term="SaltStack笔记" scheme="http://www.gmlyo.com/categories/SaltStack%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SaltStack_archive模块" scheme="http://www.gmlyo.com/tags/SaltStack-archive%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack常用模块</title>
    <link href="http://www.gmlyo.com//blog/2018/08/07/SaltStack%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.gmlyo.com//blog/2018/08/07/SaltStack常用模块/</id>
    <published>2018-08-07T10:03:47.000Z</published>
    <updated>2018-08-07T12:32:12.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SaltStack-常用模块"><a href="#SaltStack-常用模块" class="headerlink" title="SaltStack 常用模块"></a>SaltStack 常用模块</h2><a id="more"></a><h3 id="SaltStack-内置模块汇总"><a href="#SaltStack-内置模块汇总" class="headerlink" title="SaltStack 内置模块汇总"></a>SaltStack 内置模块汇总</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl, aliases, alternatives, apache, archive, artifactory, <span class="keyword">blockdev, </span><span class="keyword">btrfs, </span><span class="keyword">buildout, </span><span class="keyword">cloud, </span>cmd, composer, <span class="built_in">config</span>, container_resource, cp, cron, data, defaults, devmap, <span class="keyword">dig, </span><span class="keyword">disk, </span>django, dnsmasq, dnsutil, drbd, elasticsearch, environ, etcd, event, <span class="keyword">extfs, </span>file, gem, genesis, git, grains, group, grub, hashutil, hg, hipchat, hosts, http, img, incron, ini, introspect, ip, iptables, <span class="keyword">jboss7, </span><span class="keyword">jboss7_cli, </span>key, kmod, locale, locate, logrotate, lowpkg, match, mine, modjk, mount, network, openstack_config, pagerduty, pillar, pip, pkg, pkg_resource, postfix, publish, puppet, pyenv, raid, <span class="built_in">random</span>, random_org, rbenv, ret, rsync, runit, rvm, <span class="built_in">s3</span>, saltutil, <span class="keyword">schedule, </span><span class="keyword">scsi, </span>sdb, seed, selinux, serverdensity_device, service, <span class="keyword">shadow, </span>slack, smtp, sqlite3, ssh, state, status, supervisord, sys, sysctl, syslog_ng, system, test, timezone, user, vbox_guest, virtualenv, webutil, xfs</span><br></pre></td></tr></table></figure><h3 id="SaltStack-常用模块介绍"><a href="#SaltStack-常用模块介绍" class="headerlink" title="SaltStack 常用模块介绍"></a>SaltStack 常用模块介绍</h3><p>这里重点是要将经常用到的模块记录的用法记录下来，直接在 master 端用 salt 命令可以做一些简单的操作，也为做 .sls文件 打基础。</p><h4 id="cmd-模块常用方法"><a href="#cmd-模块常用方法" class="headerlink" title="cmd 模块常用方法"></a>cmd 模块常用方法</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'agent1.salt'</span> sys.doc <span class="keyword">cmd</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 可以看 cmd 模块都有哪些使用方法，这里只列举常用的</span></span></span><br></pre></td></tr></table></figure><h5 id="cmd-has-exec-用法"><a href="#cmd-has-exec-用法" class="headerlink" title="cmd.has_exec 用法"></a>cmd.has_exec 用法</h5><blockquote><p>如果可执行文件在 minion 上可用，则返回true，否则返回false</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这里只能是单个命令，如果你用 <span class="string">'ip addr'</span> 这种形式的话，肯定返回的是 <span class="literal">False</span></span><br><span class="line">salt <span class="string">'*'</span> cmd.has_exec ifconfig</span><br></pre></td></tr></table></figure><h5 id="cmd-retcode-用法"><a href="#cmd-retcode-用法" class="headerlink" title="cmd.retcode 用法"></a>cmd.retcode 用法</h5><blockquote><p>在 minion 端执行一个 shell 命令并返回命令的返回码。0 表示成功，0 以外表示失败有问题。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> <span class="keyword">cmd</span>.<span class="bash">retcode <span class="string">'ls -l /etc/hostname'</span></span></span><br><span class="line"><span class="bash"><span class="comment"># 如我们可以查看一个文件是否存在根据返回码来判断，或者执行一个脚本等，''里面就是你要执行的命令</span></span></span><br><span class="line"><span class="bash"><span class="comment"># 正好跟 cmd.has_exec 相反</span></span></span><br></pre></td></tr></table></figure></p></blockquote><h5 id="cmd-run-用法"><a href="#cmd-run-用法" class="headerlink" title="cmd.run 用法"></a>cmd.run 用法</h5><blockquote><p>这个执行 shell 命令跟 cmd.retcode 类似，但是不同的是，cmd.run 就像在本地执行一样。<br>cmd.run_stderr 意思只会在出问题的时候返回信息。</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# salt <span class="string">'*'</span> cmd.retcode <span class="string">'cat /root/1'</span></span><br><span class="line">zwidc_kvm_192.<span class="number">168.1</span>.<span class="number">104</span>:</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">agent1.<span class="keyword">sal</span><span class="variable">t:</span></span><br><span class="line">    <span class="number">0</span></span><br><span class="line">[root@master ~]# salt <span class="string">'*'</span> cmd.run <span class="string">'cat /root/1'</span></span><br><span class="line">agent1.<span class="keyword">sal</span><span class="variable">t:</span></span><br><span class="line">    <span class="number">123</span></span><br><span class="line">zwidc_kvm_192.<span class="number">168.1</span>.<span class="number">104</span>:</span><br><span class="line">[root@master ~]# salt <span class="string">'*'</span> cmd.run_stderr <span class="string">'cat /root/1'</span></span><br><span class="line">agentl.<span class="keyword">sal</span><span class="variable">t:</span></span><br><span class="line">zwidc_kvm_192.<span class="number">168.1</span>.<span class="number">104</span>:</span><br><span class="line">[root@master ~]# salt <span class="string">'*'</span> cmd.run_stderr <span class="string">'cat /root/6'</span></span><br><span class="line">agent1.<span class="keyword">sal</span><span class="variable">t:</span></span><br><span class="line">    <span class="keyword">ca</span><span class="variable">t:</span> /root/<span class="number">6</span>: No such <span class="keyword">file</span> <span class="built_in">or</span> directory</span><br><span class="line">zwidc_kvm_192.<span class="number">168.1</span>.<span class="number">104</span>:</span><br><span class="line">    <span class="keyword">ca</span><span class="variable">t:</span> /root/<span class="number">6</span>: No such <span class="keyword">file</span> <span class="built_in">or</span> directory</span><br></pre></td></tr></table></figure><h5 id="cmd-script-和-cmd-script-retcode"><a href="#cmd-script-和-cmd-script-retcode" class="headerlink" title="cmd.script 和 cmd.script_retcode"></a>cmd.script 和 cmd.script_retcode</h5><blockquote><p>从远程 salt 服务器 或 ftp 服务器 或 http 服务器 下载脚本到本地执行</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> cmd.script <span class="keyword">sal</span><span class="variable">t:</span>//scripts/runme.<span class="keyword">sh</span></span><br><span class="line">salt <span class="string">'*'</span> cmd.script <span class="keyword">sal</span><span class="variable">t:</span>//scripts/runme.<span class="keyword">sh</span> <span class="string">'arg1 arg2 "arg 3"'</span></span><br></pre></td></tr></table></figure><h5 id="cmd-shell-和-cmd-shells"><a href="#cmd-shell-和-cmd-shells" class="headerlink" title="cmd.shell 和 cmd.shells"></a>cmd.shell 和 cmd.shells</h5><blockquote><p>cmd.shell 跟 cmd.run 一样<br>一般用 cmd.run, cmd.shells 是通过 /etc/shells 文件列出此系统上的有效 shell</p></blockquote><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# salt '*' cmd.shells</span><br><span class="line"></span><br><span class="line">zwidc_kvm_192.168.1.104:</span><br><span class="line">    -<span class="ruby"> /bin/sh</span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/bin/bash</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/sbin/nologin</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/user/bin</span><span class="regexp">/sh</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/usr/bin</span><span class="regexp">/bash</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/usr/sbin</span><span class="regexp">/nologin</span></span></span><br><span class="line"><span class="ruby">agent1.<span class="symbol">salt:</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/bin/sh</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/bin/bash</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/sbin/nologin</span></span></span><br><span class="line"><span class="ruby">    - <span class="regexp">/bin/dash</span></span></span><br></pre></td></tr></table></figure><h5 id="cmd-which-和-cmd-which-bin-用法"><a href="#cmd-which-和-cmd-which-bin-用法" class="headerlink" title="cmd.which 和 cmd.which_bin 用法"></a>cmd.which 和 cmd.which_bin 用法</h5><blockquote><p>就是查找执行文件所在的位置，<code>which</code> 命令嘛都不陌生<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看节点所有 ifconfig 命令的位置，在写脚本或者定时任务的时候很有用</span></span><br><span class="line">salt <span class="string">'*'</span> cmd.which ifconfig</span><br><span class="line"><span class="meta"># 因为系统不同执行文件的绝对路径也不同 和 salt <span class="string">'*'</span> cmd.run  <span class="string">"which ifconfig"</span> 一个效果</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 这是定义了一个列表，返回在命令列表中找到的第一个命令</span></span><br><span class="line">salt <span class="string">'*'</span> cmd.which_bin <span class="string">'[cat, ifconfig, touch]'</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 存在就返回第一个命令的路径</span></span><br><span class="line">[root<span class="symbol">@master</span> ~]<span class="meta"># salt <span class="string">'*'</span> cmd.which_bin <span class="string">'[cat, ifconfig, touch]'</span></span></span><br><span class="line">agent1.salt:</span><br><span class="line">    /bin/cat</span><br><span class="line">zwidc_kvm_192<span class="number">.168</span><span class="number">.1</span><span class="number">.104</span>:</span><br><span class="line">    /usr/bin/cat</span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果第一个命令不存在就往后寻找</span></span><br><span class="line">[root<span class="symbol">@master</span> ~]<span class="meta"># salt <span class="string">'*'</span> cmd.which_bin <span class="string">'[cat, ifconfig, touch]'</span></span></span><br><span class="line">zwidc_kvm_192<span class="number">.168</span><span class="number">.1</span><span class="number">.104</span>:</span><br><span class="line">    /usr/bin/ifconfig</span><br><span class="line">agent1.salt:</span><br><span class="line">    /bin/ifconfig</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="cp模块常用方法"><a href="#cp模块常用方法" class="headerlink" title="cp模块常用方法"></a>cp模块常用方法</h4><blockquote><p>只列举一些常用的，详细的可以自行执行此命令查看</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'agent1.salt'</span> sys<span class="selector-class">.doc</span> cp</span><br></pre></td></tr></table></figure><h5 id="cp-get-dir-和-cp-get-file-用法"><a href="#cp-get-dir-和-cp-get-file-用法" class="headerlink" title="cp.get_dir 和 cp.get_file 用法"></a>cp.get_dir 和 cp.get_file 用法</h5><blockquote><p>就是从 master 端 cp 目录 或 文件 到 minion 端的目录，get_dir 支持与 get_file 相同的模板和 gzip 参数。<br>对应的是 cp.push，cp.push_dir，就是把客户端的文件 或 目录推送到 master 端的 cachedir，默认为 /var/cache/salt/master/minions/minion-id/files，但是这种用法是禁用状态，一般不让 minion 端的文件或目录发送到 master 端，这里只是记录一下有这种用法。</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 从 salt master 递归复制目录到 minion 客户端的 /minion/dest 目录下面</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">cp</span>.get_dir <span class="keyword">sal</span><span class="variable">t:</span>//path/<span class="keyword">to</span>/dir/ /minion/dest</span><br><span class="line"></span><br><span class="line"># 从服务端拷贝单个文件到 minion 端的 /minion/dest 目录下面</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">cp</span>.get_file <span class="keyword">sal</span><span class="variable">t:</span>//path/<span class="keyword">to</span>/<span class="keyword">file</span> /minion/dest</span><br><span class="line"></span><br><span class="line"># 所有 Salt minions 从与其 os 粒度相同名称的目录下载 vimrc，并将其复制到 /etc/vimrc</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">cp</span>.get_file <span class="string">"salt://&#123;&#123;grains.os&#125;&#125;/vimrc"</span> /etc/vimrc template=jinja</span><br></pre></td></tr></table></figure><h5 id="cp-get-url-用法"><a href="#cp-get-url-用法" class="headerlink" title="cp.get_url 用法"></a>cp.get_url 用法</h5><blockquote><p>用于从 URL 获取单个文件</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 将 salt:<span class="comment">//cptest1/cptest1file 文件里面的内容写入到 /tmp/test 文件里面，每次都会覆盖里面的内容</span></span><br><span class="line"># 这种就跟 cp.get_file 一样</span><br><span class="line">salt <span class="string">'*'</span> cp.get_url salt:<span class="comment">//cptest1/cptest1file /tmp/test</span></span><br><span class="line"></span><br><span class="line"># 如这种就把一个页面的 html 信息写入到了客户端的 /tmp/test 文件，切记只能是这种文本形式的文件，不要是压缩包啥的</span><br><span class="line">salt <span class="string">'*'</span> cp.get_url http:<span class="comment">//blog.51niux.com/?id=116 /tmp/test</span></span><br><span class="line"></span><br><span class="line"># 最主要的用法还是这种，我们可以以 httpd 的形式去下载一个 sh 脚本，config 文件等</span><br><span class="line">salt <span class="string">'*'</span> cp.get_url http:<span class="comment">//blog.51niux.com/zb_users/upload/2017/03/201703091489030442220789.txt  /tmp/load_one_check.sh</span></span><br><span class="line"></span><br><span class="line">salt <span class="string">'*'</span> cmd.run <span class="string">" cat /tmp/load_one_check.sh"</span></span><br><span class="line"># 下面是部分内容，这样我们很多文本类的文件就不用从 salt 服务端发布了，直接做个 ftp 服务 或 http 服务来发布文本类的东西什么的就可以了。当然 cmd.run 命令也可以了...</span><br><span class="line">agent1.salt:</span><br><span class="line">    #!/bin/bash</span><br><span class="line">    # ========================================================================================</span><br><span class="line">    # System loadavg  plugin for Nagios</span><br><span class="line">    #</span><br><span class="line">    # Written by    : chaishao</span><br><span class="line">    # From          : <span class="number">51</span>niux.com</span><br><span class="line">    # Release       : <span class="number">1.1</span><span class="number">.0</span></span><br><span class="line">    # Creation date : <span class="number">2017</span><span class="number">-03</span><span class="number">-08</span></span><br><span class="line">    # Revision date : <span class="number">2017</span><span class="number">-03</span><span class="number">-08</span></span><br><span class="line">    # Description   : Nagios plugin (script) to check <span class="keyword">system</span> load_one .</span><br><span class="line">    #               This script has been designed and written on Linux System.</span><br><span class="line">    #</span><br><span class="line">    # USAGE         : ./$PROGNAME [-w -c]</span><br><span class="line">    #</span><br><span class="line">    # Exemple:      : ./$PROGNAME -w n1 -c n2</span><br><span class="line">    # ========================================================================================</span><br></pre></td></tr></table></figure><h5 id="cp-list-master-和-cp-list-master-dirs-用法"><a href="#cp-list-master-和-cp-list-master-dirs-用法" class="headerlink" title="cp.list_master 和 cp.list_master_dirs 用法"></a>cp.list_master 和 cp.list_master_dirs 用法</h5><blockquote><p>这个就是查看 salt master 本地的 file 服务器又哪些文件 或 目录</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 这种就不要指定所有机器了，匹配一台机器就可以了，列出存储在主机上的所有文件</span></span><br><span class="line">salt <span class="string">'agent1.salt'</span> cp.list_master</span><br><span class="line"></span><br><span class="line"><span class="meta"># 列出存储在 master 主机上面的所有目录</span></span><br><span class="line">salt <span class="string">'agent1.salt'</span> cp.list_master_dirs</span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看目录下的文件</span></span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">cptest2</span>]<span class="comment"># salt 'agent1.salt' cp.list_master</span></span><br><span class="line">agent1.salt:</span><br><span class="line">    - cptest1/cptest1file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只会将目录列出来以及子目录</span></span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">cptest2</span>]<span class="comment"># salt 'agent1.salt' cp.list_master_dirs</span></span><br><span class="line">agent1.salt:</span><br><span class="line">    - .</span><br><span class="line">    - cptest1</span><br><span class="line">    - cptest2</span><br><span class="line">    - cptest2/cptest2dir</span><br></pre></td></tr></table></figure><h4 id="file-模块常用方法"><a href="#file-模块常用方法" class="headerlink" title="file 模块常用方法"></a>file 模块常用方法</h4><h5 id="file-access-用法"><a href="#file-access-用法" class="headerlink" title="file.access 用法"></a>file.access 用法</h5><blockquote><p>f 代表存在<br>rwx 分别代表读、写、执行权限<br>file.file_exists、file.get_mode 和 file.stats 的用法<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看 /opt/check.sh 文件是否存在，这个挺有用的</span></span><br><span class="line">salt <span class="string">'*'</span> file.access /opt/check.sh f</span><br><span class="line"><span class="meta"># 我们查看某个脚本或者某个文件是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 上面的例子也可以写成这种</span></span><br><span class="line">salt <span class="string">'*'</span> file.file_exists /opt/check.sh</span><br><span class="line"><span class="meta"># 文件存在就返回True，否则返回False</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果有此脚本之后，我们还可以查看此脚本是否具有执行权限</span></span><br><span class="line">salt <span class="string">'*'</span> file.access /opt/check.sh x</span><br><span class="line"><span class="meta"># f、r、w、x 只能写一种，真就返回true，否则false</span></span><br><span class="line"></span><br><span class="line">salt <span class="string">'*'</span> file.get_mode /etc/passwd</span><br><span class="line"><span class="meta"># file.get_mode 后面指定目录或者文件，可以查看其授权情况，如文件一般是0644，如果文件或目录不存在无信息</span></span><br><span class="line"><span class="meta"># 还有</span></span><br><span class="line"><span class="meta"># file.is_blkdev 检查文件是否存在并且是块设备</span></span><br><span class="line"><span class="meta"># file.is_chrdev 检查文件是否存在并且是字符设备</span></span><br><span class="line"><span class="meta"># file.is_fifo 检查文件是否存在并且是FIFO</span></span><br><span class="line"><span class="meta"># file.is_link 检查路径是否是符号链接）</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># file.stats 返回一个文件 或 目录的统计信息</span></span><br><span class="line">salt <span class="string">'*'</span> file.stats /etc/passwd</span><br><span class="line"><span class="meta"># 这里是返回 /etc/passwd 文件的统计信息（类型，时间，属组，权限等）</span></span><br></pre></td></tr></table></figure></p></blockquote><h5 id="file-append-和-file-write-用法"><a href="#file-append-和-file-write-用法" class="headerlink" title="file.append 和 file.write 用法"></a>file.append 和 file.write 用法</h5><blockquote><p>前者将内容追加到文件的末尾，后者是直接覆盖类似于 echo &gt;，但是格式跟前者一样</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 第一组：单引号 和 双引号 的区别，还有 ! 需要注意的地方</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> <span class="regexp">/tmp/</span><span class="number">1</span> <span class="string">"`hostname` This is a good day\!"</span></span><br><span class="line"># 用双引号，就是里面可以接变量，但是这个 ! 需要注意，不用 \ 转义的话会报错</span><br><span class="line"></span><br><span class="line"># salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> <span class="regexp">/tmp/</span><span class="number">1</span> <span class="string">'`hostname` This is a good day!'</span></span><br><span class="line"># 所以如果出现 ! 最好放到单引号里面来引用，因为上面就算转义了也显示的不对</span><br><span class="line"></span><br><span class="line"># 第二组：换行符的使用</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> <span class="regexp">/tmp/</span><span class="number">1</span> <span class="string">"Two"</span><span class="string">"Two Two"</span></span><br><span class="line"># 这表示两组字符串在一行，中间默认加个空格隔开</span><br><span class="line"></span><br><span class="line"># 这表示两组字符串是换行的</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> <span class="regexp">/tmp/</span><span class="number">1</span> <span class="string">"Two"</span> <span class="string">"Two Two"</span></span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@activemq ~]<span class="comment"># cat /tmp/1</span></span><br><span class="line">master.hadoop This <span class="keyword">is</span> a good day<span class="string">\!</span></span><br><span class="line"><span class="string">'hostname'</span> This <span class="keyword">is</span> a good day!</span><br><span class="line">TwoTwo Two</span><br><span class="line">Two</span><br><span class="line">Two Two</span><br><span class="line">[root@activemq ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><blockquote><p>上面两组测试结果，可以明显的比较出差别</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 第三组：! 是不知道怎么解决了，要么就放单引号</span><br><span class="line"># 还有个 = 是需要注意的，有个 <span class="keyword">args</span> 用法，以及 [] 外面加不加双引号的区别</span><br><span class="line"></span><br><span class="line"># 如果字符串里面有等号要用这种 <span class="keyword">args</span> 的用法</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> /tmp/<span class="number">1</span> <span class="keyword">args</span>=<span class="string">'Hostname=`hostname`'</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">args</span> 用 单引号 和 双引号 的区别就在于里面的变量是否解析为变量的值还是字符串</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> /tmp/<span class="number">1</span> <span class="keyword">args</span>=<span class="string">"Hostname=`hostname`"</span></span><br><span class="line"></span><br><span class="line"># 这里就是定义一个并排的两个字符串</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> /tmp/<span class="number">1</span> <span class="keyword">args</span>=[<span class="string">'Hostname=`hostname`'</span><span class="string">'rel=`cat /etc/redhat-release`'</span>]</span><br><span class="line"></span><br><span class="line"># 可见 <span class="keyword">args</span> 默认是单引号的形式，两组字符串中间加逗号</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> /tmp/<span class="number">1</span> <span class="keyword">args</span>=[<span class="string">'Hostname=`hostname`'</span>,<span class="string">'rel=`cat /etc/redhat-release`'</span>]</span><br><span class="line"></span><br><span class="line"># 双引号 不是默认的，所以要单独的加上</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">append</span> /tmp/<span class="number">1</span> <span class="keyword">args</span>=<span class="string">"['Hostname=`hostname`','rel=`cat /etc/redhat-release`']"</span></span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[root@activemq !]</span><span class="comment"># cat /tmp/1</span></span><br><span class="line"><span class="attr">Hostname</span>= hostname</span><br><span class="line"><span class="attr">Hostname</span>=master.hadoop</span><br><span class="line"><span class="attr">Hostname</span>=<span class="string">'hostname'</span>rel=<span class="string">'cat /etc/redhat-release'</span></span><br><span class="line"><span class="attr">Hostname</span>=<span class="string">'hostname'</span></span><br><span class="line"><span class="attr">rel</span>=<span class="string">'cat /etc/redhat-release'</span></span><br><span class="line"><span class="attr">Hostname</span>=master.hadoop</span><br><span class="line"><span class="attr">rel</span>=CentOS release <span class="number">6.4</span> (Final)</span><br></pre></td></tr></table></figure><blockquote><p>从结果我们可以看出，两个字符串之间如果没有逗号的话，不换行，但是中间也没有分隔，可以学习 awk，在两个字符串中间加 “ “ 来进行添加空格的操作。<br>其实主要还是字符串里面有=就用 args 的形式，如果是多组字符串可以用[]的形式，如果要是用变量就用双引号的形式，默认是单引号的形式。</p></blockquote><h5 id="file-chgrp、file-chown-和-file-set-mode-用法"><a href="#file-chgrp、file-chown-和-file-set-mode-用法" class="headerlink" title="file.chgrp、file.chown 和 file.set_mode 用法"></a>file.chgrp、file.chown 和 file.set_mode 用法</h5><blockquote><blockquote><p>前者是更改文件的属组，中者是更改文件数的属主属组，后者是更改文件或目录的权限</p></blockquote></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 将 minion 端的 /tmp/1 文件更改用户组为 test9</span></span><br><span class="line">salt <span class="string">'*'</span> file.chgrp /tmp/<span class="number">1</span> test9</span><br><span class="line"><span class="meta"># 如果客户端有此用户组则返回 None，没有此用户组则返回用户组不存在</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 第一个是用户，第二个是用户组，固定格式必须存在</span></span><br><span class="line">salt <span class="string">'*'</span> file.chown /tmp/<span class="number">1</span> test7 test9</span><br><span class="line"><span class="meta"># 将 /tmp/1 的用户组设置为 test7，用户组设置为 test9</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置 /opt/cs 目录权限为 0550</span></span><br><span class="line">salt <span class="string">'*'</span> file.set_mode /opt/cs <span class="number">0550</span></span><br><span class="line"><span class="meta"># 如果授权成功会显示授权后的权限，如果没有此文件或目录会提示</span></span><br></pre></td></tr></table></figure><h5 id="file-comment-和-file-comment-line-用法"><a href="#file-comment-和-file-comment-line-用法" class="headerlink" title="file.comment 和 file.comment_line 用法"></a>file.comment 和 file.comment_line 用法</h5><blockquote><p>注释指定内容的行，每次操作前都会更新文件名命令的 .bak 备份文件<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这就是将以 /tmp/passwd 文件以 ftp 开头的行注释掉</span></span><br><span class="line">salt <span class="string">'*'</span> <span class="built_in">file</span>.comment /tmp/passwd <span class="keyword">ftp</span></span><br><span class="line"><span class="comment"># 如果注释会显示注释行的信息，如果没注释则返回False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外还支持正则表达式，这里就表示以 ftp 开头以 nologin 结尾的行，多行注释</span></span><br><span class="line">salt <span class="string">'*'</span> <span class="built_in">file</span>.comment /tmp/passwd <span class="keyword">ftp</span>.*nologin$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后面可以指定在行开头加什么字符，当然默认是 #</span></span><br><span class="line">salt <span class="string">'*'</span> <span class="built_in">file</span>.comment /tmp/passwd <span class="keyword">ftp</span>.*nologin$ <span class="string">'-'</span></span><br><span class="line"><span class="comment"># 前面也可以这样后面指定要行头添加的字符</span></span><br></pre></td></tr></table></figure></p></blockquote><h5 id="file-copy-用法"><a href="#file-copy-用法" class="headerlink" title="file.copy 用法"></a>file.copy 用法</h5><blockquote><p>复制文件 或 目录到指定的目录下面，成功返回True，失败会有提示的<br>另外还有 file.move，移动文件的用法</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 这里是文件拷贝，将文件 /path/<span class="keyword">to</span>/src 拷贝到 /path/<span class="keyword">to</span>/ 目录下面，其名称为 dst</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">copy</span> /path/<span class="keyword">to</span>/src /path/<span class="keyword">to</span>/dst</span><br><span class="line"># 切记这里一定要是文件名</span><br><span class="line"></span><br><span class="line"># 目录复制的区别看下面的例子</span><br><span class="line"># 复制目录的话，要加 recurse=True 递归标记</span><br><span class="line"></span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">copy</span> /<span class="keyword">opt</span>/file2 /tmp/haha/ recurse=True</span><br><span class="line"># 这种不管是 /tmp/haha/ 还是 /tmp/haha，如果这个 haha 存在的话，就是将 /<span class="keyword">opt</span>/file2 下面的内容 <span class="keyword">cp</span> -r 拷贝到 /tmp/haha 目录下面，如果 haha 目录不存在的话，就是将 /<span class="keyword">opt</span>/file2 目录变为 /tmp/haha 目录</span><br><span class="line"></span><br><span class="line"># 这种才是正确的将 /<span class="keyword">opt</span>/file2 目录复制到 /tmp/haha/ 目录下方</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">copy</span> /<span class="keyword">opt</span>/file2 /tmp/haha/file2 recurse=True</span><br><span class="line"># 如 haha 目录不存在会创建</span><br><span class="line"></span><br><span class="line"># remove_existing=True 这种就是完全覆盖的形式</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="keyword">copy</span> /path/<span class="keyword">to</span>/src_dir /path/<span class="keyword">to</span>/dst_dir recurse=True remove_existing=True</span><br></pre></td></tr></table></figure><h5 id="file-directory-exists-和-file-dirname-用法"><a href="#file-directory-exists-和-file-dirname-用法" class="headerlink" title="file.directory_exists 和 file.dirname 用法"></a>file.directory_exists 和 file.dirname 用法</h5><blockquote><p>前者检查一个目录是否存在，后者取文件的路径</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /tmp/haha/file 目录存在就会返回True，不存在就会返回False</span></span><br><span class="line">salt <span class="string">'*'</span> <span class="built_in">file</span>.directory_exists /tmp/haha/file2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出来的结果是 /opt/file2，这就是末尾加 /，认为这两个都是目录，当然不管是否有这个目录</span></span><br><span class="line">salt <span class="string">'*'</span> <span class="built_in">file</span>.dirname <span class="string">'/opt/file2/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出来的结果是 /opt/file2</span></span><br><span class="line">salt <span class="string">'*'</span> <span class="built_in">file</span>.dirname <span class="string">'/opt/file2/test1'</span></span><br></pre></td></tr></table></figure><h5 id="file-find-用法"><a href="#file-find-用法" class="headerlink" title="file.find 用法"></a>file.find 用法</h5><blockquote><p>类似于 Linux下面的 find 命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">salt '*' file.find / type=f name=\*.bak size=+10m</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找/目录下，文件类型为文件的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a：所有文件类型</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> b：块设备</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> c：字符设备</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> d：目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> p：FIFO（命名管道）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> f：普通文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> l：符号链接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> s：套接字，名称为 .bak 结尾的（这里支持正则表达式），大小大于 10MB 的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> b：字节</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> k：千字节</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> m：兆字节</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> g：GB</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> t：太字节也是TB</span></span><br><span class="line"></span><br><span class="line">salt '*' file.find /var mtime=+30d size=+10m print=path,size,mtime</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里是查找 /var 目录下，最后一次更改时间是 30 天以前</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> w：周</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> d：天</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> h：小时</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> m：分钟</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> s：秒，大小大于 10MB 的文件，并打印文件的路径，大小，更改时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可打印的内容有</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> group：组名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> md5：文件内容的 MD5 摘要</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mode：文件权限（以整数形式）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mtime：最后修改时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> name：文件基础名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> path：文件绝对路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> size：文件大小（以字节为单位）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">type</span>：文件类型</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> user：用户名</span></span><br><span class="line"></span><br><span class="line">salt '*' file.find /var/log name=\*.[0-9] mtime=+30d size=+10m delete</span><br><span class="line"><span class="meta">#</span><span class="bash"> find 的匹配条件有（name区分大小写，iname不区分大小写，<span class="built_in">type</span>类型，user用户，group用户组，size[+-]大小，mtime修改时间，grep搜索文件内容），最后执行的动作除了 delete 和 <span class="built_in">print</span>，还有 <span class="built_in">exec</span> <span class="built_in">command</span></span></span><br></pre></td></tr></table></figure><h5 id="file-get-gid、file-get-uid-和-file-get-group、file-get-user-用法"><a href="#file-get-gid、file-get-uid-和-file-get-group、file-get-user-用法" class="headerlink" title="file.get_gid、file.get_uid 和 file.get_group、file.get_user 用法"></a>file.get_gid、file.get_uid 和 file.get_group、file.get_user 用法</h5><blockquote><p>前一组返回文件或目录的 gid号 和 uid号，后一组返回文件或目录 group 和 user</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看 /etc 目录的属组</span></span><br><span class="line">salt <span class="string">'*'</span> file.get_user /etc</span><br><span class="line"><span class="meta"># 如果文件或目录不存在返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看 /etc 目录的属组的 uid 号</span></span><br><span class="line">salt <span class="string">'*'</span> file.get_uid /etc</span><br><span class="line"><span class="meta"># 如果目录或者文件不存在返回 -1</span></span><br></pre></td></tr></table></figure><h5 id="file-grep-用法"><a href="#file-grep-用法" class="headerlink" title="file.grep 用法"></a>file.grep 用法</h5><blockquote><p>类似于 Linux上面的 grep 命令</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> file.grep /etc/passwd nobody</span><br><span class="line"><span class="meta"># 过滤 /ect/passwd 文件中包含 nobody 的行</span></span><br><span class="line"><span class="meta"># 输出：pid: 是 grep 运行的 pid 号</span></span><br><span class="line"><span class="meta"># retcode: 为状态码</span></span><br><span class="line"><span class="meta"># 0 是成功过滤 1 为非成功过滤</span></span><br><span class="line"><span class="meta"># stderr: 错误输出</span></span><br><span class="line"><span class="meta"># stdout: 正常输出也就是我们要过滤的内容</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># "-i" 的目的是不区分大小写，注意 -i 前面有空格，额外的参数之间都有空格</span></span><br><span class="line">salt <span class="string">'*'</span> file.grep /etc/sysconfig/network-scripts/ifcfg-eth0 ipaddr <span class="string">" -i"</span> </span><br><span class="line"></span><br><span class="line"><span class="meta"># -B2 就是连上面两行也过滤出来，-A2 就是连下两行也过滤出来</span></span><br><span class="line">salt <span class="string">'*'</span> file.grep /etc/sysconfig/network-scripts/ifcfg-eth0 ipaddr <span class="string">" -i -B2 -A2"</span></span><br></pre></td></tr></table></figure><h5 id="file-link-和-file-symlink-用法"><a href="#file-link-和-file-symlink-用法" class="headerlink" title="file.link 和 file.symlink 用法"></a>file.link 和 file.symlink 用法</h5><blockquote><p>前者是创建文件的硬链接，后者是创建符号链接也就是软链接</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 为 <span class="regexp">/tmp/</span><span class="number">1</span> 创建一个硬链接是 <span class="regexp">/tmp/</span><span class="number">2</span>，只能是文件</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.link <span class="regexp">/tmp/</span><span class="number">1</span> <span class="regexp">/tmp/</span><span class="number">2</span></span><br><span class="line"></span><br><span class="line"># 为 <span class="regexp">/tmp/</span>haha 目录创建一个软链接 <span class="regexp">/tmp/</span>buhaha，成功返回 Ture，失败有提示信息</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.symlink <span class="regexp">/tmp/</span>haha <span class="regexp">/tmp/</span>buhaha</span><br></pre></td></tr></table></figure><h5 id="file-mkdir-和-file-makedirs-用法"><a href="#file-mkdir-和-file-makedirs-用法" class="headerlink" title="file.mkdir 和 file.makedirs 用法"></a>file.mkdir 和 file.makedirs 用法</h5><blockquote><p>两种都是创建目录，前者对结尾的/不敏感，后者对/敏感</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 这就是在 /<span class="keyword">opt</span>/ 目录下面创建 <span class="keyword">cs</span> 目录，并在 <span class="keyword">cs</span> 目录下面创建 <span class="keyword">ds</span> 目录</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="built_in">mkdir</span> /<span class="keyword">opt</span>/<span class="keyword">cs</span>/<span class="keyword">ds</span></span><br><span class="line"># 如果 <span class="keyword">cs</span> 目录不存在就创建。目录存不存在也不会有提示</span><br><span class="line"></span><br><span class="line"># 这里只会创建 /<span class="keyword">opt</span>/<span class="keyword">cs</span> 目录，首先如果 /<span class="keyword">opt</span> 要创建的目录是存在的会有提示</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.makedirs /<span class="keyword">opt</span>/<span class="keyword">cs</span>/<span class="keyword">ds</span></span><br><span class="line"># /<span class="keyword">opt</span>/<span class="keyword">cs</span>/<span class="keyword">ds</span>/ 才会在 <span class="keyword">cs</span> 目录下面创建 <span class="keyword">ds</span> 目录</span><br></pre></td></tr></table></figure><h5 id="file-remove、file-rmdir-和-file-rename-用法"><a href="#file-remove、file-rmdir-和-file-rename-用法" class="headerlink" title="file.remove、file.rmdir 和 file.rename 用法"></a>file.remove、file.rmdir 和 file.rename 用法</h5><blockquote><p>前者是删除文件或者目录，中间是删除目录但是目录一定要为空、后者是重命名文件或目录</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 删除 /<span class="keyword">opt</span> 目录下面的 <span class="keyword">cs</span> 目录</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="built_in">remove</span> /<span class="keyword">opt</span>/<span class="keyword">cs</span>/</span><br><span class="line"></span><br><span class="line"># 删除 /<span class="keyword">opt</span>/<span class="keyword">cs</span> 目录</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.rmdir /<span class="keyword">opt</span>/<span class="keyword">cs</span></span><br><span class="line"># 如果 <span class="keyword">cs</span> 目录下面有内容会提示目录不会空删除失败，如果为空则会执行并返回 True</span><br><span class="line"></span><br><span class="line"># 更改 /<span class="keyword">opt</span>/<span class="keyword">cs</span> 目录下的 <span class="keyword">ds</span> 目录为 dss 目录</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.<span class="built_in">rename</span> /<span class="keyword">opt</span>/<span class="keyword">cs</span>/<span class="keyword">ds</span> /<span class="keyword">opt</span>/<span class="keyword">cs</span>/dss</span><br></pre></td></tr></table></figure><h5 id="file-touch-和-file-truncate-的用法"><a href="#file-touch-和-file-truncate-的用法" class="headerlink" title="file.touch 和 file.truncate 的用法"></a>file.touch 和 file.truncate 的用法</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 文件不存在则创建此文件，如果文件存在里面的内容不会发生变化，但是它的 time 信息会更新，上级目录必须存在</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.touch <span class="regexp">/tmp/</span>test1</span><br><span class="line"></span><br><span class="line"># 将 <span class="regexp">/tmp/</span>passwd 第三个字段以后的内容全删除掉了，就剩下了 roo 三个字段</span><br><span class="line">salt <span class="string">'*'</span> <span class="keyword">file</span>.truncate <span class="regexp">/tmp/</span>passwd <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="hosts模块常用方法"><a href="#hosts模块常用方法" class="headerlink" title="hosts模块常用方法"></a>hosts模块常用方法</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过这个命令可以查看详细用法，如果没有用 内建DNS服务，使用 hosts 模块修改 /etc/hosts 还是经常会用到的</span></span><br><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> sys.doc hosts</span><br></pre></td></tr></table></figure><h5 id="hosts-add-host、hosts-rm-host-和-hosts-set-host-用法"><a href="#hosts-add-host、hosts-rm-host-和-hosts-set-host-用法" class="headerlink" title="hosts.add_host、hosts.rm_host 和 hosts.set_host 用法"></a>hosts.add_host、hosts.rm_host 和 hosts.set_host 用法</h5><blockquote><p>前者是追加，中着是删除、后者是覆盖</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># hosts.add 会先判断 /etc/hosts 里面有没有这个 <span class="built_in">IP</span> <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.113</span>，如果有 foreman.puppet 会将 alias 名追加到这个 <span class="built_in">IP</span> 后面，跟之前的解析别名一起使用这个 <span class="built_in">IP</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.add_host <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.113</span> foreman.puppet</span><br><span class="line"></span><br><span class="line"># 如果没有这个<span class="built_in">IP</span>，则会新创建一行 hosts 记录，但是 <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.113</span> 那条还是存在的，两条记录</span><br><span class="line">salt <span class="string">'*'</span> hosts.add_host <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.114</span> foreman.puppet</span><br><span class="line"></span><br><span class="line"># hosts.set_host 这个的不同之处就是</span><br><span class="line"># 如果这个 <span class="built_in">IP</span> 不存在则创建新的一条 hosts 记录</span><br><span class="line"># 如果 hosts 存在这个 <span class="built_in">IP</span> 的解析记录，会完全覆盖掉，也就是旧的 <span class="built_in">IP</span> 解析记录完全变成现在的结果</span><br><span class="line">salt <span class="string">'*'</span> hosts.set_host <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.114</span> <span class="keyword">test</span>.hahahah</span><br><span class="line"></span><br><span class="line"># 删除 <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.114</span> <span class="keyword">test</span>.haha 这条解析记录</span><br><span class="line">salt <span class="string">'*'</span> hosts.rm_host <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.114</span> <span class="keyword">test</span>.haha</span><br><span class="line"># 如果 <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.114</span> 这行有多条解析记录，而只会删除 <span class="keyword">test</span>.haha 这条记录</span><br><span class="line"># 其他的 <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.114</span> xxx.xxx，还会存在不会删除，可以说是有选择性的删除</span><br></pre></td></tr></table></figure><h5 id="其他查看-hosts-解析的用法"><a href="#其他查看-hosts-解析的用法" class="headerlink" title="其他查看 hosts 解析的用法"></a>其他查看 hosts 解析的用法</h5><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 192.168.1.114 这个 IP 对应的别名解析，如果有则返回对应的 hosts 别名解析记录，没有则什么都不返回</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.get_alias <span class="number">192.168</span><span class="number">.1</span><span class="number">.114</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 这个就是返回 wo.haha 在 /etc/hosts 里面对应的IP</span></span><br><span class="line"><span class="meta"># 但是有个问题，如果有多条只会返回文件最上方的那一条对应的 IP 地址</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.get_ip wo.haha</span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果有这条别名解析记录，则返回True，如果没有则返回False</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.has_pair <span class="number">192.168</span><span class="number">.1</span><span class="number">.113</span> foreman.puppet</span><br><span class="line"></span><br><span class="line"><span class="meta"># 类似于 cat /etc/hosts 的操作</span></span><br><span class="line">salt <span class="string">'*'</span> hosts.list_hosts</span><br><span class="line"><span class="meta"># 但是不同的是，这相当于一个汇总，会以第一行是IP：下一行是其对应的别名解析的方式来呈现，比如一个 IP 有好几行的解析，这所有的解析记录都会汇总到这个 IP 下面，注释过的别名解析的行不会出现在这个汇总信息里面</span></span><br></pre></td></tr></table></figure><h4 id="cron模块常用方法"><a href="#cron模块常用方法" class="headerlink" title="cron模块常用方法"></a>cron模块常用方法</h4><h5 id="cron-raw-cron-用法"><a href="#cron-raw-cron-用法" class="headerlink" title="cron.raw_cron 用法"></a>cron.raw_cron 用法</h5><blockquote><p>cron.list_tab 和 cron.ls 和跟其效果一样，格式也一样必须要指定某一个用户，都是显示指定用户 crontab 文件里面的定时任务</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> cron.raw_cron root  <span class="comment">#必须指定用户，这里是显示root的crontab文件里面的内容，注释的行也会显示</span></span><br></pre></td></tr></table></figure><h5 id="cron-set-job-用法"><a href="#cron-set-job-用法" class="headerlink" title="cron.set_job 用法"></a>cron.set_job 用法</h5><blockquote><p> 为指定用户设置一个定时任务</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> cron.set_job root <span class="string">'0'</span> <span class="string">'0'</span> <span class="string">'*'</span> <span class="string">'*'</span> <span class="string">'*'</span> <span class="string">'/bin/bash /opt/scripts/scp.sh &gt; /dev/null 2&gt;&amp;1'</span></span><br><span class="line"><span class="meta"># 如果 '/bin/bash /opt/scripts/scp.sh &gt; /dev/null 2&gt;&amp;1'</span></span><br><span class="line"><span class="meta"># 这一部分存在了，那么这一步操作就是 update，也就是更新前面执行 crontab 的时间，如果不存在，这就相当于一条添加定时任务的操作返回内容为 new</span></span><br></pre></td></tr></table></figure><h5 id="cron-rm-job-用法"><a href="#cron-rm-job-用法" class="headerlink" title="cron.rm_job 用法"></a>cron.rm_job 用法</h5><blockquote><p>删除指定用户指定的的定时任务</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意格式是用户 后面跟要删除的任务，不要加前面的时间，成功会返回 removed，如果没有这条记录会返回 absent</span></span><br><span class="line">salt '*' cron.rm_job root '<span class="string">/bin/bash</span> <span class="string">/opt/scripts/scp.sh</span> &gt; <span class="string">/dev/null</span> 2&gt;&amp;1'</span><br></pre></td></tr></table></figure><h5 id="network-模块常用方法"><a href="#network-模块常用方法" class="headerlink" title="network 模块常用方法"></a>network 模块常用方法</h5><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 返回minion的主机名</span></span><br><span class="line">salt <span class="string">'*'</span> network.get_hostname</span><br><span class="line"></span><br><span class="line"><span class="meta"># 返回指定网络接口的mac地址</span></span><br><span class="line">salt <span class="string">'*'</span> network.hw_addr eth0</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看主机在某个子网内就返回True，如果不在的话就返回False，多子网用空格隔开</span></span><br><span class="line">salt <span class="string">'*'</span> network.in_subnet <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看 minion 端绑定的 IP 地址，多 IP 也会显示出来，127.0.0.1除外</span></span><br><span class="line">salt <span class="string">'*'</span> network.ip_addrs</span><br><span class="line"></span><br><span class="line"><span class="meta"># 会显示所有接口的详细信息，但是别名的网卡类似于 eth0:1 这种不会显示</span></span><br><span class="line">salt <span class="string">'*'</span> network.interfaces</span><br><span class="line"></span><br><span class="line"><span class="meta"># 显示指定网卡接口上面的 IP，只会显示 IP 不会显示其他内容</span></span><br><span class="line"><span class="meta"># network.interface 会连网关子网掩码也显示</span></span><br><span class="line">salt <span class="string">'*'</span> network.interface_ip eth0</span><br><span class="line"></span><br><span class="line"><span class="meta"># 修改某一个minion的主机名，显然这一步操作只适合在初始化的时候而且不适合执行所有主机</span></span><br><span class="line">salt <span class="string">'agent1.salt'</span> network.mod_hostname test1.salt</span><br><span class="line"></span><br><span class="line">salt <span class="string">'*'</span> network.ping www.baidu.com return_boolean=True timeout=<span class="number">3</span></span><br><span class="line"><span class="meta"># 如果不加 return_boolean=True 显示的是 ping 的结果信息，加了就是如果 ping 通了就返回True，ping 不通就返回 False</span></span><br><span class="line"><span class="meta"># timeout=3 就是 ping 的时间，3秒超时这样能快速返回结果</span></span><br><span class="line"><span class="meta"># 这个其实挺好用的，比如我们可以测试哪些主机的 DNS 设置有问题不能正常解析啊，或是我们内网 DNS 指向了一个非公网的域名解析，可以通过这个看哪些主机设置了内网 DNS 而哪些没设置内网 DNS</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 返回主机所属的子网</span></span><br><span class="line">salt <span class="string">'*'</span> network.subnets</span><br></pre></td></tr></table></figure><h4 id="sys模块常用方法"><a href="#sys模块常用方法" class="headerlink" title="sys模块常用方法"></a>sys模块常用方法</h4><h5 id="sys-argspec-用法"><a href="#sys-argspec-用法" class="headerlink" title="sys.argspec 用法"></a>sys.argspec 用法</h5><blockquote><p>返回 Salt 执行模块中函数的参数说明。对于我们后期写 .sls文件 很有帮助</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看 pkg.install 函数的参数说明</span><br><span class="line">salt <span class="string">'*'</span> sys.argspec pkg.install</span><br><span class="line"></span><br><span class="line"># 查看sys模块里面所有函数的规则说明，或者#salt <span class="string">'*'</span> sys.argspec <span class="string">'sys.*'</span></span><br><span class="line">salt <span class="string">'*'</span> sys.argspec sys</span><br></pre></td></tr></table></figure><h5 id="sys-doc-用法"><a href="#sys-doc-用法" class="headerlink" title="sys.doc 用法"></a>sys.doc 用法</h5><blockquote><p>显示模块下函数的使用文档信息类似于man帮助，前面已介绍过，多模块或者多函数之间用空格隔开</p></blockquote><h5 id="sys-list-functions-和-sys-list-modules-用法"><a href="#sys-list-functions-和-sys-list-modules-用法" class="headerlink" title="sys.list_functions 和 sys.list_modules 用法"></a>sys.list_functions 和 sys.list_modules 用法</h5><blockquote><p>前者就是列出所有模块下面的函数，多模块也是用空格隔开。后者是将所有模块列出来</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 可以用这种方法将所有 sys.list 开头的函数列出来</span></span><br><span class="line">salt <span class="string">'*'</span> sys.list_functions <span class="string">'sys.list_*'</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 列出所有的模块</span></span><br><span class="line">salt <span class="string">'*'</span> sys.list_modules</span><br><span class="line"></span><br><span class="line"><span class="meta"># 列出所有以 s 开头的模块</span></span><br><span class="line">salt <span class="string">'*'</span> sys.list_modules <span class="string">'s*'</span></span><br></pre></td></tr></table></figure><h4 id="service-模块常用方法"><a href="#service-模块常用方法" class="headerlink" title="service 模块常用方法"></a>service 模块常用方法</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看某个命令的服务是否可用，这里是查看sshd服务是否可用，可用返回True，不可用返回False</span></span><br><span class="line">salt <span class="string">'*'</span> service.available sshd</span><br><span class="line"></span><br><span class="line"><span class="meta"># 禁止某个服务开机启动，这里是禁止 postfix 服务开机启动</span></span><br><span class="line">salt <span class="string">'*'</span> service.disable postfix</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看某个服务是否已经开机不启动，这里是以postfix服务为例，是返回True，否则返回False</span></span><br><span class="line">salt <span class="string">'*'</span> service.disabled postfix</span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置某个服务开机启动，这里以 postfix 为例</span></span><br><span class="line">salt <span class="string">'*'</span> service.enable postfix</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看某个服务是否开机启动，这里以 postfix 服务为例</span></span><br><span class="line">salt <span class="string">'*'</span> service.enabled postfix</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看所有的服务项</span></span><br><span class="line">salt <span class="string">'*'</span> service.get_all</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看所有开机启动的服务</span></span><br><span class="line">salt <span class="string">'*'</span> service.get_enabled</span><br><span class="line"></span><br><span class="line"><span class="meta"># 重新加载指定名称的服务</span></span><br><span class="line">salt <span class="string">'*'</span> service.reload &lt;service name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 重新启动指定名称的服务</span></span><br><span class="line">salt <span class="string">'*'</span> service.restart &lt;service name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 启动指定名称的服务</span></span><br><span class="line">salt <span class="string">'*'</span> service.start &lt;service name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看指定服务的状态，启动状态是True，关闭状态是False</span></span><br><span class="line">salt <span class="string">'*'</span> service.status &lt;service name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭指定名称的服务</span></span><br><span class="line">salt <span class="string">'*'</span> service.stop &lt;service name&gt;</span><br></pre></td></tr></table></figure><h4 id="pkg-模块常用方法"><a href="#pkg-模块常用方法" class="headerlink" title="pkg 模块常用方法"></a>pkg 模块常用方法</h4><h5 id="pkg-install-用法"><a href="#pkg-install-用法" class="headerlink" title="pkg.install 用法"></a>pkg.install 用法</h5><blockquote><p>安装传递的包，在安装包之前，添加 refresh=True 来清理 yum 数据库</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数介绍</span></span><br><span class="line">name    <span class="comment"># 要安装的软件包的名称。如果传递了 "pkgs" 或 "sources" 此参数则会被忽略</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如这就相当于在 minion 端执行 yum -y install httpd 操作</span></span><br><span class="line">salt '*' pkg.<span class="keyword">install</span> httpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是第一个 yum 的话，还是可以 refresh 参数，相当于 yum clean all 操作</span></span><br><span class="line">salt '*' pkg.<span class="keyword">install</span> httpd refresh=<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">skip_verify    <span class="comment"># 跳过 GPG 验证检查</span></span><br><span class="line">version        <span class="comment"># 安装包的特定版本</span></span><br><span class="line">fromrepo       <span class="comment"># 指定从哪个 repo 库来安装软件</span></span><br><span class="line">pkgs           <span class="comment"># 指定多个软件包，一定是要以列表传递</span></span><br><span class="line"></span><br><span class="line">salt '*' pkg.<span class="keyword">install</span> pkgs='[<span class="string">"foo"</span>, <span class="string">"bar"</span>]'</span><br><span class="line">salt '*' pkg.<span class="keyword">install</span> pkgs='[<span class="string">"foo"</span>, &#123;<span class="string">"bar"</span>: <span class="string">"1.2.3-4.el5"</span>&#125;]'</span><br><span class="line"></span><br><span class="line">sources    <span class="comment"># 要安装的RPM软件包列表，其中的键是包名称，值作为包的源URI或本地路径</span></span><br><span class="line"></span><br><span class="line">salt '*' pkg.<span class="keyword">install</span> sources='[&#123;<span class="string">"foo"</span>: <span class="string">"salt://foo.rpm"</span>&#125;, &#123;<span class="string">"bar"</span>: <span class="string">"salt://bar.rpm"</span>&#125;]'</span><br></pre></td></tr></table></figure><h5 id="pkg-latest-version-用法"><a href="#pkg-latest-version-用法" class="headerlink" title="pkg.latest_version 用法"></a>pkg.latest_version 用法</h5><blockquote><p>更新软件包至最新版本</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 更新指定的软件包</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.latest_version <span class="params">&lt;package name&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 指定 repo 源来更新软件包</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.latest_version <span class="params">&lt;package name&gt;</span> fromrepo=epel-testing</span><br><span class="line"></span><br><span class="line"><span class="meta"># 多个要更新的软件之间用空格隔开</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.latest_version <span class="params">&lt;package1&gt;</span> <span class="params">&lt;package2&gt;</span> <span class="params">&lt;package3&gt;</span> ...</span><br></pre></td></tr></table></figure><h5 id="pkg-remove-用法"><a href="#pkg-remove-用法" class="headerlink" title="pkg.remove 用法"></a>pkg.remove 用法</h5><blockquote><p>删除软件的操作</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 卸载指定的软件</span><br><span class="line">salt <span class="string">'*'</span> pkg.<span class="built_in">remove</span> &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"># 多软件可以用空格隔开</span><br><span class="line">salt <span class="string">'*'</span> pkg.<span class="built_in">remove</span> <span class="symbol">&lt;package1&gt;</span>,<span class="symbol">&lt;package2&gt;</span>,<span class="symbol">&lt;package3&gt;</span></span><br><span class="line"></span><br><span class="line"># 也可以用 pkgs 使用 <span class="keyword">python</span> 列表的形式</span><br><span class="line">salt <span class="string">'*'</span> pkg.<span class="built_in">remove</span> pkgs=<span class="string">'["foo", "bar"]'</span></span><br></pre></td></tr></table></figure><h5 id="salt-‘-’-pkg-version-用法"><a href="#salt-‘-’-pkg-version-用法" class="headerlink" title="salt ‘*’ pkg.version 用法"></a>salt ‘*’ pkg.version 用法</h5><blockquote><p>查看软件的版本</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 查看指定软件的版本号</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.version <span class="params">&lt;package name&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看多软件版本号</span></span><br><span class="line">salt <span class="string">'*'</span> pkg.version <span class="params">&lt;package1&gt;</span> <span class="params">&lt;package2&gt;</span> <span class="params">&lt;package3&gt;</span> ...</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://blog.51niux.com/?id=116" target="_blank" rel="noopener">http://blog.51niux.com/?id=116</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SaltStack-常用模块&quot;&gt;&lt;a href=&quot;#SaltStack-常用模块&quot; class=&quot;headerlink&quot; title=&quot;SaltStack 常用模块&quot;&gt;&lt;/a&gt;SaltStack 常用模块&lt;/h2&gt;
    
    </summary>
    
      <category term="SaltStack笔记" scheme="http://www.gmlyo.com/categories/SaltStack%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SaltStack常用模块" scheme="http://www.gmlyo.com/tags/SaltStack%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>持续集成CI持续交付CD</title>
    <link href="http://www.gmlyo.com//blog/2018/08/06/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90CI%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98CD/"/>
    <id>http://www.gmlyo.com//blog/2018/08/06/持续集成CI持续交付CD/</id>
    <published>2018-08-06T05:10:03.000Z</published>
    <updated>2018-08-06T07:46:05.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="持续集成CI-持续交付CD"><a href="#持续集成CI-持续交付CD" class="headerlink" title="持续集成CI/持续交付CD"></a>持续集成CI/持续交付CD</h2><a id="more"></a><p>CI 很容易理解，就是持续集成。但是 CD 既可以指代码持续交付，也可理解为代码持续部署。CI 和 CD 之间有很多相似的部分，但是也有很大的区别。</p><h3 id="持续集成-Continuous-Integration"><a href="#持续集成-Continuous-Integration" class="headerlink" title="持续集成 (Continuous Integration)"></a>持续集成 (Continuous Integration)</h3><p>在持续集成环境中，开发人员将会频繁的提交代码到主干。这些新提交在最终合并到主线之前，都需要通过编译和自动化测试流进行验证。这样做是基于之前持续集成过程中很重视自动化测试验证结果，以保障所有的提交在合并主线之后的质量问题，对可能出现的一些问题进行预警。</p><h3 id="持续交付-Continuous-Delivery"><a href="#持续交付-Continuous-Delivery" class="headerlink" title="持续交付 (Continuous Delivery)"></a>持续交付 (Continuous Delivery)</h3><p>持续交付就是讲我们的应用发布出去的过程。这个过程可以确保我们尽可能快的实现交付。这就意味着除了自动化测试，我们还需要有自动化的发布流，以及通过一个按键就可以随时随地实现应用的部署上线。通过持续交付，可以决定每天，每周，每两周发布一次，这完全可以根据自己的业务进行设置。但是，如果您真的希望体验持续交付的优势，就需要先进行小批量发布，尽快部署到生产线，以便在出现问题时方便进行故障排除。</p><h3 id="持续部署-Continuous-Deployment"><a href="#持续部署-Continuous-Deployment" class="headerlink" title="持续部署 (Continuous Deployment)"></a>持续部署 (Continuous Deployment)</h3><p>如果我们想更加深入一步的话，就是持续部署了。通过这个方式，任何修改通过了所有已有的工作流就会直接和客户见面。没有人为干预（没有一键部署按钮），只有当一个修改在工作流中构建失败才能阻止它部署到产品线。持续部署是一个很优秀的方式，可以加速与客户的反馈循环，但是会给团队带来压力，因为不再有“发布日”了。开发人员可以专注于构建软件，他们看到他们的修改在他们完成工作后几分钟就上线了。基本上，当开发人员在主分支中合并一个提交时，这个分支将被构建、测试，如果一切顺利，则部署到生产环境中。</p><h3 id="合并-CI-CD-and-CD？"><a href="#合并-CI-CD-and-CD？" class="headerlink" title="合并 CI CD and CD？"></a>合并 CI CD and CD？</h3><p>当然，正如我所说，他们每部分都更加接近生产环境。你可以构建自己的持续集成环境，然后，一旦团队适应，你可以添加持续交付流，最后，可以添加持续部署流到整个工作流中。</p><p><img src="http://pa2bdkuiw.bkt.clouddn.com/20180806102619.jpg" alt="http://pa2bdkuiw.bkt.clouddn.com/20180806102619.jpg"></p><p>举例 CI，CD 和 CD 流水线</p><p><strong>到底值不值这样做？</strong></p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><ul><li><strong>需要具备哪些条件？</strong></li></ul><p>你的团队需要为每个新功能，代码改进，或者问题修复创建自动化测试用例。你需要一个持续集成服务器，它可以监控代码提交情况，对每个新的提交进行自动化测试。研发团队需要尽可能快的提交代码，至少每天一次提交。</p><ul><li><strong>可以获得什么？</strong></li></ul><p>通过自动化测试可以提早拿到回归测试的结果，避免将一些问题提交到交付生产中发布编译将会更加容易，因为合并之初已经将所有问题都规避了减少工作问题切换，研发可以很快获得构建失败的消息，在开始下一个任务之前就可以很快解决。测试成本大幅降低-你的 CI 服务器可以在几秒钟之内运行上百条测试。你的 QA 团队花费在测试上面的时间会大幅缩短，将会更加侧重于质量文化的提升上面。</p><h3 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h3><ul><li><strong>需要具备的条件</strong></li></ul><p>你需要有强大的持续集成组件和足够多的测试项可以满足你代码的需求部署需要自动化。触发是手动的，但是部署一旦开始，就不能人为干预。你的团队可能需要接受特性开关，没有完成的功能模块不会影响到线上产品。</p><ul><li><strong>可以获得什么？</strong></li></ul><p>繁琐的部署工作没有了。你的团队不在需要花费几天的时间去准备一个发布。你可以更快的进行交付，这样就加快了与客户之间的反馈环。轻松应对小变更，加速迭代</p><h3 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h3><ul><li><strong>需要具备的条件</strong></li></ul><p>研发团队测试理念比较完善。测试单元的健壮性直接决定你的交付质量。你的文档和部署频率要保持一致。<br>特征标志成为发布重大变化过程的固有部分，以确保您可以与其他部门（支持，市场营销，公关…）协调。</p><ul><li><strong>可以获得什么？</strong></li></ul><p>发布频率更快，因为你不需要停下来等待发布。每一处提交都会自动触发发布流。<br>在小批量发布的时候，风险降低了，发现问题也可以很轻松的修复。<br>客户每天都可以看到我们的持续改进和提升，而不是每个月或者每季度，或者每年。<br>如前所述，您可以采用持续集成，持续交付和持续部署。你怎么做取决于你的需求和你的业务情况。<br>如果你刚刚开始一个项目，并且还没有客户，那么你就可以去创建这些工作流，最好是将这三个方面都实现，并且在你的项目迭代和需求增长中同时迭代它们。<br>如果您已经有一个生产项目，那么您可以一步一步地分阶段去实现他们。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.sohu.com/a/204652724_640923" target="_blank" rel="noopener">https://www.sohu.com/a/204652724_640923</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;持续集成CI-持续交付CD&quot;&gt;&lt;a href=&quot;#持续集成CI-持续交付CD&quot; class=&quot;headerlink&quot; title=&quot;持续集成CI/持续交付CD&quot;&gt;&lt;/a&gt;持续集成CI/持续交付CD&lt;/h2&gt;
    
    </summary>
    
      <category term="CI/CD笔记" scheme="http://www.gmlyo.com/categories/CI-CD%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="持续集成CI持续交付CD" scheme="http://www.gmlyo.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90CI%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98CD/"/>
    
  </entry>
  
  <entry>
    <title>Python函数基础</title>
    <link href="http://www.gmlyo.com//blog/2018/08/03/Python%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.gmlyo.com//blog/2018/08/03/Python函数基础/</id>
    <published>2018-08-03T07:07:48.000Z</published>
    <updated>2018-08-03T07:54:09.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python函数基础"><a href="#Python函数基础" class="headerlink" title="Python函数基础"></a>Python函数基础</h2><a id="more"></a><p><strong>什么是函数？</strong></p><ul><li>函数就是具备某一功能的工具</li><li>函数的使用必须遵循先定义，后调用的原则</li><li>实现准备工具的过程即函数的定义</li><li>拿来就用即函数的调用</li></ul><p><strong>函数氛围两大类</strong></p><ul><li>内置函数</li><li>自定义函数</li></ul><p><strong>为什么要用函数？</strong></p><blockquote><p>不用函数的问题</p><ol><li>代码的组织结构不清晰，可读性差</li><li>遇到重复的功能只能重复编写实现代码，代码冗余过多</li><li>程序的扩展性差，功能需要扩展时，需要找出所有实现该功能的地方修改之，无法统一管理且维护难度极大</li></ol></blockquote><p><strong>怎么用函数？</strong></p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3</span>,...)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文档注释</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    函数体</span><br><span class="line">    code1</span><br><span class="line">    code2</span><br><span class="line">    code3</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><h4 id="自定义函数的三种形式"><a href="#自定义函数的三种形式" class="headerlink" title="自定义函数的三种形式"></a>自定义函数的三种形式</h4><h5 id="无参函数"><a href="#无参函数" class="headerlink" title="无参函数"></a>无参函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello1'</span>)</span><br><span class="line">    print(<span class="string">'hello2'</span>)</span><br><span class="line">    print(<span class="string">'hello3'</span>)</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hello1</span><br><span class="line">hello2</span><br><span class="line">hello3</span><br></pre></td></tr></table></figure><h5 id="有参函数"><a href="#有参函数" class="headerlink" title="有参函数"></a>有参函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(y)</span><br><span class="line"></span><br><span class="line">func2(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">func2(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">func2(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h5 id="空函数"><a href="#空函数" class="headerlink" title="空函数"></a>空函数</h5><blockquote><p>用于预设程序的框架</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span>    <span class="comment"># 下载功能</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">()</span>:</span>    <span class="comment"># 上传功能</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">()</span>:</span>    <span class="comment"># 认证功能</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ls</span><span class="params">()</span>:</span>    <span class="comment"># 浏览功能</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cd</span><span class="params">()</span>:</span>    <span class="comment"># 切换目录的功能</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h5 id="定义函数阶段"><a href="#定义函数阶段" class="headerlink" title="定义函数阶段"></a>定义函数阶段</h5><blockquote><p>相当于定义了一个名字，名字指向了一个值，值是内存地址，该地址包含了函数体代码<br>定义函数阶段，只检测语法，不执行函数体代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span>    <span class="comment"># foo = 函数的内存地址</span></span><br><span class="line">    print(<span class="string">'first'</span>)</span><br><span class="line">    print(<span class="string">'second'</span>)</span><br><span class="line">    print(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line">print(foo)    <span class="comment"># 打印输出函数值内存地址</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&lt;function <span class="keyword">for</span> at <span class="number">0x000001E71A588950</span>&gt;</span><br><span class="line"></span><br><span class="line">foo()    <span class="comment"># 函数调用阶段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">first</span><br><span class="line">second</span><br><span class="line">third</span><br></pre></td></tr></table></figure><p><strong>测试一</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from bar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">from</span> foo</span><br><span class="line"><span class="keyword">from</span> bar</span><br></pre></td></tr></table></figure></p><p><strong>测试二</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from bar'</span>)</span><br><span class="line"></span><br><span class="line">foo()    <span class="comment"># 调用阶段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">from</span> foo</span><br><span class="line"><span class="keyword">from</span> bar</span><br></pre></td></tr></table></figure></p><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名<span class="comment">()</span></span><br></pre></td></tr></table></figure><h4 id="调用函数过程"><a href="#调用函数过程" class="headerlink" title="调用函数过程"></a>调用函数过程</h4><blockquote><p>根据函数名找到函数的内存地址<br>函数的内存地址加括号可以触发函数体代码的运行</p></blockquote><h4 id="调用函数的三种形式"><a href="#调用函数的三种形式" class="headerlink" title="调用函数的三种形式"></a>调用函数的三种形式</h4><h5 id="无参函数-1"><a href="#无参函数-1" class="headerlink" title="无参函数"></a>无参函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f1'</span>)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">from</span> f1</span><br></pre></td></tr></table></figure><h5 id="有参函数-1"><a href="#有参函数-1" class="headerlink" title="有参函数"></a>有参函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">res = max(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">res = max(<span class="number">1</span>, <span class="number">2</span>)*<span class="number">10</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><blockquote><p>当作参数传给其他函数</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def <span class="built_in">max</span>(<span class="keyword">x</span>, <span class="keyword">y</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">x</span> &gt; <span class="keyword">y</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">x</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">res</span> = <span class="built_in">max</span>(<span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><h4 id="什么是返回值？"><a href="#什么是返回值？" class="headerlink" title="什么是返回值？"></a>什么是返回值？</h4><p>函数的返回值是函数体代码运行的一个结果</p><h4 id="什么时候使用返回值？"><a href="#什么时候使用返回值？" class="headerlink" title="什么时候使用返回值？"></a>什么时候使用返回值？</h4><h4 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h4><blockquote><p>return 返回值：</p><ol><li>返回值没有类型限制</li><li>返回值没有个数限制<br>逗号分隔多个值，返回一个元组<br>一个值，返回值本身<br>没有return，默认返回None</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>,]</span><br><span class="line"></span><br><span class="line">res = f1()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><blockquote><p>逗号分隔多个值，返回一个元组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">res = f1()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>没有return，默认返回None<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">res = f1()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>return 是函数结束的标志<br>函数内可以有多个return，但只要执行一次，整个函数就立即结束，并且将return后的值当作本次调用的结果返回<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'first'</span></span><br><span class="line">    print(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'second'</span></span><br><span class="line">    print(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'third'</span></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>函数使用的原则：先定义，再调用</li></ol><ul><li>函数名即“变量名”，“变量名”必须先定义后引用。未定义而直接引用函数，就相当于在引用一个不存在的变量名</li><li>我们在使用函数时，一定要明确地区分定义阶段和调用阶段</li></ul><ol start="2"><li>函数在定义阶段都做了哪些事？</li></ol><ul><li>只检测语法，不执行代码</li><li>也就说，语法错误在函数定义阶段就会检测出来，而代码的逻辑错误只有在执行时才会知道</li></ul><blockquote><p>函数名：是用来访问到函数的内存地址，拿到函数的内存地址加括号就可以触发函数体代码<br>函数参数：是外部调用者为函数体传值的媒介<br>函数体代码：是函数功能的具体实现</p></blockquote><ol start="3"><li>return 函数返回值：函数的返回值是函数体执行的成果</li></ol><ul><li>返回值没有类型限制</li><li>返回值没有个数限制</li><li>没有return，默认返回None</li><li>return 值1：返回值1</li><li>return 值1, 值2, 值3：返回(值1, 值2, 值3)</li></ul><ol start="4"><li>return 注意点：</li></ol><ul><li>return 是函数结束运行的标志，函数体内可以都有多个 return</li><li>但是只有执行一次，整个函数就终止运行</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python函数基础&quot;&gt;&lt;a href=&quot;#Python函数基础&quot; class=&quot;headerlink&quot; title=&quot;Python函数基础&quot;&gt;&lt;/a&gt;Python函数基础&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python函数基础" scheme="http://www.gmlyo.com/tags/Python%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python修改文件内容</title>
    <link href="http://www.gmlyo.com//blog/2018/08/01/Python%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/"/>
    <id>http://www.gmlyo.com//blog/2018/08/01/Python修改文件内容/</id>
    <published>2018-07-31T17:48:27.000Z</published>
    <updated>2018-07-31T18:26:21.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python修改文件内容"><a href="#Python修改文件内容" class="headerlink" title="Python修改文件内容"></a>Python修改文件内容</h2><a id="more"></a><p>想要修改文件中的内容，没有办法直接实现。<br>硬盘上的数据都是一圈一圈写的，没有修改一说，都是新数据覆盖老数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim db.txt</span><br><span class="line">你好哈哈哈</span><br></pre></td></tr></table></figure><blockquote><p>预期 在 <code>你好</code> 后面插入 <code>上上上</code></p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'db.txt'</span> mode=<span class="string">'r+t'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">6</span>, <span class="number">0</span>)    <span class="comment"># 移动了6个bytes</span></span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'上上上'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">cat db.txt</span><br><span class="line">你好上上上</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>seek()</code> 文件指针偏移 会覆盖其他内容，不好掌控</p></blockquote><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote><ol><li>先将文件内容全部读入内存</li><li>在内存中修改完毕</li><li>将修改的结果覆盖写回硬盘中</li></ol></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim db.txt</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><blockquote><p>优点：在修改期间硬盘上同一时刻只有一份数据<br>缺点：占用内存过高</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'db.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.<span class="built_in">read</span>()</span><br><span class="line">    new_data = data.<span class="built_in">replace</span>(<span class="string">'World'</span>, <span class="string">'Python'</span>)</span><br><span class="line">    print(new_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'db.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(new_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">cat db.txt</span><br><span class="line">Hello Python!</span><br></pre></td></tr></table></figure><h3 id="方法二（推荐使用）"><a href="#方法二（推荐使用）" class="headerlink" title="方法二（推荐使用）"></a>方法二（推荐使用）</h3><blockquote><p>一行一行的读，一行一行的改</p><ol><li>以读的模式打开源文件，以写的模式打开一个临时文件（解决占用内存的问题）</li><li>然后用 for 循环读取原文件一行行内容，每读一行则修改一行，将修改的内容写入临时文件，直到把源文件都遍历完，</li><li>删除原文件，将临时文件重命名为原文件名</li></ol></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'db.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> src_f, \</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">'.db.txt.swap'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> temp_f:</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> src_f:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'World'</span> <span class="keyword">in</span> <span class="built_in">line</span>:</span><br><span class="line">            <span class="built_in">line</span> = <span class="built_in">line</span>.<span class="built_in">replace</span>(<span class="string">'World'</span>, <span class="string">'Python'</span>)</span><br><span class="line">        temp_f.<span class="built_in">write</span>(<span class="built_in">line</span>)</span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">'db.txt'</span>)</span><br><span class="line">os.<span class="built_in">rename</span>(<span class="string">'.db.txt.swap'</span>, <span class="string">'db.txt'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优点：同一时刻在内存中只存在文件的一行内容<br>缺点：在修改期间，硬盘上同一份数据会保存两份</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python修改文件内容&quot;&gt;&lt;a href=&quot;#Python修改文件内容&quot; class=&quot;headerlink&quot; title=&quot;Python修改文件内容&quot;&gt;&lt;/a&gt;Python修改文件内容&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python修改文件内容" scheme="http://www.gmlyo.com/tags/Python%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>Python字典操作</title>
    <link href="http://www.gmlyo.com//blog/2018/07/30/Python%E5%AD%97%E5%85%B8%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.gmlyo.com//blog/2018/07/30/Python字典操作/</id>
    <published>2018-07-30T15:04:12.000Z</published>
    <updated>2018-07-30T15:04:24.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python字典操作"><a href="#Python字典操作" class="headerlink" title="Python字典操作"></a>Python字典操作</h2><p>字典（dict），是一系列放在 <code>{}</code> 的键值对（key-value）。<br>可以使用键来访问对应的值，与键对应的值可以是 数字、字符串、列表、字典<br>字典具有极快的查找速度。 </p><a id="more"></a><blockquote><p>下边是一个与手机信息相关的 dict<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用 <code>dict()</code>方法 创建字典<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">d</span> = dict(os= <span class="string">'Android'</span>, soc=<span class="string">'Qualcomm'</span>, screen=<span class="string">'Samsung'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用可迭代对象（列表、元组等）也可以创建字典<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = dict(([<span class="string">'x'</span>, <span class="number">1</span>], [<span class="string">'y'</span>, <span class="number">2</span>], [<span class="string">'z'</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = dict(zip((<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用 <code>fromkeys()</code>内建方法 创建默认字典<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; &#123;&#125;.fromkeys((<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>), -<span class="number">1</span>)</span><br><span class="line">&#123;<span class="string">'x'</span>: -<span class="number">1</span>, <span class="string">'y'</span>: -<span class="number">1</span>, <span class="string">'z'</span>: -<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; m = &#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 key 访问 value，如果 key 不存在则报错</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; m[<span class="string">'os'</span>]</span></span><br><span class="line">'Android'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为了避免 key 不存在报错问题，可以使用 get 方法，如果 key 不存在则返回 None，或指定返回值</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; m.get(<span class="string">'soc'</span>)</span></span><br><span class="line">'Qualcomm'</span><br><span class="line"><span class="meta">#</span><span class="bash"> key 不存在时，指定返回值</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; m.get(<span class="string">'xxx'</span>，-1)</span></span><br><span class="line">-1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 除了 get 方法外，还可以先通过 <span class="keyword">in</span> 判断 key 是否存在</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;<span class="string">'xxx'</span> <span class="keyword">in</span> m</span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;<span class="string">'os'</span> <span class="keyword">in</span> m </span></span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="添加-key-value"><a href="#添加-key-value" class="headerlink" title="添加 key-value"></a>添加 key-value</h3><blockquote><p>为字典增加一项</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; m = &#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m[<span class="string">'camera'</span>] = <span class="string">'Sony'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m</span><br><span class="line">&#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>, <span class="string">'camera'</span>: <span class="string">'Sony'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="删除-key-value"><a href="#删除-key-value" class="headerlink" title="删除 key-value"></a>删除 key-value</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; m = &#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; del m[<span class="string">'os'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m</span><br><span class="line">&#123;<span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.pop(<span class="string">'soc'</span>)</span><br><span class="line"><span class="string">'Qualcomm'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m</span><br><span class="line">&#123;<span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line"><span class="comment"># 删除所有键值对</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.clear()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; m = &#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m[<span class="string">'screen'</span>] = <span class="string">'BOE'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m</span><br><span class="line">&#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'BOE'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="字典的长度（键值对数量）"><a href="#字典的长度（键值对数量）" class="headerlink" title="字典的长度（键值对数量）"></a>字典的长度（键值对数量）</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; len(d)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="update-字典合并"><a href="#update-字典合并" class="headerlink" title="update() 字典合并"></a>update() 字典合并</h3><blockquote><p>将一个字典的内容添加到另一个字典<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d1 = &#123;<span class="string">'m'</span>: <span class="number">4</span>, <span class="string">'n'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.update(d1)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>, <span class="string">'m'</span>: <span class="number">4</span>, <span class="string">'n'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><h4 id="遍历字典的键-key"><a href="#遍历字典的键-key" class="headerlink" title="遍历字典的键 key"></a>遍历字典的键 key</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; d = &#123;<span class="string">'list'</span>: [1, 2, 3], 1: 123, <span class="string">'111'</span>: <span class="string">'python3'</span>, <span class="string">'tuple'</span>: (4, 5, 6)&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">for</span> key <span class="keyword">in</span> d.keys():</span></span><br><span class="line">···    print(key)</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">list</span><br><span class="line">111</span><br><span class="line">tuple</span><br></pre></td></tr></table></figure><h4 id="遍历字典的值value"><a href="#遍历字典的值value" class="headerlink" title="遍历字典的值value"></a>遍历字典的值value</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; d = &#123;<span class="string">'list'</span>: [1, 2, 3], 1: 123, <span class="string">'111'</span>: <span class="string">'python3'</span>, <span class="string">'tuple'</span>: (4, 5, 6)&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">for</span> value <span class="keyword">in</span> d.values():</span></span><br><span class="line">···    print (value)</span><br><span class="line"></span><br><span class="line">[1, 2, 3]</span><br><span class="line">123</span><br><span class="line">python3</span><br><span class="line">(4, 5, 6)</span><br></pre></td></tr></table></figure><h4 id="遍历获取-key-和-value"><a href="#遍历获取-key-和-value" class="headerlink" title="遍历获取 key 和 value"></a>遍历获取 key 和 value</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m = &#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> key <span class="keyword">in</span> m:</span><br><span class="line">···    <span class="built_in">print</span>(key + <span class="string">' -&gt; '</span> + m[key])</span><br><span class="line"></span><br><span class="line">os<span class="function"> -&gt;</span> Android</span><br><span class="line">soc<span class="function"> -&gt;</span> Qualcomm</span><br><span class="line">screen<span class="function"> -&gt;</span> Samsung</span><br></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;<span class="string">'list'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">1</span>:<span class="number">123</span>, <span class="string">'111'</span>: <span class="string">'python3'</span>, <span class="string">'tuple'</span>: (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> <span class="built_in">key</span> in d:</span><br><span class="line">···    <span class="built_in">print</span>(<span class="built_in">str</span>(<span class="built_in">key</span>) + <span class="string">':'</span> + <span class="built_in">str</span>(d[<span class="built_in">key</span>]))</span><br><span class="line"></span><br><span class="line">list:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="number">1</span>:<span class="number">123</span></span><br><span class="line"><span class="number">111</span>:python3</span><br><span class="line">tuple:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h4 id="遍历字典的项-items，获取-key-和-value"><a href="#遍历字典的项-items，获取-key-和-value" class="headerlink" title="遍历字典的项 items，获取 key 和 value"></a>遍历字典的项 items，获取 key 和 value</h4><blockquote><p><code>items()</code> 返回一个列表，列表的每一个元素是一个包含 <code>key</code>、<code>value</code> 的 <code>tuple</code></p></blockquote><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m = &#123;<span class="string">'os'</span>: <span class="string">'Android'</span>, <span class="string">'soc'</span>: <span class="string">'Qualcomm'</span>, <span class="string">'screen'</span>: <span class="string">'Samsung'</span>&#125;</span><br><span class="line"><span class="comment"># m.items() 返回一个列表，列表的每一个元素是一个包含 key、value 的 tuple</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> key, value <span class="keyword">in</span> m.items():</span><br><span class="line">···    <span class="built_in">print</span>(key + <span class="string">' -&gt; '</span> + value)</span><br><span class="line"></span><br><span class="line">os<span class="function"> -&gt;</span> Android</span><br><span class="line">soc<span class="function"> -&gt;</span> Qualcomm</span><br><span class="line">screen<span class="function"> -&gt;</span> Samsung</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'list'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">1</span>: <span class="number">123</span>, <span class="string">'111'</span>: <span class="string">'python3'</span>, <span class="string">'tuple'</span>: (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> d.items():</span><br><span class="line">···    print(item)</span><br><span class="line"></span><br><span class="line">(<span class="string">'list'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">(<span class="number">1</span>, <span class="number">123</span>)</span><br><span class="line">(<span class="string">'111'</span>, <span class="string">'python3'</span>)</span><br><span class="line">(<span class="string">'tuple'</span>, (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; d = &#123;<span class="string">'list'</span>: [1, 2, 3], 1: 123, <span class="string">'111'</span>: <span class="string">'python3'</span>, <span class="string">'tuple'</span>: (4, 5, 6)&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span></span><br><span class="line">···    print(key, value)</span><br><span class="line"></span><br><span class="line">list [1, 2, 3]</span><br><span class="line">1 123</span><br><span class="line">111 python3</span><br><span class="line">tuple (4, 5, 6)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; d = &#123;<span class="string">'list'</span>: [1, 2, 3], 1: 123, <span class="string">'111'</span>: <span class="string">'python3'</span>, <span class="string">'tuple'</span>: (4, 5, 6)&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">for</span> (key, value) <span class="keyword">in</span> d.items():</span></span><br><span class="line">···    print(key, value)</span><br><span class="line"></span><br><span class="line">list [1, 2, 3]</span><br><span class="line">1 123</span><br><span class="line">111 python3</span><br><span class="line">tuple (4, 5, 6)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python字典操作&quot;&gt;&lt;a href=&quot;#Python字典操作&quot; class=&quot;headerlink&quot; title=&quot;Python字典操作&quot;&gt;&lt;/a&gt;Python字典操作&lt;/h2&gt;&lt;p&gt;字典（dict），是一系列放在 &lt;code&gt;{}&lt;/code&gt; 的键值对（key-value）。&lt;br&gt;可以使用键来访问对应的值，与键对应的值可以是 数字、字符串、列表、字典&lt;br&gt;字典具有极快的查找速度。 &lt;/p&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python字典操作" scheme="http://www.gmlyo.com/tags/Python%E5%AD%97%E5%85%B8%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Python文件内指针移动</title>
    <link href="http://www.gmlyo.com//blog/2018/07/28/Python%E6%96%87%E4%BB%B6%E5%86%85%E5%85%89%E6%A0%87%E7%A7%BB%E5%8A%A8/"/>
    <id>http://www.gmlyo.com//blog/2018/07/28/Python文件内光标移动/</id>
    <published>2018-07-27T17:20:34.000Z</published>
    <updated>2018-07-27T17:20:35.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python文件内指针移动"><a href="#Python文件内指针移动" class="headerlink" title="Python文件内指针移动"></a>Python文件内指针移动</h2><a id="more"></a><p><strong>read(3)</strong></p><blockquote><ul><li>文件打开方式为文本模式时，代表读取 3 个字符</li><li>文件打开方式为 <code>b模式</code> 时，代表读取 3 个字节</li><li>其余的文件内光标移动都是以字节为单位如 <code>seek</code>，<code>tell</code>，<code>truncate</code></li></ul></blockquote><h3 id="seek-文件内光标操作"><a href="#seek-文件内光标操作" class="headerlink" title="seek() 文件内光标操作"></a><code>seek()</code> 文件内光标操作</h3><blockquote><p><code>seek</code> 有三种移动方式 <code>0</code>，<code>1</code>，<code>2</code><br>其中 <code>1</code> 和 <code>2</code> 必须在 <code>b模式</code> 下进行，但无论哪种模式，都是以 <code>bytes</code> 为单位移动的</p></blockquote><blockquote><p>单位统一为字节<br>第一个参数：控制移动的字节数<br>第二个参数：控制移动的参照物，值可以为：0、1、2<br>0：参照文件开头，默认为0<br>1：参照当前位置<br>2：参照文件末尾</p></blockquote><h3 id="0：参照文件开头（在-b-和-t-模式下都能使用）"><a href="#0：参照文件开头（在-b-和-t-模式下都能使用）" class="headerlink" title="0：参照文件开头（在 b 和 t 模式下都能使用）"></a>0：参照文件开头（在 b 和 t 模式下都能使用）</h3><blockquote><p>默认为 0<br><code>强调：除了 0 模式以外的模式都只能在 b 模式下使用</code><br><code>1 和 2 只能用在 b 模式下</code></p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat e.txt</span><br><span class="line">你好hello</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">3</span>)</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">好hello</span><br></pre></td></tr></table></figure><blockquote><p> 如果一个 <code>字节</code> 没有读完，会报以下错误</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">2</span>)</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="built_in">result</span>, consumed) = self.<span class="title">_buffer</span>_decode(data, self.errors, final)</span><br><span class="line">UnicodeDecodeError: <span class="string">'utf-8'</span> codec can<span class="string">'t decode byte 0xa0 in position 0: invalid start byte</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">read</span>()</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    print(<span class="string">'第二次'</span>, f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">第二次 你好hello</span><br></pre></td></tr></table></figure><h3 id="1：参照当前位置（只能在-b模式下使用）"><a href="#1：参照当前位置（只能在-b模式下使用）" class="headerlink" title="1：参照当前位置（只能在 b模式下使用）"></a>1：参照当前位置（只能在 b模式下使用）</h3><blockquote><p>储备：<code>read(n)</code><br>read 的 n 在 <code>t</code>模式下 读的是字符个数<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.<span class="built_in">read</span>(<span class="number">2</span>)</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">你好</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>read 的 n 在 <code>b</code>模式下 读的是字节个数<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.<span class="built_in">read</span>(<span class="number">3</span>)</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">b<span class="string">'\xe4\xbd\xa0'</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">with</span> open('e.txt', mode='rb') <span class="keyword">as</span> f:</span><br><span class="line">    <span class="class"><span class="keyword">data</span> = f.read(3)</span></span><br><span class="line">    print(<span class="class"><span class="keyword">data</span>.decode('<span class="title">utf</span>-8'))</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">你</span><br></pre></td></tr></table></figure><blockquote><p>其余所有文件内指针的移动都是以字节为单位</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.<span class="built_in">read</span>(<span class="number">1</span>)</span><br><span class="line">    print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">你</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.<span class="built_in">read</span>(<span class="number">1</span>)</span><br><span class="line">    print(s)</span><br><span class="line">    print(f.tell())    <span class="comment"># 查看当前指针位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">你</span><br><span class="line"><span class="number">3</span>    <span class="comment"># 表示当前指针在第 3 个字节</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.<span class="built_in">read</span>(<span class="number">1</span>)    <span class="comment"># 读取一个字符</span></span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">6</span>, <span class="number">0</span>)    <span class="comment"># 0 将指针放到文件开头，移动到第 6 个字节位</span></span><br><span class="line">    print(f.<span class="built_in">read</span>())    <span class="comment"># 打印输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.<span class="built_in">read</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># f.seek(6, 0)</span></span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">b<span class="string">'hello'</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.<span class="built_in">read</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># f.seek(6, 0)</span></span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">    print(f.<span class="built_in">read</span>().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h3 id="2：参照文件末尾（只能在-b模式下使用）"><a href="#2：参照文件末尾（只能在-b模式下使用）" class="headerlink" title="2：参照文件末尾（只能在 b模式下使用）"></a>2：参照文件末尾（只能在 b模式下使用）</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat e.txt</span><br><span class="line">你好hell<span class="meta">o1</span></span><br><span class="line">你好hell<span class="meta">o2</span></span><br><span class="line">你好hell<span class="meta">o3</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">-6</span>,<span class="number">2</span>)    <span class="comment"># 读取 'hello3'</span></span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">b<span class="string">'hello3'</span></span><br></pre></td></tr></table></figure><h3 id="truncate-截断文件"><a href="#truncate-截断文件" class="headerlink" title="truncate 截断文件"></a><code>truncate</code> 截断文件</h3><blockquote><p>文件的打开方式必须可写，但是不能用 <code>w</code> 或 <code>w+</code> 等方式打开，因为那样直接清空文件了<br>所以 <code>truncate</code> 要在 <code>r+</code> 或 <code>a</code> 或 <code>a+</code> 等模式下测试效果<br>a：追加写<br>r+：可读可写</p></blockquote><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat e.txt</span><br><span class="line">你aaa好hell<span class="meta">o1</span></span><br><span class="line">你好hell<span class="meta">o2</span></span><br><span class="line">你好hell<span class="meta">o3</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.truncate(<span class="number">9</span>)    <span class="comment"># 从文件开头截取到 3个bytes 的位置，其余的删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">cat e.txt</span><br><span class="line">你aaa好</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'e.txt'</span>, mode=<span class="string">'r+t'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.truncate(<span class="number">9</span>)    <span class="comment"># 从文件开头截取到 3个bytes 的位置，其余的删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">cat e.txt</span><br><span class="line">你aaa好</span><br></pre></td></tr></table></figure><h3 id="练习：基于-seek-实现-tail-f-功能"><a href="#练习：基于-seek-实现-tail-f-功能" class="headerlink" title="练习：基于 seek 实现 tail -f 功能"></a>练习：基于 <code>seek</code> 实现 <code>tail -f</code> 功能</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'test.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="built_in">line</span> = f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">line</span>:</span><br><span class="line">            print(<span class="built_in">line</span>.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">time</span>.sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python文件内指针移动&quot;&gt;&lt;a href=&quot;#Python文件内指针移动&quot; class=&quot;headerlink&quot; title=&quot;Python文件内指针移动&quot;&gt;&lt;/a&gt;Python文件内指针移动&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python文件内指针移动" scheme="http://www.gmlyo.com/tags/Python%E6%96%87%E4%BB%B6%E5%86%85%E6%8C%87%E9%92%88%E7%A7%BB%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ集群配置</title>
    <link href="http://www.gmlyo.com//blog/2018/07/25/RabbitMQ%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.gmlyo.com//blog/2018/07/25/RabbitMQ集群配置/</id>
    <published>2018-07-25T15:25:46.000Z</published>
    <updated>2018-07-26T06:50:37.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RabbitMQ-集群配置"><a href="#RabbitMQ-集群配置" class="headerlink" title="RabbitMQ 集群配置"></a>RabbitMQ 集群配置</h2><p>这里展示的是多机集群的部署，如果机器受限，可以选择单机集群部署</p><a id="more"></a><p>RabbitMQ 可以通过三种方法来部署分布式集群系统<br>分别是：cluster，federation，shovel</p><p><strong>cluster</strong></p><blockquote><ul><li>不支持跨网段，用于同一个网段内的局域网</li><li>可以随意的动态增加或者减少</li><li>节点之间需要运行相同版本的 RabbitMQ 和 Erlang</li></ul></blockquote><p><strong>federation</strong></p><blockquote><p>应用于广域网，允许单台服务器上的交换机或队列接收发布到另一台服务器上交换机或队列的消息，可以是单独机器或集群。federation 队列类似于单向点对点连接，消息会在联盟队列之间转发任意次，直到被消费者接受。通常使用 federation 来连接 internet 上的中间服务器，用作订阅分发消息或工作队列。</p></blockquote><p><strong>shovel</strong></p><blockquote><p>连接方式与 federation 的连接方式类似，但它工作在更低层次。可以应用于广域网。</p></blockquote><p><strong>节点类型</strong></p><blockquote><p>Ram node：内存节点将所有的队列、交换机、绑定、用户、权限和 vhost 的元数据定义存储在内存中，好处是可以使得像交换机和队列声明等操作更加的快速。</p></blockquote><blockquote><p>Disk node：将元数据存储在磁盘中，单节点系统只允许磁盘类型的节点，防止重启 RabbitMQ 的时候，丢失系统的配置信息。</p></blockquote><p>选用三台主机，主机名分别是</p><blockquote><p>pro-rabbitmq01<br>pro-rabbitmq02<br>pro-rabbitmq03</p></blockquote><h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><p>RabbitMQ 是用 Erlang 开发的，集群非常方便，因为 Erlang 天生就是一门分布式语言，但其本身并不支持负载均衡。<br>RabbitMQ 利用 Erlang 的分布式特性组建集群，erlang 集群通过 magic cookie 实现，<br>此 cookie 保存在 $HOME/.erlang.cookie<br>rpm安装即 <code>/var/lib/rabbitmq/.erlang.cookie</code><br>二进制安装在 <code>/data/erlang/.erlang.cookie</code><br>需要保证集群各节点的此 cookie 一致，可以选取一个节点的 cookie，用 <code>rsync</code>，<code>scp</code> 同步到其余节点。</p><h3 id="同步-Cookie"><a href="#同步-Cookie" class="headerlink" title="同步 Cookie"></a>同步 Cookie</h3><p>读取其中一个节点的 cookie，并复制到其他节点<br>节点之间通过 cookie 确定相互是否可通信。<br>cookie 存放在 /var/lib/rabbitmq/.erlang.cookie<br>或<br>$HOME/.erlang.cookie 中</p><h3 id="设置-Erlang-Cookie"><a href="#设置-Erlang-Cookie" class="headerlink" title="设置 Erlang Cookie"></a>设置 Erlang Cookie</h3><p>RabbitMQ 的集群是依赖于 Erlang 的集群来工作的，所以必须先构建起 Erlang 的集群环境。<br>Erlang 的集群中各节点是通过一个 magic cookie 来实现的，这个 Cookie 存放在 /data/erlang/.erlang.cookie 中，文件是 400 的权限。<br>所以必须保证各节点 Cookie 保持一致，否则节点之间就无法通信。<br>我们是删除其中两台的 /data/erlang/.erlang.cookie，然后将另一台的 /data/erlang/.erlang.cookie 拷贝到这两台上。<br>文件权限是 400</p><blockquote><p>注意：<code>.erlang.cookie</code> 文件的权限，RabbitMQ账号，权限 <code>400</code> 或 <code>600</code> 即可，为组或 other 账号赋权会报错</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rsync -avzP <span class="regexp">/data/</span>erlang<span class="regexp">/.erlang.cookie root@10.21.20.94:/</span>data<span class="regexp">/erlang/</span></span><br><span class="line"># scp <span class="regexp">/var/</span>lib<span class="regexp">/rabbitmq/</span>.erlang.cookie root@<span class="number">1.1</span>.<span class="number">1.2</span>:<span class="regexp">/var/</span>lib<span class="regexp">/rabbitmq/</span></span><br><span class="line"># scp <span class="regexp">/var/</span>lib<span class="regexp">/rabbitmq/</span>.erlang.cookie root@<span class="number">1.1</span>.<span class="number">1.3</span>:<span class="regexp">/var/</span>lib<span class="regexp">/rabbitmq/</span></span><br></pre></td></tr></table></figure><h3 id="逐个启动节点"><a href="#逐个启动节点" class="headerlink" title="逐个启动节点"></a>逐个启动节点</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-<span class="keyword">server</span> -detached</span><br></pre></td></tr></table></figure><h3 id="查看各节点的状态"><a href="#查看各节点的状态" class="headerlink" title="查看各节点的状态"></a>查看各节点的状态</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl <span class="keyword">status</span></span><br><span class="line">rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><h3 id="配置各节点的-hosts-文件"><a href="#配置各节点的-hosts-文件" class="headerlink" title="配置各节点的 hosts 文件"></a>配置各节点的 hosts 文件</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"><span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span> pro-rabbitmq<span class="number">01</span></span><br><span class="line"><span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span> pro-rabbitmq<span class="number">02</span></span><br><span class="line"><span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span> pro-rabbitmq<span class="number">03</span></span><br></pre></td></tr></table></figure><h3 id="组建集群"><a href="#组建集群" class="headerlink" title="组建集群"></a>组建集群</h3><p>pro-rabbitmq02 和 pro-rabbitmq03<br>以 pro-rabbitmq01 为主节点<br>在 pro-rabbitmq02 上</p><blockquote><p><code>rabbitmqctl join_cluster rabbit@pro-rabbitmq01</code> 中的 <code>rabbit@pro-rabbitmq01</code>，<br><code>rabbit</code> 代表集群名<br><code>pro-rabbitmq01</code> 代表集群节点<br>节点名同 hostname，<code>hostname</code> 与 <code>/etc/hosts</code> 中设置必须保持一致<br><code>pro-rabbitmq02</code> 与 <code>pro-rabbitmq03</code> 均连接到 <code>pro-rabbitmq01</code>，它们之间也会自动建立连接。<br>如果需要使用内存节点，增加一个 <code>--ram</code> 的参数即可<br>如：<br><code>rabbitmqctl join_cluster --ram rabbit@pro-rabbitmq01</code><br><code>rabbitmqctl join_cluster rabbit@pro-rabbitmq01 --ram</code><br>一个集群中至少需要一个 <code>disk</code> 节点<br>默认是磁盘节点，如果是内存节点的话，需要加 <code>--ram</code> 参数</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@pro-rabbitmq02 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">[root@pro-rabbitmq02 ~]<span class="comment"># rabbitmqctl reset</span></span><br><span class="line">[root@pro-rabbitmq02 ~]<span class="comment"># rabbitmqctl join_cluster rabbit<span class="doctag">@pro</span>-rabbitmq01</span></span><br><span class="line">[root@pro-rabbitmq02 ~]<span class="comment"># rabbitmqctl start_app</span></span><br></pre></td></tr></table></figure><blockquote><p><code>pro-rabbitmq03</code> 上的操作与 <code>pro-rabbitmq02</code> 的相同</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@pro-rabbitmq03 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">[root@pro-rabbitmq03 ~]<span class="comment"># rabbitmqctl reset</span></span><br><span class="line">[root@pro-rabbitmq03 ~]<span class="comment"># rabbitmqctl join_cluster rabbit<span class="doctag">@pro</span>-rabbitmq01</span></span><br><span class="line">[root@pro-rabbitmq03 ~]<span class="comment"># rabbitmqctl start_app</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@pro-rabbitmq02 rabbitmq]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">Stopping rabbit application on node rabbit@pro-rabbitmq02 ...</span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 rabbitmq]<span class="comment"># netstat -ntlp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">4369</span>            <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:*</span>               LISTEN      <span class="number">2556</span>/epmd           </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">22</span>              <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:*</span>               LISTEN      <span class="number">2717</span>/sshd           </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">25672</span>           <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:*</span>               LISTEN      <span class="number">2467</span>/beam.smp       </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">4369</span>                 <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                    LISTEN      <span class="number">2556</span>/epmd           </span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 rabbitmq]<span class="comment"># rabbitmqctl reset</span></span><br><span class="line">Resetting node rabbit@pro-rabbitmq02 ...</span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 rabbitmq]<span class="comment"># rabbitmqctl join_cluster rabbit<span class="doctag">@pro</span>-rabbitmq01</span></span><br><span class="line">Clustering node rabbit@pro-rabbitmq02 with rabbit@pro-rabbitmq01</span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 rabbitmq]<span class="comment"># rabbitmqctl start_app</span></span><br><span class="line">Starting node rabbit@pro-rabbitmq02 ...</span><br><span class="line"> completed with <span class="number">0</span> plugins.</span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 rabbitmq]<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@pro-rabbitmq02 ...</span><br><span class="line">[&#123;nodes,[&#123;disc,[<span class="string">'rabbit@pro-rabbitmq01'</span>,<span class="string">'rabbit@pro-rabbitmq02'</span>]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[<span class="string">'rabbit@pro-rabbitmq01'</span>,<span class="string">'rabbit@pro-rabbitmq02'</span>]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@pro-rabbitmq01"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;<span class="string">'rabbit@pro-rabbitmq01'</span>,[]&#125;,&#123;<span class="string">'rabbit@pro-rabbitmq02'</span>,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure><h3 id="修改集群类型"><a href="#修改集群类型" class="headerlink" title="修改集群类型"></a>修改集群类型</h3><blockquote><p>修改 <code>disk</code> 节点到 <code>内存</code> 节点</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@pro-rabbitmq02 ~]# rabbitmqctl change_cluster_node_type ram</span><br><span class="line"><span class="symbol">Turning</span> rabbit@pro-rabbitmq02 into a ram node</span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 ~]# rabbitmqctl start_app</span><br><span class="line"><span class="symbol">Starting</span> node rabbit@pro-rabbitmq02 ...</span><br><span class="line"> completed with <span class="number">3</span> plugins.</span><br><span class="line"></span><br><span class="line">[root@pro-rabbitmq02 ~]# rabbitmqctl cluster_status</span><br><span class="line"><span class="symbol">Cluster</span> status of node rabbit@pro-rabbitmq02 ...</span><br><span class="line">[&#123;nodes,[&#123;disc,[<span class="string">'rabbit@pro-rabbitmq01'</span>]&#125;,&#123;ram,[<span class="string">'rabbit@pro-rabbitmq02'</span>]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[<span class="string">'rabbit@pro-rabbitmq01'</span>,<span class="string">'rabbit@pro-rabbitmq02'</span>]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@pro-rabbitmq01"</span>&gt;&gt;&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;<span class="string">'rabbit@pro-rabbitmq01'</span>,[]&#125;,&#123;<span class="string">'rabbit@pro-rabbitmq02'</span>,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@pro-rabbitmq03 rabbitmq]# rabbitmqctl cluster_status</span><br><span class="line"><span class="symbol">Cluster</span> status of node rabbit@pro-rabbitmq03 ...</span><br><span class="line">[&#123;nodes,[&#123;disc,[<span class="string">'rabbit@pro-rabbitmq01'</span>]&#125;,</span><br><span class="line">         &#123;ram,[<span class="string">'rabbit@pro-rabbitmq03'</span>,<span class="string">'rabbit@pro-rabbitmq02'</span>]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[<span class="string">'rabbit@pro-rabbitmq02'</span>,<span class="string">'rabbit@pro-rabbitmq01'</span>,</span><br><span class="line">                 <span class="string">'rabbit@pro-rabbitmq03'</span>]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@pro-rabbitmq01"</span>&gt;&gt;&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;<span class="string">'rabbit@pro-rabbitmq02'</span>,[]&#125;,</span><br><span class="line">          &#123;<span class="string">'rabbit@pro-rabbitmq01'</span>,[]&#125;,</span><br><span class="line">          &#123;<span class="string">'rabbit@pro-rabbitmq03'</span>,[]&#125;]&#125;]</span><br><span class="line"></span><br><span class="line"># 可以看到三个节点都加入了集群中，两个 ram 节点、一个 disc 节点。</span><br><span class="line"># 其中三个节点都在运行中，以及集群名称显示。</span><br></pre></td></tr></table></figure><blockquote><p>默认是磁盘节点，如果是内存节点的话，需要加 <code>--ram</code> 参数<br>RabbitMQ 集群节点有 <code>disc</code> 和 <code>ram</code> 两种类型，一个集群中至少要有一个 <code>disc</code> 类型的节点，不指定默认加入为 <code>disc</code></p></blockquote><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将集群类型修改成 disk 节点</span><br><span class="line"><span class="title">rabbitmqctl</span> change_cluster_node_<span class="keyword">type</span> disc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RabbitMQ-集群配置&quot;&gt;&lt;a href=&quot;#RabbitMQ-集群配置&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ 集群配置&quot;&gt;&lt;/a&gt;RabbitMQ 集群配置&lt;/h2&gt;&lt;p&gt;这里展示的是多机集群的部署，如果机器受限，可以选择单机集群部署&lt;/p&gt;
    
    </summary>
    
      <category term="RabbitMQ笔记" scheme="http://www.gmlyo.com/categories/RabbitMQ%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="RabbitMQ集群配置" scheme="http://www.gmlyo.com/tags/RabbitMQ%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础学习</title>
    <link href="http://www.gmlyo.com//blog/2018/07/25/HTML%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.gmlyo.com//blog/2018/07/25/HTML基础学习/</id>
    <published>2018-07-24T18:40:36.000Z</published>
    <updated>2018-07-26T03:33:00.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML基础学习"><a href="#HTML基础学习" class="headerlink" title="HTML基础学习"></a>HTML基础学习</h2><h3 id="Web运行本质"><a href="#Web运行本质" class="headerlink" title="Web运行本质"></a>Web运行本质</h3><blockquote><p>对于所有的 Web 应用，本质上其实就是一个 socket 服务端，用户的浏览器其实就是一个 socket 客户端</p></blockquote><a id="more"></a><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">socket</span></span><br><span class="line"></span><br><span class="line">def handle_request(client):</span><br><span class="line">    buf = client.recv(<span class="number">1024</span>)</span><br><span class="line">    client.<span class="built_in">send</span>(<span class="keyword">bytes</span>(<span class="string">"HTTP/1.1 200 OK\r\n\r\n"</span>, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    client.<span class="built_in">send</span>(<span class="keyword">bytes</span>(<span class="string">"Hello, World"</span>, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    </span><br><span class="line">def main():</span><br><span class="line">    sock = <span class="built_in">socket</span>.<span class="built_in">socket</span>(<span class="built_in">socket</span>.AF_INET, <span class="built_in">socket</span>.SOCK_STREAM)</span><br><span class="line">    sock.bind((<span class="string">'localhost'</span>, <span class="number">8000</span>))</span><br><span class="line">    sock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        connection, address = sock.accept()</span><br><span class="line">        handle_request(connection)</span><br><span class="line">        connection.<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://ooo.0o0.ooo/2017/05/13/5916a911da775.png" alt="原理.png"></p><h3 id="HTML-相关概念"><a href="#HTML-相关概念" class="headerlink" title="HTML 相关概念"></a>HTML 相关概念</h3><h4 id="html是什么"><a href="#html是什么" class="headerlink" title="html是什么"></a>html是什么</h4><blockquote><ol><li>超文本标记语言（Hypertext Markup Language，HTML）通过标记符号来标记要显示的网页中的内容。</li><li>其实就是一套规则，浏览器认识的规则。</li><li>浏览器按顺序渲染网页文件，然后根据标记符解释和显示内容。</li><li>对于不同的浏览器，对同一标签可能会有不完全相同的解释（兼容性）。</li></ol></blockquote><h4 id="w3c（了解）"><a href="#w3c（了解）" class="headerlink" title="w3c（了解）"></a>w3c（了解）</h4><ul><li><p>w3c是什么？</p><blockquote><p>万维网联盟（World Wide Web Consortium，简称W3C）创建于1994年，是Web技术领域具权威和影响力的国际标准化组织</p></blockquote></li><li><p>w3c的主要工作？</p><blockquote><p>W3C主要工作，是制作Web规范。到目前为止，W3C已发布了200多项影响深远的Web技术标准。比如：XHTML、HTML5、XML、CSS、DOM、XSTL等</p></blockquote></li></ul><h3 id="HTML-文件结构以及标签格式"><a href="#HTML-文件结构以及标签格式" class="headerlink" title="HTML 文件结构以及标签格式"></a>HTML 文件结构以及标签格式</h3><h4 id="html-的文件格式"><a href="#html-的文件格式" class="headerlink" title="html 的文件格式"></a>html 的文件格式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      文件体</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="上述代码说明"><a href="#上述代码说明" class="headerlink" title="上述代码说明"></a>上述代码说明</h4><blockquote><ol><li><code>&lt;html&gt;&lt;/html&gt;</code>是文档的开始标记和结束标记。此元素告诉浏览器其自身是一个 HTML 文档，在它们之间是文档的头部和主体</li><li><code>&lt;head&gt;&lt;/head&gt;</code>元素出现在文档的开头部分。<code>&lt;head&gt;</code>与<code>&lt;/head&gt;</code>之间的内容不会在浏览器的文档窗口显示，但是其中的元素有特殊重要的意义</li><li><code>&lt;title&gt;&lt;/title&gt;</code>定义网页标题，在浏览器标题栏显示</li><li><code>&lt;body&gt;&lt;/body&gt;</code>之间的文本是可见的网页主体内容</li></ol></blockquote><h4 id="html-标签格式"><a href="#html-标签格式" class="headerlink" title="html 标签格式"></a>html 标签格式</h4><blockquote><ul><li>HTML标签是由尖括号包围的关键词，比如 <code>&lt;html&gt;</code></li><li>标签对中的第一个标签是开始标签，第二个标签是结束标签</li><li>HTML标签通常是成对出现的（双边标记），比如 <code>&lt;div&gt;</code> 和 <code>&lt;/div&gt;</code></li><li>但也有单独呈现的标签（单边标记），如：<code>&lt;br /&gt;</code>、<code>&lt;hr /&gt;</code>和<code>&lt;img src=“images/1.jpg” /&gt;</code>等</li><li>标签可以有若干个属性，也可以不带属性。如<code>&lt;head&gt;</code>元素就不带任何属性</li></ul></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标答的语法：</span><br><span class="line">&lt;标签名 属性<span class="number">1</span>=“属性值<span class="number">1</span>” 属性<span class="number">2</span>=“属性值<span class="number">2</span>”...&gt;内容部分&lt;/标签名&gt;</span><br><span class="line">&lt;标签名 属性<span class="number">1</span>=“属性值<span class="number">1</span>” 属性<span class="number">2</span>=“属性值<span class="number">2</span>”.../&gt;</span><br></pre></td></tr></table></figure><h3 id="HTML-常用标签之Meta"><a href="#HTML-常用标签之Meta" class="headerlink" title="HTML 常用标签之Meta"></a>HTML 常用标签之Meta</h3><h4 id="Meta介绍"><a href="#Meta介绍" class="headerlink" title="Meta介绍"></a>Meta介绍</h4><blockquote><ul><li><code>&lt;meta&gt;</code>元素可提供有关页面的元信息（meta-information），针对搜索引擎和更新频度的描述和关键词</li><li><code>&lt;meta&gt;</code>标签位于文档的头部，不包含任何内容</li><li><code>&lt;meta&gt;</code>提供的信息是用户不可见的</li></ul></blockquote><h4 id="关于meta常见的用法"><a href="#关于meta常见的用法" class="headerlink" title="关于meta常见的用法"></a>关于meta常见的用法</h4><ul><li><p>author（作者）</p><blockquote><p>说明：标注网页的作者<br>用法：<code>&lt;meta name=&quot;author&quot; content=&quot;张三&quot;&gt;</code></p></blockquote></li><li><p>Copyright(版权信息)</p><blockquote><p>功能：说明网站版权信息<br>用法：<code>&lt;meta name=&quot;copyright&quot; content=&quot;信息参数&quot;&gt;</code></p></blockquote></li></ul><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><p><img src="https://ooo.0o0.ooo/2017/05/10/5912b5a503af6.png" alt="FAJTP.md.png"></p><h3 id="HTML-常用标签之字体以及排版标签"><a href="#HTML-常用标签之字体以及排版标签" class="headerlink" title="HTML 常用标签之字体以及排版标签"></a>HTML 常用标签之字体以及排版标签</h3><h4 id="排版元素（常用）"><a href="#排版元素（常用）" class="headerlink" title="排版元素（常用）"></a>排版元素（常用）</h4><table><thead><tr><th>标签</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;p&gt;&lt;/p&gt;</code></td><td>用来创建一个段落，该元素自动在其前后创建一些空白</td></tr><tr><td><code>&lt;br/&gt;</code></td><td>换行</td></tr><tr><td><code>&lt;hr/&gt;</code></td><td>华丽的分割线</td></tr><tr><td><code>&lt;h1&gt;&lt;/h1&gt;...&lt;h6&gt;&lt;/h6&gt;</code></td><td>6种标题效果标签。分别为h1~h6。<code>&lt;h1&gt;</code>字体最大，<code>&lt;h6&gt;</code>字体最小</td></tr></tbody></table><h4 id="marquee标签（跑马灯的实现）"><a href="#marquee标签（跑马灯的实现）" class="headerlink" title="marquee标签（跑马灯的实现）"></a>marquee标签（跑马灯的实现）</h4><h3 id="HTML常用标签之列表"><a href="#HTML常用标签之列表" class="headerlink" title="HTML常用标签之列表"></a>HTML常用标签之列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常用属性解释"><a href="#常用属性解释" class="headerlink" title="常用属性解释"></a>常用属性解释</h4><blockquote><p>type属性：disc（实心圆点）（默认）、circle（空心圆圈）、square（实心方块）</p></blockquote><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常用属性解释-1"><a href="#常用属性解释-1" class="headerlink" title="常用属性解释"></a>常用属性解释</h4><blockquote><p>属性：type编号类型，默认为整数。可选（1、A、a、Ⅰ、i）<br>属性：start起始编号，默认为1，即由最小编号开始</p></blockquote><h3 id="HTML常用标签之a标签"><a href="#HTML常用标签之a标签" class="headerlink" title="HTML常用标签之a标签"></a>HTML常用标签之a标签</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><blockquote><p><code>&lt;a 属性=&quot;属性值&quot;&gt;标签内容&lt;/a&gt;</code></p></blockquote><h4 id="常见的属性"><a href="#常见的属性" class="headerlink" title="常见的属性"></a>常见的属性</h4><ul><li><p>href – 指定目标网页的地址，该地址可以有如下类型：</p><blockquote><p>链接远程目标：通过URL地址链接到远程目标。</p><p>链接本地页面：可以通过相对路径或者绝对路径链接本地页面。</p><blockquote><p>相对路径：指相对于当前页面位置的路径<br>./：表示当前页面所在的目录<br>../：表示当前页面所在的上一级目录</p><p>绝对路径：绝对路径指当前站点中确切的路径，一般以”/”开始 例如：<code>&lt;a href=&quot;/admin/index.py&quot;&gt;后台首页&lt;/a&gt;</code></p></blockquote></blockquote></li><li><p>target</p><blockquote><p>_blank 表示在 <code>新窗口</code> 中打开目标网页<br>_self 表示在 <code>当前窗口</code> 中打开目标网页</p></blockquote></li></ul><h4 id="常见例子"><a href="#常见例子" class="headerlink" title="常见例子"></a>常见例子</h4><blockquote><p>链接到远程地址</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com.cn"</span>&gt;</span>新浪网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.qq.com"</span>&gt;</span>腾讯网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>链接到本地文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">相对路径：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"include/login.html"</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">绝对路径：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/html/123.html"</span>&gt;</span>国内新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>链接到邮箱</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:976296751@qq.com"</span>&gt;</span>给我发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>下载文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/download/winRAR.rar"</span>&gt;</span>下载WinRAR<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"download/office2007.rar"</span>&gt;</span>下载office2007<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML常用标签之div和span元素"><a href="#HTML常用标签之div和span元素" class="headerlink" title="HTML常用标签之div和span元素"></a>HTML常用标签之div和span元素</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><blockquote><p><code>&lt;div&gt;&lt;/div&gt;</code><br><code>&lt;div&gt;</code>只是一个块级元素，并无实际的意义. 主要通过CSS为其赋予不同的表现</p></blockquote><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><blockquote><p><code>&lt;span&gt;&lt;/span&gt;</code><br><code>&lt;span&gt;</code>内联行(行内元素),并无实际的意义. 主要通过CSS为其赋予不同的表现</p></blockquote><h4 id="块级元素与行内元素的区别"><a href="#块级元素与行内元素的区别" class="headerlink" title="块级元素与行内元素的区别"></a><code>块级元素与行内元素的区别</code></h4><blockquote><p>所谓块元素，是以另起一行开始渲染的元素，行内元素则不需另起一行<br>如果单独在网页中插入这两个元素，不会对页面产生任何的影响<br>这两个元素是专门为定义CSS样式而生的</p></blockquote><h3 id="HTML常用标签之img标签"><a href="#HTML常用标签之img标签" class="headerlink" title="HTML常用标签之img标签"></a>HTML常用标签之img标签</h3><h4 id="常见的用法"><a href="#常见的用法" class="headerlink" title="常见的用法"></a>常见的用法</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"URL"</span> <span class="attribute">alt</span>=<span class="string">"图片说明"</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="常见的属性用法说明"><a href="#常见的属性用法说明" class="headerlink" title="常见的属性用法说明"></a>常见的属性用法说明</h4><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>src</td><td>图像URL</td><td>规定图像的URL</td></tr><tr><td>alt</td><td>字符串</td><td>规定图像的替代文本</td></tr><tr><td>width</td><td>px / %</td><td>规定图像的宽</td></tr><tr><td>height</td><td>px / %</td><td>规定图像的高</td></tr><tr><td>border</td><td>px</td><td>图像的边框粗细</td></tr></tbody></table><h3 id="HTML常用标签之table标签"><a href="#HTML常用标签之table标签" class="headerlink" title="HTML常用标签之table标签"></a>HTML常用标签之table标签</h3><h4 id="html表格的基本结构"><a href="#html表格的基本结构" class="headerlink" title="html表格的基本结构"></a>html表格的基本结构</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h4><blockquote><ol><li><code>&lt;table&gt;&lt;/table&gt;</code>表示的表格的开始和结束</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code>表示的是表格的一行</li><li><code>&lt;td&gt;&lt;/td&gt;</code>表示的是一个单元数据格</li><li><code>&lt;th&gt;&lt;/th&gt;</code>表示表格标题单元格，且加粗居中显示</li></ol></blockquote><h4 id="table的常用属性"><a href="#table的常用属性" class="headerlink" title="table的常用属性"></a>table的常用属性</h4><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>width</td><td>px或%</td><td>表格的宽度</td></tr><tr><td>height</td><td>px或%</td><td>表格的高度</td></tr><tr><td>border</td><td>px</td><td>表格的边框的粗细</td></tr><tr><td>align</td><td>Left/center/right</td><td>元素的对齐方式</td></tr></tbody></table><h4 id="简单的案例实现"><a href="#简单的案例实现" class="headerlink" title="简单的案例实现"></a>简单的案例实现</h4><p><img src="https://ooo.0o0.ooo/2017/05/10/5912b5a507092.png" alt="FEp7t.md.png"></p><h3 id="HTML常用标签之form表单元素标签"><a href="#HTML常用标签之form表单元素标签" class="headerlink" title="HTML常用标签之form表单元素标签"></a>HTML常用标签之form表单元素标签</h3><h4 id="FORM表单的基本概念"><a href="#FORM表单的基本概念" class="headerlink" title="FORM表单的基本概念"></a>FORM表单的基本概念</h4><ul><li><p>基本概念</p><blockquote><p>HTML表单是HTML元素中较为复杂的部分，表单往往和脚本、动态页面、数据处理等功能相结合，因此它是制作动态网站很重要的内容。<br>表单一般用来收集用户的输入信息</p></blockquote></li><li><p>表单的工作原理</p><blockquote><p>访问者在浏览有表单的网页时，可填写必需的信息，然后按某个按钮提交<br>这些信息通过Internet传送到服务器上<br>服务器上专门的程序对这些数据进行处理，如果有错误会返回错误信息，并要求纠正错误</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.write(<span class="string">"Hello, world"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.write(<span class="string">'this is a test'</span>)</span><br><span class="line"> </span><br><span class="line">application = tornado.web.Application([</span><br><span class="line">    (<span class="string">r"/index"</span>, MainHandler),</span><br><span class="line">])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure><ul><li>表单的常见结构</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> id=<span class="string">"form1"</span>  method=<span class="string">"post"</span> action=<span class="string">""</span>&gt;</span><br><span class="line">    账号：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"account"</span> /&gt;&lt;<span class="keyword">br</span> /&gt;</span><br><span class="line">    密码：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span> /&gt;&lt;<span class="keyword">br</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"reset"</span>  name=<span class="string">"reset"</span>  value=<span class="string">"重置"</span> /&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>表单标记属性</li></ul><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>action</td><td>url</td><td>指定一个表单处理目标URL，表单数据将被提交到该URL地址的处理程序。如果该属性值为空，则提交到文档自身。该属性值可以为绝对地址、相对地址、文档片段，甚至是脚本代码</td></tr><tr><td>method</td><td>get或post</td><td>将表单数据提交到http服务器的方法，可能值有两个：get和post</td></tr><tr><td>enctype</td><td>application/x-www-form-urlencoded</td><td>指定表单数据的编码类型，此属性只有在method属性设置为post时才有效。默认值为application/x-www-form-urlencoded对所有字符进行编码。如果表单包含用于文件上传的控件（input type=“file”），那么这个属性值必须设为multipart/form-data ，不对字符进行编码。</td></tr></tbody></table><h4 id="补充：Get和Post提交的区别"><a href="#补充：Get和Post提交的区别" class="headerlink" title="补充：Get和Post提交的区别"></a>补充：Get和Post提交的区别</h4><ul><li>Get方式提交</li></ul><blockquote><p>如果为get，那么所提交的数据集将被作为一个由表单的所有名/值对组成的查询字符串（query string）添加到表单处理器的URL（action属性）的末尾<br>比如：<a href="http://www.oldboyedu.com/index.py?variable1=content1&amp;variable1=content2" target="_blank" rel="noopener">http://www.oldboyedu.com/index.py?variable1=content1&amp;variable1=content2</a><br>这种方法提交的信息在长度上有一定限制，而且不安全，适合简单的数据查询</p></blockquote><ul><li>Post方式提交</li></ul><blockquote><p>如果为post，那么数据集将直接发给表单处理程序，而不是以可见的URL查询字符串的形式。<br>post方法可以提交更长的数据，并且相对安全一些，传送的数据类型更多一些（不限于ASCII字符），因而适用于数据更复杂的表单</p></blockquote><h4 id="常见的-INPUT-标签"><a href="#常见的-INPUT-标签" class="headerlink" title="常见的 INPUT 标签"></a>常见的 INPUT 标签</h4><table><thead><tr><th>type属性值</th><th>空间名称</th><th>对应代码</th></tr></thead><tbody><tr><td>text</td><td>单行文本输入框</td><td><code>&lt;input type=&quot;text&quot;/&gt;</code></td></tr><tr><td>password</td><td>密码输入框</td><td><code>&lt;input type=&quot;password&quot;/&gt;</code></td></tr><tr><td>checkbox</td><td>复选框</td><td><code>&lt;input type=&quot;checkbox&quot; checked=&#39;checked&#39;/&gt;</code></td></tr><tr><td>radio</td><td>单选框</td><td><code>&lt;input type=&quot;radio&quot;/&gt;</code></td></tr><tr><td>submit</td><td>提交按钮</td><td><code>&lt;input type=&quot;submit&quot; value=&#39;提交&#39;/&gt;</code></td></tr><tr><td>reset</td><td>重置按钮</td><td><code>&lt;input type=&quot;reset&quot; value=&#39;重置&#39;/&gt;</code></td></tr><tr><td>button</td><td>普通按钮</td><td><code>&lt;input type=&quot;button&quot; value=“普通按钮”/&gt;</code></td></tr><tr><td>hidden</td><td>隐藏按钮</td><td><code>&lt;input type=&quot;hidden&quot; value=“隐藏按钮”/&gt;</code></td></tr><tr><td>file</td><td>文本选择框</td><td><code>&lt;input type=&quot;file&quot;/&gt;</code></td></tr></tbody></table><h4 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h4><ul><li>上传文件控件</li></ul><blockquote><p>当一个<br>中有“上传文件域”，必须指定MIME类型 enctype=”multipart/form-data”&gt;，否则无法上传文件<br>上传文件域，只在 method=”post” 下才有效</p></blockquote><ul><li><p>隐藏控件</p><blockquote><p><code>&lt;input type=&quot;hidden&quot; name=&quot;nid&quot; value=&quot;234&quot; /&gt;</code><br>隐藏字段对于用户是不可见的<br>隐藏字段通常会存储一个默认值<br>一般用在，修改某条数据时，用来记录数据的id号</p></blockquote></li><li><p>普通按钮</p><blockquote><p><code>&lt;input type=&quot;button&quot; name=&quot;button&quot; value=&quot;普通按钮&quot; /&gt;</code><br>定义可点击的按钮，但没有任何行为，一般配合JS使用</p></blockquote></li></ul><p><strong>各种按钮显示效果</strong></p><p><img src="https://ooo.0o0.ooo/2017/05/10/5912b5a4e8a6a.png" alt="FEih8.md.png"></p><h4 id="SELECT下拉列表"><a href="#SELECT下拉列表" class="headerlink" title="SELECT下拉列表"></a>SELECT下拉列表</h4><p><strong>常见的基本结构</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=<span class="string">"form1"</span> name=<span class="string">"form1"</span> method=<span class="string">"post"</span> action=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;select name=<span class="string">"city"</span> id=<span class="string">"city"</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">"北京"</span>&gt;北京&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">"上海"</span> selected=<span class="string">"selected"</span>&gt;上海&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">"南京"</span>&gt;南京&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">"杭州"</span>&gt;杭州&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">option</span> <span class="keyword">value</span>=<span class="string">"深圳"</span>&gt;深圳&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>属性说明</strong></p><blockquote><p>multiple：布尔属性，设置后允许多选，否则只能选择一个<br>disabled：禁用该下拉列表<br>selected：首次显示时,为选中状态<br>value：定义发往服务器的选项值</p></blockquote><h4 id="TEXTAREA多行文本框"><a href="#TEXTAREA多行文本框" class="headerlink" title="TEXTAREA多行文本框"></a>TEXTAREA多行文本框</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">name</span>=<span class="string">"form1"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"宽度"</span> <span class="attr">rows</span>=<span class="string">"高度"</span> <span class="attr">name</span>=<span class="string">"名称"</span>&gt;</span></span><br><span class="line">    默认内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性说明</strong></p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>name</td><td>控件名称</td></tr><tr><td>rows</td><td>number</td><td>设置多行文本框的显示行数（高度）</td></tr><tr><td>cols</td><td>number</td><td>设置多行文本框的显示列数（宽度）</td></tr><tr><td>disabled</td><td>disabled</td><td>布尔属性，设置当前文本框为禁用状态</td></tr></tbody></table><h4 id="LABEL表单修饰"><a href="#LABEL表单修饰" class="headerlink" title="LABEL表单修饰"></a>LABEL表单修饰</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> id=<span class="string">"form1"</span> name=<span class="string">"form1"</span> method=<span class="string">"post"</span> action=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"username"</span>&gt;用户名&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span> id=<span class="string">"username"</span> /&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote><p>label 元素不会向用户呈现任何特殊效果<br><code>&lt;label&gt;</code> 标签的 for 属性应当与相关元素的 id 属性相同<br>结合CSS可以控制表单文本或控件对齐，美化表单</p></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><img src="https://ooo.0o0.ooo/2017/05/10/5912b5a50507f.png" alt="FEens.md.png"></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.shangzekai.xyz/2017/05/07/html基础目录/" target="_blank" rel="noopener">http://www.shangzekai.xyz/2017/05/07/html基础目录/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML基础学习&quot;&gt;&lt;a href=&quot;#HTML基础学习&quot; class=&quot;headerlink&quot; title=&quot;HTML基础学习&quot;&gt;&lt;/a&gt;HTML基础学习&lt;/h2&gt;&lt;h3 id=&quot;Web运行本质&quot;&gt;&lt;a href=&quot;#Web运行本质&quot; class=&quot;headerlink&quot; title=&quot;Web运行本质&quot;&gt;&lt;/a&gt;Web运行本质&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;对于所有的 Web 应用，本质上其实就是一个 socket 服务端，用户的浏览器其实就是一个 socket 客户端&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="HTML笔记" scheme="http://www.gmlyo.com/categories/HTML%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML基础学习" scheme="http://www.gmlyo.com/tags/HTML%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ常用命令</title>
    <link href="http://www.gmlyo.com//blog/2018/07/24/RabbitMQ%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.gmlyo.com//blog/2018/07/24/RabbitMQ常用命令/</id>
    <published>2018-07-24T14:57:49.000Z</published>
    <updated>2018-07-25T18:08:50.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RabbitMQ常用命令"><a href="#RabbitMQ常用命令" class="headerlink" title="RabbitMQ常用命令"></a>RabbitMQ常用命令</h2><a id="more"></a><h3 id="服务启动关闭"><a href="#服务启动关闭" class="headerlink" title="服务启动关闭"></a>服务启动关闭</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">rabbitmq-server -detached </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">rabbitmqctl stop</span><br></pre></td></tr></table></figure><h3 id="集群配置相关命令"><a href="#集群配置相关命令" class="headerlink" title="集群配置相关命令"></a>集群配置相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop_app </span><br><span class="line">rabbitmqctl reset </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在当前集群中加入某节点</span></span><br><span class="line">rabbitmqctl join_cluster &#123;rabbit_node_name&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 某些低版本可以采用 rabbitmqctl cluster &#123;rabbit_node_name&#125;</span></span><br><span class="line">rabbitmqctl start_app </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 集群状态</span></span><br><span class="line">rabbitmqctl cluster_status</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将某节点剔除出当前集群</span></span><br><span class="line">rabbitmqctl forget_cluster_node &#123;rabbit_node_name&#125;</span><br></pre></td></tr></table></figure><h3 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启某个插件</span></span><br><span class="line">rabbitmq-plugins <span class="builtin-name">enable</span> &#123;插件名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭某个插件</span></span><br><span class="line">rabbitmq-plugins <span class="builtin-name">disable</span> &#123;插件名&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有关插件名可以在 rabbitmq 的安装目录下的 plugins 目录中查看</span></span><br><span class="line"><span class="variable">$RABBITMQ_HOME</span>/plugins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举例</span></span><br><span class="line">rabbitmq-plugins <span class="builtin-name">enable</span> rabbitmq_management </span><br><span class="line">rabbitmq-plugins list</span><br></pre></td></tr></table></figure><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加用户</span></span><br><span class="line">rabbitmqctl add_user &#123;username&#125; &#123;password&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除用户</span></span><br><span class="line">rabbitmqctl delete_user &#123;username&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码</span></span><br><span class="line">rabbitmqctl change_password &#123;username&#125; &#123;newpassword&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置用户角色</span></span><br><span class="line">rabbitmqctl set_user_tags &#123;username&#125; &#123;tag&#125;</span><br><span class="line">tag 可以为 administrator, monitoring, management</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 举例</span></span><br><span class="line">rabbitmqctl add_user root root</span><br><span class="line">rabbitmqctl set_user_tags root administrator</span><br><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 权限设置</span></span><br><span class="line">rabbitmqctl set_permissions [-p vhostpath] &#123;user&#125; &#123;conf&#125; &#123;<span class="built_in">write</span>&#125; &#123;<span class="built_in">read</span>&#125;</span><br><span class="line"></span><br><span class="line">conf  <span class="comment"># 一个正则表达式match哪些配置资源能够被该用户访问</span></span><br><span class="line"><span class="built_in">write</span> <span class="comment"># 一个正则表达式match哪些配置资源能够被该用户读</span></span><br><span class="line"><span class="built_in">read</span>  <span class="comment"># 一个正则表达式match哪些配置资源能够被该用户访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看（指定vhost）所有用户的权限信息</span></span><br><span class="line">rabbitmqctl list_permissions [-p vhostPath]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定用户的权限信息</span></span><br><span class="line">rabbitmqctl list_user_permissions &#123;username&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除用户的权限信息</span></span><br><span class="line">rabbitmqctl clear_permissions [-p vhostPath] &#123;username&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举例</span></span><br><span class="line">rabbitmqctl set_permissions -p / root <span class="string">"."</span> <span class="string">"."</span> <span class="string">".*"</span></span><br></pre></td></tr></table></figure><h3 id="获取服务器状态信息"><a href="#获取服务器状态信息" class="headerlink" title="获取服务器状态信息"></a>获取服务器状态信息</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 服务器状态</span></span><br><span class="line">rabbitmqctl status</span><br><span class="line"></span><br><span class="line"><span class="meta"># 队列信息</span></span><br><span class="line">rabbitmqctl list_queues -p vhostpath</span><br><span class="line"></span><br><span class="line"><span class="meta"># queueinfoitem可以为</span></span><br><span class="line">name, durable, auto_delete, arguments, messages_ready, messages_unacknowled, messages, consumers, memory.</span><br><span class="line"></span><br><span class="line"><span class="meta"># Exchange信息</span></span><br><span class="line">rabbitmqctl list_exchanges -p vhostpath</span><br><span class="line"></span><br><span class="line"><span class="meta"># exchangeinfoitem有</span></span><br><span class="line">name, type, durable, auto_delete, <span class="keyword">internal</span>, arguments.</span><br><span class="line"></span><br><span class="line"><span class="meta"># Binding信息</span></span><br><span class="line">rabbitmqctl list_bindings -p vhostpath</span><br><span class="line"></span><br><span class="line"><span class="meta"># bindinginfoitem有</span></span><br><span class="line">source_name, source_kind, destination_name, destination_kind, routing_key, arguments.等</span><br><span class="line"></span><br><span class="line"><span class="meta"># connection信息</span></span><br><span class="line">rabbitmqctl list_connections [connectioninfoitem ...]</span><br><span class="line"></span><br><span class="line"><span class="meta"># connectioninfoitem有</span></span><br><span class="line">recv_oct，recv_cnt，send_oct，send_cnt，send_pend 等。</span><br><span class="line"></span><br><span class="line"><span class="meta"># channel信息</span></span><br><span class="line">rabbitmqctl list_channels [channelinfoitem ...]</span><br><span class="line"></span><br><span class="line"><span class="meta"># channelinfoitem有</span></span><br><span class="line">consumer_count，messages_unacknowledged，messages_uncommitted，acks_uncommitted，messages_unconfirmed，prefetch_count，client_flow_blocked</span><br><span class="line"></span><br><span class="line"><span class="meta"># 举例</span></span><br><span class="line">rabbitmqctl list_queues name messages_ready pid slave_pids</span><br></pre></td></tr></table></figure><h3 id="更改节点类型"><a href="#更改节点类型" class="headerlink" title="更改节点类型"></a>更改节点类型</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rabbitmqctl</span> stop_app</span><br><span class="line"><span class="title">rabbitmqctl</span> change_cluster_node_<span class="keyword">type</span> disc</span><br><span class="line">或</span><br><span class="line"><span class="title">rabbitmqctl</span> change_cluster_node_<span class="keyword">type</span> ram</span><br><span class="line"><span class="title">rabbitmqctl</span> start_app</span><br></pre></td></tr></table></figure><h3 id="vhost管理"><a href="#vhost管理" class="headerlink" title="vhost管理"></a>vhost管理</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加vhost</span></span><br><span class="line">rabbitmqctl <span class="keyword">add</span><span class="bash"> vhost &#123;name&#125;</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 删除vhost</span></span></span><br><span class="line"><span class="bash">rabbitmqctl delete vhost &#123;name&#125;</span></span><br></pre></td></tr></table></figure><h3 id="镜像队列的设置"><a href="#镜像队列的设置" class="headerlink" title="镜像队列的设置"></a>镜像队列的设置</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">镜像队列的配置通过添加<span class="built_in"> policy </span>完成，policy 添加的命令为</span><br><span class="line">rabbitmqctl set_policy [-p Vhost] Name Pattern Definition [Priority] </span><br><span class="line"></span><br><span class="line">-p Vhost:         # 可选参数，针对指定 vhost 下的<span class="built_in"> queue </span>进行设置</span><br><span class="line">Name:             #<span class="built_in"> policy </span>的名称</span><br><span class="line">Pattern:          #<span class="built_in"> queue </span>的匹配模式（正则表达式）</span><br><span class="line">Definition:       # 镜像定义，包括三个部分 ha-mode，ha-params，ha-sync-mode</span><br><span class="line">    ha-mode:      # 指明镜像队列的模式，有效值为 all/exactly/nodes</span><br><span class="line">        all       # 表示在集群所有的节点上进行镜像</span><br><span class="line">        exactly   # 表示在指定个数的节点上进行镜像，节点的个数由 ha-params 指定</span><br><span class="line">        nodes     # 表示在指定的节点上进行镜像，节点名称通过 ha-params 指定</span><br><span class="line">    ha-params:    # ha-mode模式需要用到的参数</span><br><span class="line">    ha-sync-mode: # 镜像队列中消息的同步方式，有效值为 automatic，manually</span><br><span class="line">                  # 有效值为 automatic（自动同步），manually（手动同步），默认是 manually</span><br><span class="line">                  # 请注意一定要记得设置为 automatic（自动同步），否则消息在镜像队列中是不会自动同步的（即普通集群模式），只能通过命令手动去同步</span><br><span class="line">Priority:         # 可选参数，policy 的优先级</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对队列名称以 hello 开头的所有队列进行镜像，并在集群的两个节点上完成镜像</span></span><br><span class="line"><span class="comment"># policy 的设置命令为</span></span><br><span class="line">rabbitmqctl <span class="keyword">set</span>_policy hello-ha <span class="string">"^hello"</span> '&#123;<span class="string">"ha-mode"</span>:<span class="string">"exactly"</span>,<span class="string">"ha-params"</span><span class="function">:2</span>,<span class="string">"ha-sync-mode"</span>:<span class="string">"automatic"</span>&#125;'</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对队列名称以 “queue_” 开头的所有队列进行镜像，并在集群的两个节点上完成进行</span></span><br><span class="line"><span class="comment"># policy 的设置命令为</span></span><br><span class="line">rabbitmqctl <span class="keyword">set</span>_policy <span class="params">--priority</span> 0 <span class="params">--apply-to</span> queues mirror_queue <span class="string">"^queue_"</span> '&#123;<span class="string">"ha-mode"</span>:<span class="string">"exactly"</span>,<span class="string">"ha-params"</span><span class="function">:2</span>,<span class="string">"ha-sync-mode"</span>:<span class="string">"automatic"</span>&#125;'</span><br></pre></td></tr></table></figure><h3 id="policy-相关解释"><a href="#policy-相关解释" class="headerlink" title="policy 相关解释"></a>policy 相关解释</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name：      #<span class="built_in"> policy </span>策略的唯一名称</span><br><span class="line">Pattern：   # 用于匹配 exchange 和<span class="built_in"> queue </span>等名称的正则表达式</span><br><span class="line">Apply <span class="keyword">to</span>：  # 指定将此<span class="built_in"> policy </span>应用到哪些项上（例如：exchange，queue等）</span><br><span class="line">Priority：  # 可选参数，policy 的优先级，exchange 和<span class="built_in"> queue </span>名称可以匹配到多个 policy，优先级则定义了<span class="built_in"> policy </span>被执行的顺序</span><br><span class="line">Definition：# 参数定义</span><br></pre></td></tr></table></figure><h3 id="消息的同步"><a href="#消息的同步" class="headerlink" title="消息的同步"></a>消息的同步</h3><blockquote><p>将新节点加入已存在的镜像队列是，默认情况下 <code>ha-sync-mode=manual</code>，镜像队列中的消息不会主动同步到新节点，除非显式调用同步命令。<br>当调用同步命令后，队列开始阻塞，无法对其进行操作，直到同步完毕。<br>当 <code>ha-sync-mode=automatic</code> 时，新加入节点时会默认同步已知的镜像队列。<br>由于同步过程的限制，所以不建议在生产的 active 队列（有生产消费消息）中操作。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以使用下面的命令来查看那些 slaves 已经完成同步</span></span><br><span class="line">rabbitmqctl list_queues name slave_pids synchronised_slave_pids</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以通过手动的方式同步一个 queue</span></span><br><span class="line">rabbitmqctl sync_queue name</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同样也可以取消某个 queue 的同步功能</span></span><br><span class="line">rabbitmqctl cancel_sync_queue name</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当然这些都可以通过 management 插件来设置</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/u013256816/article/details/53524814" target="_blank" rel="noopener">https://blog.csdn.net/u013256816/article/details/53524814</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RabbitMQ常用命令&quot;&gt;&lt;a href=&quot;#RabbitMQ常用命令&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ常用命令&quot;&gt;&lt;/a&gt;RabbitMQ常用命令&lt;/h2&gt;
    
    </summary>
    
      <category term="RabbitMQ笔记" scheme="http://www.gmlyo.com/categories/RabbitMQ%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="RabbitMQ常用命令" scheme="http://www.gmlyo.com/tags/RabbitMQ%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ用户管理</title>
    <link href="http://www.gmlyo.com//blog/2018/07/24/RabbitMQ%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>http://www.gmlyo.com//blog/2018/07/24/RabbitMQ用户管理/</id>
    <published>2018-07-24T12:25:29.000Z</published>
    <updated>2018-07-24T14:45:58.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RabbitMQ-用户管理"><a href="#RabbitMQ-用户管理" class="headerlink" title="RabbitMQ 用户管理"></a>RabbitMQ 用户管理</h2><a id="more"></a><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><blockquote><p>在 <code>RabbitMQ</code> 中，用户是访问控制（Access Control）的基本单元，且单个用户可以跨越多个<code>vhost</code> 进行授权。<br>针对一至多个 <code>vhost</code>，用户可以被赋予不同级别的访问权限，并使用标准的用户名和密码来认证用户。<br>创建用户的命令为：<code>rabbitmqctl add_user {username} {password}</code>。<br>其中<br><code>username</code> 表示要创建的用户名称。<br><code>password</code> 表示创建用户登录的密码。<br>具体创建一个用户名为 <code>root</code>、密码为 <code>root123</code> 的用户</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rabbitmqctl add_user root root@123</span><br><span class="line">Creating<span class="built_in"> user </span><span class="string">"root"</span></span><br></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>可以通过<br><code>rabbitmqctl change_password {username} {newpassword}</code><br>命令来更改指定用户的密码<br>其中<br><code>username</code> 表示要变更密码的用户名称<br><code>newpassword</code> 表示要变更的新的密码</p><blockquote><p>举例：将 <code>root</code>用户的密码变更为 <code>root321</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rabbitmqctl change_password root root@321</span><br><span class="line">Changing password <span class="keyword">for</span><span class="built_in"> user </span><span class="string">"root"</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="清除密码"><a href="#清除密码" class="headerlink" title="清除密码"></a>清除密码</h3><p>同样可以清除密码，这样用户就不能使用密码登录了<br>对于的操作命令为：<br><code>rabbitmqctl clear_password {username}</code><br>其中<br><code>username</code> 表示要清楚密码的用户名称</p><h3 id="验证用户"><a href="#验证用户" class="headerlink" title="验证用户"></a>验证用户</h3><p>使用<br><code>rabbitmqctl authenticate_user {username} {password}</code><br>可以通过密码来验证用户<br>其中<br><code>username</code> 表示需要被验证的用户名称<br><code>password</code> 表示密码</p><blockquote><p>下面示例中分别采用 <code>root321</code> 和 <code>root322</code> 来验证 <code>root</code> 用户<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rabbitmqctl authenticate_user root root@321</span><br><span class="line">Authenticating<span class="built_in"> user </span><span class="string">"root"</span></span><br><span class="line">Success</span><br><span class="line"></span><br><span class="line">[root@node1 ~]# rabbitmqctl authenticate_user root root@322</span><br><span class="line">Authenticating<span class="built_in"> user </span><span class="string">"root"</span></span><br><span class="line">Error: failed <span class="keyword">to</span> authenticate<span class="built_in"> user </span><span class="string">"root"</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>删除用户的命令是<br><code>rabbitmqctl delete_user {username}</code><br>其中<br><code>username</code> 表示要删除的用户名称</p><blockquote><p>删除用户 <code>root</code> 的示例如下<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rabbitmqctl delete_user root</span><br><span class="line">Deleting<span class="built_in"> user </span><span class="string">"root"</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="查询用户列表"><a href="#查询用户列表" class="headerlink" title="查询用户列表"></a>查询用户列表</h3><p><code>rabbitmqctl list_users</code> 命令可以用来罗列当前的所有用户<br>每个结果行都包含用户名称，其后紧跟用户的角色（tags）</p><blockquote><p>示例代码如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rabbitmqctl list_users</span><br><span class="line">Listing users</span><br><span class="line">guest        [administrator]</span><br><span class="line">root          []</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="用户的角色分为-5-种类型"><a href="#用户的角色分为-5-种类型" class="headerlink" title="用户的角色分为 5 种类型"></a>用户的角色分为 <code>5</code> 种类型</h3><p><code>none</code>：无任何角色。新创建的用户的角色默认为 <code>none</code>。<br><code>management</code>：可以访问 <code>Web</code> 管理页面。<br><code>policymaker</code>：包含 <code>management</code> 的所有权限，并且可以管理策略（policy）和参数（parameter）。<br><code>monitoring</code>：包含 <code>management</code> 的所有权限，并且可以看到所有连接（connections）、信道（channels）以及节点相关的信息。<br><code>administartor</code>：包含 <code>monitoring</code> 的所有权限，并且可以管理用户、虚拟主机、权限、策略、参数等等。<code>administator</code> 代表了最高的权限。 </p><h3 id="设置用户角色"><a href="#设置用户角色" class="headerlink" title="设置用户角色"></a>设置用户角色</h3><p>用户的角色可以通过<br><code>rabbitmqctl set_user_tags {username} {tag...}</code><br>命令设置。<br>其中<br><code>username</code> 参数表示需要设置角色的用户名称。<br><code>tag</code> 参数用于设置 <code>0</code> 个、<code>1</code> 个 或者 <code>多</code> 个的角色，设置之后任何之前现有的身份都会被删除。</p><blockquote><p>使用示例如下：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl set_user_tags root monitoring</span></span><br><span class="line">Setting tags <span class="keyword">for</span> user <span class="string">"root"</span> <span class="keyword">to</span> [monitoring]</span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl list_users -q</span></span><br><span class="line">guest        [administrator]</span><br><span class="line">root         [monitoring]</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl set_user_tags root policymaker -q</span></span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl list_users -q</span></span><br><span class="line">guest        [administrator]</span><br><span class="line">root         [policymaker]</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl set_user_tags root</span></span><br><span class="line">Setting tags <span class="keyword">for</span> user <span class="string">"root"</span> <span class="keyword">to</span> []</span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl list_users -q</span></span><br><span class="line">guest        [administrator]</span><br><span class="line">root         []</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl set_user_tags root policymaker,management</span></span><br><span class="line">Setting tags <span class="keyword">for</span> user <span class="string">"root"</span> <span class="keyword">to</span> [<span class="string">'policymaker,management'</span>]</span><br><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl list_users -q</span></span><br><span class="line">guest        [administrator]</span><br><span class="line">root         [policymaker,management]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/u013256816/article/details/78181306" target="_blank" rel="noopener">https://blog.csdn.net/u013256816/article/details/78181306</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RabbitMQ-用户管理&quot;&gt;&lt;a href=&quot;#RabbitMQ-用户管理&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ 用户管理&quot;&gt;&lt;/a&gt;RabbitMQ 用户管理&lt;/h2&gt;
    
    </summary>
    
      <category term="RabbitMQ笔记" scheme="http://www.gmlyo.com/categories/RabbitMQ%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="RabbitMQ用户管理" scheme="http://www.gmlyo.com/tags/RabbitMQ%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ集群管理</title>
    <link href="http://www.gmlyo.com//blog/2018/07/24/RabbitMQ%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/"/>
    <id>http://www.gmlyo.com//blog/2018/07/24/RabbitMQ集群管理/</id>
    <published>2018-07-24T11:51:56.000Z</published>
    <updated>2018-07-25T14:56:51.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RabbitMQ-集群管理"><a href="#RabbitMQ-集群管理" class="headerlink" title="RabbitMQ 集群管理"></a>RabbitMQ 集群管理</h2><a id="more"></a><h3 id="rabbitmqctl-join-cluster-cluster-node-–ram"><a href="#rabbitmqctl-join-cluster-cluster-node-–ram" class="headerlink" title="rabbitmqctl join_cluster {cluster_node} [–ram]"></a>rabbitmqctl join_cluster {cluster_node} [–ram]</h3><blockquote><p>将节点加入指定集群中。在这个命令执行前需要停止 <code>RabbitMQ</code> 应用并重置节点。</p></blockquote><h3 id="rabbitmqctl-cluster-status"><a href="#rabbitmqctl-cluster-status" class="headerlink" title="rabbitmqctl cluster_status"></a>rabbitmqctl cluster_status</h3><blockquote><p>显示集群的状态</p></blockquote><h3 id="rabbitmqctl-change-cluster-node-type-disc-ram"><a href="#rabbitmqctl-change-cluster-node-type-disc-ram" class="headerlink" title="rabbitmqctl change_cluster_node_type {disc|ram}"></a>rabbitmqctl change_cluster_node_type {disc|ram}</h3><blockquote><p>修改集群节点的类型。在这个命令执行前需要停止 <code>RabbitMQ</code> 应用</p></blockquote><h3 id="rabbitmqctl-forget-cluster-node-–offline"><a href="#rabbitmqctl-forget-cluster-node-–offline" class="headerlink" title="rabbitmqctl forget_cluster_node [–offline]"></a>rabbitmqctl forget_cluster_node [–offline]</h3><blockquote><p>将节点从集群中删除，允许离线执行</p></blockquote><h3 id="rabbitmqctl-update-cluster-nodes-clusternode"><a href="#rabbitmqctl-update-cluster-nodes-clusternode" class="headerlink" title="rabbitmqctl update_cluster_nodes {clusternode}"></a>rabbitmqctl update_cluster_nodes {clusternode}</h3><blockquote><p>在集群中的节点应用启动前咨询 <code>clusternode</code> 节点的最新信息，并更新相应的集群信息。<br>这个和 <code>join_cluster</code> 不同，它不加入集群。<br>考虑这样一种情况，<code>节点A</code> 和 <code>节点B</code> 都在集群中，当节点A离线了，<code>节点C</code> 又和 <code>节点B</code> 组成了一个集群，然后 <code>节点B</code> 又离开了集群，当 <code>A</code> 醒来的时候，它会尝试联系 <code>节点B</code>，但是这样会失败，因为节点B已经不在集群中了。<br><code>rabbitmqctl update_cluster_nodes -n A C</code> 可以解决这种场景。 </p></blockquote><blockquote><p>示例如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设已有 node1 和 node2 组成的集群</span></span><br><span class="line"><span class="comment"># 1. 初始状态</span></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@node1</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@node1,rabbit@node2]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit@node2,rabbit@node1]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@node1"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit@node2,[]&#125;,&#123;rabbit@node1,[]&#125;]&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 关闭 node1 节点的应用</span></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">Stopping rabbit application on node rabbit@node1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 之后将 node3 加入到集群中（rabbitmqctl join_cluster rabbit<span class="doctag">@node</span>2）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 再将 node2 节点的应用关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 最后启动 node1 节点的应用，此时会报错</span></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl start_app</span></span><br><span class="line">Starting node rabbit@node1</span><br><span class="line">BOOT FAILED</span><br><span class="line">===========</span><br><span class="line">Timeout contacting cluster <span class="symbol">nodes:</span> [rabbit@node2].</span><br><span class="line">....(省略)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 如果在启动 node1 节点的应用之前咨询 node3 并更新相关集群信息则可以解决这个问题</span></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl update_cluster_nodes rabbit<span class="doctag">@node</span>3</span></span><br><span class="line">Updating cluster nodes <span class="keyword">for</span> rabbit@node1 from rabbit@node3</span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl start_app</span></span><br><span class="line">Starting node rabbit@node1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 最终集群状态</span></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@node1</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@node1,rabbit@node3]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit@node3,rabbit@node1]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@node1"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit@node3,[]&#125;,&#123;rabbit@node1,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-force-boot"><a href="#rabbitmqctl-force-boot" class="headerlink" title="rabbitmqctl force_boot"></a>rabbitmqctl force_boot</h3><p>确保节点可以启动，即使它不是最后一个关闭的节点。<br>通常情况下，当关闭整个 <code>RabbitMQ</code> 集群时，重启的第一个节点应该是最后关闭的节点，因为它可以看到其它节点所看不到的事情。<br>但是有时会有一些异常情况出现，比如整个集群都掉电而所有节点都认为它不是最后一个关闭的。在这种情况下，可以调用 <code>rabbitmqctl force_boot</code> 命令，这就告诉节点可以无条件的启动节点。<br>在此节点关闭后，集群的任何变化，它都会丢失。<br>如果最后一个关闭的节点永久丢失了，那么你需要优先使用 <code>rabbitmqctl forget_cluster_node –offline</code> 命令，因为它可以确保镜像队列的正常运转。 </p><blockquote><p>示例如下：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># rabbitmqctl force_boot</span></span><br><span class="line">Forcing boot <span class="keyword">for</span> Mnesia dir /data/app/rabbitmq/var/<span class="class"><span class="keyword">lib</span>/<span class="title">rabbitmq</span>/<span class="title">mnesia</span>/<span class="title">rabbit</span>@<span class="title">node2</span></span></span><br><span class="line">[root@node2 ~]<span class="comment"># rabbitmq-server –detached</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-sync-queue-p-vhost-queue"><a href="#rabbitmqctl-sync-queue-p-vhost-queue" class="headerlink" title="rabbitmqctl sync_queue [-p vhost] {queue}"></a>rabbitmqctl sync_queue [-p vhost] {queue}</h3><blockquote><p>指示未同步队列 <code>queue</code> 的 <code>slave</code> 镜像可以同步 <code>master</code> 镜像行的内容。<br>同步期间此队列会被阻塞（所有此队列的生产消费者都会被阻塞），直到同步完成。<br>此条命令执行成功的前提是队列<code>queue</code> 配置了镜像。<br>注意，未同步队列中的消息被耗尽后，最终也会变成同步，此命令主要用于未耗尽的队列。 </p></blockquote><blockquote><p>示例如下：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl sync_queue queue</span></span><br><span class="line">Synchronising queue <span class="string">'queue'</span> <span class="keyword">in</span> vhost <span class="string">'/'</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-cancel-sync-queue-p-vhost-queue"><a href="#rabbitmqctl-cancel-sync-queue-p-vhost-queue" class="headerlink" title="rabbitmqctl cancel_sync_queue [-p vhost] {queue}"></a>rabbitmqctl cancel_sync_queue [-p vhost] {queue}</h3><blockquote><p>取消队列 <code>queue</code> 同步镜像的操作。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># rabbitmqctl cancel_sync_queue queue</span></span><br><span class="line">Stopping synchronising queue <span class="string">'queue'</span> <span class="keyword">in</span> vhost <span class="string">'/'</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-set-cluster-name-name"><a href="#rabbitmqctl-set-cluster-name-name" class="headerlink" title="rabbitmqctl set_cluster_name {name}"></a>rabbitmqctl set_cluster_name {name}</h3><blockquote><p>设置集群名称。<br>集群名称在客户端连接时会通报给客户端。<br><code>Federation</code> 和 <code>Shovel</code> 插件也会有用到集群名称的地方。<br>集群名称默认是集群中第一个节点的名称，通过这个命令可以重新设置。 </p></blockquote><blockquote><p>示例如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@node1</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@node1,rabbit@node2]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit@node2,rabbit@node1]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@node1"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit@node2,[]&#125;,&#123;rabbit@node1,[]&#125;]&#125;]</span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl set_cluster_name cluster_hidden</span></span><br><span class="line">Setting cluster name to cluster_hidden</span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@node1</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@node1,rabbit@node2]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit@node2,rabbit@node1]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"cluster_hidden"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit@node2,[]&#125;,&#123;rabbit@node1,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/u013256816/article/details/78348761" target="_blank" rel="noopener">https://blog.csdn.net/u013256816/article/details/78348761</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RabbitMQ-集群管理&quot;&gt;&lt;a href=&quot;#RabbitMQ-集群管理&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ 集群管理&quot;&gt;&lt;/a&gt;RabbitMQ 集群管理&lt;/h2&gt;
    
    </summary>
    
      <category term="RabbitMQ笔记" scheme="http://www.gmlyo.com/categories/RabbitMQ%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="RabbitMQ集群管理" scheme="http://www.gmlyo.com/tags/RabbitMQ%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ应用管理</title>
    <link href="http://www.gmlyo.com//blog/2018/07/24/RabbitMQ%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/"/>
    <id>http://www.gmlyo.com//blog/2018/07/24/RabbitMQ应用管理/</id>
    <published>2018-07-24T11:38:57.000Z</published>
    <updated>2018-07-24T14:45:14.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RabbitMQ-应用管理"><a href="#RabbitMQ-应用管理" class="headerlink" title="RabbitMQ 应用管理"></a>RabbitMQ 应用管理</h2><p>本文主要阐述应用与集群相关的一些操作管理命令，包括关闭、重置、开启服务，还有建立集群的一些信息。</p><a id="more"></a><h3 id="rabbitmqctl-stop-pid-file"><a href="#rabbitmqctl-stop-pid-file" class="headerlink" title="rabbitmqctl stop [pid_file]"></a>rabbitmqctl stop [pid_file]</h3><blockquote><p>用于停止运行 <code>RabbitMQ</code> 的 <code>Erlang</code> 虚拟机和 <code>RabbitMQ</code> 服务应用。<br>如果指定了 <code>pid_file</code>，还需要等待指定进程的结束。<br>其中 <code>pid_file</code> 是通过调用 <code>rabbitmq-server</code> 启动 <code>RabbitMQ</code> 服务时创建的，默认情况下存放于 <code>Mnesia</code> 目录中，可以通过 <code>RABBITMQ_PID_FILE</code> 这个环境变量来改变存放路径。<br><code>注意</code>，如果是 <code>rabbitmq-server –detach</code> 启动的 <code>RabbitMQ</code> 服务则不会生成 <code>pid_file</code> 这个文件。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl stop</span></span><br><span class="line">/data/app/rabbitmq/var/<span class="class"><span class="keyword">lib</span>/<span class="title">rabbitmq</span>/<span class="title">mnesia</span>/<span class="title">rabbit</span>\@<span class="title">node1</span>.<span class="title">pid</span></span></span><br><span class="line">Stopping and halting node rabbit@node1</span><br><span class="line"></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl stop</span></span><br><span class="line">Stopping and halting node rabbit@node1</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-shutdown"><a href="#rabbitmqctl-shutdown" class="headerlink" title="rabbitmqctl shutdown"></a>rabbitmqctl shutdown</h3><blockquote><p>用于停止运行 <code>RabbitMQ</code> 的 <code>Erlang</code> 虚拟机 和 <code>RabbitMQ</code> 服务应用。<br>执行这个命令会阻塞直到 <code>Erlang</code> 虚拟机进程的退出。<br>如果 <code>RabbitMQ</code> 没有成功关闭，则会返回一个非零值。<br>这个命令和 <code>rabbitmqctl stop</code> 的不同的是，它不需要指定 <code>pid_file</code> 而可以阻塞等待指定进程的关闭。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl shutdown</span></span><br><span class="line">Shutting down RabbitMQ <span class="keyword">node</span> <span class="title">rabbit</span>@node1 running at PID <span class="number">1706</span></span><br><span class="line">Waiting for PID <span class="number">1706</span> to terminate</span><br><span class="line">RabbitMQ <span class="keyword">node</span> <span class="title">rabbit</span>@node1 running at PID <span class="number">1706</span> successfully shut down</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-stop-app"><a href="#rabbitmqctl-stop-app" class="headerlink" title="rabbitmqctl stop_app"></a>rabbitmqctl stop_app</h3><blockquote><p>停止 <code>RabbitMQ</code> 服务应用，但是 <code>Erlang</code> 虚拟机还是处于运行状态。<br>此命令优先执行其他管理操作（这些管理操作需要先停止 <code>RabbitMQ</code> 应用），比如 <code>rabbitmqctl reset</code>。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">Stopping rabbit application on <span class="keyword">node</span> <span class="title">rabbit</span>@node1</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-start-app"><a href="#rabbitmqctl-start-app" class="headerlink" title="rabbitmqctl start_app"></a>rabbitmqctl start_app</h3><blockquote><p>启动 <code>RabbitMQ</code> 应用。<br>此命令典型的用途是在执行了其他管理操作之后，重新启动之前停止的 RabbitMQ 应用，譬如<code>rabbitmqctl reset</code>。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl start_app</span></span><br><span class="line">Starting <span class="keyword">node</span> <span class="title">rabbit</span>@node1</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-wait-pid-file"><a href="#rabbitmqctl-wait-pid-file" class="headerlink" title="rabbitmqctl wait [pid_file]"></a>rabbitmqctl wait [pid_file]</h3><blockquote><p>等待 <code>RabbitMQ</code> 应用的启动。<br>它会等到 <code>pid_file</code> 的创建，然后等待 <code>pid_file</code> 中的所代表的进程启动。<br>当指定的进程没有启动 <code>RabbitMQ</code> 应用而关闭时将会返回失败。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>node1 ~]# rabbitmqctl wait /<span class="keyword">data</span>/app/rabbitmq/<span class="keyword">var</span>/lib/rabbitmq/mnesia/rabbit\<span class="meta">@node1</span>.pid</span><br><span class="line">Waiting <span class="keyword">for</span> <span class="symbol">rabbit@</span>node1</span><br><span class="line">pid <span class="keyword">is</span> <span class="number">3468</span></span><br><span class="line"></span><br><span class="line">[<span class="symbol">root@</span>node1 ~]# rabbitmqctl wait /<span class="keyword">data</span>/app/rabbitmq/<span class="keyword">var</span>/lib/rabbitmq/mnesia/rabbit\<span class="meta">@node1</span>.pid</span><br><span class="line">Waiting <span class="keyword">for</span> <span class="symbol">rabbit@</span>node1</span><br><span class="line">pid <span class="keyword">is</span> <span class="number">3468</span></span><br><span class="line">Error: process_not_running</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-reset"><a href="#rabbitmqctl-reset" class="headerlink" title="rabbitmqctl reset"></a>rabbitmqctl reset</h3><blockquote><p>将 <code>RabbitMQ</code> 节点重置还原到最初状态，包括从原所在的集群中删除此节点，从管理数据库中删除所有的配置数据，如已配置的用户、vhost等，以及删除所有的持久化消息。<br>执行 <code>rabbitmqctl reset</code> 命令前必须停止 <code>RabbitMQ</code> 应用（比如先执行 <code>rabbitmqctl stop_app</code>）。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">Stopping rabbit application on <span class="keyword">node</span> <span class="title">rabbit</span>@node1</span><br><span class="line"></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl reset</span></span><br><span class="line">Resetting <span class="keyword">node</span> <span class="title">rabbit</span>@node1</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-force-reset"><a href="#rabbitmqctl-force-reset" class="headerlink" title="rabbitmqctl force_reset"></a>rabbitmqctl force_reset</h3><blockquote><p>强制将 <code>RabbitMQ</code> 节点重置还原到最初状态。<br>不同于 <code>rabbitmqctl reset</code>，<code>rabbitmqctl force_reset</code> 命令不论当前管理数据库的状态和集群配置是什么，会无条件地重置节点。<br>它只能在数据库或集群配置已损坏的情况下才可使用。<br>与 <code>rabbitmqctl reset</code> 命令一下，执行 <code>rabbitmqctl force_reset</code> 命令前必须先停止<code>RabbitMQ</code> 应用。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">Stopping rabbit application on <span class="keyword">node</span> <span class="title">rabbit</span>@node1</span><br><span class="line"></span><br><span class="line">[root@node1 ~]<span class="comment"># rabbitmqctl force_reset</span></span><br><span class="line">Forcefully resetting <span class="keyword">node</span> <span class="title">rabbit</span>@node1</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-rotate-logs-suffix"><a href="#rabbitmqctl-rotate-logs-suffix" class="headerlink" title="rabbitmqctl rotate_logs {suffix}"></a>rabbitmqctl rotate_logs {suffix}</h3><blockquote><p>指示 <code>RabbitMQ</code> 节点轮换日志文件。<br><code>RabbitMQ</code> 节点会将原来的日志文件中的内容追加到 <code>“原始名称+后缀”</code>的日志文件中，然后再将新的日志内容记录到新创建的日志中（与原日志文件同名）。<br>当目标文件不存在时，将会重新创建。<br>如果不指定 <code>suffix</code>，那么则日志文件只是重新打开而不会进行轮换。</p></blockquote><blockquote><p>示例如下所示<br>原日志文件为 <a href="mailto:`rabbit@node1.log" target="_blank" rel="noopener">`rabbit@node1.log</a><code>和</code><a href="mailto:rabbit@node1-sasl.log" target="_blank" rel="noopener">rabbit@node1-sasl.log</a><code>，轮换日志之后，原日志文件中的内容就被追加到</code><a href="mailto:rabbit@node1.log.1" target="_blank" rel="noopener">rabbit@node1.log.1</a><code>和</code><a href="mailto:rabbit@node1-sasl.log.1" target="_blank" rel="noopener">rabbit@node1-sasl.log.1</a><code>日志中，之后重新建立</code><a href="mailto:rabbit@node1.log" target="_blank" rel="noopener">rabbit@node1.log</a><code>和</code><a href="mailto:rabbit@node1-sasl.log" target="_blank" rel="noopener">rabbit@node1-sasl.log</a>` 文件用来接收新的日志。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@node1</span> rabbitmq]<span class="meta"># pwd</span></span><br><span class="line">/data/app/rabbitmq/var/<span class="built_in">log</span>/rabbitmq</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@node1</span> rabbitmq]<span class="meta"># ll</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1024127</span> Aug <span class="number">18</span> <span class="number">11</span>:<span class="number">56</span> rabbit<span class="symbol">@node1</span>.<span class="built_in">log</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root  <span class="number">720553</span> Aug <span class="number">17</span> <span class="number">19</span>:<span class="number">16</span> rabbit<span class="symbol">@node1</span>-sasl.<span class="built_in">log</span></span><br><span class="line">[root<span class="symbol">@node1</span> rabbitmq]<span class="meta"># rabbitmqctl rotate_logs .1</span></span><br><span class="line">Rotating logs <span class="keyword">to</span> files <span class="keyword">with</span> suffix <span class="string">".1"</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@node1</span> rabbitmq]<span class="meta"># ll</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root       <span class="number">0</span> Aug <span class="number">18</span> <span class="number">12</span>:<span class="number">05</span> rabbit<span class="symbol">@node1</span>.<span class="built_in">log</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1024202</span> Aug <span class="number">18</span> <span class="number">12</span>:<span class="number">05</span> rabbit<span class="symbol">@node1</span>.<span class="built_in">log</span><span class="number">.1</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root       <span class="number">0</span> Aug <span class="number">18</span> <span class="number">12</span>:<span class="number">05</span> rabbit<span class="symbol">@node1</span>-sasl.<span class="built_in">log</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root  <span class="number">720553</span> Aug <span class="number">18</span> <span class="number">12</span>:<span class="number">05</span> rabbit<span class="symbol">@node1</span>-sasl.<span class="built_in">log</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="rabbitmqctl-hipe-compile-directory"><a href="#rabbitmqctl-hipe-compile-directory" class="headerlink" title="rabbitmqctl hipe_compile {directory}"></a>rabbitmqctl hipe_compile {directory}</h3><blockquote><p>将部分 <code>RabbitMQ</code> 代码用 <code>HiPE（HiPE是指High Performance Erlang ，是Erlang版的JIT）</code>编译，并且将编译后的 <code>.beam</code> 文件（beam 文件是 Erlang 编译器生成的文件格式，可以直接加载到 Erlang 虚拟机中运行的文件格式）保存到指定的文件目录中。<br>如果这个目录不存在则会自行创建。<br>如果这个目录中原本有任何 <code>.beam</code> 文件，则会在执行编译前被删除。<br>如果要使用预编译的这些文件，需要设置 <code>RABBITMQ_SERVER_CODE_PATH</code> 这个环境变量来指定<code>hipe_compile</code> 调用的路径。</p></blockquote><blockquote><p>示例如下：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 rabbitmq]# rabbitmqctl hipe_compile /data/app/rabbitmq/tmp/rabbit-hipe/ebin</span><br><span class="line">HiPE compiling:  |---------------------------------------------------------|</span><br><span class="line">                 |#########################################################|</span><br><span class="line">Compiled <span class="number">57</span> modules <span class="keyword">in</span> <span class="number">55</span>s</span><br><span class="line">[root@node1 rabbitmq]# ls /opt/rabbitmq/tmp/rabbit-hipe/ebin</span><br><span class="line">array.beam              proplists.beam                    rabbit_misc.beam</span><br><span class="line">credit_flow.beam        qlc.beam                          rabbit_msg_file.beam</span><br><span class="line">delegate.beam           queue.beam                        rabbit_msg_store.beam</span><br><span class="line">dict.beam               rabbit_amqqueue.beam              rabbit_msg_store_ets_index.beam</span><br><span class="line">file_handle_cache.beam  rabbit_amqqueue_process.beam      rabbit_net.beam</span><br><span class="line">gb_sets.beam            rabbit_basic.beam                 rabbit_queue_index.beam</span><br><span class="line">gb_trees.beam           rabbit_binary_generator.beam      rabbit_reader.beam</span><br><span class="line">gen.beam                rabbit_binary_parser.beam         rabbit_router.beam</span><br><span class="line">gen_fsm.beam            rabbit_channel.beam               rabbit_trace.beam</span><br><span class="line">gen_server2.beam        rabbit_command_assembler.beam     rabbit_variable_queue.beam</span><br><span class="line">lists.beam              rabbit_event.beam                 rabbit_writer.beam</span><br><span class="line">lqueue.beam             rabbit_exchange.beam              rpc.beam</span><br><span class="line">mnesia.beam             rabbit_exchange_decorator.beam    sets.beam</span><br><span class="line">mnesia_lib.beam         rabbit_exchange_type_direct.beam  sofs.beam</span><br><span class="line">mnesia_tm.beam          rabbit_exchange_type_fanout.beam  ssl.beam</span><br><span class="line">orddict.beam            rabbit_exchange_type_topic.beam   ssl_connection.beam</span><br><span class="line">ordsets.beam            rabbit_framing_amqp_0_9_1.beam    ssl_record.beam</span><br><span class="line">pmon.beam               rabbit_guid.beam                  tls_connection.beam</span><br><span class="line">priority_queue.beam     rabbit_limiter.beam               tls_record.beam</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/u013256816/article/details/78221439" target="_blank" rel="noopener">https://blog.csdn.net/u013256816/article/details/78221439</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RabbitMQ-应用管理&quot;&gt;&lt;a href=&quot;#RabbitMQ-应用管理&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ 应用管理&quot;&gt;&lt;/a&gt;RabbitMQ 应用管理&lt;/h2&gt;&lt;p&gt;本文主要阐述应用与集群相关的一些操作管理命令，包括关闭、重置、开启服务，还有建立集群的一些信息。&lt;/p&gt;
    
    </summary>
    
      <category term="RabbitMQ笔记" scheme="http://www.gmlyo.com/categories/RabbitMQ%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="RabbitMQ应用管理" scheme="http://www.gmlyo.com/tags/RabbitMQ%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
