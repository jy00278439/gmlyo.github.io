<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>G加菲</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.gmlyo.com/"/>
  <updated>2018-07-16T16:21:23.689Z</updated>
  <id>http://www.gmlyo.com/</id>
  
  <author>
    <name>G加菲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python文件处理</title>
    <link href="http://www.gmlyo.com//blog/2018/07/11/Python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://www.gmlyo.com//blog/2018/07/11/Python文件处理/</id>
    <published>2018-07-10T16:24:39.000Z</published>
    <updated>2018-07-16T16:21:23.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><a id="more"></a><blockquote><p>应用程序中需要经常将内存的数据永久保存下来，而应用程序又无法直接操作硬件<br>只能通过操作系统提供的虚拟单位去间接地操作硬盘</p></blockquote><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><blockquote><p><code>open(&#39;文件的路径&#39;, mode=&#39;打开文件的模式&#39;, encoding=&#39;操作文件的字符编码&#39;)</code><br><code>r</code> 表示 <code>原始字符串</code>，不转义任何特殊字符</p><ol><li>向操作系统发送打开文件的请求</li><li>向操作系统发送打开文件的请求</li></ol></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(<span class="string">r'/tmp/a.txt'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>open 有返回值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">r'/tmp/a.txt'</span>, mode=<span class="string">'r'</span>)</span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&lt;_io.TextIOWrapper name=<span class="string">'/tmp/a.txt'</span> mode=<span class="string">'r'</span> encoding=<span class="string">'UTF-8'</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>f =&gt; 应用程序中的一个值 =&gt; 操作系统打开的文件 a.txt =&gt; 硬盘中的一块空间</p></blockquote><h3 id="读-写"><a href="#读-写" class="headerlink" title="读/写"></a>读/写</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 应用程序向操作系统发送请求，打开文件</span></span><br><span class="line"><span class="title">f</span>.read()    # 把文件内容全都读到内存里去</span><br><span class="line"></span><br><span class="line"><span class="title">f</span> = open(r'a.txt', mode='r')</span><br><span class="line"><span class="class"><span class="keyword">data</span> = f.read()</span></span><br><span class="line"><span class="title">print</span>(<span class="class"><span class="keyword">data</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line"><span class="type">UnicodeDecodeError</span>: 'gbk' codec can't decode byte <span class="number">0x8a</span> <span class="keyword">in</span> position <span class="number">8</span>: illegal multibyte sequenc</span><br><span class="line"><span class="meta"># 注意 不同 操作系统平台 字符编码问题</span></span><br><span class="line"><span class="meta"># Windows gbk</span></span><br><span class="line"><span class="meta"># Linux utf-8</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">r'a.txt'</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)   <span class="comment"># 指定打开文件的字符编码为 utf-8</span></span><br><span class="line">data = f.read()    <span class="comment"># 在读取的时候就会以 utf-8 的编码读取</span></span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">你好啊</span><br><span class="line">aaa</span><br><span class="line">woca 嘞</span><br></pre></td></tr></table></figure><h3 id="关闭文件，释放资源"><a href="#关闭文件，释放资源" class="headerlink" title="关闭文件，释放资源"></a>关闭文件，释放资源</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f.close()    <span class="comment"># 回收操作系统的资源，操作系统会定期回收资源</span></span><br><span class="line">print(f)     <span class="comment"># f 的资源会自动被 Python 回收掉</span></span><br><span class="line">f.<span class="built_in">read</span>()</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">ValueError: I/O operation <span class="keyword">on</span> closed <span class="built_in">file</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># del f    # 手动回收 f 资源，不要在 f.close() 之前用这个</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>文件处理的步骤</p><ol><li>打开文件</li><li>读/写文件</li><li>关闭文件</li></ol></blockquote><h3 id="打开多个文件"><a href="#打开多个文件" class="headerlink" title="打开多个文件"></a>打开多个文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1 = open(<span class="string">r'a1.txt'</span>, mode=<span class="string">'r'</span>)</span><br><span class="line">f2 = open(<span class="string">r'a2.txt'</span>, mode=<span class="string">'r'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>操作系统资源 =&gt; 文件描述符<br>应用程序资源</p></blockquote><h3 id="with-上下文管理"><a href="#with-上下文管理" class="headerlink" title="with 上下文管理"></a><code>with</code> 上下文管理</h3><blockquote><p>帮你打开文件<br>先将操作系统把文件打开<br>然后把打开结果赋值给 f（占用两个资源）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'a.txt'</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">'==&gt;'</span>)       <span class="comment"># 运行 with 的子代码块</span></span><br><span class="line">    print(f.read())    <span class="comment"># 在这里基于 with 打开的文件，做读写操作</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>with</code> 会帮我们自动 <code>close</code></p></blockquote><h3 id="with-打开多个文件"><a href="#with-打开多个文件" class="headerlink" title="with 打开多个文件"></a><code>with</code> 打开多个文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'a.txt'</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f1,\</span><br><span class="line">        open(<span class="string">r'b.txt'</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    print(<span class="string">'==&gt;'</span>)</span><br><span class="line">    print(f1.read())</span><br><span class="line">    print(f2.read())</span><br></pre></td></tr></table></figure><h3 id="文件的打开模式"><a href="#文件的打开模式" class="headerlink" title="文件的打开模式"></a>文件的打开模式</h3><h4 id="三种纯净模式"><a href="#三种纯净模式" class="headerlink" title="三种纯净模式"></a>三种纯净模式</h4><blockquote><p><code>r</code> 只读模式（默认模式，文件必须存在，不存在则抛出异常）<br><code>w</code> 只写模式（不可读，不存在则创建；存在则清空内容）<br><code>a</code> 只追加写模式（不可读，不存在则创建；存在则追加内容）</p></blockquote><h3 id="控制操作文件内容的模式"><a href="#控制操作文件内容的模式" class="headerlink" title="控制操作文件内容的模式"></a>控制操作文件内容的模式</h3><h4 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h4><blockquote><p>不能单独使用，必须与 <code>r</code>，<code>w</code>，<code>a</code> 连用<br><code>t（默认）</code>：<code>text</code>文本模式，该模式操作文件内容的单位都是字符串，该模式只适用于文本文件<br><code>注意：</code> 该模式下必须指定 <code>encoding=&quot;字符编码&quot;</code><br><code>b</code>：<code>bytes</code> 二进制模式，该模式下操作文件的内容单位都是bytes，该模式适用于所有类型文件</p></blockquote><h4 id="r-模式，只读模式"><a href="#r-模式，只读模式" class="headerlink" title="r 模式，只读模式"></a><code>r</code> 模式，只读模式</h4><blockquote><p>默认单位：<code>t</code>，可以不指定<br>默认文件的打开模式是 <code>rt</code> 模式<br>文件必须存在，不存在则报错<br>文件存在则打开文件，并且将文件指针跳到文件的开头</p></blockquote><h5 id="read-方法"><a href="#read-方法" class="headerlink" title="read() 方法"></a><code>read()</code> 方法</h5><blockquote><p>读取所有内容，光标移动到文件末尾<br>把文件内容一次性全都读出，读成 <code>str字符串</code> 数据类型</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'a.txt'</span>, <span class="keyword">mode</span>=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    data = <span class="keyword">f</span>.<span class="keyword">read</span>()</span><br><span class="line">    <span class="keyword">print</span>(<span class="built_in">type</span>(data))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">&lt;class <span class="string">'str'</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.<span class="built_in">read</span>()</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">你好啊</span><br><span class="line">aaa</span><br><span class="line">woca 了</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'a.txt'</span>, <span class="keyword">mode</span>=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    data1 = <span class="keyword">f</span>.<span class="keyword">read</span>()</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'第一次'</span>, data1)</span><br><span class="line">    data2 = <span class="keyword">f</span>.<span class="keyword">read</span>()</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'第二次'</span>, data2)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">第一次 你好啊</span><br><span class="line">aaa</span><br><span class="line">woca 了</span><br><span class="line">第二次</span><br></pre></td></tr></table></figure><h5 id="readable-判断文件是否可读"><a href="#readable-判断文件是否可读" class="headerlink" title="readable() 判断文件是否可读"></a><code>readable()</code> 判断文件是否可读</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h5 id="writable-判断文件是否可写"><a href="#writable-判断文件是否可写" class="headerlink" title="writable() 判断文件是否可写"></a><code>writable()</code> 判断文件是否可写</h5><blockquote><p><code>r</code> 读模式，不能写，只能读</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">False</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">io.UnsupportedOperation: <span class="keyword">not</span> writable</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f.closed    <span class="comment"># 文件是否关闭</span></span><br><span class="line">f.encoding    <span class="comment"># 如果文件打开模式为b，则没有该属性</span></span><br><span class="line">f.flush()    <span class="comment"># 立刻将文件内容从内存刷到硬盘</span></span><br><span class="line">f.<span class="built_in">name</span></span><br></pre></td></tr></table></figure><h5 id="readline-方法"><a href="#readline-方法" class="headerlink" title="readline() 方法"></a><code>readline()</code> 方法</h5><blockquote><p>一次读一行<br>读取一行内容，光标移动到第二行首部</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'a.txt'</span>, <span class="keyword">mode</span>=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    <span class="built_in">line</span> = <span class="keyword">f</span>.readline()</span><br><span class="line">    <span class="keyword">print</span>(<span class="built_in">line</span>, end=<span class="string">''</span>)  # end=<span class="string">''</span> 取消 <span class="keyword">print</span>() 自带的换行</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'====&gt;'</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">你好啊</span><br><span class="line">====&gt;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">with <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) as f:</span><br><span class="line">    line1 = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(line1, <span class="keyword">end</span>=<span class="string">''</span>)  # <span class="keyword">end</span>=<span class="string">''</span> 取消 <span class="built_in">print</span>() 自带的换行</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'====&gt;'</span>)</span><br><span class="line">    line2 = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(line2, <span class="keyword">end</span>=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">你好啊</span><br><span class="line">====&gt;</span><br><span class="line">aaa</span><br></pre></td></tr></table></figure><h5 id="readlines-方法"><a href="#readlines-方法" class="headerlink" title="readlines() 方法"></a><code>readlines()</code> 方法</h5><blockquote><p>读取每一行内容，存放于列表中<br>把文件内容一次性全都读出，读成 <code>list列表</code> 数据类型，和 <code>read()</code> 类似</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'a.txt'</span>, <span class="keyword">mode</span>=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    <span class="keyword">l</span> = <span class="keyword">f</span>.readlines()</span><br><span class="line">    <span class="keyword">print</span>(<span class="built_in">type</span>(<span class="keyword">l</span>))</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">l</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">&lt;class <span class="string">'list'</span>&gt;</span><br><span class="line">[<span class="string">'你好啊\n'</span>, <span class="string">'aaa\n'</span>, <span class="string">'woca 了'</span>]</span><br></pre></td></tr></table></figure><h4 id="w-模式，只写模式"><a href="#w-模式，只写模式" class="headerlink" title="w 模式，只写模式"></a><code>w</code> 模式，只写模式</h4><blockquote><p>只写模式<br>文件存在，会将文件内容情空，并且将文件指针跳到文件的开头<br>文件不存在，则创建一个空文件，并且将文件指针跳到文件的开头</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    print(f.writable())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.readline()</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">io.UnsupportedOperation: <span class="keyword">not</span> readable</span><br></pre></td></tr></table></figure><h5 id="write-方法"><a href="#write-方法" class="headerlink" title="write() 方法"></a><code>write()</code> 方法</h5><blockquote><p>针对文本模式的写，需要自己写换行符</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f.write('<span class="number">1111</span>\n<span class="number">2222</span>\n')</span><br><span class="line">f.write('<span class="number">1111</span>\n<span class="number">2222</span>\n'.encode('utf-8'))</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'你好啊'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line">你好啊</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'你好啊'</span>)</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'我的天'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line">你好啊我的天</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'你好啊\n'</span>)</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'我的天'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line">你好啊</span><br><span class="line">我的天</span><br></pre></td></tr></table></figure><blockquote><p><code>注意：</code><br>如果每次都是重新打开文件，那么文件内容总会清空，指针永远跳到开头<br>如果在打开文件不关闭的情况下，连续的写入，本次写入会基于上一次指针所在的位置往后继续写</p></blockquote><h5 id="writelines-方法"><a href="#writelines-方法" class="headerlink" title="writelines() 方法"></a><code>writelines()</code> 方法</h5><blockquote><p>文件模式<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">f</span><span class="selector-class">.writelines</span>([<span class="string">'333\n'</span>,<span class="string">'444\n'</span>])</span><br><span class="line"><span class="selector-tag">f</span><span class="selector-class">.writelines</span>([bytes(<span class="string">'333\n'</span>, encoding=<span class="string">'utf-8'</span>), <span class="string">'444\n'</span>.encode(<span class="string">'utf-8'</span>)])</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    l = [<span class="string">'1111\n'</span>, <span class="string">'2222\n'</span>, <span class="string">'3333\n'</span>]</span><br><span class="line">    f.writelines(l)</span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line"><span class="number">1111</span></span><br><span class="line"><span class="number">2222</span></span><br><span class="line"><span class="number">3333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    l = [<span class="string">'1111\n'</span>, <span class="string">'2222\n'</span>, <span class="string">'3333\n'</span>]</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> l:</span><br><span class="line">        f.<span class="built_in">write</span>(<span class="built_in">line</span>)</span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line"><span class="number">1111</span></span><br><span class="line"><span class="number">2222</span></span><br><span class="line"><span class="number">3333</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'1111\n\2222\n3333\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line"><span class="number">1111</span></span><br><span class="line"><span class="number">2222</span></span><br><span class="line"><span class="number">3333</span></span><br></pre></td></tr></table></figure><h5 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h5><blockquote><p><code>\n</code> Unix/Linux平台<br><code>\r</code> 老 Mac OS<br><code>\n</code> 新 Mac OS X<br><code>\r\n</code> Windows平台</p></blockquote><blockquote><p>查看换行符<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">b<span class="string">'1111\r\n2222\r\n3333\r\n'</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">with <span class="keyword">open</span>(<span class="string">'a.txt'</span>, <span class="keyword">mode</span>=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    <span class="keyword">l</span> = <span class="keyword">f</span>.readlines()</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">l</span>)</span><br><span class="line">    <span class="keyword">print</span>(<span class="built_in">type</span>(<span class="keyword">l</span>))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'1111\n'</span>, <span class="string">'2222\n'</span>, <span class="string">'3333'</span>]</span><br><span class="line">&lt;class <span class="string">'list'</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>write()</code> 将内容一次性写入文件中</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><blockquote><p><code>writelines()</code> 将内容循环写入文件中</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'b.txt'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'hello'</span>:</span><br><span class="line">        f.<span class="built_in">write</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 b.txt</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h4 id="a-模式，只追加写模式"><a href="#a-模式，只追加写模式" class="headerlink" title="a 模式，只追加写模式"></a><code>a</code> 模式，只追加写模式</h4><blockquote><p>文件不存在，则创建一个空文件，并且将文件指针跳到文件的末尾<br>文件存在，则会将文件指针跳到文件的末尾</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.writable())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.readable())</span><br><span class="line">    f.<span class="built_in">read</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">False</span><br><span class="line">io.UnsupportedOperation: <span class="keyword">not</span> readable</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'你好\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 a.txt</span></span><br><span class="line"><span class="number">1111</span></span><br><span class="line"><span class="number">2222</span></span><br><span class="line"><span class="number">3333</span>你好</span><br><span class="line">你好</span><br><span class="line">你好</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'a.txt'</span>, mode=<span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines([<span class="string">'aaaa\n'</span>, <span class="string">'bbbb\n'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件 a.txt</span></span><br><span class="line"><span class="number">1111</span></span><br><span class="line"><span class="number">2222</span></span><br><span class="line"><span class="number">3333</span>你好</span><br><span class="line">你好</span><br><span class="line">你好</span><br><span class="line">aaaa</span><br><span class="line">bbbb</span><br></pre></td></tr></table></figure><h3 id="b模式-操作文件内容"><a href="#b模式-操作文件内容" class="headerlink" title="b模式 操作文件内容"></a><code>b模式</code> 操作文件内容</h3><blockquote><p>操作文件内容 <code>t模式</code> 有局限性<br>优点：读写文件以 <code>字符串</code> 为单位，不用自己去进行编码解码的转换<br>缺点：仅仅只适用于文本文件<br>我们不仅仅要操作文本文件，还要操作 <code>图片</code>，<code>视频</code>，等，再用 <code>t模式</code> 就无法处理了<br><code>文本文件</code> 里存的是 <code>字符</code>，而 <code>图片</code>，<code>视频</code>文件中存的是 <code>二进制</code></p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'1.mp4'</span>, mode=<span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">read</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">UnicodeDecodeError: <span class="string">'utf-8'</span> codec can<span class="string">'t decode byte 0x86 in position 37: invalid start byte</span></span><br></pre></td></tr></table></figure><h3 id="文件内光标移动"><a href="#文件内光标移动" class="headerlink" title="文件内光标移动"></a>文件内光标移动</h3><blockquote><p><code>read(3)</code></p><ol><li>文件打开方式为文本模式时，代表读取 3 个字符</li><li>文件打开方式为 <code>b模式</code> 时，代表读取 3 个字节<br>其余的文件内光标移动都是以字节为单位如 <code>seek</code>，<code>tell</code>，<code>truncate</code></li></ol></blockquote><blockquote><p><code>注意：</code></p><ol><li><code>seek</code> 有三种移动方式 <code>0</code>，<code>1</code>，<code>2</code>，其中 <code>1</code> 和 <code>2</code> 必须在 <code>b模式</code> 下进行，但无论哪种模式，都是以 <code>bytes</code> 为单位移动的</li><li><code>truncate</code>是截断文件，所以文件的打开方式必须可写，但是不能用 <code>w</code> 或 <code>w+</code> 等方式打开，因为那样直接清空文件了，所以 <code>truncate</code> 要在 <code>r+</code> 或 <code>a</code> 或 <code>a+</code> 等模式下测试效果</li></ol></blockquote><h4 id="练习：基于-seek-实现-tail-f-功能"><a href="#练习：基于-seek-实现-tail-f-功能" class="headerlink" title="练习：基于 seek 实现 tail -f 功能"></a>练习：基于 <code>seek</code> 实现 <code>tail -f</code> 功能</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'test.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">seek</span>(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="built_in">line</span>=f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">line</span>:</span><br><span class="line">            print(<span class="built_in">line</span>.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">time</span>.sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件处理&quot;&gt;&lt;a href=&quot;#文件处理&quot; class=&quot;headerlink&quot; title=&quot;文件处理&quot;&gt;&lt;/a&gt;文件处理&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python文件处理" scheme="http://www.gmlyo.com/tags/Python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python列表类型</title>
    <link href="http://www.gmlyo.com//blog/2018/07/10/Python%E5%88%97%E8%A1%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.gmlyo.com//blog/2018/07/10/Python列表类型/</id>
    <published>2018-07-10T14:58:44.000Z</published>
    <updated>2018-07-10T16:17:26.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="list-列表类型"><a href="#list-列表类型" class="headerlink" title="list 列表类型"></a><code>list</code> 列表类型</h2><a id="more"></a><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><blockquote><p>存放多个值，记录人多个爱好，多个人名</p></blockquote><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><blockquote><p>在 <code>[]</code> 内用逗号分隔 多个元素 每个元素可以是任意数据类型<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="string">'aa'</span>, <span class="number">3.1</span>, [<span class="number">1</span>, <span class="number">2</span>]]    # lst = <span class="keyword">list</span>([<span class="number">1</span>, <span class="string">'a'</span>, <span class="number">3.1</span>, [<span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">res</span> = <span class="keyword">list</span>(<span class="string">'hello'</span>)    # 将 字符串 转换成 列表</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>, <span class="built_in">type</span>(<span class="keyword">res</span>))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>] &lt;class <span class="string">'list'</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>list</code> 类型转换的工作原理：<code>list(items)</code></p><ol><li>先造一个空列表</li><li>类似调用了一个 for 循环，从 items 里取出一个值放入空列表中，循环往复直到取干净为止<br>但凡可以被 <code>for循环</code> 循环的，都可以被 <code>list()</code> 转换<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="type">list</span>(range(<span class="number">1</span>, <span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="调用-list-方法"><a href="#调用-list-方法" class="headerlink" title="调用 list() 方法"></a>调用 <code>list()</code> 方法</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; list(<span class="string">'hello'</span>)</span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; list((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; list(&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;)</span><br><span class="line">[<span class="string">'x'</span>, <span class="string">'y'</span>]</span><br></pre></td></tr></table></figure><h3 id="常用操作-内置方法"><a href="#常用操作-内置方法" class="headerlink" title="常用操作+内置方法"></a>常用操作+内置方法</h3><blockquote><p> 按索引存取值（正向存取+反向存取）：即可以取值，也可以改值</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">3</span>])    <span class="comment"># 正向取值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">d</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">-1</span>])    <span class="comment"># 反向取值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">d</span><br><span class="line"></span><br><span class="line">l[<span class="number">3</span>] = <span class="string">'D'</span>    <span class="comment"># 修改元素值</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'D'</span>]</span><br><span class="line"></span><br><span class="line">l[<span class="number">4</span>] = <span class="string">'5555'</span>    <span class="comment"># 不能根据索引往列表里追加元素值</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">IndexError: list assignment index out <span class="keyword">of</span> range</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(names[<span class="number">4</span>])     <span class="comment"># 正向取值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">yxx</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(names[<span class="number">-1</span>])    <span class="comment"># 反向取值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">yxx</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(names[<span class="number">-2</span>])</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即可以取值，也可以改值</span></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names[<span class="number">0</span>] = <span class="string">'EGON'</span></span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'EGON'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(id(names))</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line">names[<span class="number">0</span>] = <span class="string">'EGON'</span></span><br><span class="line"><span class="built_in">print</span>(id(names))</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">3155914092616</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="number">3155914092616</span></span><br><span class="line">[<span class="string">'EGON'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names[<span class="number">5</span>] = <span class="number">3</span>    <span class="comment"># 超出索引限制会报错</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">IndexError: list assignment index out <span class="keyword">of</span> range</span><br></pre></td></tr></table></figure><h3 id="切片（顾头不顾尾，步长）"><a href="#切片（顾头不顾尾，步长）" class="headerlink" title="切片（顾头不顾尾，步长）"></a>切片（顾头不顾尾，步长）</h3><blockquote><p>从一个大列表中切出一个字列表<br>[起始位置:结束位置:步长]</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">l1 = l[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">print(l1)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(names[起始位置:结束位置:步长])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(names[0:3])    <span class="comment"># 正向取</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(names[0:3:2])    <span class="comment"># 正向步长</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'wxx'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(names[::1])</span><br><span class="line"><span class="comment"># []内 起始没写，默认从索引0开始</span></span><br><span class="line"><span class="comment">#      结束没写，默认到最后结束</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(names[:])    <span class="comment"># [] 冒号左边没有值，默认索引是0，冒号右边没有写值，默认到最后结束</span></span><br><span class="line">                   <span class="comment"># 如果要获取列表内所有的值，可以省略掉 冒号 左右两边的值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br></pre></td></tr></table></figure><h3 id="反向取值，反向步长（顾头不顾尾）"><a href="#反向取值，反向步长（顾头不顾尾）" class="headerlink" title="反向取值，反向步长（顾头不顾尾）"></a>反向取值，反向步长（顾头不顾尾）</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">print(names[起始位置:结束位置:反向步长])</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">print(names[<span class="number">3</span>:<span class="number">0</span>:-<span class="number">1</span>])    # 遵循切片顾头不顾尾的规则，agon 获取不到</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'xxx'</span>, <span class="string">'wxx'</span>, <span class="string">'alex'</span>]</span><br><span class="line"></span><br><span class="line">print(names[<span class="number">3</span>::-<span class="number">1</span>])    # 在结束位置不写值，就能获取到最后一个元素值</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'xxx'</span>, <span class="string">'wxx'</span>, <span class="string">'alex'</span>, <span class="string">'egon'</span>]</span><br><span class="line"></span><br><span class="line">print(names[<span class="number">-1</span>::-<span class="number">1</span>])</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'yxx'</span>, <span class="string">'xxx'</span>, <span class="string">'wxx'</span>, <span class="string">'alex'</span>, <span class="string">'egon'</span>]</span><br></pre></td></tr></table></figure><h3 id="长度-len"><a href="#长度-len" class="headerlink" title="长度 len()"></a>长度 <code>len()</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="built_in">print</span>(len(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">4</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(len(names))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="成员运算-in-和-not-in"><a href="#成员运算-in-和-not-in" class="headerlink" title="成员运算 in 和 not in"></a>成员运算 <code>in</code> 和 <code>not in</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(<span class="string">'alex'</span> <span class="keyword">in</span> names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(<span class="number">4</span> <span class="keyword">in</span> names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(<span class="number">5</span> <span class="keyword">not</span> <span class="keyword">in</span> names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="追加-append"><a href="#追加-append" class="headerlink" title="追加 append()"></a>追加 <code>append()</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">l.append(<span class="string">'aaa'</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'aaa'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names.<span class="built_in">append</span>(<span class="string">'oldboy'</span>)</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="string">'oldboy'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names.<span class="built_in">append</span>(<span class="string">'oldboy1'</span>)</span><br><span class="line">names.<span class="built_in">append</span>(<span class="string">'oldboy2'</span>)</span><br><span class="line">names.<span class="built_in">append</span>(<span class="string">'oldboy3'</span>)</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="string">'oldboy1'</span>, <span class="string">'oldboy2'</span>, <span class="string">'oldboy3'</span>]</span><br></pre></td></tr></table></figure><h3 id="插入-insert"><a href="#插入-insert" class="headerlink" title="插入 insert()"></a>插入 <code>insert()</code></h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">l.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="string">'B'</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'B'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">l.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">'B'</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'B'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">l.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">'B'</span>)</span><br><span class="line">l.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">'egon'</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'B'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names.insert(0, oldboy)    <span class="comment"># 两个参数：索引下标，插入的值</span></span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'oldboy'</span>, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"></span><br><span class="line">names.insert(2, <span class="string">'oldboy'</span>)</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'oldboy'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br></pre></td></tr></table></figure><h3 id="删除-del-remove-pop"><a href="#删除-del-remove-pop" class="headerlink" title="删除 del, remove(), pop()"></a>删除 <code>del</code>, <code>remove()</code>, <code>pop()</code></h3><h4 id="del-删除"><a href="#del-删除" class="headerlink" title="del 删除"></a><code>del</code> 删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'alex'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> l[<span class="number">2</span>]</span><br><span class="line">print(l)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">res = <span class="keyword">del</span> l[<span class="number">2</span>]</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="keyword">del</span> names[<span class="number">2</span>]    <span class="comment"># 删除列表中某一个元素</span></span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>非列表独有的删除，是一种通用的删除方法</p></blockquote><h4 id="remove-删除"><a href="#remove-删除" class="headerlink" title="remove() 删除"></a><code>remove()</code> 删除</h4><blockquote><p>只是单纯的删除操作，没有返回值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'alex'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">l.remove(<span class="string">'alex'</span>)</span><br><span class="line">print(l)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">res = l.remove(<span class="string">'alex'</span>)   <span class="comment"># 只是单纯的删除操作，没有返回值</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names.<span class="built_in">remove</span>(<span class="number">0</span>)    # 单纯的删除，没有返回值</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"># 输出结果</span><br><span class="line">ValueError: <span class="keyword">list</span>.<span class="built_in">remove</span>(<span class="keyword">x</span>): <span class="keyword">x</span> not in <span class="keyword">list</span></span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names.<span class="built_in">remove</span>(<span class="string">'wxx'</span>)    # <span class="built_in">remove</span>() 是指定元素值删除</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">res</span> = names.<span class="built_in">remove</span>(<span class="string">'wxx'</span>)    # <span class="built_in">remove</span>() 没有返回值</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"># 输出结果</span><br><span class="line">None</span><br></pre></td></tr></table></figure><h4 id="pop-从列表中取走一个元素值"><a href="#pop-从列表中取走一个元素值" class="headerlink" title="pop() 从列表中取走一个元素值"></a><code>pop()</code> 从列表中取走一个元素值</h4><blockquote><ol><li>删除一个元素</li><li>将该元素当做返回值返回<br>默认从最后一个删除</li></ol></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">l</span> = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'alex'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="keyword">res</span> = <span class="keyword">l</span>.<span class="keyword">pop</span>()    # 默认从最后一个删除</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">l</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'alex'</span>]</span><br><span class="line">d</span><br><span class="line"></span><br><span class="line"><span class="keyword">l</span> = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'alex'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="keyword">res</span> = <span class="keyword">l</span>.<span class="keyword">pop</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"># 输出结果</span><br><span class="line">alex</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">names.<span class="keyword">pop</span>(<span class="number">0</span>)    # <span class="keyword">pop</span>() 是按照索引下标删除元素值</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="keyword">res</span> = names.<span class="keyword">pop</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)    # <span class="keyword">pop</span>() 会获取返回删除的元素值</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line">egon</span><br><span class="line"></span><br><span class="line"><span class="keyword">res</span> = names.<span class="keyword">pop</span>(<span class="number">100</span>)    # 超过索引限制会报错</span><br><span class="line"># 输出结果</span><br><span class="line">IndexError: <span class="keyword">pop</span> <span class="built_in">index</span> out of <span class="built_in">range</span></span><br><span class="line"></span><br><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="number">100</span> &lt; <span class="built_in">len</span>(names):    # 可以加一个判断 来让它不报错</span><br><span class="line">    <span class="keyword">res</span> = names.<span class="keyword">pop</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">print</span>(names)</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">res</span>)</span><br></pre></td></tr></table></figure><h3 id="循环（循环取值）"><a href="#循环（循环取值）" class="headerlink" title="循环（循环取值）"></a>循环（循环取值）</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> l:</span><br><span class="line">    print(<span class="keyword">item</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">a</span></span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="keyword">item</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">alex</span><br><span class="line">wxx</span><br><span class="line">xxx</span><br><span class="line">yxx</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><blockquote><p>列表可变类型<br>可变类型：值变，id不变，可变 == 不可hash</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="built_in">print</span>(id(l1))</span><br><span class="line">l1[0] = <span class="string">'A'</span></span><br><span class="line"><span class="built_in">print</span>(id(l1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">1460820390344</span><br><span class="line">1460820390344</span><br></pre></td></tr></table></figure><h3 id="reverse-反转（单纯的反转）"><a href="#reverse-反转（单纯的反转）" class="headerlink" title="reverse() 反转（单纯的反转）"></a><code>reverse()</code> 反转（单纯的反转）</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">l1.<span class="keyword">reverse</span>()</span><br><span class="line"><span class="keyword">print</span>(l1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="number">2.3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'lxx'</span>]</span><br><span class="line">names.<span class="keyword">reverse</span>()</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'lxx'</span>, <span class="string">'wxx'</span>, <span class="string">'alex'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">names.<span class="keyword">reverse</span>()    <span class="comment"># reverse() 反转，改的是原值</span></span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'yxx'</span>, <span class="string">'xxx'</span>, <span class="string">'wxx'</span>, <span class="string">'alex'</span>, <span class="string">'egon'</span>]</span><br></pre></td></tr></table></figure><h3 id="count-统计列表元素值的个数"><a href="#count-统计列表元素值的个数" class="headerlink" title="count() 统计列表元素值的个数"></a><code>count()</code> 统计列表元素值的个数</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">print(l1.<span class="keyword">count</span>(<span class="string">'a'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(names.<span class="keyword">count</span>(<span class="string">'xxx'</span>))    <span class="meta"># count()方法 统计列表元素值的个数</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="clear-清空列表所有元素值"><a href="#clear-清空列表所有元素值" class="headerlink" title="clear() 清空列表所有元素值"></a><code>clear()</code> 清空列表所有元素值</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>]</span><br><span class="line">l1.<span class="built_in">clear</span>()</span><br><span class="line"><span class="built_in">print</span>(l1)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">names.<span class="built_in">clear</span>()    <span class="meta"># clear() 清空列表所有元素值</span></span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h3 id="copy-列表复制"><a href="#copy-列表复制" class="headerlink" title="copy() 列表复制"></a><code>copy()</code> 列表复制</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l1 = [1, 2.3, 'a']</span><br><span class="line">l2 = l1.copy()</span><br><span class="line">print(l2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[1, 2.3, 'a']</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, 1, 2, 3, 4]</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line">lst = names.copy()    <span class="comment"># copy() 复制一份列表元素值</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, 1, 2, 3, 4]</span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure><h3 id="extend-向列表末尾追加多个元素值"><a href="#extend-向列表末尾追加多个元素值" class="headerlink" title="extend() 向列表末尾追加多个元素值"></a><code>extend()</code> 向列表<code>末尾</code>追加多个元素值</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">l2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">l1.append(l2[<span class="number">0</span>])</span><br><span class="line">l1.append(l2[<span class="number">1</span>])</span><br><span class="line">l1.append(l2[<span class="number">2</span>])</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"># 一个一个追加，比较麻烦</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">l2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">l1.extend(l2)</span><br><span class="line">print(l1)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h3 id="index-获取列表元素值的索引下标"><a href="#index-获取列表元素值的索引下标" class="headerlink" title="index()获取列表元素值的索引下标"></a><code>index()</code>获取列表元素值的索引下标</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">l1.index(<span class="string">'egon'</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">ValueError: <span class="string">'egon'</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> list</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="built_in">print</span>(l1.index(<span class="string">'a'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="built_in">print</span>(l1.index(<span class="string">'a'</span>, <span class="number">0</span>, <span class="number">3</span>))    <span class="comment"># 指定 起始位置,结束位置（顾头不顾尾）</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>, <span class="string">'yxx'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># names.index(元素值, 起始位置，结束位置)</span></span><br><span class="line"><span class="built_in">print</span>(names.index(<span class="string">'alex'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有的元素值，会报错</span></span><br><span class="line"><span class="built_in">print</span>(names.index(<span class="string">'alexabcd'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">ValueError: <span class="string">'alexabcd'</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> list</span><br></pre></td></tr></table></figure><h3 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort 排序"></a><code>sort</code> 排序</h3><blockquote><p>默认从小到大排序</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">-1</span>]</span><br><span class="line">names.sort()    # 默认从小到大排序</span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="number">-1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">100</span>, <span class="number">98</span>]</span><br><span class="line">nums.sort(reverse=True)    # 从大到小排序</span><br><span class="line">print(nums)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="number">-1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">98</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">100</span>, <span class="number">98</span>]</span><br><span class="line">nums.sort(reverse=True)    # 从大到小排序</span><br><span class="line">print(nums)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="number">100</span>, <span class="number">98</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2.3</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">l1.<span class="built_in">sort</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: <span class="string">'&lt;'</span> <span class="keyword">not</span> supported between instances <span class="keyword">of</span> <span class="string">'str'</span> <span class="keyword">and</span> <span class="string">'float'</span></span><br><span class="line"><span class="comment"># 字符串 和 浮点类型 之间不支持排序</span></span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="string">'a'</span>]</span><br><span class="line">names.sort()</span><br><span class="line"><span class="built_in">print</span>(names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: <span class="string">'&lt;'</span> <span class="keyword">not</span> supported between instances <span class="keyword">of</span> <span class="string">'str'</span> <span class="keyword">and</span> <span class="string">'int'</span></span><br><span class="line"><span class="comment"># 字符串 和 整型 之间不支持排序</span></span><br></pre></td></tr></table></figure><blockquote><p>列表中的元素值，必须是 <code>同一</code> 类型，才能做比较排序</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>]</span><br><span class="line">names.sort()</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'+'</span>]</span><br><span class="line">names.sort()</span><br><span class="line"><span class="keyword">print</span>(names)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'+'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">'hello'</span></span><br><span class="line">s2 = <span class="string">'z'</span></span><br><span class="line"><span class="keyword">print</span>(s1 &gt; s2)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">'hello'</span></span><br><span class="line">y = <span class="string">'hez'</span></span><br><span class="line"><span class="keyword">print</span>(y &gt; x)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p><code>字符串</code> 是 <code>根据位置</code> 比较的，先比较两个字符串的第一个位置的字符<br>如果 第一个字符比出大小，后面的字符将不再做比较<br>字符串之间根据 <code>ASCII码</code> 来做比较<br><code>小写字母</code> 比 <code>大写字母</code> 大</p></blockquote><h3 id="列表比较大小"><a href="#列表比较大小" class="headerlink" title="列表比较大小"></a>列表比较大小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">lst2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(lst2 &gt; lst1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">lst2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(lst2 &gt; lst1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">TypeError: <span class="string">'&gt;'</span> <span class="keyword">not</span> supported between instances of <span class="string">'int'</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br><span class="line"><span class="comment"># 第三个位置不是同一种类型，所以报错</span></span><br><span class="line"></span><br><span class="line">lst1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">lst2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'b'</span>]</span><br><span class="line">print(lst2 &gt; lst1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>队列：先进先出<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line"># 入队</span><br><span class="line">l.<span class="built_in">append</span>('<span class="built_in">first</span>')</span><br><span class="line">l.<span class="built_in">append</span>('<span class="built_in">second</span>')</span><br><span class="line">l.<span class="built_in">append</span>('<span class="built_in">third</span>')</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"># 输出结果</span><br><span class="line">['<span class="built_in">first</span>', '<span class="built_in">second</span>', '<span class="built_in">third</span>']</span><br><span class="line"></span><br><span class="line"># 出队</span><br><span class="line"><span class="built_in">print</span>(l.<span class="built_in">pop</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(l.<span class="built_in">pop</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(l.<span class="built_in">pop</span>(<span class="number">0</span>))</span><br><span class="line"># 输出结果</span><br><span class="line"><span class="built_in">first</span></span><br><span class="line"><span class="built_in">second</span></span><br><span class="line"><span class="built_in">third</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>堆栈：先进后出<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line"># 入栈</span><br><span class="line">l.<span class="built_in">append</span>('<span class="built_in">first</span>')</span><br><span class="line">l.<span class="built_in">append</span>('<span class="built_in">second</span>')</span><br><span class="line">l.<span class="built_in">append</span>('<span class="built_in">third</span>')</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"># 输出结果</span><br><span class="line">['<span class="built_in">first</span>', '<span class="built_in">second</span>', '<span class="built_in">third</span>']</span><br><span class="line"></span><br><span class="line"># 出栈</span><br><span class="line"><span class="built_in">print</span>(l.<span class="built_in">pop</span>(-<span class="number">1</span>))    # 默认是 -<span class="number">1</span>，不写就是 -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(l.<span class="built_in">pop</span>(-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(l.<span class="built_in">pop</span>(-<span class="number">1</span>))</span><br><span class="line"># 输出结果</span><br><span class="line"><span class="built_in">third</span></span><br><span class="line"><span class="built_in">second</span></span><br><span class="line"><span class="built_in">first</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ol><li>能存多个值，没有类型限制</li><li>有序（能够按索引取值的属于有序的）</li><li>可变类型<br> 可变：值变，id不变，可变 == 不可hash<br> list（任何能被 for循环的对象）转换成 列表</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;list-列表类型&quot;&gt;&lt;a href=&quot;#list-列表类型&quot; class=&quot;headerlink&quot; title=&quot;list 列表类型&quot;&gt;&lt;/a&gt;&lt;code&gt;list&lt;/code&gt; 列表类型&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python列表类型" scheme="http://www.gmlyo.com/tags/Python%E5%88%97%E8%A1%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python集合类型</title>
    <link href="http://www.gmlyo.com//blog/2018/07/10/Python%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.gmlyo.com//blog/2018/07/10/Python集合类型/</id>
    <published>2018-07-10T14:34:26.000Z</published>
    <updated>2018-07-10T16:17:50.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="set-集合类型"><a href="#set-集合类型" class="headerlink" title="set 集合类型"></a><code>set</code> 集合类型</h2><a id="more"></a><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><blockquote><p>主要用于<code>关系运算</code><br>去重</p></blockquote><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><blockquote><p>在 <code>{}</code> 内用逗号分隔开多个元素<br>每一个元素必须为不可变类型<code>(int，float，str，tuple)</code><br>集合内的元素不能重复<br>集合内元素无序</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pythoners</span> = [<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>]</span><br><span class="line"><span class="attr">linuxers</span> = [<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>, <span class="string">'张大炮'</span>, <span class="string">'王全蛋'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>获取即报名Linux，又报名Python 课程 的 学生姓名</p></blockquote><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pl = []</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">name</span> <span class="keyword">in</span> pythoners:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">name</span> <span class="keyword">in</span> linuxers:</span><br><span class="line">        pl.append(<span class="keyword">name</span>)</span><br><span class="line">print(pl)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;&#125;    <span class="comment"># 定义空字典</span></span><br><span class="line"><span class="built_in">print</span>(s, <span class="built_in">type</span>(s))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;&#125; &lt;class <span class="string">'dict'</span>&gt;</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">set</span>()    <span class="comment"># 定义空集合</span></span><br><span class="line"><span class="built_in">print</span>(s, <span class="built_in">type</span>(s))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">set</span>() &lt;class <span class="string">'set'</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;1, 2&#125;    <span class="comment"># s = set(&#123;1, 2&#125;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&lt;class <span class="string">'set'</span>&gt;</span><br><span class="line"></span><br><span class="line">s = &#123;1, <span class="string">'a'</span>, 3&#125;    <span class="comment"># s = set(&#123;1, 'a', 3&#125;)</span></span><br><span class="line"><span class="built_in">print</span>(s, <span class="built_in">type</span>(s))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;1, 3, <span class="string">'a'</span>&#125; &lt;class <span class="string">'set'</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="string">'a'</span>, <span class="number">3.1</span>, [<span class="number">1</span>,<span class="number">2</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">TypeError: unhashable type: <span class="string">'list'</span></span><br><span class="line"><span class="meta"># 列表类型 是 不可hash类型，不能用于 集合</span></span><br></pre></td></tr></table></figure><blockquote><p>可变类型 不可 <code>hash</code><br>不可变类型 可 <code>hash</code><br>集合无法一个值一个值取值</p></blockquote><h3 id="集合类型-元素不能重复"><a href="#集合类型-元素不能重复" class="headerlink" title="集合类型 元素不能重复"></a>集合类型 元素不能重复</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">22</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="集合去重"><a href="#集合去重" class="headerlink" title="集合去重"></a>集合去重</h3><h4 id="有局限性"><a href="#有局限性" class="headerlink" title="有局限性"></a>有局限性</h4><blockquote><p>不能保证原来的顺序<br>不能针对可变类型去重</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">set</span>(<span class="string">'hello'</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'o'</span>, <span class="string">'h'</span>, <span class="string">'l'</span>, <span class="string">'e'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">l = [1, 1, 1, 1, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'egon'</span>]</span><br><span class="line">s = <span class="built_in">set</span>(l)    <span class="comment"># 将 l 列表 转换成 集合</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;1, <span class="string">'egon'</span>, <span class="string">'alex'</span>&#125;</span><br><span class="line"></span><br><span class="line">s = &#123;<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'lxx'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s:    <span class="comment"># 遍历 集合</span></span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">lxx</span><br><span class="line">wxx</span><br><span class="line">alex</span><br><span class="line"></span><br><span class="line">l = [1, 1, 1, 1, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'egon'</span>]</span><br><span class="line">s = <span class="built_in">set</span>(l)    <span class="comment"># 将 列表 转换成 集合</span></span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line">l = list(s)   <span class="comment"># 再将 集合 转换成 列表</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[1, <span class="string">'egon'</span>, <span class="string">'alex'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>需求：即想针对可变类型去重，又想保证原来的顺序</p><ol><li>列表内的元素有可变类型</li><li>去重之后要保证原来顺序</li></ol></blockquote><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">info</span> = [</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'egon'</span>, <span class="string">'age'</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'alex'</span>, <span class="string">'age'</span>:<span class="number">73</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'egon'</span>, <span class="string">'age'</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'lxx'</span>, <span class="string">'age'</span>:<span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'egon'</span>, <span class="string">'age'</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'lxx'</span>, <span class="string">'age'</span>:<span class="number">19</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> dic in <span class="keyword">info</span>:</span><br><span class="line">    <span class="keyword">if</span> dic not in l:</span><br><span class="line">        l.<span class="keyword">append</span>(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(l)</span></span><br><span class="line"><span class="keyword">info</span> = l</span><br><span class="line">print(<span class="keyword">info</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[&#123;<span class="string">'name'</span>:<span class="string">'egon'</span>, <span class="string">'age'</span>:<span class="number">18</span>&#125;, &#123;<span class="string">'name'</span>:<span class="string">'alex'</span>, <span class="string">'age'</span>:<span class="number">73</span>&#125;, &#123;<span class="string">'name'</span>:<span class="string">'lxx'</span>, <span class="string">'age'</span>:<span class="number">19</span>&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">'a'</span>, <span class="string">'asdfsa'</span>, (1, 2), 1, 3.1&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(1, 2)</span><br><span class="line">1</span><br><span class="line">3.1</span><br><span class="line">asdfsa</span><br><span class="line">a</span><br></pre></td></tr></table></figure><h3 id="长度len"><a href="#长度len" class="headerlink" title="长度len()"></a>长度<code>len()</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(len(&#123;1, 2, 3&#125;))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">pythoners = [<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>]</span><br><span class="line"><span class="built_in">print</span>(len(pythoners))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="成员运算-in-和-not-in"><a href="#成员运算-in-和-not-in" class="headerlink" title="成员运算 in 和 not in"></a>成员运算 <code>in</code> 和 <code>not in</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">pythoners = [<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>]</span><br><span class="line">print(<span class="string">'egon'</span> <span class="keyword">in</span> pythoners)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="集合的关系运算"><a href="#集合的关系运算" class="headerlink" title="集合的关系运算"></a>集合的关系运算</h3><h3 id="交集-amp-，intersection-内置方法"><a href="#交集-amp-，intersection-内置方法" class="headerlink" title="交集 &amp; ，intersection() 内置方法"></a>交集 <code>&amp;</code> ，<code>intersection()</code> 内置方法</h3><blockquote><p>获取两个集合的共同部分</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;'艾利克斯', 'wxx', 'egon', '吴三江', 'oldboy'&#125;</span><br><span class="line">linuxers = &#123;'wxx', '吴三江', '张大炮', '王全蛋'&#125;</span><br><span class="line">print(pythoners <span class="meta">&amp; linuxers)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">['wxx', '吴三江']</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pythoners.intersection(linuxers))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>]</span><br></pre></td></tr></table></figure><h3 id="差集-，difference-内置方法"><a href="#差集-，difference-内置方法" class="headerlink" title="差集 -，difference() 内置方法"></a>差集 <code>-</code>，<code>difference()</code> 内置方法</h3><blockquote><p>获取只报名Python，没有报名Linux 的人<br>即集合pythoners 减去 linuxers ，称之为 <code>差集</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>&#125;</span><br><span class="line">linuxers = &#123;<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>, <span class="string">'张大炮'</span>, <span class="string">'王全蛋'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(pythoners - linuxers)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'艾利克斯'</span>, <span class="string">'oldboy'</span>, <span class="string">'egon'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pythoners.difference(linuxers))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'艾利克斯'</span>, <span class="string">'oldboy'</span>, <span class="string">'egon'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取只报名 linux，没有报名 python 的人</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>&#125;</span><br><span class="line">linuxers = &#123;<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>, <span class="string">'张大炮'</span>, <span class="string">'王全蛋'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(linuxers - pythoners)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'王全蛋'</span>, <span class="string">'张大炮'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(linuxers.difference(pythoners))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'王全蛋'</span>, <span class="string">'张大炮'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="合集，并集-，union-内置方法"><a href="#合集，并集-，union-内置方法" class="headerlink" title="合集，并集 |，union() 内置方法"></a>合集，并集 <code>|</code>，<code>union()</code> 内置方法</h3><blockquote><p>获取两个集合的总和，把两个集合合到一起，把重复的部分去除<br>获取所有的学生的姓名</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;'艾利克斯', 'wxx', 'egon', '吴三江', 'oldboy'&#125;</span><br><span class="line">linuxers = &#123;'wxx', '吴三江', '张大炮', '王全蛋'&#125;</span><br><span class="line">print(pythoners <span class="string">| linuxers)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">&#123;'吴三江', 'oldboy', '王全蛋', 'egon', 'wxx', '张大炮', '艾利克斯'&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>&#125;</span><br><span class="line">linuxers = &#123;<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>, <span class="string">'张大炮'</span>, <span class="string">'王全蛋'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(pythoners.<span class="keyword">union</span>(linuxers))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>, <span class="string">'王全蛋'</span>, <span class="string">'egon'</span>, <span class="string">'wxx'</span>, <span class="string">'张大炮'</span>, <span class="string">'艾利克斯'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="对称差集-，symmetric-difference-内置方法"><a href="#对称差集-，symmetric-difference-内置方法" class="headerlink" title="对称差集 ^，symmetric_difference()` 内置方法"></a>对称差集 ^<code>，</code>symmetric_difference()` 内置方法</h3><blockquote><p>获取没有同时报名两门课程的学生姓名</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>&#125;</span><br><span class="line">linuxers = &#123;<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>, <span class="string">'张大炮'</span>, <span class="string">'王全蛋'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(pythoners ^ linuxers)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'张大炮'</span>, <span class="string">'艾利克斯'</span>, <span class="string">'egon'</span>, <span class="string">'oldboy'</span>, <span class="string">'王全蛋'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(linuxers ^ pythoners)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'张大炮'</span>, <span class="string">'艾利克斯'</span>, <span class="string">'egon'</span>, <span class="string">'oldboy'</span>, <span class="string">'王全蛋'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pythoners = &#123;<span class="string">'艾利克斯'</span>, <span class="string">'wxx'</span>, <span class="string">'egon'</span>, <span class="string">'吴三江'</span>, <span class="string">'oldboy'</span>&#125;</span><br><span class="line">linuxers = &#123;<span class="string">'wxx'</span>, <span class="string">'吴三江'</span>, <span class="string">'张大炮'</span>, <span class="string">'王全蛋'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(pythoners.symmetric_difference(linuxers))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'张大炮'</span>, <span class="string">'艾利克斯'</span>, <span class="string">'egon'</span>, <span class="string">'oldboy'</span>, <span class="string">'王全蛋'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="比较两个值是否相等"><a href="#比较两个值是否相等" class="headerlink" title="== 比较两个值是否相等"></a><code>==</code> 比较两个值是否相等</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">print(s1 == s2)</span><br><span class="line"># 输出结果</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line">print(s1 == s2)</span><br><span class="line"># 输出结果</span><br><span class="line">True</span><br></pre></td></tr></table></figure><blockquote><p>集合之间做比较，指的是包含 与 被包含的关系</p></blockquote><h3 id="父集-gt-gt-，issuperset-内置方法"><a href="#父集-gt-gt-，issuperset-内置方法" class="headerlink" title="父集 &gt; &gt;=，issuperset() 内置方法"></a>父集 <code>&gt; &gt;=</code>，<code>issuperset()</code> 内置方法</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">s1</span> = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">s2</span> = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">print(<span class="built_in">s1</span> &gt; <span class="built_in">s2</span>)</span><br><span class="line">print(<span class="built_in">s1</span> &gt;= <span class="built_in">s2</span>)</span><br><span class="line"><span class="comment"># 判断 s1 是否是 s2 的父集</span></span><br><span class="line"><span class="comment"># 判断 s1 是否包含 s2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>&#125;</span><br><span class="line">print(s1 &gt;= s2)    # 判断 s1 是否是 s2 的父集</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">False</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;1, 2, 3&#125;</span><br><span class="line">s2 = &#123;1, 2&#125;</span><br><span class="line">print(s1.issuperset(s2))    <span class="comment"># 判断 s1 是否是 s2 的父集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="子集-lt-lt-，issubset-内置方法"><a href="#子集-lt-lt-，issubset-内置方法" class="headerlink" title="子集 &lt; &lt;=，issubset()内置方法"></a>子集 <code>&lt; &lt;=</code>，<code>issubset()</code>内置方法</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;1, 2, 3&#125;</span><br><span class="line">s2 = &#123;1, 2&#125;</span><br><span class="line">print(s2 &lt;= s1)    <span class="comment"># 判断 s2 是否是 s1 的子集</span></span><br><span class="line">                   <span class="comment"># 判断 s2 是否被 s1 包含</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;1, 2, 3&#125;</span><br><span class="line">s2 = &#123;1, 2&#125;</span><br><span class="line">print(s2.issubset(s1))    <span class="comment"># 判断 s2 是否是 s1 的子集</span></span><br><span class="line">                          <span class="comment"># 判断 s2 是否被 s1 包含</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="添加集合元素"><a href="#添加集合元素" class="headerlink" title="添加集合元素"></a>添加集合元素</h3><blockquote><p>集合属于可变类型，值变，id不变，不可 <code>hash</code></p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">print(id(s1))</span><br><span class="line">s1.add(<span class="number">6</span>)</span><br><span class="line">print(id(s1))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line"><span class="number">3014527602472</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="number">3014527602472</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(id(s1))</span><br><span class="line">s1.add(<span class="string">'d'</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(id(s1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">1981688305928</span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">1981688305928</span><br></pre></td></tr></table></figure><h3 id="删除集合元素"><a href="#删除集合元素" class="headerlink" title="删除集合元素"></a>删除集合元素</h3><h4 id="remove-按元素名删除元素"><a href="#remove-按元素名删除元素" class="headerlink" title="remove() 按元素名删除元素"></a><code>remove()</code> 按元素名删除元素</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">s1.<span class="keyword">remove</span>(<span class="string">'b'</span>)</span><br><span class="line">print(s1)</span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看是否有返回值</span></span><br><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">res = s1.<span class="keyword">remove</span>(<span class="string">'b'</span>)    <span class="meta"># 只是单纯的删除，没有返回值</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">None</span><br><span class="line"></span><br><span class="line">s1.<span class="keyword">remove</span>(<span class="string">'dddd'</span>)    <span class="meta"># 指定元素删除，如果元素不存在，则报错</span></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">KeyError: <span class="string">'dddd'</span></span><br></pre></td></tr></table></figure><h4 id="discard-按元素名删除元素"><a href="#discard-按元素名删除元素" class="headerlink" title="discard() 按元素名删除元素"></a><code>discard()</code> 按元素名删除元素</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s1.discard(<span class="number">3</span>)</span><br><span class="line">print(s1)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s1.discard(<span class="number">333333</span>)  # 指定元素删除，如果元素不存在，不会报错</span><br><span class="line">print(s1)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">s1.discard(<span class="string">'b'</span>)</span><br><span class="line">print(s1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否有返回值</span></span><br><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">res = s1.discard(<span class="string">'b'</span>)    <span class="comment"># 没有返回值</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">s1.discard(<span class="string">'dddd'</span>)    <span class="comment"># 指定元素删除，如果元素不存在，不会报错</span></span><br><span class="line">print(s1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="pop-随即删除，有返回值，将删除的元素值返回出来"><a href="#pop-随即删除，有返回值，将删除的元素值返回出来" class="headerlink" title="pop() 随即删除，有返回值，将删除的元素值返回出来"></a><code>pop()</code> 随即删除，有返回值，将删除的元素值返回出来</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"><span class="keyword">res</span> = s1.<span class="keyword">pop</span>()    # 随即删除，有返回值，将删除的元素值返回出来</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line"><span class="keyword">c</span></span><br></pre></td></tr></table></figure><h3 id="更新集合元素"><a href="#更新集合元素" class="headerlink" title="更新集合元素"></a>更新集合元素</h3><h4 id="update-更新集合中的元素值，并且去除重复值"><a href="#update-更新集合中的元素值，并且去除重复值" class="headerlink" title="update() 更新集合中的元素值，并且去除重复值"></a><code>update()</code> 更新集合中的元素值，并且去除重复值</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s1.update(&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;)</span><br><span class="line">print(s1)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s1.update('hello')    # 先将字符串 hello 转成集合，再更新到 s1 里去</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, 'l', 'e', 'h', 'o'&#125;</span><br></pre></td></tr></table></figure><h3 id="清空集合元素"><a href="#清空集合元素" class="headerlink" title="清空集合元素"></a>清空集合元素</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s1.clear</span><br></pre></td></tr></table></figure><h3 id="查看两个集合是否有交集（共同部分）"><a href="#查看两个集合是否有交集（共同部分）" class="headerlink" title="查看两个集合是否有交集（共同部分）"></a>查看两个集合是否有交集（共同部分）</h3><h4 id="isdisjoint-判断两个集合没有交集（共同部分），返回-True"><a href="#isdisjoint-判断两个集合没有交集（共同部分），返回-True" class="headerlink" title="isdisjoint() 判断两个集合没有交集（共同部分），返回 True"></a><code>isdisjoint()</code> 判断两个集合没有交集（共同部分），返回 <code>True</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看注释，Ctrl + 点击左键</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isdisjoint</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">    <span class="string">""" Return True if two sets have a null intersection. """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">print(s1.isdisjoint(s2))</span><br><span class="line"># 输出结果</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">print(s1.isdisjoint(s2))</span><br><span class="line"># 输出结果</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="把找出来的差集，重新覆盖原集合"><a href="#把找出来的差集，重新覆盖原集合" class="headerlink" title="把找出来的差集，重新覆盖原集合"></a>把找出来的差集，重新覆盖原集合</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">res = s1.difference(s2)    # s1 - s2</span><br><span class="line">print(res)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">s1.difference(s2)    # s1 - s2</span><br><span class="line">print(s1)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"># 原 s1 的值其实并没有改变</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">s1 = s1.difference(s2)    # s1 = s1 - s2，将改变后的值重新赋值给 s1 将其改变</span><br><span class="line">print(s1)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">s1.difference_update(s2)  # s1=s1.difference # s1=s1-s2，将改变后的值重新赋值给 s1 将其改变</span><br><span class="line">print(s1)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.difference(s2))</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;    <span class="comment"># 这是一个新的元素值</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>&#125;    <span class="comment"># 原 s1 的内容没有改变</span></span><br><span class="line"></span><br><span class="line">s1 = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>&#125;</span><br><span class="line">s1.difference_update(s2)    <span class="comment"># 等于 s1 = s1.difference(s2)</span></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;    <span class="comment"># 将差集的结果直接赋值给s1</span></span><br></pre></td></tr></table></figure><h3 id="将对称差集的结果，重新覆盖原集合"><a href="#将对称差集的结果，重新覆盖原集合" class="headerlink" title="将对称差集的结果，重新覆盖原集合"></a>将对称差集的结果，重新覆盖原集合</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">s1</span><span class="selector-class">.symmetric_difference_update</span>()</span><br></pre></td></tr></table></figure><h3 id="将交集的结果，重新覆盖原集合"><a href="#将交集的结果，重新覆盖原集合" class="headerlink" title="将交集的结果，重新覆盖原集合"></a>将交集的结果，重新覆盖原集合</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">s1</span><span class="selector-class">.intersection_update</span>()</span><br></pre></td></tr></table></figure><h3 id="用集合去重，不保证顺序"><a href="#用集合去重，不保证顺序" class="headerlink" title="用集合去重，不保证顺序"></a>用集合去重，不保证顺序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, 1, <span class="string">'a'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="built_in">print</span>(list(<span class="built_in">set</span>(l)))</span><br><span class="line">names = [<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(names))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'wxx'</span>, <span class="string">'alex'</span>, <span class="string">'egon'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="将-集合-转回-原来-的类型，不保证顺序"><a href="#将-集合-转回-原来-的类型，不保证顺序" class="headerlink" title="将 集合 转回 原来 的类型，不保证顺序"></a>将 集合 转回 原来 的类型，不保证顺序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>]</span><br><span class="line"><span class="built_in">print</span>(list(<span class="built_in">set</span>(names)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'egon'</span>, <span class="string">'wxx'</span>, <span class="string">'alex'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>用集合去重，局限性很强<br>不能保证元数据类型的顺序<br>元数据类型中包含的元素必须全都为不可变类型</p></blockquote><blockquote><p>即想去重，又想保证顺序</p></blockquote><h3 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'lxx'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="literal">item</span> <span class="keyword">in</span> s:</span><br><span class="line">    print(<span class="literal">item</span>)</span><br></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>]</span><br><span class="line"><span class="keyword">new</span><span class="type">_names</span> = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:<span class="type"></span></span><br><span class="line"><span class="type">    if name not in new_names</span>:</span><br><span class="line">        <span class="keyword">new</span><span class="type">_names</span>.append(name)</span><br><span class="line">print(<span class="keyword">new</span><span class="type">_names</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">[<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'wxx'</span>]</span><br></pre></td></tr></table></figure><h3 id="使用-keys-方法"><a href="#使用-keys-方法" class="headerlink" title="使用 keys() 方法"></a>使用 keys() 方法</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">names</span> = [<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'alex'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>, <span class="string">'wxx'</span>]</span><br></pre></td></tr></table></figure><h3 id="list-方法是把-str字符串-或-tuple元组-转成-list列表"><a href="#list-方法是把-str字符串-或-tuple元组-转成-list列表" class="headerlink" title="list() 方法是把 str字符串 或 tuple元组 转成 list列表"></a><code>list()</code> 方法是把 <code>str</code>字符串 或 <code>tuple</code>元组 转成 <code>list</code>列表</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span><span class="type">_names</span> = list(&#123;&#125;.fromkeys(names).keys())</span><br><span class="line">print(<span class="keyword">new</span><span class="type">_names</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">[<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'wxx'</span>]</span><br></pre></td></tr></table></figure><h3 id="列表类型，字典类型，集合类型方式-去除重复的部分，保证原来的顺序"><a href="#列表类型，字典类型，集合类型方式-去除重复的部分，保证原来的顺序" class="headerlink" title="列表类型，字典类型，集合类型方式 去除重复的部分，保证原来的顺序"></a>列表类型，字典类型，集合类型方式 去除重复的部分，保证原来的顺序</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">l</span> = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">73</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">set</span>()    # 创建一个空集合</span><br><span class="line">new_l = []</span><br><span class="line"><span class="keyword">for</span> d in <span class="variable">l:</span></span><br><span class="line">    # n, <span class="keyword">a</span>, s = d[<span class="string">'name'</span>], d[<span class="string">'age'</span>], d[<span class="string">'sex'</span>]    # 获取到 字典的值</span><br><span class="line">    # <span class="keyword">print</span>(n, <span class="keyword">a</span>, s)</span><br><span class="line">    # s.<span class="built_in">add</span>((n, <span class="keyword">a</span>, s))</span><br><span class="line">    <span class="built_in">values</span> = (d[<span class="string">'name'</span>], d[<span class="string">'age'</span>], d[<span class="string">'sex'</span>])</span><br><span class="line">    <span class="keyword">print</span>(<span class="built_in">values</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">values</span> not in <span class="variable">s:</span></span><br><span class="line">        s.<span class="built_in">add</span>(<span class="built_in">values</span>)</span><br><span class="line">        new_l.<span class="keyword">append</span>(d)</span><br><span class="line"><span class="keyword">print</span>(new_l)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">(<span class="string">'egon'</span>, <span class="number">18</span>, <span class="string">'male'</span>)</span><br><span class="line">(<span class="string">'alex'</span>, <span class="number">73</span>, <span class="string">'male'</span>)</span><br><span class="line">(<span class="string">'egon'</span>, <span class="number">20</span>, <span class="string">'female'</span>)</span><br><span class="line">(<span class="string">'egon'</span>, <span class="number">18</span>, <span class="string">'male'</span>)</span><br><span class="line">(<span class="string">'egon'</span>, <span class="number">18</span>, <span class="string">'male'</span>)</span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">73</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="列表类型，字典类型-方式-去除重复的部分，保证原来的顺序"><a href="#列表类型，字典类型-方式-去除重复的部分，保证原来的顺序" class="headerlink" title="列表类型，字典类型 方式 去除重复的部分，保证原来的顺序"></a>列表类型，字典类型 方式 去除重复的部分，保证原来的顺序</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">l = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">73</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line">new_l = []</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> d <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">        s.append(d)</span><br><span class="line">        new_l.append(d)</span><br><span class="line"><span class="built_in">print</span>(new_l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">73</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="列表类型，字典类型-方式-去除重复的部分，保证原来的顺序-1"><a href="#列表类型，字典类型-方式-去除重复的部分，保证原来的顺序-1" class="headerlink" title="列表类型，字典类型 方式 去除重复的部分，保证原来的顺序"></a>列表类型，字典类型 方式 去除重复的部分，保证原来的顺序</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">l = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">73</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> d <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">        s.append(d)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'alex'</span>, <span class="string">'age'</span>: <span class="number">73</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="去重，保证原来的顺序"><a href="#去重，保证原来的顺序" class="headerlink" title="去重，保证原来的顺序"></a>去重，保证原来的顺序</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'a'</span>]</span><br><span class="line">l_new = []</span><br><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">item</span> <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">item</span> <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">        s.<span class="built_in">add</span>(<span class="keyword">item</span>)</span><br><span class="line">        l_new.append(<span class="keyword">item</span>)</span><br></pre></td></tr></table></figure><h3 id="集合总结"><a href="#集合总结" class="headerlink" title="集合总结"></a>集合总结</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><p>集合能存多个值<br>集合无序<br>集合内元素不能重复<br>集合内的元素必须为不可变类型，但set集合是可变的</p></blockquote><h4 id="用途-1"><a href="#用途-1" class="headerlink" title="用途"></a>用途</h4><blockquote><p>集合是用来进行关系运算，单独取集合的某一个元素是没有意义的，也没有相应的方法<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">交集：<span class="built_in">s1</span> &amp; <span class="built_in">s2</span> 取两个集合的共同部分</span><br><span class="line">差集：<span class="built_in">s1</span> - <span class="built_in">s2</span> 结果存于 <span class="built_in">s1</span> 而不存于 <span class="built_in">s2</span> 的元素集合</span><br><span class="line">补集：<span class="built_in">s1</span> ^ <span class="built_in">s2</span> 扣掉 <span class="built_in">s1</span> 与 <span class="built_in">s2</span> 共同部分，剩下的部分合到一起</span><br><span class="line">并集：<span class="built_in">s1</span> <span class="title">| s2 把两个合到一起，去掉重复</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;set-集合类型&quot;&gt;&lt;a href=&quot;#set-集合类型&quot; class=&quot;headerlink&quot; title=&quot;set 集合类型&quot;&gt;&lt;/a&gt;&lt;code&gt;set&lt;/code&gt; 集合类型&lt;/h2&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python集合类型" scheme="http://www.gmlyo.com/tags/Python%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python字符串类型</title>
    <link href="http://www.gmlyo.com//blog/2018/07/05/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.gmlyo.com//blog/2018/07/05/Python字符串类型/</id>
    <published>2018-07-04T16:47:16.000Z</published>
    <updated>2018-07-05T02:08:38.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="str-字符串类型"><a href="#str-字符串类型" class="headerlink" title="str 字符串类型"></a><code>str</code> 字符串类型</h2><h3 id="str-基本使用"><a href="#str-基本使用" class="headerlink" title="str 基本使用"></a><code>str</code> 基本使用</h3><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><blockquote><p>用于 描述型的数据，姓名，性别，地址，国籍 等</p></blockquote><a id="more"></a><h4 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h4><blockquote><p>在单引号，双引号，三引号内包含一串的字符</p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">msg=<span class="string">"hello world"</span>  <span class="comment"># msg=str("hello world") </span></span><br><span class="line"></span><br><span class="line">res1=str(1)</span><br><span class="line">res2=str(1.2)</span><br><span class="line">res3=str([1,2,3])</span><br><span class="line">print(type(res1),type(res2),type(res3))</span><br><span class="line"></span><br><span class="line">info = 'my name is agon'</span><br><span class="line">name = 'egon'    <span class="comment"># name = str('egon')</span></span><br><span class="line">print(name)</span><br><span class="line">print(type(name))</span><br><span class="line">print(id(name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">&lt;class 'str'&gt;</span><br><span class="line">3172826579048</span><br></pre></td></tr></table></figure><h4 id="常用操作-内置的方法"><a href="#常用操作-内置的方法" class="headerlink" title="常用操作+内置的方法"></a>常用操作+内置的方法</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按索引取值（正向取+反向取），只能取</span></span><br><span class="line">msg = <span class="string">'he lo'</span></span><br><span class="line"><span class="built_in">print</span>(msg[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(msg[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">h</span><br><span class="line">l</span><br><span class="line"></span><br><span class="line">msg = <span class="string">'he lo'</span></span><br><span class="line">msg[<span class="number">2</span>] = <span class="string">'A'</span></span><br><span class="line">TypeError: <span class="string">'str'</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="comment"># 字符串不支持更改内容</span></span><br><span class="line"></span><br><span class="line">msg = <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">print</span>(msg[<span class="number">0</span>:])    <span class="comment"># 正向取值</span></span><br><span class="line"><span class="built_in">print</span>(msg[::<span class="number">-1</span>])    <span class="comment"># 反向取值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hello</span><br><span class="line">olleh</span><br></pre></td></tr></table></figure><h4 id="切片（顾头不顾尾，步长）"><a href="#切片（顾头不顾尾，步长）" class="headerlink" title="切片（顾头不顾尾，步长）"></a>切片（顾头不顾尾，步长）</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">msg = 'hello world'</span><br><span class="line"><span class="section">print(msg[0:4])    # 从索引 0 开始 到 4 结束</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hell    <span class="comment"># 遵循 顾头不顾尾 的规则，输出到 o 前面的字符 l 结束</span></span><br><span class="line"></span><br><span class="line"><span class="section">print(msg[0:4:2])    # 步长，隔2步，取一个字符</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从一个大字符串中切除一个子字符串（骨头不顾尾，步长）</span></span><br><span class="line">msg = 'hello world'</span><br><span class="line"><span class="section">print(msg[1:3])</span></span><br><span class="line"><span class="section">print(msg[6:11])</span></span><br><span class="line"><span class="section">print(msg[6:11:2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒着取值，注意方向要一致</span></span><br><span class="line">msg = 'hello world'</span><br><span class="line"><span class="section">print(msg[6:])</span></span><br><span class="line"><span class="section">print(msg[-1:-6:-1])</span></span><br><span class="line"><span class="section">print(msg[-1::-1])</span></span><br><span class="line"><span class="section">print(msg[::-1])</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">inp = <span class="string">'get a.txt'</span></span><br><span class="line"><span class="keyword">cmd</span><span class="bash"> = inp[0:3]</span></span><br><span class="line"><span class="bash">filepath = inp[4:]</span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(cmd)</span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(filepath)</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 输出结果    获取 命令 和 文件名</span></span></span><br><span class="line"><span class="bash">get</span></span><br><span class="line"><span class="bash">a.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">inp = <span class="string">'get a.txt'</span></span><br><span class="line"># inp.<span class="keyword">split</span>()    # 不指定 分割符 默认以空格为分割符</span><br><span class="line"><span class="keyword">res</span> = inp.<span class="keyword">split</span>(<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'get'</span>, <span class="string">'a.txt'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"1234567890"</span></span><br><span class="line">s = <span class="string">"abcdefghij"</span></span><br><span class="line"><span class="built_in">print</span>(s[-1:])      <span class="comment"># 截取最后一个元素</span></span><br><span class="line"><span class="built_in">print</span>(s[0:3])      <span class="comment"># 截取第一位到第三位的字符</span></span><br><span class="line"><span class="built_in">print</span>(s[:])        <span class="comment"># 截取字符串的全部字符</span></span><br><span class="line"><span class="built_in">print</span>(s[6:])       <span class="comment"># 截取第七个字符到结尾</span></span><br><span class="line"><span class="built_in">print</span>(s[:-3])      <span class="comment"># 截取从头开始到倒数第三个字符之前</span></span><br><span class="line"><span class="built_in">print</span>(s[2])        <span class="comment"># 截取第三个字符</span></span><br><span class="line"><span class="built_in">print</span>(s[::-1])     <span class="comment"># 创建一个与原字符串顺序相反的字符串</span></span><br><span class="line"><span class="built_in">print</span>(s[-3:-1])    <span class="comment"># 截取 倒数第三位 和 倒数第一位 之前的字符</span></span><br><span class="line"><span class="built_in">print</span>(s[-3:])      <span class="comment"># 截取 倒数第三位 到结尾</span></span><br><span class="line"><span class="built_in">print</span>(s[:-12:-2])  <span class="comment"># 逆序截取后个数，每 3 个取一个，而且取是逆向取值</span></span><br><span class="line"><span class="built_in">print</span>(s[:10:2])    <span class="comment"># 前 10 个数，每两个取一个</span></span><br></pre></td></tr></table></figure><h4 id="长度len"><a href="#长度len" class="headerlink" title="长度len"></a>长度len</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">'hello world'</span></span><br><span class="line"><span class="built_in">print</span>(len(msg))    <span class="comment"># 长度是11，索引最大到10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="成员运算-in-和-not-in"><a href="#成员运算-in-和-not-in" class="headerlink" title="成员运算 in 和 not in"></a>成员运算 in 和 not in</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">'hello world alex is SB'</span></span><br><span class="line">print(<span class="string">'alex'</span> <span class="keyword">in</span> msg)    <span class="comment"># 判断 子字符串 'alex' 是否在 msg 变量字符串里</span></span><br><span class="line">print(<span class="string">'SB'</span> <span class="keyword">in</span> msg)</span><br><span class="line">print(<span class="string">'egon'</span> <span class="keyword">not</span> <span class="keyword">in</span> msg)</span><br><span class="line">print(<span class="keyword">not</span> <span class="string">'egon'</span> <span class="keyword">in</span> msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">msg = <span class="string">'alex say my name is alex'</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'alex'</span> <span class="keyword">in</span> msg:</span><br><span class="line">    print(<span class="string">'存在'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">存在</span><br><span class="line"></span><br><span class="line">msg = <span class="string">'alex say my name is alex'</span></span><br><span class="line">print(<span class="string">'alex'</span> <span class="keyword">in</span> msg)</span><br><span class="line">print(<span class="string">'alex'</span> <span class="keyword">not</span> <span class="keyword">in</span> msg)    <span class="comment"># 推荐使用这种形式</span></span><br><span class="line">print(<span class="keyword">not</span> <span class="string">'alex'</span> <span class="keyword">in</span> msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h4 id="strip-移除字符串左右两边的字符"><a href="#strip-移除字符串左右两边的字符" class="headerlink" title="strip 移除字符串左右两边的字符"></a>strip 移除字符串左右两边的字符</h4><blockquote><p><code>strip</code> 只能 移除 字符串 左右两边的 字符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'***egon*****'</span></span><br><span class="line"><span class="built_in">print</span>(name.strip(<span class="string">'*'</span>))</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon            <span class="comment"># strip 是生成了一个新的值，并不是改变原值</span></span><br><span class="line">***egon*****</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">name</span> = '     egon   '</span><br><span class="line"><span class="comment"># strip() 不写指定符号，默认去除字符串左右两边的空格</span></span><br><span class="line"><span class="built_in">name</span> = <span class="built_in">name</span>.strip()</span><br><span class="line"><span class="comment"># 将 strip() 生成的新值，重新赋值给 变量name，可以看作是 字符串的变更</span></span><br><span class="line">print(<span class="built_in">name</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">'* / , alex is sb -*=*******'</span></span><br><span class="line"><span class="built_in">print</span>(msg.strip(<span class="string">'*, /-='</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">alex <span class="keyword">is</span> sb</span><br></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">name</span> = input(<span class="string">'&gt;&gt;&gt;: '</span>)</span><br><span class="line"><span class="keyword">name</span> = input(<span class="string">'&gt;&gt;&gt;: '</span>).strip()</span><br><span class="line">print(<span class="keyword">name</span>)</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    <span class="comment"># cmd = input('cmd&gt;&gt;: ')</span></span><br><span class="line">    <span class="comment"># cmd = cmd.strip()    # 主要用于用户输入时，去除左右两边的空格字符</span></span><br><span class="line">    <span class="keyword">cmd</span><span class="bash"> = input(<span class="string">'cmd&gt;&gt;: '</span>).strip()</span></span><br><span class="line"><span class="bash">    <span class="keyword">if</span> len(cmd) == 0:<span class="built_in">continue</span></span></span><br><span class="line"><span class="bash">    <span class="keyword">if</span> cmd == <span class="string">'q'</span>:<span class="built_in">break</span></span></span><br><span class="line"><span class="bash">    <span class="built_in">print</span>(<span class="string">'%s is running'</span> % cmd)</span></span><br></pre></td></tr></table></figure><h4 id="切分（分割）split"><a href="#切分（分割）split" class="headerlink" title="切分（分割）split"></a>切分（分割）split</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">'root:x:0:0:root:/root:/bin/bash'</span></span><br><span class="line"><span class="keyword">print</span>(info)</span><br><span class="line"><span class="keyword">res</span> = info.<span class="keyword">split</span>(<span class="string">':'</span>)  # 不指定分割符，默认从头切到尾</span><br><span class="line"># <span class="keyword">res</span> = info.<span class="keyword">split</span>(<span class="string">':'</span>, maxsplit=-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>, <span class="built_in">type</span>(<span class="keyword">res</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">res</span>[<span class="number">0</span>])    # 经过 <span class="keyword">split</span> 分割后，获取下标为 <span class="number">0</span> 的元素</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">roo<span class="variable">t:x</span>:<span class="number">0</span>:<span class="number">0</span>:roo<span class="variable">t:</span>/roo<span class="variable">t:</span>/bin/bash</span><br><span class="line">[<span class="string">'root'</span>, <span class="string">'x'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'root'</span>, <span class="string">'/root'</span>, <span class="string">'/bin/bash'</span>]</span><br><span class="line">root</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmd</span><span class="bash"> = <span class="string">'get a.txt'</span></span></span><br><span class="line"><span class="bash">res = cmd.split()    <span class="comment"># split() 不写参数，默认以空格分割</span></span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(res[0])</span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(res[1])</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 输出结果    获取 命令 和 文件名</span></span></span><br><span class="line"><span class="bash">get</span></span><br><span class="line"><span class="bash">a.txt</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">cmd = <span class="string">'get a.txt 33333'</span></span></span><br><span class="line"><span class="bash">res = cmd.split(<span class="string">' '</span>, maxsplit=1)</span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(res)</span></span><br></pre></td></tr></table></figure><h4 id="循环（循环取值）"><a href="#循环（循环取值）" class="headerlink" title="循环（循环取值）"></a>循环（循环取值）</h4><blockquote><p><code>while</code> 循环取值<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="symbol">'hello</span> world'</span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(msg[n])</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># 输出信息</span><br><span class="line">IndexError: <span class="built_in">string</span> index <span class="keyword">out</span> <span class="keyword">of</span> <span class="keyword">range</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">msg = 'hello world'</span><br><span class="line">n = 0    <span class="comment"># 指定一个计数器</span></span><br><span class="line">while n &lt; len(msg):</span><br><span class="line">    print(msg[n])</span><br><span class="line">    n += 1    <span class="comment"># 自加计数器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">h</span><br><span class="line">e</span><br><span class="line">l</span><br><span class="line">l</span><br><span class="line">o</span><br><span class="line"></span><br><span class="line">w</span><br><span class="line">o</span><br><span class="line">r</span><br><span class="line">l</span><br><span class="line">d</span><br></pre></td></tr></table></figure><h4 id="for循环迭代取值"><a href="#for循环迭代取值" class="headerlink" title="for循环迭代取值"></a>for循环迭代取值</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">msg = 'hello world'</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> msg:</span><br><span class="line">    <span class="keyword">print</span>(item)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line"><span class="built_in">h</span></span><br><span class="line"><span class="built_in">e</span></span><br><span class="line"><span class="keyword">l</span></span><br><span class="line"><span class="keyword">l</span></span><br><span class="line">o</span><br><span class="line"></span><br><span class="line"><span class="built_in">w</span></span><br><span class="line">o</span><br><span class="line"><span class="built_in">r</span></span><br><span class="line"><span class="keyword">l</span></span><br><span class="line"><span class="built_in">d</span></span><br></pre></td></tr></table></figure><h4 id="strip-lstrip-rstrip"><a href="#strip-lstrip-rstrip" class="headerlink" title="strip, lstrip, rstrip"></a><code>strip</code>, <code>lstrip</code>, <code>rstrip</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">'*****hello*****'</span></span><br><span class="line"><span class="built_in">print</span>(name.strip(<span class="string">'*'</span>))    <span class="comment"># 去除左右两边的字符</span></span><br><span class="line"><span class="built_in">print</span>(name.lstrip(<span class="string">'*'</span>))   <span class="comment"># 去除左边的字符</span></span><br><span class="line"><span class="built_in">print</span>(name.rstrip(<span class="string">'*'</span>))   <span class="comment"># 去除右边的字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">hello</span><br><span class="line">hello*****</span><br><span class="line">*****hello</span><br></pre></td></tr></table></figure><h4 id="lower-upper"><a href="#lower-upper" class="headerlink" title="lower, upper"></a><code>lower</code>, <code>upper</code></h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name='hello'</span><br><span class="line"><span class="keyword">print</span>(name.<span class="built_in">lower</span>())    <span class="meta"># 转换小写字母</span></span><br><span class="line"><span class="keyword">print</span>(name)            <span class="meta"># lower 方法不改变原值</span></span><br><span class="line"><span class="keyword">print</span>(name.<span class="built_in">upper</span>())    <span class="meta"># 转换大写字母</span></span><br><span class="line"><span class="keyword">print</span>(name)            <span class="meta"># upper 方法不改变原值</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">hello</span><br><span class="line">HELLO</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><h4 id="startswith-endswith"><a href="#startswith-endswith" class="headerlink" title="startswith, endswith"></a><code>startswith</code>, <code>endswith</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">'Hello is run'</span></span><br><span class="line"><span class="keyword">print</span>(name.startswith(<span class="string">'Hello'</span>))    <span class="comment"># 以 Hello 开头</span></span><br><span class="line"><span class="keyword">print</span>(name.endswith(<span class="string">'run'</span>))        <span class="comment"># 以 run 结尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h4 id="format-字符串格式化输出-的-三种方法"><a href="#format-字符串格式化输出-的-三种方法" class="headerlink" title="format 字符串格式化输出 的 三种方法"></a><code>format</code> 字符串格式化输出 的 三种方法</h4><blockquote><p><code>%s</code> 的方式传值需要记住传值位置<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>('name <span class="built_in">is</span> <span class="built_in">%s</span> age <span class="built_in">is</span> <span class="built_in">%s</span>' <span class="symbol">%</span> ('egon', <span class="number">18</span>))</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>缺点严格依赖 <code>%s</code> 的位置</p></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># format() 里的参数可以不用对应（推荐使用这种方式）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'name is &#123;name&#125; age is &#123;age&#125;'</span>.format(age=<span class="number">18</span>, name=<span class="string">'egon'</span>))</span><br><span class="line"><span class="comment"># 输出方式</span></span><br><span class="line">name <span class="keyword">is</span> egon age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此方法类似 %s 的格式化输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'name is &#123;&#125; age is &#123;&#125;'</span>.format(<span class="string">'egon'</span>, <span class="number">18</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">name <span class="keyword">is</span> egon age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'name is &#123;0&#125;&#123;0&#125;&#123;0&#125; age is &#123;1&#125;'</span>.format(<span class="number">18</span>, <span class="string">'egon'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">name <span class="keyword">is</span> <span class="number">181818</span> age <span class="keyword">is</span> egon</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'&#123;1&#125; &#123;0&#125; &#123;1&#125;'</span>.format(<span class="string">'egon'</span>, <span class="number">18</span>, <span class="string">'male'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">18</span> egon <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'&#123;0&#125; &#123;1&#125; &#123;2&#125;'</span>.format(<span class="string">'egon'</span>, <span class="number">18</span>, <span class="string">'male'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon <span class="number">18</span> male</span><br></pre></td></tr></table></figure><h4 id="split-rsplit"><a href="#split-rsplit" class="headerlink" title="split, rsplit"></a><code>split</code>, <code>rsplit</code></h4><blockquote><p><code>split</code> 可以把 <code>字符串</code> 切割成 <code>列表</code></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmd</span><span class="bash"> = <span class="string">'get|a.txt|3333'</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(cmd.split(<span class="string">'|'</span>, 1))</span></span><br><span class="line"><span class="bash"><span class="built_in">print</span>(cmd.rsplit(<span class="string">'|'</span>, 1))</span></span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">'root:x:0:0:root:/root:/bin/bash'</span></span><br><span class="line"><span class="keyword">print</span>(info.<span class="keyword">split</span>(<span class="string">':'</span>))    <span class="comment"># 这里的分割符指定为(:)冒号，默认分隔符为空格</span></span><br><span class="line"><span class="keyword">print</span>(info.<span class="keyword">split</span>(<span class="string">':'</span>, -<span class="number">1</span>))    <span class="comment"># 默认值为 -1，-1 表示从头切到尾</span></span><br><span class="line"></span><br><span class="line">info = <span class="string">'root:x:0:0:root:/root:/bin/bash'</span>     <span class="comment"># 获取第一个 root</span></span><br><span class="line"><span class="keyword">print</span>(info.<span class="keyword">split</span>(<span class="string">':'</span>, <span class="number">1</span>))    <span class="comment"># 1 表示切一次，从左往右切割一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'root'</span>, <span class="string">'x:0:0:root:/root:/bin/bash'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">info</span> = <span class="string">'root:x:0:0:root:/root:/bin/bash'</span></span><br><span class="line">print(<span class="literal">info</span>.rsplit(<span class="string">':'</span>, <span class="number">1</span>))    <span class="comment"># 从右开始切割一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'root:x:0:0:root:/root'</span>, <span class="string">'/bin/bash'</span>]</span><br></pre></td></tr></table></figure><h4 id="join-拼接"><a href="#join-拼接" class="headerlink" title="join 拼接"></a>join 拼接</h4><blockquote><p>join 把 列表 转成 字符串，前提是列表中的所有数据为字符串<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">info</span> = <span class="string">'root:x:0:0:root:/root:/bin/bash'</span></span><br><span class="line">str_to_list = <span class="keyword">info</span>.<span class="keyword">split</span>(<span class="string">':'</span>)</span><br><span class="line">print(str_to_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'root'</span>, <span class="string">'x'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'root'</span>, <span class="string">'/root'</span>, <span class="string">'/bin/bash'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">'root'</span>, <span class="string">'x'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'root'</span>, <span class="string">'/root'</span>, <span class="string">'/bin/bash'</span>]</span><br><span class="line">list_to_str = <span class="string">':'</span>.join(lst)</span><br><span class="line">print(list_to_str)</span><br><span class="line">print(type(list_to_str))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="iterable-参数"><a href="#iterable-参数" class="headerlink" title="iterable 参数"></a>iterable 参数</h4><blockquote><p>可被 for 循环的 全都是 iterable<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i in <span class="keyword">ls</span><span class="variable">t:</span></span><br><span class="line">    <span class="keyword">print</span>(i)</span><br><span class="line"></span><br><span class="line"># 注意：<span class="keyword">join</span> 只能连接 所包含的元素 全都为 字符串类型 的列表</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="string">':'</span>.<span class="keyword">join</span>(lst)</span><br><span class="line">TypeError: sequence item <span class="number">0</span>: expected str instance, <span class="keyword">int</span> found</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="replace-替换字符串"><a href="#replace-替换字符串" class="headerlink" title="replace 替换字符串"></a>replace 替换字符串</h4><blockquote><p><code>replace</code> 不会改变原值<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msg = '<span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> alex, alex <span class="built_in">say</span> hello'</span><br><span class="line">print(msg.replace('alex', 'egon'))        <span class="comment"># 不指定，表示全部替换</span></span><br><span class="line">print(msg.replace('alex', 'egon', <span class="number">1</span>))     <span class="comment"># 1 表示 替换第一个</span></span><br><span class="line">print(msg.replace('alex', 'egon', <span class="number">-1</span>))    <span class="comment"># -1 表示全部替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> egon, egon <span class="built_in">say</span> hello</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> egon, alex <span class="built_in">say</span> hello</span><br><span class="line"><span class="keyword">my</span> <span class="built_in">name</span> <span class="keyword">is</span> egon, egon <span class="built_in">say</span> hello</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="isdigit-判断-字符串-是否是-纯数字"><a href="#isdigit-判断-字符串-是否是-纯数字" class="headerlink" title="isdigit 判断 字符串 是否是 纯数字"></a><code>isdigit</code> 判断 <code>字符串</code> 是否是 <code>纯数字</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span>(<span class="string">'10101'</span>.isdigit())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'abc123'</span>.isdigit())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><blockquote><p>判断 <code>bytes</code> 和 <code>unicode</code> 类型，是最常用的用于于判断 字符 是否为 “数字” 的方法</p></blockquote><blockquote><p> 猜年龄演示错误结果</p></blockquote><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="string">'abcdefg'</span></span><br><span class="line"><span class="keyword">int</span>(age)</span><br><span class="line"><span class="meta"># 不是整型的报错信息</span></span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> <span class="keyword">int</span>() with base <span class="number">10</span>: <span class="string">'abcdefg'</span></span><br><span class="line"></span><br><span class="line">age = <span class="number">50</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    age = <span class="keyword">input</span>(<span class="string">'&gt;&gt;: '</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> age.isdigit():<span class="keyword">continue</span></span><br><span class="line">    age = <span class="keyword">int</span>(age)</span><br><span class="line">    <span class="keyword">if</span> age &gt; <span class="number">50</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'too big'</span>)</span><br><span class="line">    elif age &lt; <span class="number">50</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'too small'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'you got it'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="find-rfind-index-rindex-coun"><a href="#find-rfind-index-rindex-coun" class="headerlink" title="find, rfind, index, rindex, coun"></a><code>find</code>, <code>rfind</code>, <code>index</code>, <code>rindex</code>, <code>coun</code></h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">'my name is egon, egon is nb'</span></span><br><span class="line"><span class="built_in">print</span>(msg.find(<span class="string">'egon'</span>))    <span class="comment"># 查找 子字符串 在 大字符串中的起始位置</span></span><br><span class="line">                           <span class="comment"># 找的是 'egon' 在大字符串 msg 中的起始索引</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.find(<span class="string">'egon'</span>, <span class="number">1</span>, <span class="number">5</span>)    <span class="comment"># 从 1 开始 到 5 结束</span></span><br><span class="line">                                 <span class="comment"># 顾头不顾尾，找不到则返回 -1 不会报错，找到了则显示索引</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.index(<span class="string">'egon'</span>, <span class="number">1</span>, <span class="number">3</span>))    <span class="comment"># 同上，但是找不到会报错</span></span><br><span class="line"><span class="comment"># 报错信息</span></span><br><span class="line">ValueError: substring <span class="keyword">not</span> found</span><br><span class="line"><span class="built_in">print</span>(msg.index(<span class="string">'egon'</span>))    <span class="comment"># 不写位置参数，和 find() 效果一样</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.rfind(<span class="string">'egon'</span>))</span><br><span class="line"><span class="built_in">print</span>(msg.rindex(<span class="string">'egon'</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.count(<span class="string">'egon'</span>))          <span class="comment"># 统计 子字符串 有多少个</span></span><br><span class="line"><span class="built_in">print</span>(msg.count(<span class="string">'egon'</span>, <span class="number">1</span>, <span class="number">3</span>))    <span class="comment"># 顾头不顾尾，如果不指定范围则查找所有</span></span><br></pre></td></tr></table></figure><h4 id="center-ljust-rjust-zfill"><a href="#center-ljust-rjust-zfill" class="headerlink" title="center, ljust, rjust, zfill"></a><code>center</code>, <code>ljust</code>, <code>rjust</code>, <code>zfill</code></h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'info'</span>.center(<span class="number">30</span>,<span class="string">'#'</span>))    # 居中显示，两个参数，宽度，填充字符</span><br><span class="line"># 输出结果</span><br><span class="line">#############info##############</span><br><span class="line"></span><br><span class="line">print(<span class="string">'info'</span>.ljust(<span class="number">30</span>,<span class="string">'*'</span>))    # 左对齐，两个参数，宽度，填充字符</span><br><span class="line"># 输出结果</span><br><span class="line">info**************************</span><br><span class="line"></span><br><span class="line">print(<span class="string">'info'</span>.rjust(<span class="number">30</span>,<span class="string">'='</span>))    # 右对齐，两个参数，宽度，填充字符</span><br><span class="line"># 输出结果</span><br><span class="line">==========================info</span><br><span class="line"></span><br><span class="line">print(<span class="string">'info'</span>.zfill(<span class="number">30</span>))    # 用 <span class="number">0</span> 填充 和 rjust 效果一样</span><br><span class="line"># 输出结果</span><br><span class="line"><span class="number">00000000000000000000000000</span>info</span><br></pre></td></tr></table></figure><h4 id="expandtabs-控制-tab键-的-空格个数"><a href="#expandtabs-控制-tab键-的-空格个数" class="headerlink" title="expandtabs 控制 tab键 的 空格个数"></a><code>expandtabs</code> 控制 <code>tab</code>键 的 空格个数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'aaabbbb'</span>, end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'cccc'</span>, end=<span class="string">''</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">aaabbbbcccc</span><br><span class="line"></span><br><span class="line">print(aaaa\nbbbb)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">aaaa</span><br><span class="line">bbbb</span><br><span class="line"></span><br><span class="line">print(<span class="string">r'a\tb'</span>)    <span class="comment"># \t 表示制表符 tab，如想取消掉这个制表符效果，在字符串前加 r</span></span><br><span class="line">                  <span class="comment"># r开头的字符串内都是原始字符串，右斜杠没有特殊意义</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'a\tb'</span>)     <span class="comment"># r 表示原始字符串(raw string)</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">a\tb</span><br><span class="line">ab</span><br><span class="line">print(<span class="string">'aaa\tbbb'</span>.expandtabs(<span class="number">3</span>))    <span class="comment"># expandtabs 控制空格数</span></span><br><span class="line">print(<span class="string">'aaa\tbbb'</span>.expandtabs(tabsize=<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">aaa   bbb</span><br></pre></td></tr></table></figure><h4 id="captalize-swapcase-title"><a href="#captalize-swapcase-title" class="headerlink" title="captalize, swapcase, title"></a><code>captalize</code>, <code>swapcase</code>, <code>title</code></h4><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">print</span>(<span class="string">'abc'</span>.capitalize())    <span class="comment"># 首字母大写</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">Abc</span><br><span class="line"></span><br><span class="line"><span class="literal">print</span>(<span class="string">'Ab'</span>.swapcase())    <span class="comment"># 大小写翻转</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">aB</span><br><span class="line"></span><br><span class="line"><span class="literal">print</span>(<span class="string">'my name is egon'</span>.title())    <span class="comment"># 每个单词的首字母大写</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">My <span class="keyword">Name</span> Is Egon</span><br></pre></td></tr></table></figure><h4 id="is数字系列"><a href="#is数字系列" class="headerlink" title="is数字系列"></a>is数字系列</h4><blockquote><p>在 <code>Python3</code> 中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="string">b'4'</span>    <span class="comment"># bytes</span></span><br><span class="line">num2=<span class="string">u'4'</span>    <span class="comment"># unicode, Python3 中无需加 u 就是 unicode</span></span><br><span class="line">num3=<span class="string">'四'</span>    <span class="comment"># 中文/繁体数字 肆</span></span><br><span class="line">num4=<span class="string">'Ⅳ'</span>    <span class="comment"># 罗马数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isdigt 判断字符串是否是 bytes，unicode</span></span><br><span class="line"></span><br><span class="line">print(num1.isdigit())    <span class="comment"># 常用（推荐）</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(num2.isdigit())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(num3.isdigit())    <span class="comment"># 不能判断中文数字</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">print(num4.isdigit())    <span class="comment"># 不能判断罗马数字</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="isnumeric-判断字符串是否是-unicode，中文-繁体数字，罗马数字"><a href="#isnumeric-判断字符串是否是-unicode，中文-繁体数字，罗马数字" class="headerlink" title="isnumeric 判断字符串是否是 unicode，中文/繁体数字，罗马数字"></a><code>isnumeric</code> 判断字符串是否是 <code>unicode</code>，中文/繁体数字，罗马数字</h4><blockquote><p><code>bytes</code> 类型没有 <code>isnumeric</code> 方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="string">b'4'</span>    <span class="comment"># bytes</span></span><br><span class="line">num2=<span class="string">u'4'</span>    <span class="comment"># unicode, Python3 中无需加 u 就是 unicode</span></span><br><span class="line">num3=<span class="string">'四'</span>    <span class="comment"># 中文/繁体数字 肆</span></span><br><span class="line">num4=<span class="string">'Ⅳ'</span>    <span class="comment"># 罗马数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isnumeric: unicode, 中文，罗马</span></span><br><span class="line"></span><br><span class="line">print(num2.isnumeric())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(num3.isnumeric())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(num4.isnumeric())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="isdecimal-判断字符串是否是-uncicode"><a href="#isdecimal-判断字符串是否是-uncicode" class="headerlink" title="isdecimal 判断字符串是否是 uncicode"></a><code>isdecimal</code> 判断字符串是否是 <code>uncicode</code></h4><blockquote><p><code>bytes</code> 类型没有 <code>isdecimal</code> 方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="string">b'4'</span>    <span class="comment"># bytes</span></span><br><span class="line">num2=<span class="string">u'4'</span>    <span class="comment"># unicode, Python3 中无需加 u 就是 unicode</span></span><br><span class="line">num3=<span class="string">'四'</span>    <span class="comment"># 中文/繁体数字 肆</span></span><br><span class="line">num4=<span class="string">'Ⅳ'</span>    <span class="comment"># 罗马数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isdecimal:unicode</span></span><br><span class="line"></span><br><span class="line">print(num2.isdecimal())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">print(num3.isdecimal())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">print(num4.isdecimal())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>三者 <code>都不能</code> 判断 <code>浮点数</code></p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num5 = <span class="string">'4.3'</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(num5.isdigit()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(num5.isdecimal()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(num5.isnumeric()</span></span>)</span><br></pre></td></tr></table></figure><blockquote><p>总结：<br>最常用的是 <code>isdigit</code>，可以判断 <code>bytes</code> 和 <code>unicode</code> 类型，这也是最常见的数字应用场景<br>如果要判断 中文数字 或 罗马数字，则需要用到 <code>isnumeric</code></p></blockquote><h4 id="is其他"><a href="#is其他" class="headerlink" title="is其他"></a>is其他</h4><blockquote><p>判断字符串内是否是空格<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span>(<span class="string">''</span>.isspace())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'        '</span>.isspace())    <span class="comment"># 判断字符串内是否是空格</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串是否全部由字母组成</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">''</span>.isalpha())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'abcdefg'</span>.isalpha())    <span class="comment"># 判断字符串是否全部由字母组成</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'abc123'</span>.isalpha())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串中是否由字母或数字组成</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">''</span>.isalnum())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'abc123'</span>.isalnum())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'abcdefg'</span>.isalnum())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'123456'</span>.isalnum())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串是否全都是小写字母</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'Garfield'</span>.islower())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'garfield'</span>.islower())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串是否全都是大写字母</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'Garfield'</span>.isupper())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'garfield'</span>.isupper())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'GARFIELD'</span>.isupper())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断字符串是否是标题，也就是单词首字母是否大写</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'Garfield'</span>.istitle())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">'garfield'</span>.istitle())</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">''</span>.isprintable())</span><br><span class="line"><span class="keyword">print</span>(<span class="string">''</span>.isidentifier())</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="str-字符串类型总结"><a href="#str-字符串类型总结" class="headerlink" title="str 字符串类型总结"></a><code>str</code> 字符串类型总结</h4><blockquote><ol><li>只能存一个值</li><li>有序（能够按索引取值的属于有序的）</li><li>不可变类型<br>不可变：值变，id也变。不可变==可hash<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">'abc'</span></span><br><span class="line"><span class="built_in">print</span>(id(x))</span><br><span class="line">x = <span class="string">'bcd'</span></span><br><span class="line"><span class="built_in">print</span>(id(x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">1695860198624</span><br><span class="line">1695860293792</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.cnblogs.com/linhaifeng/articles/7133357.html#_label3" target="_blank" rel="noopener">http://www.cnblogs.com/linhaifeng/articles/7133357.html#_label3</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;str-字符串类型&quot;&gt;&lt;a href=&quot;#str-字符串类型&quot; class=&quot;headerlink&quot; title=&quot;str 字符串类型&quot;&gt;&lt;/a&gt;&lt;code&gt;str&lt;/code&gt; 字符串类型&lt;/h2&gt;&lt;h3 id=&quot;str-基本使用&quot;&gt;&lt;a href=&quot;#str-基本使用&quot; class=&quot;headerlink&quot; title=&quot;str 基本使用&quot;&gt;&lt;/a&gt;&lt;code&gt;str&lt;/code&gt; 基本使用&lt;/h3&gt;&lt;h4 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;用于 描述型的数据，姓名，性别，地址，国籍 等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python字符串类型" scheme="http://www.gmlyo.com/tags/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python字典类型</title>
    <link href="http://www.gmlyo.com//blog/2018/07/05/Python%E5%AD%97%E5%85%B8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.gmlyo.com//blog/2018/07/05/Python字典类型/</id>
    <published>2018-07-04T16:38:58.000Z</published>
    <updated>2018-07-04T16:41:40.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dict-字典类型"><a href="#dict-字典类型" class="headerlink" title="dict 字典类型"></a><code>dict</code> 字典类型</h2><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><blockquote><p>可变类型，存放多个值，<code>key:value</code>，<code>key</code> 对 <code>value</code> 有描述性的作用</p></blockquote><a id="more"></a><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><blockquote><p>在 <code>{}</code> 内用逗号分隔 多个元素 每个元素都是 <code>key:value</code> 的形式<br><code>key</code> 必须是不可变类型且唯一，<code>key</code> 通常都是用字符串类型，需要可描述的<br><code>value</code> 可以是任意数据类型<br>即字典的 <code>key</code> 可以是 <code>int</code>, <code>float</code>, <code>tuple</code>, <code>str</code>, 通常是字符串类型</p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;3.1:1, (1,2,3):2222&#125;  <span class="comment"># d = dict(&#123;3.1:1, (1,2,3):2222&#125;)</span></span><br><span class="line">print(d[(1,2,3)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">2222</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d1 = dict(x=1, y=2, z=3)</span><br><span class="line"><span class="built_in">print</span>(d1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'x'</span>: 1, <span class="string">'y'</span>: 2, <span class="string">'z'</span>: 3&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d2 = dict([(<span class="string">'name'</span>, <span class="string">'egon'</span>), [<span class="string">'age'</span>, 18], (<span class="string">'sex'</span>, <span class="string">'male'</span>)])</span><br><span class="line"><span class="built_in">print</span>(d2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">info</span> = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;    # <span class="keyword">info</span> = <span class="keyword">dict</span>(&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;)</span><br><span class="line">print(<span class="keyword">info</span>[<span class="string">'name'</span>])    # 根据 key 取值</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">info</span> = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">print(id(<span class="keyword">info</span>))    # 修改前，查看 id</span><br><span class="line"><span class="keyword">info</span>[<span class="string">'name'</span>] = <span class="string">'EGON'</span>    # 根据 key 取值，然后修改 value</span><br><span class="line">print(id(<span class="keyword">info</span>))    # 修改前，查看 id</span><br><span class="line">print(<span class="keyword">info</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1552302365936</span></span><br><span class="line"><span class="number">1552302365936</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'EGON'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加一个 <code>key</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18&#125;</span><br><span class="line">d[<span class="string">'sex'</span>] = <span class="string">'male'</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>key</code> 必须是独一无二的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18, <span class="string">'age'</span>: 19, <span class="string">'age'</span>: 20&#125;</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'EGON'</span>, <span class="string">'age'</span>: 20&#125;  <span class="comment"># 只认最后一个key</span></span><br></pre></td></tr></table></figure><blockquote><p><code>key</code> 必须是不可变类型<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, [<span class="number">1</span>, <span class="number">2</span>]: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(info<span class="string">[[1, 2]]</span>)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">'list'</span></span><br><span class="line"># 列表是 可变类型，不可hash，不支持key</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>元组是不可变类型，可 <code>hash</code>，支持 <code>key</code><br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">info</span> = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, (<span class="number">1</span>, <span class="number">2</span>): <span class="number">18</span>&#125;</span><br><span class="line">print(<span class="keyword">info</span>[(<span class="number">1</span>, <span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="常用操作-内置方法"><a href="#常用操作-内置方法" class="headerlink" title="常用操作+内置方法"></a>常用操作+内置方法</h3><blockquote><p>按 key 存取值：可存值，也可取值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'x'</span>: 1&#125;</span><br><span class="line">d[<span class="string">'x'</span>] = 2</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'x'</span>: 2&#125;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'x'</span>: 1&#125;</span><br><span class="line"><span class="built_in">print</span>(id(d))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">d[<span class="string">'x'</span>] = 2</span><br><span class="line"><span class="built_in">print</span>(id(d))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">2536822683256</span><br><span class="line">&#123;<span class="string">'x'</span>: 1&#125;</span><br><span class="line">2536822683256</span><br><span class="line">&#123;<span class="string">'x'</span>: 2&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'x'</span>: 1&#125;</span><br><span class="line">d[<span class="string">'y'</span>] = 3</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'x'</span>: 1, <span class="string">'y'</span>: 3&#125;</span><br></pre></td></tr></table></figure><h3 id="长度len"><a href="#长度len" class="headerlink" title="长度len"></a>长度<code>len</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: 1, <span class="string">'y'</span>: 2, <span class="string">'z'</span>: 3&#125;</span><br><span class="line"><span class="built_in">print</span>(len(info))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18&#125;</span><br><span class="line"><span class="built_in">print</span>(len(d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="成员运算-in-和-not-in"><a href="#成员运算-in-和-not-in" class="headerlink" title="成员运算 in 和 not in"></a>成员运算 <code>in</code> 和 <code>not in</code></h3><blockquote><p>判断的是字典的 <code>key</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(<span class="string">'x'</span> <span class="keyword">in</span> info)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">print(<span class="number">18</span> <span class="keyword">in</span> d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">print(<span class="string">'name'</span> <span class="keyword">in</span> d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">info</span> = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">del <span class="keyword">info</span>[<span class="string">'x'</span>]</span><br><span class="line">print(<span class="keyword">info</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: 1, <span class="string">'y'</span>: 2, <span class="string">'z'</span>: 3&#125;</span><br><span class="line"><span class="built_in">print</span>(info.popitem())    <span class="comment"># 随机删，将删除的内容以元组格式返回</span></span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="string">'z'</span>, 3)</span><br><span class="line">&#123;<span class="string">'x'</span>: 1, <span class="string">'y'</span>: 2&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">d.pop(<span class="string">'xx'</span>)    <span class="comment"># 如果指定了一个不存在的 key</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">KeyError: <span class="string">'xx'</span></span><br><span class="line">d.pop(<span class="string">'sex'</span>, <span class="keyword">None</span>)    <span class="comment"># 指定了 None 就不会报错了</span></span><br><span class="line"></span><br><span class="line">res = d.pop(<span class="string">'sex'</span>, <span class="keyword">None</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop() 删除 key 对应的元素，并返回 value 值</span></span><br><span class="line">res = d.pop(<span class="string">'name'</span>, <span class="keyword">None</span>)    <span class="comment"># 删除存在的 key 时，可以不用写 None</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line">info = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(info.pop(<span class="string">'x'</span>))    <span class="comment"># 根据 key 删除，把删除的 value 返回出来</span></span><br><span class="line">print(info)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: 1, <span class="string">'y'</span>: 2, <span class="string">'z'</span>: 3&#125;</span><br><span class="line"><span class="built_in">print</span>(info.pop(<span class="string">'xxxxx'</span>))    <span class="comment"># 如果没有这个 key，在没有指定 default 值的情况下，会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">KeyError: <span class="string">'xxxxx'</span></span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">print</span>(info.<span class="keyword">pop</span>(<span class="string">'xxxxx'</span>, <span class="string">'没有找到key'</span>))    # 指定<span class="keyword">default</span>值的情况下，会输出 <span class="keyword">default</span> 的值</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">没有找到key</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(info.pop(<span class="string">'xxxxx'</span>, <span class="keyword">None</span>))    <span class="comment"># 通常 default值 写None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="键keys-，值values-，键值对items"><a href="#键keys-，值values-，键值对items" class="headerlink" title="键keys()，值values()，键值对items()"></a>键<code>keys()</code>，值<code>values()</code>，键值对<code>items()</code></h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;'name': 'egon', 'age': <span class="number">18</span>&#125;</span><br><span class="line">d.keys()    <span class="meta"># 取 key</span></span><br><span class="line">d.values()  <span class="meta"># 取 value</span></span><br><span class="line">d.items()   <span class="meta"># 取 key value</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Python2</code> 中字典的格式<br><code>Python 2.7.15</code></p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.keys()</span><br><span class="line">[<span class="string">'age'</span>, <span class="string">'name'</span>]    <span class="comment"># 5个鸡蛋</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.values()</span><br><span class="line">[<span class="number">18</span>, <span class="string">'egon'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.items()</span><br><span class="line">[(<span class="string">'age'</span>, <span class="number">18</span>), (<span class="string">'name'</span>, <span class="string">'egon'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg_dic = &#123;</span><br><span class="line"><span class="meta">... </span>    <span class="string">'apple'</span>: <span class="number">10</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'tesla'</span>: <span class="number">100000</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'mac'</span>: <span class="number">3000</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'lenovo'</span>: <span class="number">30000</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'chicken'</span>: <span class="number">10</span>,</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(msg_dic.keys())</span><br><span class="line">[<span class="string">'tesla'</span>, <span class="string">'mac'</span>, <span class="string">'lenovo'</span>, <span class="string">'apple'</span>, <span class="string">'chicken'</span>]    <span class="comment"># 5个鸡蛋</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(msg_dic.values())</span><br><span class="line">[<span class="number">100000</span>, <span class="number">3000</span>, <span class="number">30000</span>, <span class="number">10</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg_dic.items()</span><br><span class="line">[(<span class="string">'tesla'</span>, <span class="number">100000</span>), (<span class="string">'mac'</span>, <span class="number">3000</span>), (<span class="string">'lenovo'</span>, <span class="number">30000</span>), (<span class="string">'apple'</span>, <span class="number">10</span>), (<span class="string">'chicken'</span>, <span class="number">10</span>)]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>Python3</code> 做了优化，节省内存<br><code>Python 3.6.5</code></p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.keys():</span><br><span class="line">    print(k)</span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</span><br><span class="line">    print(v)</span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line"><span class="number">18</span></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> d.items():    <span class="meta"># k, v = (<span class="string">'name'</span>, <span class="string">'egon'</span>)</span></span><br><span class="line">    print(item)</span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">(<span class="string">'name'</span>, <span class="string">'egon'</span>)</span><br><span class="line">(<span class="string">'age'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():    <span class="meta"># k, v = (<span class="string">'name'</span>, <span class="string">'egon'</span>)</span></span><br><span class="line">    print(k,v)</span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">name egon</span><br><span class="line">age <span class="number">18</span></span><br></pre></td></tr></table></figure><blockquote><p><code>python3</code> 做出 <code>python2</code> 中的结果<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">list</span>(d.<span class="built_in">keys</span>()))</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">list</span>(d.<span class="built_in">values</span>()))</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">list</span>(d.<span class="built_in">items</span>()))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'name'</span>, <span class="string">'age'</span>]</span><br><span class="line">[<span class="string">'egon'</span>, <span class="number">18</span>]</span><br><span class="line">[(<span class="string">'name'</span>, <span class="string">'egon'</span>), (<span class="string">'age'</span>, <span class="number">18</span>)]</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; msg_dic = &#123;</span><br><span class="line">...     <span class="string">'apple'</span>: <span class="number">10</span>,</span><br><span class="line">...     <span class="string">'tesla'</span>: <span class="number">100000</span>,</span><br><span class="line">...     <span class="string">'mac'</span>: <span class="number">3000</span>,</span><br><span class="line">...     <span class="string">'lenovo'</span>: <span class="number">30000</span>,</span><br><span class="line">...     <span class="string">'chicken'</span>: <span class="number">10</span>,</span><br><span class="line">... &#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; msg_dic.keys()</span><br><span class="line">dict_keys([<span class="string">'apple'</span>, <span class="string">'tesla'</span>, <span class="string">'mac'</span>, <span class="string">'lenovo'</span>, <span class="string">'chicken'</span>])    <span class="comment"># 一只有5个鸡蛋的老母鸡</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; res = msg_dic.keys()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; type(res)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict_keys</span>'&gt;</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; type(res) is list</span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> msg_dic.keys():    # 这种方式比较鸡肋，不加 .keys() 默认是循环 key</span><br><span class="line">    <span class="builtin-name">print</span>(k)</span><br><span class="line">等于</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> msg_dic:</span><br><span class="line">    <span class="builtin-name">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">apple</span><br><span class="line">tesla</span><br><span class="line">mac</span><br><span class="line">lenovo</span><br><span class="line">chicken</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">msg_dic = &#123;</span><br><span class="line">    <span class="string">'apple'</span>: 10,</span><br><span class="line">    <span class="string">'tesla'</span>: 100000,</span><br><span class="line">    <span class="string">'mac'</span>: 3000,</span><br><span class="line">    <span class="string">'lenovo'</span>: 30000,</span><br><span class="line">    <span class="string">'chicken'</span>: 10,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> msg_dic.values():    <span class="comment"># 只获取value</span></span><br><span class="line">    <span class="built_in">print</span>(v)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">10</span><br><span class="line">100000</span><br><span class="line">3000</span><br><span class="line">30000</span><br><span class="line">10</span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> msg_dic.items():    <span class="meta"># 获取 key 和 value</span></span><br><span class="line">    print(x)</span><br><span class="line"><span class="meta"># [(<span class="string">'apple'</span>, 10), (<span class="string">'tesla'</span>, 100000), (<span class="string">'mac'</span>, 3000), (<span class="string">'lenovo'</span>, 30000), (<span class="string">'chicken'</span>, 10)]</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">(<span class="string">'apple'</span>, <span class="number">10</span>)</span><br><span class="line">(<span class="string">'tesla'</span>, <span class="number">100000</span>)</span><br><span class="line">(<span class="string">'mac'</span>, <span class="number">3000</span>)</span><br><span class="line">(<span class="string">'lenovo'</span>, <span class="number">30000</span>)</span><br><span class="line">(<span class="string">'chicken'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># [(<span class="string">'apple'</span>, 10), (<span class="string">'tesla'</span>, 100000), (<span class="string">'mac'</span>, 3000), (<span class="string">'lenovo'</span>, 30000), (<span class="string">'chicken'</span>, 10)]</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> msg_dic.items():</span><br><span class="line">    print(x[<span class="number">0</span>], x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">apple <span class="number">10</span></span><br><span class="line">tesla <span class="number">100000</span></span><br><span class="line">mac <span class="number">3000</span></span><br><span class="line">lenovo <span class="number">30000</span></span><br><span class="line">chicken <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> [(<span class="string">'apple'</span>, 10), (<span class="string">'tesla'</span>, 100000), (<span class="string">'mac'</span>, 3000), (<span class="string">'lenovo'</span>, 30000), (<span class="string">'chicken'</span>, 10)]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> k, v = (<span class="string">'apple'</span>, 10)</span></span><br><span class="line">for k, v in msg_dic.items():</span><br><span class="line">    print(k, v)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出结果</span></span><br><span class="line">apple 10</span><br><span class="line">tesla 100000</span><br><span class="line">mac 3000</span><br><span class="line">lenovo 30000</span><br><span class="line">chicken 10</span><br></pre></td></tr></table></figure><h3 id="循环（循环取值）"><a href="#循环（循环取值）" class="headerlink" title="循环（循环取值）"></a>循环（循环取值）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:    <span class="comment"># d 不加 .keys() 默认也是取 key</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(k, d[k])</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">name egon</span><br><span class="line">age 18</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">msg_dic = &#123;</span><br><span class="line">    <span class="string">'apple'</span>: 10,</span><br><span class="line">    <span class="string">'tesla'</span>: 100000,</span><br><span class="line">    <span class="string">'mac'</span>: 3000,</span><br><span class="line">    <span class="string">'lenovo'</span>: 30000,</span><br><span class="line">    <span class="string">'chicken'</span>: 10,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> msg_dic:</span><br><span class="line">    <span class="built_in">print</span>(k, msg_dic[k])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">apple 10</span><br><span class="line">tesla 100000</span><br><span class="line">mac 3000</span><br><span class="line">lenovo 30000</span><br><span class="line">chicken 10</span><br></pre></td></tr></table></figure><h3 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">msg_dic = &#123;</span><br><span class="line">    <span class="string">'apple'</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">'tesla'</span>: <span class="number">100000</span>,</span><br><span class="line">    <span class="string">'mac'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'lenovo'</span>: <span class="number">30000</span>,</span><br><span class="line">    <span class="string">'chicken'</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(msg_dic[<span class="string">'applexxxxx'</span>])    <span class="comment"># key 不存在的情况下，会报错</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">KeyError: <span class="string">'applexxxxx'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'applexxxxx'</span> <span class="keyword">in</span> msg_dic:    <span class="comment"># 利用 if 判断 key 是否存在</span></span><br><span class="line">    print(msg_dic[<span class="string">'applexxxxx'</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># 代码比较多</span></span><br><span class="line"></span><br><span class="line">print(msg_dic.get(<span class="string">'applexxxxx'</span>))    <span class="comment"># key 不存在的情况下，默认返回None</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以自定义返回值</span></span><br><span class="line">print(msg_dic.get(<span class="string">'applexxxxx'</span>, <span class="string">'xxxxx'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">xxxxx</span><br></pre></td></tr></table></figure><h4 id="dict-get-取值"><a href="#dict-get-取值" class="headerlink" title="dict.get() 取值"></a><code>dict.get()</code> 取值</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">d[<span class="string">'sex'</span>]</span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">KeyError: <span class="string">'sex'</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 为了避免这种问题</span></span><br><span class="line">res = d.<span class="keyword">get</span>(<span class="string">'sex'</span>, <span class="string">'没有这个key'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">没有这个key</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">res = d.<span class="keyword">get</span>(<span class="string">'name'</span>, None)    # 通常写None</span><br><span class="line">print(res)</span><br><span class="line"><span class="meta"># 输出结果</span></span><br><span class="line">egon</span><br></pre></td></tr></table></figure><h4 id="dict-popitem-随机删除"><a href="#dict-popitem-随机删除" class="headerlink" title="dict.popitem() 随机删除"></a><code>dict.popitem()</code> 随机删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18&#125;</span><br><span class="line">res = <span class="built_in">print</span>(d.popitem())    <span class="comment"># 随机删，将删除的内容以元组格式返回</span></span><br><span class="line"><span class="built_in">print</span>(d, res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>&#125; (<span class="string">'age'</span>: 18)</span><br></pre></td></tr></table></figure><h4 id="dict-update-更新"><a href="#dict-update-更新" class="headerlink" title="dict.update() 更新"></a><code>dict.update()</code> 更新</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18&#125;</span><br><span class="line">d.update(&#123;<span class="string">'x'</span>: 1, <span class="string">'name'</span>: <span class="string">'EGON'</span>&#125;)  <span class="comment"># 老字典 d 没有的则添加，有的则以新字典为准进行修改</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'EGON'</span>, <span class="string">'age'</span>: 18, <span class="string">'x'</span>: 1&#125;</span><br><span class="line"></span><br><span class="line">d1 = &#123;<span class="string">'x'</span>: 1, <span class="string">'y'</span>: 2&#125;</span><br><span class="line">d1.update(&#123;<span class="string">'x'</span>: 2, <span class="string">'z'</span>: 3&#125;)    <span class="comment"># 有原值就更新，没有的就新增</span></span><br><span class="line"><span class="built_in">print</span>(d1)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'x'</span>: 2, <span class="string">'y'</span>: 2, <span class="string">'z'</span>: 3&#125;</span><br></pre></td></tr></table></figure><h4 id="dict-setdefault-有则不改，无则增加"><a href="#dict-setdefault-有则不改，无则增加" class="headerlink" title="dict.setdefault() 有则不改，无则增加"></a>dict.setdefault() 有则不改，无则增加</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18&#125;</span><br><span class="line">res = d.setdefault(<span class="string">'name'</span>: <span class="string">'EGON'</span>&#125;)  <span class="comment"># 当key存在时，不修改值，会返回原值</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">egon</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18&#125;</span><br><span class="line">res = d.setdefault(<span class="string">'sex'</span>: <span class="string">'male'</span>&#125;)   <span class="comment"># 当key不存在时，则新增一个元素，会返回一个新值</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">male</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18&#125;</span><br><span class="line">d.setdefault(<span class="string">'name'</span>: <span class="string">'EGON'</span>&#125;)  <span class="comment"># 当key存在时，不修改值</span></span><br><span class="line">d.setdefault(<span class="string">'sex'</span>: <span class="string">'male'</span>&#125;)   <span class="comment"># 当key不存在时，则新增一个元素</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'egon'</span>, <span class="string">'age'</span>: 18, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;.setdefault()    <span class="comment"># 有则不改，无则增加</span></span><br><span class="line">d = &#123;<span class="string">'x'</span>: 1, <span class="string">'y'</span>: 2&#125;</span><br><span class="line">d.setdefault(<span class="string">'x'</span>, 1000)    <span class="comment"># 当key存在时 则不改变 key 对应的值，返回原值</span></span><br><span class="line">res = d.setdefault(<span class="string">'x'</span>, 1000)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'x'</span>: 1, <span class="string">'y'</span>: 2&#125;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'x'</span>: 1, <span class="string">'y'</span>: 2&#125;</span><br><span class="line">d.setdefault(<span class="string">'z'</span>, 1000)    <span class="comment"># key不存在 则增加一个 key:value，返回新增的value</span></span><br><span class="line">res = d.setdefault(<span class="string">'z'</span>, 1000)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'x'</span>: 1, <span class="string">'y'</span>: 2, <span class="string">'z'</span>: 1000&#125;</span><br><span class="line">1000</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 统计单词个数</span><br><span class="line">统计 s = <span class="string">'hello alex alex say hello sb sb'</span> 中每个单词的个数</span><br><span class="line">结果如：&#123;<span class="string">'hello'</span>: <span class="number">2</span>, <span class="string">'alex'</span>: <span class="number">2</span>, <span class="string">'say'</span>: <span class="number">1</span>, <span class="string">'sb'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">s = <span class="string">'hello alex alex say hello sb sb'</span></span><br><span class="line">words = s.split()</span><br><span class="line"><span class="built_in">print</span>(words)</span><br><span class="line"># 输出结果</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'alex'</span>, <span class="string">'alex'</span>, <span class="string">'say'</span>, <span class="string">'hello'</span>, <span class="string">'sb'</span>, <span class="string">'sb'</span>]</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="built_in">for</span> <span class="keyword">word</span> in words:</span><br><span class="line">    <span class="built_in">if</span> <span class="keyword">word</span> <span class="keyword">not</span> in d:</span><br><span class="line">        d[<span class="keyword">word</span>] = <span class="number">1</span></span><br><span class="line">    <span class="built_in">else</span>:</span><br><span class="line">        d[<span class="keyword">word</span>] += <span class="number">1</span></span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="string">'hello'</span>: <span class="number">2</span>, <span class="string">'alex'</span>: <span class="number">2</span>, <span class="string">'say'</span>: <span class="number">1</span>, <span class="string">'sb'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line">words = s.split()</span><br><span class="line"><span class="built_in">for</span> <span class="keyword">word</span> in words:</span><br><span class="line">    <span class="meta"># print(word, words.count(word))</span></span><br><span class="line">    d[<span class="keyword">word</span>] = words.count(<span class="keyword">word</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="string">'hello'</span>: <span class="number">2</span>, <span class="string">'alex'</span>: <span class="number">2</span>, <span class="string">'say'</span>: <span class="number">1</span>, <span class="string">'sb'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line">words = s.split()</span><br><span class="line"><span class="built_in">for</span> <span class="keyword">word</span> in words:</span><br><span class="line">    d.setdefault(<span class="keyword">word</span>, words.count(<span class="keyword">word</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"># 输出结果</span><br><span class="line">&#123;<span class="string">'hello'</span>: <span class="number">2</span>, <span class="string">'alex'</span>: <span class="number">2</span>, <span class="string">'say'</span>: <span class="number">1</span>, <span class="string">'sb'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="dict-fromkeys-用于字典的初始化，快速造出字典"><a href="#dict-fromkeys-用于字典的初始化，快速造出字典" class="headerlink" title="dict.fromkeys 用于字典的初始化，快速造出字典"></a><code>dict.fromkeys</code> 用于字典的初始化，快速造出字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;.fromkeys(序列类型, 值)</span><br><span class="line">序列类型：有索引的类型（字符串，列表，元组）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于字典的初始化</span></span><br><span class="line"><span class="comment"># items = ['name', 'age', 'sex']</span></span><br><span class="line">items = (<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>)</span><br><span class="line">dic = d.fromkeys(items, <span class="keyword">None</span>)</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="keyword">None</span>, <span class="string">'age'</span>: <span class="keyword">None</span>, <span class="string">'sex'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;.fromkeys([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>], <span class="string">'初始值'</span>)</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'初始值'</span>, <span class="string">'age'</span>: <span class="string">'初始值'</span>, <span class="string">'sex'</span>: <span class="string">'初始值'</span>&#125;</span><br><span class="line"></span><br><span class="line">info = &#123;&#125;.fromkeys(<span class="string">'hello'</span>, <span class="keyword">None</span>)</span><br><span class="line">print(info)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'h'</span>: <span class="keyword">None</span>, <span class="string">'e'</span>: <span class="keyword">None</span>, <span class="string">'l'</span>, <span class="keyword">None</span>, <span class="string">'o'</span>, <span class="keyword">None</span>&#125;</span><br><span class="line"><span class="comment"># 字典key 不能重复，所以这里只有一个 l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现 不用 formkeys，从以下元组中取出没一个元素，造一个字典</span></span><br><span class="line">items = (<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>)</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    dic[item] = <span class="keyword">None</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="keyword">None</span>, <span class="string">'age'</span>: <span class="keyword">None</span>, <span class="string">'sex'</span>: <span class="keyword">None</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="dict-字典类型总结"><a href="#dict-字典类型总结" class="headerlink" title="dict 字典类型总结"></a><code>dict</code> 字典类型总结</h3><blockquote><ol><li>能存多个值，没有类型限制</li><li>无序（能够按索引取值的属于有序）</li><li>可变类型<br>可变：值变，id不变。可变==不可hash</li></ol></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.cnblogs.com/linhaifeng/articles/7133357.html#_label6" target="_blank" rel="noopener">http://www.cnblogs.com/linhaifeng/articles/7133357.html#_label6</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;dict-字典类型&quot;&gt;&lt;a href=&quot;#dict-字典类型&quot; class=&quot;headerlink&quot; title=&quot;dict 字典类型&quot;&gt;&lt;/a&gt;&lt;code&gt;dict&lt;/code&gt; 字典类型&lt;/h2&gt;&lt;h3 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;可变类型，存放多个值，&lt;code&gt;key:value&lt;/code&gt;，&lt;code&gt;key&lt;/code&gt; 对 &lt;code&gt;value&lt;/code&gt; 有描述性的作用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python字典类型" scheme="http://www.gmlyo.com/tags/Python%E5%AD%97%E5%85%B8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>CentOS禁止密码登录</title>
    <link href="http://www.gmlyo.com//blog/2018/07/03/CentOS%E7%A6%81%E6%AD%A2%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <id>http://www.gmlyo.com//blog/2018/07/03/CentOS禁止密码登录/</id>
    <published>2018-07-03T13:09:45.000Z</published>
    <updated>2018-07-03T13:10:27.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CentOS-禁止密码登录"><a href="#CentOS-禁止密码登录" class="headerlink" title="CentOS 禁止密码登录"></a>CentOS 禁止密码登录</h2><blockquote><p>允许 <code>sshkey</code> 密钥登录，禁止密码登录</p></blockquote><a id="more"></a><h3 id="编辑-SSH-配置文件"><a href="#编辑-SSH-配置文件" class="headerlink" title="编辑 SSH 配置文件"></a>编辑 <code>SSH</code> 配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">/etc/ssh/sshd_config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到以下配置项</span></span><br><span class="line"><span class="comment">#RSAAuthentication yes</span></span><br><span class="line"><span class="comment">#PubkeyAuthentication yes</span></span><br><span class="line"><span class="comment">#AuthorizedKeysFile .ssh/authorized_keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去调上面 3 行前面的 (#)注释</span></span><br><span class="line"><span class="comment"># 找到下面 1 行</span></span><br><span class="line"></span><br><span class="line"><span class="string">PasswordAuthentication</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">PermitRootLogin</span> <span class="literal">yes</span></span><br><span class="line"><span class="comment"># 修改为</span></span><br><span class="line"><span class="string">PasswordAuthentication</span> <span class="literal">no</span>           <span class="comment"># 禁止密码登录</span></span><br><span class="line"><span class="string">PermitRootLogin</span> <span class="literal">no</span>                  <span class="comment"># 禁止 root 登录</span></span><br><span class="line"><span class="string">PermitRootLogin</span> <span class="string">without-password</span>    <span class="comment"># 禁止 root 密码登录</span></span><br></pre></td></tr></table></figure><h3 id="重启-SSH-服务"><a href="#重启-SSH-服务" class="headerlink" title="重启 SSH 服务"></a>重启 <code>SSH</code> 服务</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl reload sshd</span></span><br><span class="line"><span class="attribute">systemctl -l status sshd</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/u013372487/article/details/71307323" target="_blank" rel="noopener">https://blog.csdn.net/u013372487/article/details/71307323</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CentOS-禁止密码登录&quot;&gt;&lt;a href=&quot;#CentOS-禁止密码登录&quot; class=&quot;headerlink&quot; title=&quot;CentOS 禁止密码登录&quot;&gt;&lt;/a&gt;CentOS 禁止密码登录&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;允许 &lt;code&gt;sshkey&lt;/code&gt; 密钥登录，禁止密码登录&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux笔记" scheme="http://www.gmlyo.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CentOS禁止密码登录" scheme="http://www.gmlyo.com/tags/CentOS%E7%A6%81%E6%AD%A2%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper可视化界面zkui搭建与配置</title>
    <link href="http://www.gmlyo.com//blog/2018/06/28/Zookeeper%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2zkui%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.gmlyo.com//blog/2018/06/28/Zookeeper可视化界面zkui搭建与配置/</id>
    <published>2018-06-27T16:02:45.000Z</published>
    <updated>2018-06-27T16:52:11.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Zookeeper可视化界面zkui搭建与配置"><a href="#Zookeeper可视化界面zkui搭建与配置" class="headerlink" title="Zookeeper可视化界面zkui搭建与配置"></a>Zookeeper可视化界面zkui搭建与配置</h2><p>一个允许在 <code>Zookeeper</code> 上进行 <code>CRUD</code> 操作的 <code>UI</code> 控制面板。</p><a id="more"></a><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/DeemOpen/zkui" target="_blank" rel="noopener">https://github.com/DeemOpen/zkui</a></p><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><p>jdk 7</p><h3 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h3><blockquote><p><code>zkui</code> 是基于 <code>java</code> 语言开发，首先就要我们安装 <code>jdk</code> 环境。<br>因为 <code>zkui</code> 需要我们手工进行编译、构建和打包，所以还需要安装 <code>maven</code> 环境。</p></blockquote><h3 id="安装-jdk1-7"><a href="#安装-jdk1-7" class="headerlink" title="安装 jdk1.7"></a>安装 jdk1.7</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">tar</span> -zxvf jdk<span class="number">-7</span>u80-linux-x64.tar.gz -<span class="type">C</span> /<span class="class"><span class="keyword">data</span>/</span></span><br><span class="line"><span class="title">chown</span> -<span class="type">R</span> root:root /<span class="class"><span class="keyword">data</span>/jdk1.7.0_80/</span></span><br></pre></td></tr></table></figure><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /etc/profile.d/jdk.sh &lt;&lt; “EOF”</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/data/jdk1.7.0_80</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line">java –version</span><br></pre></td></tr></table></figure><h3 id="生成-zkui-的-jar-包"><a href="#生成-zkui-的-jar-包" class="headerlink" title="生成 zkui 的 jar 包"></a>生成 <code>zkui</code> 的 <code>jar</code> 包</h3><blockquote><p><code>zkui</code> 的源码包，我们可以在 <code>github</code> 上进行下载<br><a href="https://github.com/DeemOpen/zkui.git" target="_blank" rel="noopener">https://github.com/DeemOpen/zkui.git</a><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/data/tools/</span></span><br><span class="line">git clone https:<span class="string">//github.com/DeemOpen/zkui.git</span></span><br><span class="line"><span class="keyword">cd</span> zkui/</span><br><span class="line">ll -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 mvn 命令进行编译构建打包</span></span><br><span class="line">mvn clean install</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>可以看到 <code>maven</code> 打包后生成了 <code>zkui-2.0-SNAPSHOT.jar</code> 和 <code>zkui-2.0-SNAPSHOT-jar-with-dependencies.jar</code> 两个文件，其中 <code>zkui-2.0-SNAPSHOT-jar-with-dependencies.jar</code> 是我们需要的 <code>jar</code> 文件。</p></blockquote><h3 id="启动-zkui"><a href="#启动-zkui" class="headerlink" title="启动 zkui"></a>启动 <code>zkui</code></h3><blockquote><p><code>zkui</code> 运行的 <code>jar</code> 文件生成后，我们就可以直接运行该文件了。<br>在运行该文件之前，我们还需要修改 <code>zkui</code> 的配置文件 <code>config.cfg</code>。<br><code>config.cfg</code> 文件中配置了，<code>zkui</code> 需要连接的 <code>zookeeper</code> 集群的 <code>IP</code> 地址和端口，访问 <code>ui</code> 的用户名和密码，以及 <code>zkui</code> 监听的端口号</p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd zkui/</span><br><span class="line">vim config.cfg</span><br><span class="line">serverPort=9090  <span class="comment"># Web服务端口</span></span><br><span class="line">zkServer=10.1.1.127:2181,10.1.1.128:2181,10.1.1.129:2181  <span class="comment"># 一个或多个 Zookeeper 节点地址</span></span><br><span class="line">ldapAuth=false</span><br><span class="line">ldapDomain=mycompany,mydomain</span><br><span class="line">ldapUrl=ldap://&lt;ldap_host&gt;:&lt;ldap_port&gt;/dc=mycom,dc=com</span><br><span class="line">ldapRoleSet=&#123;<span class="string">"users"</span>: [&#123; <span class="string">"username"</span>:<span class="string">"domain\\user1"</span> , <span class="string">"role"</span>: <span class="string">"ADMIN"</span> &#125;]&#125;</span><br><span class="line">userSet = &#123;<span class="string">"users"</span>: [&#123; <span class="string">"username"</span>:<span class="string">"admin"</span> , <span class="string">"password"</span>:<span class="string">"manager"</span>,<span class="string">"role"</span>: <span class="string">"ADMIN"</span> &#125;,&#123; <span class="string">"username"</span>:<span class="string">"appconfig"</span> , <span class="string">"password"</span>:<span class="string">"appconfig"</span>,<span class="string">"role"</span>: <span class="string">"USER"</span> &#125;]&#125;</span><br></pre></td></tr></table></figure><h4 id="默认用户信息"><a href="#默认用户信息" class="headerlink" title="默认用户信息"></a>默认用户信息</h4><blockquote><p>用户名：Admin（Admin权限，支持CRUD操作）<br>密码：manager<br>用户名：appconfig（Readonly权限，支持读取操作）<br>密码：appconfig</p></blockquote><h4 id="LDAP-配置"><a href="#LDAP-配置" class="headerlink" title="LDAP 配置"></a><code>LDAP</code> 配置</h4><blockquote><p>如果你想使用 <code>LDAP</code> 身份验证，则提供 <code>LDAP url</code>。<br>这将优先于 <code>roleSet property</code> 文件认证。<br><code>ldapUrl=ldap://&lt;ldap_host&gt;:&lt;ldap_port&gt;/dc=mycom,dc=com</code><br>如果不提供此功能，则将使用默认 <code>roleSet</code> 文件认证。</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar zkui<span class="number">-2.0</span>-SNAPSHOT-jar-with-dependencies.jar &gt; /data/app/zkui/logs/stdout.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br><span class="line">netstat -tunlp | grep <span class="number">9090</span></span><br></pre></td></tr></table></figure><p>访问 <a href="http://x.x.x.x:9090" target="_blank" rel="noopener">http://x.x.x.x:9090</a></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.ilanni.com/?p=13646" target="_blank" rel="noopener">https://www.ilanni.com/?p=13646</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Zookeeper可视化界面zkui搭建与配置&quot;&gt;&lt;a href=&quot;#Zookeeper可视化界面zkui搭建与配置&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper可视化界面zkui搭建与配置&quot;&gt;&lt;/a&gt;Zookeeper可视化界面zkui搭建与配置&lt;/h2&gt;&lt;p&gt;一个允许在 &lt;code&gt;Zookeeper&lt;/code&gt; 上进行 &lt;code&gt;CRUD&lt;/code&gt; 操作的 &lt;code&gt;UI&lt;/code&gt; 控制面板。&lt;/p&gt;
    
    </summary>
    
      <category term="Zookeeper笔记" scheme="http://www.gmlyo.com/categories/Zookeeper%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Zookeeper可视化界面zkui搭建与配置" scheme="http://www.gmlyo.com/tags/Zookeeper%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2zkui%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ集群安装与配置</title>
    <link href="http://www.gmlyo.com//blog/2018/06/27/ActiveMQ%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.gmlyo.com//blog/2018/06/27/ActiveMQ集群安装与配置/</id>
    <published>2018-06-27T15:47:58.000Z</published>
    <updated>2018-06-27T15:57:10.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ActiveMQ集群安装与配置"><a href="#ActiveMQ集群安装与配置" class="headerlink" title="ActiveMQ集群安装与配置"></a>ActiveMQ集群安装与配置</h2><p><code>ActiveMQ</code> 集群是依赖于 <code>ZooKeeper</code> 集群而存在的<br>在此我们把 <code>ZooKeeper</code> 集群和 <code>ActiveMQ</code> 集群安装在同样三台机器上。</p><a id="more"></a><h3 id="ActiveMQ-集群原理"><a href="#ActiveMQ-集群原理" class="headerlink" title="ActiveMQ 集群原理"></a><code>ActiveMQ</code> 集群原理</h3><blockquote><p><code>ActiveMQ</code> 集群原理，使用 <code>ZooKeeper</code> 集群注册所有的 <code>ActiveMQ Broker</code>。只有其中的一个 <code>Broker</code> 可以对外提供服务，被视为 <code>master</code>。而其他的 <code>Broker</code> 处于待机状态，被视为 <code>slave</code>。而此时 <code>slave</code> 只是做数据的主从同步。</p></blockquote><blockquote><p>如果 <code>master</code> 因故障而不能提供服务，<code>ZooKeeper</code> 集群会从 <code>slave</code> 中选举出一个<code>Broker</code> 充当 <code>master</code>。<code>slave</code> 连接 <code>master</code> 并同步它们的存储状态，<code>slave</code> 不接受客户端连接。所有的存储操作都将被复制到连接至 <code>master</code> 的 <code>slave</code> 上。</p></blockquote><blockquote><p>如果 <code>master</code> 宕机了，得到了最新更新的 <code>slave</code> 会成为 <code>master</code>。而故障节点在恢复后会重新加入到集群中并连接 <code>master</code> 进入 <code>slave</code> 模式。</p></blockquote><blockquote><p>需要同步的消息操作都将等待存储状态被复制到其他节点的操作完成后才能完成。</p></blockquote><blockquote><p>所以，如果你配置了 <code>replicas=3</code>，那么假定大小是 <code>(3/2)+1=2</code>。<code>master</code> 将会存储并更新然后等待 <code>(2-1)=1</code> 个 <code>slave</code> 存储和更新完成，才汇报 <code>success</code>。</p></blockquote><blockquote><p>至于为什么是 <code>2-1</code>，熟悉 <code>ZooKeeper</code> 集群的应该知道，有一个 <code>node</code> 要作为观擦者存在。当一个新的 <code>master</code> 被选中，你需要至少保障一个假定 <code>node</code> 在线以能够找到拥有最新状态的 <code>node</code>。这个 <code>node</code> 可以成为新的 <code>Master</code>。因此，推荐运行至少 <code>3</code> 个 <code>replica nodes</code>，以防一个 <code>node</code> 失败了，服务中断。（原理与 <code>Zookeeper</code> 集群的高可用实现方式类似）。</p></blockquote><h3 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h3><blockquote><p>至少需要三台机器，这三台机器都已经安装 <code>ActiveMQ</code> 服务，<code>ZooKeeper</code> 集群也已经配置完毕。<br>这三台机器的 <code>IP</code> 分别为 <code>10.1.1.127</code>，<code>10.1.1.128</code>，<code>10.1.1.129</code></p></blockquote><h4 id="查看-ZooKeeper-集群的情况"><a href="#查看-ZooKeeper-集群的情况" class="headerlink" title="查看 ZooKeeper 集群的情况"></a>查看 <code>ZooKeeper</code> 集群的情况</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="meta">data</span>/app/zookeeper/<span class="keyword">bin/zkServer.sh </span>status</span><br></pre></td></tr></table></figure><blockquote><p>环境初始化完毕后，开始配置 <code>ActiveMQ</code> 集群。</p></blockquote><h4 id="配置-ActiveMQ-集群"><a href="#配置-ActiveMQ-集群" class="headerlink" title="配置 ActiveMQ 集群"></a>配置 <code>ActiveMQ</code> 集群</h4><blockquote><p><code>ActiveMQ</code> 集群的配置比较简单，我们只需要修改 <code>ActiveMQ</code> 的配置文件 <code>activemq.xml</code> 中部分内容即可。<br><code>ActiveMQ</code> 根目录下的 <code>conf/activemq.xml</code> 文件，原来默认内容如下：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">vim conf/activemq.xml +81</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">kahaDB</span> <span class="attr">directory</span>=<span class="string">”$</span></span></span><span class="template-variable">&#123;activemq.data&#125;</span><span class="xml"><span class="tag">/<span class="attr">kahadb</span>”/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>修改后的内容如下：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim conf/activemq.xml +81</span><br><span class="line">&lt;persistenceAdapter&gt;</span><br><span class="line">&lt;replicatedLevelDB</span><br><span class="line">directory=”$&#123;activemq.data&#125;/leveldb”</span><br><span class="line">replicas=”3″</span><br><span class="line">bind=”tcp://0.0.0.0:0″</span><br><span class="line">zkAddress=”10.1.1.127:2181,10.1.1.128:2181,10.1.1.129:2181″</span><br><span class="line">zkSessionTimeout=”4s”</span><br><span class="line">hostname=”10.1.1.127″</span><br><span class="line">sync=”local_disk”</span><br><span class="line">zkPath=”/activemq/leveldb-stores”</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/persistenceAdapter&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配置的含义解释如下：<br>directory：表示 <code>ActiveMQ</code> 集群消息持久化保存到服务器上的路径，注意该路径一定要先创建好。<br>replicas：表示 <code>ActiveMQ</code> 集群的节点个数。<br>bind：表示当这个节点成为 <code>master</code> 后，绑定的机器的地址与端口。此处 <code>0.0.0.0:0</code> 表示绑定到本机所有可用 <code>IP</code>，而端口是随机的。<br>zkAddress：表示 <code>ZooKeeper</code> 的 <code>IP</code> 和 <code>port</code>。如果是 <code>ZooKeeper</code> 集群的话，则用逗号隔开。<br>zkSessionTimeout：表示 <code>ActiveMQ</code> 与 <code>ZooKeeper</code> 集群连接的会话超时时间。<br>hostname：表示本机的 <code>IP</code> 地址。服务器根据不同的 <code>IP</code> 地址做出改变，其他配置相同。<br>sync：在消息被消费完成前，同步信息所存贮的策略。如果有多种策略用逗号隔开，<code>ActiveMQ</code> 会选择较强的策略。而如果有 <code>local_mem</code>，<code>local_disk</code> 这两种策略的话，那么 <code>ActiveMQ</code> 则优先选择 <code>local_disk</code> 策略，存储在本地硬盘。<br>zkPath：表示 <code>ActiveMQ</code> 在 <code>ZooKeeper</code> 集群上创建的 <code>znode</code> 节点的路径，也即是<code>ZooKeeper</code> 选举信息交换的存贮路径。<br>注意：这 <code>3</code> 个 <code>ActiveMQ</code> 节点中的 <code>brokerName</code> 配置必须相同，否则不能加入集群。</p></blockquote><h4 id="启动-ActiveMQ-集群"><a href="#启动-ActiveMQ-集群" class="headerlink" title="启动 ActiveMQ 集群"></a>启动 <code>ActiveMQ</code> 集群</h4><blockquote><p><code>ActiveMQ</code> 集群配置完毕后，我们现在来启动 <code>ActiveMQ</code> 集群。但是在正式启动 <code>ActiveMQ</code> 集群之前，一定要先启动 <code>ZooKeeper</code>集群。</p></blockquote><blockquote><p>要启动 <code>ActiveMQ</code> 集群，我们只需要启动这 <code>3</code> 台服务器的 <code>ActiveMQ</code> 服务即可。如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/<span class="meta">data</span>/app/activemq/<span class="keyword">bin/activemq </span>start</span><br><span class="line"><span class="symbol">ps</span> -ef <span class="title">| grep mq</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>ActiveMQ</code> 集群启动完毕，根据 <code>ZooKeeper</code> 的策略，会从这三台 <code>ActiveMQ</code> 服务器选一台作为 <code>master</code> 对外提供服务，其他两台作为 <code>slave</code> 等待运行，而 <code>slave</code> 只是做数据上的主从同步。</p></blockquote><blockquote><p>所以，<code>ActiveMQ</code> 集群后，访问<br><a href="http://10.1.1.127:8161/admin/" target="_blank" rel="noopener">http://10.1.1.127:8161/admin/</a><br><a href="http://10.1.1.128:8161/admin/" target="_blank" rel="noopener">http://10.1.1.128:8161/admin/</a><br><a href="http://10.1.1.129:8161/admin/" target="_blank" rel="noopener">http://10.1.1.129:8161/admin/</a><br>只会有一个成功</p></blockquote><blockquote><p>那么现在在 <code>ActiveMQ</code> 集群中，如何查看哪一台服务器是 <code>master</code> 节点呢？<br>我们可以通过查看这三台服务器哪一台服务器监听 <code>8161</code> 端口，来判断哪台服务器是 <code>master</code> 节点。</p></blockquote><blockquote><p>现在在切换到服务器上查看监听的端口，如下：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp <span class="string">| grep 8161</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>可以很明显的看出，目前只有 <code>10.1.1.127</code> 这台服务器监听 <code>8161</code> 端口的。那就说明目前10.1.1.127 是 <code>master</code> 节点。其他两个节点是 <code>slave</code> 节点，处于待机状态，没有监听 <code>8161</code> 端口。</p></blockquote><blockquote><p>现在我们再来看访问 <code>10.1.1.127</code> 服务器 <code>ActiveMQ</code> 管理控制台看看，如下：<br><a href="http://10.1.1.127:8161/admin" target="_blank" rel="noopener">http://10.1.1.127:8161/admin</a><br>到此说明 <code>ActiveMQ</code> 集群已经部署完毕。</p></blockquote><h4 id="验证-ActiveMQ-集群高可用"><a href="#验证-ActiveMQ-集群高可用" class="headerlink" title="验证 ActiveMQ 集群高可用"></a>验证 <code>ActiveMQ</code> 集群高可用</h4><blockquote><p>要验证 <code>ActiveMQ</code> 集群的高可用，我们只需要关闭能访问<br><a href="http://x.x.x.x:8161/admin/" target="_blank" rel="noopener">http://x.x.x.x:8161/admin/</a> 的 <code>ActiveMQ</code> 服务，然后访问其他两个。</p></blockquote><blockquote><p>如果其中有一个能访问，那就说明 <code>ActiveMQ+ZooKeeper</code> 集群高可用已经配置成功。<br>通过第四章节，我们知道目前 <code>master</code> 节点是 <code>10.1.1.127</code> 这台服务器。现在我们来关闭<code>10.1.1.127</code> 这台服务器的 <code>ActiveMQ</code> 服务，看看 <code>ActiveMQ</code> 集群，是否能正常访问。如下：</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep mq</span><br><span class="line">kill <span class="number">-9</span> <span class="number">3889</span></span><br></pre></td></tr></table></figure><blockquote><p>我们已经把 <code>10.1.1.127</code> 这台服务器的 <code>ActiveMQ</code> 服务已经关闭了。<br>现在我们再来看看目前哪台服务器是 <code>master</code> 节，也即是查看哪台服务器的 <code>8161</code> 端口对外提供服务器。如下：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp <span class="string">| rep 8161</span></span><br><span class="line">ps -ef <span class="string">| rep mq</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>可以很明显的看出目前 <code>10.1.1.128</code> 这台服务器是 <code>master</code> 节点。现在我再来通过管理控制台访问<code>10.1.1.128</code> 的 <code>8161</code> 端口看看。如下：<br><a href="http://10.1.1.128:8161/admin/" target="_blank" rel="noopener">http://10.1.1.128:8161/admin/</a></p></blockquote><blockquote><p>我们可以很明显的看出 <code>10.1.1.127</code> 这台服务器的 <code>ActiveMQ</code> 服务停止后，并没有影响 <code>ActiveMQ</code> 集群的正常运行。这也就说明了 <code>ActiveMQ</code> 集群是正常工作的。<br>到此，有关 <code>ActiveMQ</code> 集群的搭建与配置已经全部完毕。</p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.ilanni.com/?p=13569" target="_blank" rel="noopener">https://www.ilanni.com/?p=13569</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ActiveMQ集群安装与配置&quot;&gt;&lt;a href=&quot;#ActiveMQ集群安装与配置&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ集群安装与配置&quot;&gt;&lt;/a&gt;ActiveMQ集群安装与配置&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ActiveMQ&lt;/code&gt; 集群是依赖于 &lt;code&gt;ZooKeeper&lt;/code&gt; 集群而存在的&lt;br&gt;在此我们把 &lt;code&gt;ZooKeeper&lt;/code&gt; 集群和 &lt;code&gt;ActiveMQ&lt;/code&gt; 集群安装在同样三台机器上。&lt;/p&gt;
    
    </summary>
    
      <category term="ActiveMQ笔记" scheme="http://www.gmlyo.com/categories/ActiveMQ%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ActiveMQ集群安装与配置" scheme="http://www.gmlyo.com/tags/ActiveMQ%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ安装与配置</title>
    <link href="http://www.gmlyo.com//blog/2018/06/27/ActiveMQ%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.gmlyo.com//blog/2018/06/27/ActiveMQ安装与配置/</id>
    <published>2018-06-27T14:37:43.000Z</published>
    <updated>2018-06-27T15:08:57.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ActiveMQ安装与配置"><a href="#ActiveMQ安装与配置" class="headerlink" title="ActiveMQ安装与配置"></a>ActiveMQ安装与配置</h2><a id="more"></a><p>操作系统  <code>CentOS7</code><br>建议 <code>ActiveMQ</code> 集群 和 <code>Zookeeper</code> 集群部署在同一台服务器上，否则随着时间的增加，<code>ActiveMQ</code> 集群容易出现假死的情况。</p><h3 id="JMS-支持的消息传递模型"><a href="#JMS-支持的消息传递模型" class="headerlink" title="JMS 支持的消息传递模型"></a>JMS 支持的消息传递模型</h3><blockquote><p>JMS 支持两种消息传递模型：<code>队列（Queue）</code>和 <code>主题（Topic）</code>。</p></blockquote><h3 id="点对点传递模型"><a href="#点对点传递模型" class="headerlink" title="点对点传递模型"></a>点对点传递模型</h3><blockquote><ol><li>点对点（<code>point-to-point</code>，简称 <code>PTP</code>）<code>Queue</code> 消息传递模型。<br> 通过该消息传递模型，一个应用程序（即消息生产者）可以向另外一个应用程序（即消息消费者）发送消息。</li><li>在此传递模型中，消息目的地类型是队列（即 <code>Destination</code> 接口实现类实例由 <code>Session</code> 接口实现类实例通过调用其 <code>createQueue</code> 方法并传入队列名称而创建）。</li><li>消息首先被传送至消息服务器端特定的队列中，然后从此对列中将消息传送至对此队列进行监听的某个消费者。同一个队列可以关联多个消息生产者和消息消费者，但一条消息仅能传递给一个消息消费者。</li><li>如果多个消息消费者正在监听队列上的消息，JMS消息服务器将根据“先来者优先”的原则确定由哪个消息消费者接收下一条消息。</li><li>如果没有消息消费者在监听队列，消息将保留在队列中，直至消息消费者连接到队列为止。这种消息传递模型是传统意义上的懒模型或轮询模型。</li><li>在此模型中，消息不是自动推动给消息消费者的，而是要由消息消费者从队列中请求获得。</li></ol></blockquote><h3 id="发布-订阅传递模型"><a href="#发布-订阅传递模型" class="headerlink" title="发布/订阅传递模型"></a>发布/订阅传递模型</h3><blockquote><ol><li>发布/订阅（<code>publish/subscribe</code>，简称 <code>pub/sub</code>）<code>Topic</code> 消息传递模型。</li><li>通过该消息传递模型，应用程序能够将一条消息发送给多个消息消费者。在此传送模型中，消息目的地类型是主题（即 <code>Destination</code> 接口实现类实例由 <code>Session</code> 接口实现类实例通过调用其 <code>createTopic</code> 方法并传入主题名称而创建）。</li><li>消息首先由消息生产者发布至消息服务器中特定的主题中，然后由消息服务器将消息传送至所有已订阅此主题的消费者。</li><li>主题目标也支持长期订阅。长期订阅表示消费者已注册了主题目标，但在消息到达目标时该消费者可以处于非活动状态。</li><li>当消费者再次处于活动状态时，将会接收该消息。如果消费者均没有注册某个主题目标，该主题只保留注册了长期订阅的非活动消费者的消息。</li><li>与 <code>PTP</code> 消息传递模型不同，<code>pub/sub</code> 消息传递模型允许多个主题订阅者接收同一条消息。<code>JMS</code> 一直保留消息，直至所有主题订阅者都接收到消息为止。</li><li><code>pub/sub</code> 消息传递模型基本上是一个推模型。在该模型中，消息会自动广播，消息消费者无须通过主动请求或轮询主题的方法来获得新的消息。</li></ol></blockquote><h3 id="具体区别对比如下"><a href="#具体区别对比如下" class="headerlink" title="具体区别对比如下"></a>具体区别对比如下</h3><table><thead><tr><th>类型</th><th>Topic</th><th>Queue</th></tr></thead><tbody><tr><td>概要</td><td><code>Publish Subscribe messaging</code> 发布订阅消息</td><td><code>Point-to-Point</code> 点对点</td></tr><tr><td>有无状态</td><td><code>Topic</code> 数据默认不落地，是无状态的。</td><td><code>Queue</code> 数据默认会在 <code>mq</code> 服务器上以文件形式保存，比如<code>Active MQ</code> 一般保存在 <code>$AMQ_HOME/data/kr-store/data</code> 下面。也可以配置成 <code>DB</code> 存储。</td></tr><tr><td>完整性保障</td><td>并不保证 <code>publisher</code> 发布的每条数据，<code>Subscriber</code> 都能接受到。</td><td><code>Queue</code> 保证每条数据都能被 <code>receiver</code> 接收。</td></tr><tr><td>消息是否会丢失</td><td>一般来说 <code>publisher</code> 发布消息到某一个 <code>topic</code> 时，只有正在监听该 <code>topic</code> 地址的 <code>sub</code> 能够接收到消息；如果没有 <code>sub</code> 在监听，该 <code>topic</code> 就丢失了。</td><td><code>Sender</code> 发送消息到目标 <code>Queue</code>，<code>receiver</code> 可以异步接收这个 <code>Queue</code> 上的消息。<code>Queue</code> 上的消息如果暂时没有 <code>receiver</code> 来取，也不会丢失。</td></tr><tr><td>消息发布接收策略</td><td>一对多的消息发布接收策略，监听同一个 <code>topic</code> 地址的多个 <code>sub</code> 都能收到 <code>publisher</code> 发送的消息。<code>Sub</code> 接收完通知 <code>mq</code> 服务器。</td><td>一对一的消息发布接收策略，一个 <code>sender</code> 发送的消息，只能有一个 <code>receiver</code> 接收。<code>receiver</code> 接收完后，通知 <code>mq</code> 服务器已接收，<code>mq</code> 服务器对 <code>queue</code> 里的消息采取删除或其他操作。</td></tr></tbody></table><h3 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h3><p>在此我们安装的是 <code>ActiveMQ 5.14.5</code>，<code>ActiveMQ 5.14.5</code> 使用的是 <code>jdk1.7</code>。<br><code>ActiveMQ 5.15.0</code> 使用的是 <code>jdk1.8</code>。</p><h4 id="安装-jdk1-7"><a href="#安装-jdk1-7" class="headerlink" title="安装 jdk1.7"></a>安装 <code>jdk1.7</code></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/data/</span>tools/</span><br><span class="line">wget -c <span class="string">http:</span><span class="comment">//mirrors.linuxeye.com/jdk/jdk-7u80-linux-x64.tar.gz</span></span><br><span class="line">tar -zxvf jdk<span class="number">-7</span>u80-linux-x64.tar.gz -C <span class="regexp">/data/</span></span><br><span class="line">chown -R <span class="string">root:</span>root  <span class="regexp">/data/</span>jdk1<span class="number">.7</span><span class="number">.0</span>_80</span><br></pre></td></tr></table></figure><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/data/jdk1.7.0_80</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin</span><br><span class="line">source /etc/profile</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="关闭-防火墙-和-selinux，同步服务器时间"><a href="#关闭-防火墙-和-selinux，同步服务器时间" class="headerlink" title="关闭 防火墙 和 selinux，同步服务器时间"></a>关闭 <code>防火墙</code> 和 <code>selinux</code>，同步服务器时间</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ntpdate -u cn.ntp.org.cn</span><br><span class="line">sed -i ‘/SELINUX/s/enforcing/disabled/’ /etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line">systemctl <span class="builtin-name">disable</span> firewalld.service</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure><h3 id="安装-ActiveMQ"><a href="#安装-ActiveMQ" class="headerlink" title="安装 ActiveMQ"></a>安装 ActiveMQ</h3><blockquote><p><code>ActiveMQ</code> 官网<br><a href="http://activemq.apache.org/" target="_blank" rel="noopener">http://activemq.apache.org/</a></p></blockquote><h4 id="下载-ActiveMQ"><a href="#下载-ActiveMQ" class="headerlink" title="下载 ActiveMQ"></a>下载 ActiveMQ</h4><p><a href="http://activemq.apache.org/download.html" target="_blank" rel="noopener">http://activemq.apache.org/download.html</a><br><a href="http://archive.apache.org/dist/activemq/" target="_blank" rel="noopener">http://archive.apache.org/dist/activemq/</a></p><h4 id="下载-ActiveMQ5-14-5"><a href="#下载-ActiveMQ5-14-5" class="headerlink" title="下载 ActiveMQ5.14.5"></a>下载 ActiveMQ5.14.5</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">mkdir</span> -pv /<span class="meta">data</span>/app/activemq</span><br><span class="line"><span class="symbol">cd</span> /<span class="meta">data</span>/tools/</span><br><span class="line"><span class="symbol">wget</span> -c http://mirrors.hust.edu.cn/apache/activemq/<span class="number">5</span>.<span class="number">14</span>.<span class="number">5</span>/apache-activemq-<span class="number">5</span>.<span class="number">14</span>.<span class="number">5</span>-<span class="keyword">bin.tar.gz</span></span><br><span class="line"><span class="keyword">tar </span>-zxvf apache-activemq-<span class="number">5</span>.<span class="number">14</span>.<span class="number">5</span>-<span class="keyword">bin.tar.gz </span>-C /<span class="meta">data</span>/app/activemq –<span class="keyword">strip-components </span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="查看-ActiveMQ-目录结构"><a href="#查看-ActiveMQ-目录结构" class="headerlink" title="查看 ActiveMQ 目录结构"></a>查看 ActiveMQ 目录结构</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ll -h</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>文件名/目录名</th><th>详解</th></tr></thead><tbody><tr><td>activemq-all-5.14.5.jar</td><td><code>ActiveMQ</code> 所有 <code>jar</code></td></tr><tr><td>bin</td><td><code>ActiveMQ</code> 启动命令的二进制执行文件及一些命令脚本</td></tr><tr><td>conf</td><td><code>ActiveMQ</code> 配置目录，包含最基本的 <code>ActiveMQ</code> 配置文件</td></tr><tr><td>data</td><td><code>ActiveMQ</code> 数据目录，默认为空。包含 <code>ActiveMQ</code> 的进程文件、数据文件、日志文件。该目录也是 <code>ActiveMQ</code> 消息持久化的目录</td></tr><tr><td>docs</td><td>用户使用帮助相关文件</td></tr><tr><td>examples</td><td>操作 <code>ActiveMQ</code> 相关实例</td></tr><tr><td>lib</td><td><code>ActiveMQ</code> 需要的类库</td></tr><tr><td>webapps</td><td><code>ActiveMQ</code> 控制台应用目录</td></tr><tr><td>webapps-demo</td><td><code>ActiveMQ</code> 使用实例目录</td></tr><tr><td>LICENSE</td><td><code>ActiveMQ</code> 所有包使用的 <code>Apache</code> 开源消息协议</td></tr><tr><td>NOTICE</td><td><code>ActiveMQ</code> 版权信息</td></tr><tr><td>README</td><td>用户使用引导文件，包括一些文档及 <code>URL</code></td></tr></tbody></table><h4 id="启动-ActiveMQ"><a href="#启动-ActiveMQ" class="headerlink" title="启动 ActiveMQ"></a>启动 <code>ActiveMQ</code></h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/<span class="class"><span class="keyword">data</span>/app/activemq/bin/activemq start</span></span><br><span class="line"><span class="title">tail</span> -f /<span class="class"><span class="keyword">data</span>/app/activemq/<span class="keyword">data</span>/activemq.log</span></span><br></pre></td></tr></table></figure><h4 id="ActiveMQ-启动方式"><a href="#ActiveMQ-启动方式" class="headerlink" title="ActiveMQ 启动方式"></a><code>ActiveMQ</code> 启动方式</h4><blockquote><p>普通启动<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="meta">data</span>/app/activemq/<span class="keyword">bin/activemq </span>start</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>后台启动并指定日志文件<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="regexp">/data/</span>app<span class="regexp">/activemq/</span>bin<span class="regexp">/activemq start &gt; /</span>data<span class="regexp">/app/</span>activemq<span class="regexp">/logs/</span>smlog <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="ActiveMQ-管理控制台"><a href="#ActiveMQ-管理控制台" class="headerlink" title="ActiveMQ 管理控制台"></a><code>ActiveMQ</code> 管理控制台</h3><blockquote><p><code>ActiveMQ</code> 默认的管理后台端口是 <code>8161</code>，默认管理用户名和密码均是 <code>admin</code>。<br><code>ActiveMQ</code> 默认的管理后台端口，可以在 <code>ActiveMQ</code> 的配置文件 <code>jetty.xml</code> 中查看到<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /data/app/activemq/conf/jetty.xml +110</span><br><span class="line">&lt;property <span class="attribute">name</span>=”port” <span class="attribute">value</span>=”8161″/&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>ActiveMQ</code> 默认管理用户名和密码均是 <code>admin</code>，如果要修改默认用户名和密码的话，可以通过修改 <code>jetty-realm.properties</code> 文件来达到目的<br><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /data/app/activemq/conf/jetty-realm.properties</span><br><span class="line"><span class="literal">admin</span>: password@<span class="number">123</span>, <span class="literal">admin</span></span><br><span class="line"><span class="literal">user</span>: <span class="literal">user</span>@<span class="number">123</span>, <span class="literal">user</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注意：<code>ActiveMQ</code> 用户名和密码的格式是<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">username:</span> password, rolename</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="登陆管理控制台"><a href="#登陆管理控制台" class="headerlink" title="登陆管理控制台"></a>登陆管理控制台</h4><p><a href="http://x.x.x.x:8161/admin" target="_blank" rel="noopener">http://x.x.x.x:8161/admin</a></p><h4 id="管理控制台介绍"><a href="#管理控制台介绍" class="headerlink" title="管理控制台介绍"></a>管理控制台介绍</h4><blockquote><p>在 <code>ActiveMQ</code> 的管理控制台，关注比较多的是 <code>Queues队列</code> 和 <code>Topics主题</code>。</p></blockquote><p><code>Queues队列</code> 选项</p><table><thead><tr><th>字段</th><th>详解</th></tr></thead><tbody><tr><td>Number Of Pending Messages</td><td>表示还有多少条消息没有被消费，实际上是表示消息的积压程度。</td></tr><tr><td>Number Of Consumers</td><td>表示在该队列上还有多少消费者在等待接受消息。其实就是消费者的数量。</td></tr><tr><td>Messages Enqueued</td><td>表示生产了多少条消息。</td></tr><tr><td>Messages Dequeued</td><td>表示消费了多少条消息。</td></tr></tbody></table><p><code>Topics主题</code> 选项</p><table><thead><tr><th>字段</th><th>详解</th></tr></thead><tbody><tr><td>Number Of Consumers</td><td>表示在该队列上还有多少消费者在等待接受消息。</td></tr><tr><td>Messages Enqueued</td><td>表示生产了多少条消息。</td></tr><tr><td>Messages Dequeued</td><td>表示消费了多少条消息。</td></tr></tbody></table><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.ilanni.com/?p=13543" target="_blank" rel="noopener">https://www.ilanni.com/?p=13543</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ActiveMQ安装与配置&quot;&gt;&lt;a href=&quot;#ActiveMQ安装与配置&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ安装与配置&quot;&gt;&lt;/a&gt;ActiveMQ安装与配置&lt;/h2&gt;
    
    </summary>
    
      <category term="ActiveMQ笔记" scheme="http://www.gmlyo.com/categories/ActiveMQ%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ActiveMQ安装与配置" scheme="http://www.gmlyo.com/tags/ActiveMQ%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>os模块</title>
    <link href="http://www.gmlyo.com//blog/2018/06/21/os%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.gmlyo.com//blog/2018/06/21/os模块/</id>
    <published>2018-06-20T22:54:22.000Z</published>
    <updated>2018-06-21T00:44:10.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="os-模块"><a href="#os-模块" class="headerlink" title="os 模块"></a>os 模块</h2><blockquote><p><code>os</code> 模块是与操作系统交互的一个接口</p></blockquote><a id="more"></a><table><thead><tr><th>模块方法</th><th>注释</th></tr></thead><tbody><tr><td><code>os.getcwd()</code></td><td>获取当前工作目录，即当前 <code>python</code> 脚本工作的目录路径</td></tr><tr><td><code>os.chdir(&quot;dirname&quot;)</code></td><td>改变当前脚本工作目录；相当于 <code>shell</code> 下 <code>cd</code></td></tr><tr><td><code>os.curdir</code></td><td>返回当前目录: (<code>&#39;.&#39;</code>)</td></tr><tr><td><code>os.pardir</code></td><td>获取当前目录的父目录字符串名：(<code>&#39;..&#39;</code>)</td></tr><tr><td><code>os.makedirs(&#39;dirname1/dirname2&#39;)</code></td><td>可生成多层递归目录</td></tr><tr><td><code>os.removedirs(&#39;dirname1&#39;)</code></td><td>若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</td></tr><tr><td><code>os.mkdir(&#39;dirname&#39;)</code></td><td>生成单级目录；相当于 <code>shell</code> 中 <code>mkdir dirname</code></td></tr><tr><td><code>os.rmdir(&#39;dirname&#39;)</code></td><td>删除单级空目录，若目录不为空则无法删除，报错；相当于 <code>shell</code> 中 <code>rmdir dirname</code></td></tr><tr><td><code>os.listdir(&#39;dirname&#39;)</code></td><td>列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</td></tr><tr><td><code>os.remove()</code></td><td>删除一个文件</td></tr><tr><td><code>os.rename(&quot;oldname&quot;,&quot;newname&quot;)</code></td><td>重命名文件/目录</td></tr><tr><td><code>os.stat(&#39;path/filename&#39;)</code></td><td>获取文件/目录信息</td></tr><tr><td><code>os.sep</code></td><td>输出操作系统特定的路径分隔符，Windows下为<code>&quot;\\&quot;</code>，Linux下为<code>&quot;/&quot;</code></td></tr><tr><td><code>os.linesep</code></td><td>输出当前平台使用的行终止符，Windows下为<code>&quot;\t\n&quot;</code>，Linux下为<code>&quot;\n&quot;</code></td></tr><tr><td><code>os.pathsep</code></td><td>输出用于分割文件路径的字符串，Windows下为<code>;</code>，Linux下为<code>:</code></td></tr><tr><td><code>os.name</code></td><td>输出字符串指示当前使用平台。Windows-&gt;<code>&#39;nt&#39;</code>，Linux-&gt;<code>&#39;posix&#39;</code></td></tr><tr><td><code>os.system(&quot;bash command&quot;)</code></td><td>运行<code>shell</code>命令，直接显示</td></tr><tr><td><code>os.environ</code></td><td>获取系统环境变量</td></tr><tr><td><code>os.path.abspath(path)</code></td><td>返回 <code>path</code> 规范化的绝对路径</td></tr><tr><td><code>os.path.split(path)</code></td><td>将 <code>path</code> 分割成目录和文件名二元组返回</td></tr><tr><td><code>os.path.dirname(path)</code></td><td>返回 <code>path</code> 的目录。其实就是 <code>os.path.split(path)</code> 的第一个元素</td></tr><tr><td><code>os.path.basename(path)</code></td><td>返回 <code>path</code> 最后的文件名。如何 <code>path</code> 以 <code>/</code> 或 <code>\</code> 结尾，那么就会返回空值。即 <code>os.path.split(path)</code> 的第二个元素</td></tr><tr><td><code>os.path.exists(path)</code></td><td>如果 <code>path</code> 存在，返回 <code>True</code>；如果 <code>path</code> 不存在，返回 <code>False</code></td></tr><tr><td><code>os.path.isabs(path)</code></td><td>如果 <code>path</code> 是绝对路径，返回 <code>True</code></td></tr><tr><td><code>os.path.isfile(path)</code></td><td>如果 <code>path</code> 是一个存在的文件，返回 <code>True</code>。否则返回 <code>False</code></td></tr><tr><td><code>os.path.isdir(path)</code></td><td>如果 <code>path</code> 是一个存在的目录，则返回 <code>True</code>。否则返回 <code>False</code></td></tr><tr><td><code>os.path.join(path1[, path2[, ...]])</code></td><td>将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</td></tr><tr><td><code>os.path.getatime(path)</code></td><td>返回 <code>path</code> 所指向的文件或者目录的最后存取时间</td></tr><tr><td><code>os.path.getmtime(path)</code></td><td>返回 <code>path</code> 所指向的文件或者目录的最后修改时间</td></tr><tr><td><code>os.path.getsize(path)</code></td><td>返回 <code>path</code> 的大小</td></tr></tbody></table><h3 id="列出指定目录下的所有文件和子目录"><a href="#列出指定目录下的所有文件和子目录" class="headerlink" title="列出指定目录下的所有文件和子目录"></a>列出指定目录下的所有文件和子目录</h3><blockquote><p>包括隐藏文件，并以列表方式打印</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.listdir(<span class="string">r'.'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">'01 时间模块.py'</span>, <span class="string">'02 random模块.py'</span>, <span class="string">'03 os模块.py'</span>, <span class="string">'今日内容.txt'</span>]</span><br></pre></td></tr></table></figure><h3 id="获取-文件-目录-信息"><a href="#获取-文件-目录-信息" class="headerlink" title="获取 文件/目录 信息"></a>获取 <code>文件/目录</code> 信息</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">print<span class="params">(os.stat('今日内容.txt')</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">os.stat_result<span class="params">(<span class="attr">st_mode</span>=33206, <span class="attr">st_ino</span>=4503599627409980, <span class="attr">st_dev</span>=239211959, <span class="attr">st_nlink</span>=1, <span class="attr">st_uid</span>=0, <span class="attr">st_gid</span>=0, <span class="attr">st_size</span>=280, <span class="attr">st_atime</span>=1526694304, <span class="attr">st_mtime</span>=1526694304, <span class="attr">st_ctime</span>=1526694102)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件大小，以 bytes 为单位</span></span><br><span class="line">print<span class="params">(os.stat('今日内容.txt')</span><span class="string">.st_size</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">280</span><br></pre></td></tr></table></figure><h3 id="获取-文件-大小信息"><a href="#获取-文件-大小信息" class="headerlink" title="获取 文件 大小信息"></a>获取 <code>文件</code> 大小信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(os.path.getsize(<span class="string">r'E:\PycharmProjects\SH_s1\day07\今日内容.txt'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">280</span></span><br></pre></td></tr></table></figure><h3 id="os-system-quot-bash-command-quot-方法"><a href="#os-system-quot-bash-command-quot-方法" class="headerlink" title="os.system(&quot;bash command&quot;) 方法"></a><code>os.system(&quot;bash command&quot;)</code> 方法</h3><blockquote><p>运行<code>shell</code>命令，直接显示</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.<span class="keyword">system</span>(<span class="string">'tasklist'</span>)  # 输出 Windows 下当前所有进程列表</span><br><span class="line"></span><br><span class="line"># os.<span class="keyword">system</span>() 只是单纯的执行命令，并不能把命令执行后的结果做进一步的处理</span><br><span class="line">res = os.<span class="keyword">system</span>(<span class="string">'tasklist'</span>)</span><br><span class="line">print(<span class="string">'res----&gt;'</span>, res)  # res变量只是命令的执行成功与否的执行状态</span><br><span class="line"># 输出结果</span><br><span class="line">res----&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="os-environ-方法"><a href="#os-environ-方法" class="headerlink" title="os.environ 方法"></a><code>os.environ</code> 方法</h3><blockquote><p>获取系统环境变量</p></blockquote><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">全局的</span><br><span class="line">用于在程序任何地方都需要用到它的结果的时候</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">os</span>.environ[<span class="string">'login'</span>] = <span class="string">'yes'</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.environ[<span class="string">'login'</span>])</span><br><span class="line"># 输出结果</span><br><span class="line">yes</span><br></pre></td></tr></table></figure><h3 id="os-path-split-path-方法"><a href="#os-path-split-path-方法" class="headerlink" title="os.path.split(path) 方法"></a><code>os.path.split(path)</code> 方法</h3><blockquote><p>将 <code>path</code> 分割成 <code>目录</code> 和 <code>文件名</code> 二元组返回</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.split(<span class="string">'/a/b/c/d.txt'</span>))</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">(<span class="string">'/a/b/c'</span>, <span class="string">'d.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.split(<span class="string">'/a/b/c/d.txt'</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.split(<span class="string">'/a/b/c/d.txt'</span>)[<span class="number">1</span>])</span><br><span class="line"># 输出结果</span><br><span class="line">/a/b/c</span><br><span class="line">d.txt</span><br></pre></td></tr></table></figure><h3 id="os-path-dirname-path-方法"><a href="#os-path-dirname-path-方法" class="headerlink" title="os.path.dirname(path) 方法"></a><code>os.path.dirname(path)</code> 方法</h3><blockquote><p>返回 <code>path</code> 的 <code>目录</code><br>其实就是 <code>os.path.split(path)</code> 的第一个元素</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="string">'a/b/c/d.txt'</span>))</span><br><span class="line"># 输出结果</span><br><span class="line">a/b/c</span><br></pre></td></tr></table></figure><h3 id="os-path-basename-path-方法"><a href="#os-path-basename-path-方法" class="headerlink" title="os.path.basename(path) 方法"></a><code>os.path.basename(path)</code> 方法</h3><blockquote><p>返回 <code>path</code> 最后的 <code>文件名</code><br>如何 <code>path</code> 以 <code>/</code> 或 <code>\</code> 结尾，那么就会返回空值<br>即 <code>os.path.split(path)</code> 的第二个元素</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.basename(<span class="string">'a/b/c/d.txt'</span>))</span><br><span class="line"># 输出结果</span><br><span class="line">d.txt</span><br></pre></td></tr></table></figure><h3 id="os-path-join-path1-path2-…-方法"><a href="#os-path-join-path1-path2-…-方法" class="headerlink" title="os.path.join(path1[, path2[, …]]) 方法"></a>os.path.join(path1[, path2[, …]]) 方法</h3><blockquote><p>用于拼接路径<br>将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</p></blockquote><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.path.join(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d.txt'</span>))</span><br><span class="line"># 输出结果</span><br><span class="line">a\b\c\d.txt</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(os.path.join(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'D:\\'</span>, <span class="string">'c'</span>, <span class="string">'d.txt'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">D:<span class="string">\c\d.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.join(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'/'</span>, <span class="string">'d.txt'</span>))</span><br><span class="line"># 输出结果</span><br><span class="line">/d.txt</span><br></pre></td></tr></table></figure><h3 id="os-path-normcase-path-方法"><a href="#os-path-normcase-path-方法" class="headerlink" title="os.path.normcase(path) 方法"></a><code>os.path.normcase(path)</code> 方法</h3><blockquote><p>只用于 <code>Windows</code> 系统，规范 Windows 目录<br>在 <code>Windows</code> 平台上会将路径中所有字符转换为小写，将路径中的左斜杠转换为 <code>Windows</code> 中的右斜杠<br>在 <code>Linux</code> 和 <code>Mac</code> 平台上，该函数会原样返回 <code>path</code></p></blockquote><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(os.path.normcase(<span class="string">'c:/windOws\\system32\\'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">c:<span class="string">\windows\system32\</span></span><br></pre></td></tr></table></figure><h3 id="os-path-normpath-path-方法"><a href="#os-path-normpath-path-方法" class="headerlink" title="os.path.normpath(path) 方法"></a><code>os.path.normpath(path)</code> 方法</h3><blockquote><p>用于规范路径<br>如 <code>(..)</code> 点点 <code>(/)</code> 斜杠</p></blockquote><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(os.path.normpath('c:<span class="symbol">\\</span>windOws/a/b/../system32<span class="symbol">\\</span>'))</span><br><span class="line"># 输出结果</span><br><span class="line">c:<span class="symbol">\w</span>indOws<span class="symbol">\a</span><span class="symbol">\s</span>ystem32</span><br><span class="line"></span><br><span class="line">print(os.path.normpath('c://windows<span class="symbol">\\</span>System32<span class="symbol">\\</span>../Temp/'))</span><br><span class="line"># 输出结果</span><br><span class="line">c:<span class="symbol">\w</span>indows<span class="symbol">\T</span>emp</span><br><span class="line"></span><br><span class="line">a = '/Users/jieli/test1/<span class="symbol">\\</span><span class="symbol">\a</span>1/<span class="symbol">\\</span><span class="symbol">\\</span>aa.py/../..'</span><br><span class="line">print(os.path.normpath(a))</span><br><span class="line"># 输出结果</span><br><span class="line">/Users/jieli/test1</span><br></pre></td></tr></table></figure><h3 id="os-路径处理"><a href="#os-路径处理" class="headerlink" title="os 路径处理"></a><code>os</code> 路径处理</h3><blockquote><p>常用路径处理方法</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os<span class="selector-class">.path</span><span class="selector-class">.dirname</span>(os<span class="selector-class">.path</span><span class="selector-class">.dirname</span>(os<span class="selector-class">.path</span><span class="selector-class">.abspath</span>(__file__)))</span><br><span class="line"></span><br><span class="line">os<span class="selector-class">.path</span><span class="selector-class">.dirname</span>(os<span class="selector-class">.path</span><span class="selector-class">.dirname</span>(os<span class="selector-class">.path</span><span class="selector-class">.dirname</span>(os<span class="selector-class">.path</span><span class="selector-class">.abspath</span>(__file__))))</span><br></pre></td></tr></table></figure><blockquote><p><code>OpenStack</code> 中获取路径方式</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">OpenStack 获取路径方式</span><br><span class="line">res = <span class="built_in">os</span>.<span class="built_in">path</span>.join(</span><br><span class="line">    <span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__),</span><br><span class="line">    <span class="string">'..'</span>,</span><br><span class="line">    <span class="string">'..'</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.normpath(res))</span><br><span class="line"># 输出结果</span><br><span class="line">E:\PycharmProjects\SH_s1\day07\<span class="number">03</span> <span class="built_in">os</span>模块.py\..\..</span><br><span class="line">E:\PycharmProjects\SH_s1</span><br><span class="line"></span><br><span class="line"># 合并一下</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.normpath(</span><br><span class="line">    <span class="built_in">os</span>.<span class="built_in">path</span>.join(</span><br><span class="line">        <span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__),</span><br><span class="line">        <span class="string">'..'</span>,</span><br><span class="line">        <span class="string">'..'</span></span><br><span class="line">    )</span><br><span class="line">))</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"></span><br><span class="line">import <span class="built_in">os</span>,sys</span><br><span class="line">possible_topdir = <span class="built_in">os</span>.<span class="built_in">path</span>.normpath(<span class="built_in">os</span>.<span class="built_in">path</span>.join(</span><br><span class="line">    <span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__),</span><br><span class="line">    <span class="built_in">os</span>.pardir,    # 上一级</span><br><span class="line">    <span class="built_in">os</span>.pardir,</span><br><span class="line">    <span class="built_in">os</span>.pardir</span><br><span class="line">))</span><br><span class="line">sys.<span class="built_in">path</span>.<span class="built_in">insert</span>(<span class="number">0</span>, possible_topdir)</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.cnblogs.com/linhaifeng/articles/6384466.html#_label3" target="_blank" rel="noopener">http://www.cnblogs.com/linhaifeng/articles/6384466.html#_label3</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;os-模块&quot;&gt;&lt;a href=&quot;#os-模块&quot; class=&quot;headerlink&quot; title=&quot;os 模块&quot;&gt;&lt;/a&gt;os 模块&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;os&lt;/code&gt; 模块是与操作系统交互的一个接口&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="os模块" scheme="http://www.gmlyo.com/tags/os%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>调整Linux的网络栈Buffer_Size来提升网络性能</title>
    <link href="http://www.gmlyo.com//blog/2018/06/20/%E8%B0%83%E6%95%B4Linux%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A0%88Buffer_Size%E6%9D%A5%E6%8F%90%E5%8D%87%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD/"/>
    <id>http://www.gmlyo.com//blog/2018/06/20/调整Linux的网络栈Buffer_Size来提升网络性能/</id>
    <published>2018-06-20T14:53:53.000Z</published>
    <updated>2018-06-20T14:54:06.725Z</updated>
    
    <content type="html"><![CDATA[<p>调整 <code>Linux</code> 的网络栈 <code>Buffer Size</code> 来提升网络性能</p><blockquote><p>有两台位于不同数据中心的服务器，都用来处理很多并行的大文件传输。但是处理大文件，网络性能非常差。并且涉及到一个大文件，会导致性能降级。怎样通过调整 <code>Linux</code>下面的 <code>TCP</code> 来解决这个问题？</p></blockquote><a id="more"></a><blockquote><p>默认，<code>Linux</code> 的 <code>stack</code> 是没有为广域网之间的大文件高速传输而配置的，这样做是为了节约内存资源。为了使连接的系统服务之间能有更加高速的网络处理更多的网络包，你可以很容易的通过增加网络 <code>buffer size</code> 来调整 <code>Linux</code> 网络 <code>stack</code>。</p></blockquote><blockquote><p>默认的 <code>Linux buffer size</code> 的最大值是非常小的，<code>tcp</code> 的内存是基于系统的内存自动计算的，你能通过键入以下命令找到实际的值</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/proc/</span>sys<span class="regexp">/net/i</span>pv4<span class="regexp">/tcp_mem</span></span><br></pre></td></tr></table></figure><blockquote><p>默认的和最大的接收数据包内存大小</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>core/rmem_default</span><br><span class="line">cat <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>core/rmem_max</span><br></pre></td></tr></table></figure><blockquote><p>默认的和最大的发送数据包内存的大小</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>core/wmem_default</span><br><span class="line">cat <span class="meta-keyword">/proc/</span>sys<span class="meta-keyword">/net/</span>core/wmem_max</span><br></pre></td></tr></table></figure><blockquote><p>最大的内存 buffers 的选项</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/proc/</span>sys<span class="regexp">/net/</span>core<span class="regexp">/optmem_max</span></span><br></pre></td></tr></table></figure><h3 id="调整值"><a href="#调整值" class="headerlink" title="调整值"></a>调整值</h3><blockquote><p>为所有的协议队列设置操作系统层面的最大的发送 <code>buffer size(wmem)</code> 和 接收 <code>buffer size (rmem)</code>为 12MB。换句话说，设置内存数量，分配给每一个为了传送文件而打开或者是创建的 <code>tcp socket</code>。</p></blockquote><blockquote><p>警告！在大多数的 Linux 中 <code>rmem_max</code> 和 <code>wmem_max</code> 被分配的值为 128k，在一个低延迟的网络环境中，或者是 apps 比如 DNS、Web Server，这或许是足够的。尽管如此，如果延迟太大，默认的值可能就太小了，所以请记录以下在你的服务器上用来提高内存使用方法的设置。</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'net.core.wmem_max=12582912'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br><span class="line">echo <span class="string">'net.core.rmem_max=12582912'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>还需要设置 <code>minimum size</code>, <code>initial size</code>, and <code>maximum size</code> in bytes</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 'net.ipv4.tcp_rmem= <span class="number">1024</span>0 <span class="number">8738</span>0 <span class="number">12582912</span>' &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo 'net.ipv4.tcp_wmem= <span class="number">1024</span>0 <span class="number">8738</span>0 <span class="number">12582912</span>' &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>打开 <code>window scaling</code>，这是一个用来扩展传输窗口的选项</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'net.ipv4.tcp_window_scaling = 1'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>确保定义在 <code>RFC1323</code> 中的 <code>timestamps</code> 打开</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'net.ipv4.tcp_timestamps = 1'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>确保 select acknowledgments</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'net.ipv4.tcp_sack = 1'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>这个 “select acknowledgments” 不知道该如何翻译，翻译为“选择确认？”</p></blockquote><blockquote><p>当连接关闭的时候，<code>TCP</code> 默认缓存了很多连接指标在 <code>route cache</code> 中，以至于在不久的将来，连接建立的时候，可以用这些值来设置初始化条件。通常，这提升了整体的性能，但是，有时候会引起性能下降， 如果设置的话，<code>TCP</code> 在关闭的时候不缓存这些指标。</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'net.ipv4.tcp_no_metrics_save = 1'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>当 <code>interface</code> 接收到的数据包数量比内核处理速度的快的时候， 设置 <code>input</code> 队列最大的 <code>packets</code> 数量值。</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'net.core.netdev_max_backlog = 5000'</span> <span class="meta">&gt;&gt; </span>/etc/sysctl.conf</span><br></pre></td></tr></table></figure><blockquote><p>现在重载这些改变，使其生效</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sysctl -p</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>tcpdump</code> 命令查看 通过 <code>eth0</code> 数据包流量的变化</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tcpdump</span> -ni eth0</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://segmentfault.com/a/1190000000473365" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000473365</a></p><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ul><li>请参考内核文档<a href="http://www.cyberciti.biz/files/linux-kernel/Documentation/networking/ip-sysctl.txt" target="_blank" rel="noopener">/networking/ip-sysctl.txt</a>获取更加多的信息</li><li>请查看 <code>sysctl</code> 的 <code>man</code> 手册</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;调整 &lt;code&gt;Linux&lt;/code&gt; 的网络栈 &lt;code&gt;Buffer Size&lt;/code&gt; 来提升网络性能&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有两台位于不同数据中心的服务器，都用来处理很多并行的大文件传输。但是处理大文件，网络性能非常差。并且涉及到一个大文件，会导致性能降级。怎样通过调整 &lt;code&gt;Linux&lt;/code&gt;下面的 &lt;code&gt;TCP&lt;/code&gt; 来解决这个问题？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux内核优化笔记" scheme="http://www.gmlyo.com/categories/Linux%E5%86%85%E6%A0%B8%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="调整Linux的网络栈Buffer_Size来提升网络性能" scheme="http://www.gmlyo.com/tags/%E8%B0%83%E6%95%B4Linux%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A0%88Buffer-Size%E6%9D%A5%E6%8F%90%E5%8D%87%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat中Connector常用配置</title>
    <link href="http://www.gmlyo.com//blog/2018/06/15/Tomcat%E4%B8%ADConnector%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.gmlyo.com//blog/2018/06/15/Tomcat中Connector常用配置/</id>
    <published>2018-06-14T17:12:31.000Z</published>
    <updated>2018-06-14T17:40:37.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tomcat-中-Connector-常用配置"><a href="#Tomcat-中-Connector-常用配置" class="headerlink" title="Tomcat 中 Connector 常用配置"></a>Tomcat 中 Connector 常用配置</h2><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>BIO</td><td>阻塞式 <code>I/O</code>，采用传统的 <code>java I/O</code> 进行操作，该模式下每个请求都会创建一个线程，适用于并发量小的场景</td></tr><tr><td>NIO</td><td>同步非阻塞，比传统 <code>BIO</code> 能更好的支持大并发，<code>Tomcat 8.0</code> 后默认采用该模式</td></tr><tr><td>APR</td><td><code>Tomcat</code> 以JNI形式调用http服务器的核心动态链接库来处理文件读取或网络传输操作，需要编译安装 <code>APR</code> 库</td></tr><tr><td>AIO</td><td>异步非阻塞，Tomcat 8.0 后支持</td></tr></tbody></table><blockquote><p>配置方法：在 <code>tomcat/conf/</code> 下 <code>server.xml</code></p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`&lt;Connector <span class="attribute">port</span>=<span class="string">"8080"</span> <span class="attribute">protocol</span>=<span class="string">"HTTP/1.1"</span>/&gt;`</span><br><span class="line">BIO: <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Protocol"</span></span><br><span class="line">NIO: <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span><br><span class="line">AIO: <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Nio2Protocol"</span></span><br><span class="line">APR: <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span></span><br></pre></td></tr></table></figure><p><code>BIO（blocking I/O）</code> 阻塞式 <code>I/O</code> 操作，表示 <code>Tomcat</code> 使用的是传统的 <code>Java I/O</code> 操作（即 <code>java.io</code> 包及其子包）。<br>默认的模式，性能最差，没有经过任何优化处理和支持。</p><p><code>NIO（non-blocking I/O）</code> Java SE 1.4 及后续版本提供的一种新的 I/O 操作方式（即 <code>java.nio</code> 包及其子包）。<br>Java nio 是一个基于缓冲区、并能提供非阻塞 <code>I/O</code> 操作的 <code>Java API</code>。<br>拥有比传统 <code>I/O</code> 操作（BIO）更好的并发运行性能。<br>要让 <code>Tomcat</code> 以 <code>NIO</code> 模式来运行，修改配置文件：<code>tomcat/conf/server.xml</code></p><p>修改以下内容<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector <span class="attribute">port</span>=<span class="string">"8080"</span> <span class="attribute">protocol</span>=<span class="string">"HTTP/1.1"</span></span><br><span class="line">         <span class="attribute">connectionTimeout</span>=<span class="string">"20000"</span></span><br><span class="line">         <span class="attribute">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>修改 protocol 的值为 org.apache.coyote.http11.Http11NioProtocol<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector <span class="attribute">port</span>=<span class="string">"8080"</span></span><br><span class="line">           <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span><br><span class="line">           <span class="attribute">connectionTimeout</span>=<span class="string">"20000"</span></span><br><span class="line">           <span class="attribute">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>重启 <code>Tomcat</code> 后生效</p><p>在 Tomcat 6.0 之后，提供了 NIO 的方式，可以有效的提升性能，特别是在大量长连接/数据上传+下载等 Web 应用中<br>此时 portocal=”org.apache.coyote.http11.Http11NioProtocol”<br><code>Tomcat</code> 支持：<code>BIO</code>，<code>NIO</code>，<code>NIO2</code>，<code>APR</code> 四种 <code>I/O</code> 模式，<code>Tomcat 8.5</code> 之前 默认为 BIO</p><p><code>Tomcat 8.5 and 9.0 have completely dropped the BIO connector.</code><br><code>Tomcat 8.5</code> 和 <code>9.0</code> 完全删除了 <code>BIO</code> 连接器<br>默认 <code>NIO</code> 模式</p><p>对于互联网应用，我们应该在 NIO、NIO2 之间做选择，因为它能够有效的提升性能（主要是并发能力）<br>其中 NIO2 即为 AIO，需要 JDK 1.7+、Linux 2.6+ 才能支持。<br>BIO：JDK 1.5+，tomcat 5.x+<br>NIO：JDK 1.6+，tomcat 6.x+<br>NIO2：JDK 1.7+，tomcat 7.x+<br>为了保守起见，我们暂且基于 NIO 模式</p><h3 id="查看-Tomcat-Connector-运行模式"><a href="#查看-Tomcat-Connector-运行模式" class="headerlink" title="查看 Tomcat Connector 运行模式"></a>查看 Tomcat Connector 运行模式</h3><p>方法一：在 <a href="http://x.x.x.x:8080/manager/status" target="_blank" rel="noopener">http://x.x.x.x:8080/manager/status</a> 中查看服务器状态 </p><p>方法二：根据 <code>Tomcat</code> 启动日志信息判断<br>BIO<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">INFO</span>: <span class="selector-tag">Initializing</span> <span class="selector-tag">ProtocolHandler</span> <span class="selector-attr">["http-bio-8080"]</span></span><br><span class="line"><span class="selector-tag">Aug</span> 04, 2015 10<span class="selector-pseudo">:20</span><span class="selector-pseudo">:35</span> <span class="selector-tag">PM</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span> <span class="selector-tag">init</span></span><br></pre></td></tr></table></figure></p><p>NIO<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">INFO</span>: <span class="selector-tag">Initializing</span> <span class="selector-tag">ProtocolHandler</span> <span class="selector-attr">["http-nio-8080"]</span></span><br><span class="line"><span class="selector-tag">Aug</span> 04, 2015 10<span class="selector-pseudo">:27</span><span class="selector-pseudo">:58</span> <span class="selector-tag">PM</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span> <span class="selector-tag">init</span></span><br></pre></td></tr></table></figure></p><p>APR<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">INFO</span>: <span class="selector-tag">Initializing</span> <span class="selector-tag">ProtocolHandler</span> <span class="selector-attr">["http-apr-8080"]</span></span><br><span class="line"><span class="selector-tag">Aug</span> 04, 2015 10<span class="selector-pseudo">:33</span><span class="selector-pseudo">:45</span> <span class="selector-tag">PM</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.coyote</span><span class="selector-class">.AbstractProtocol</span> <span class="selector-tag">init</span></span><br></pre></td></tr></table></figure></p><blockquote><p>整合<code>Tomcat apr</code></p></blockquote><p>设置环境变量<br>方法一：在 <code>tomcat/bin/catalina.sh</code> 中增加1行<br>在 <code>echo “Using CATALINA_BASE: $CATALINA_BASE”</code> 的上一行添加<br>CATALINA_OPTS=”-Djava.library.path=/data/apr/lib”</p><p>方法二：在 <code>/etc/profile</code> 中加入<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">CATALINA_OPTS</span>=-Djava.library.path=/usr/local/apr/lib</span><br></pre></td></tr></table></figure></p><blockquote><p>使配置生效<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure></p></blockquote><p>修改配置文件<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim tomcat/conf/server.xml </span><br><span class="line">&lt;Connector <span class="attribute">port</span>=<span class="string">"8080"</span> <span class="attribute">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attribute">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attribute">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 `protocol` 的值为 `org.apache.coyote.http11.Http11NioProtocol`</span></span><br><span class="line">&lt;Connector <span class="attribute">port</span>=<span class="string">"8080"</span></span><br><span class="line">           <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span></span><br><span class="line">           <span class="attribute">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attribute">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>重启 <code>Tomcat</code>，启动日志出现以下内容证明此时以 <code>APR</code> 模式启动 </p><p>参考文档：<br><a href="https://blog.csdn.net/fd2025/article/details/80007435" target="_blank" rel="noopener">https://blog.csdn.net/fd2025/article/details/80007435</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Tomcat-中-Connector-常用配置&quot;&gt;&lt;a href=&quot;#Tomcat-中-Connector-常用配置&quot; class=&quot;headerlink&quot; title=&quot;Tomcat 中 Connector 常用配置&quot;&gt;&lt;/a&gt;Tomcat 中 Connecto
      
    
    </summary>
    
      <category term="Tomcat笔记" scheme="http://www.gmlyo.com/categories/Tomcat%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Tomcat中Connector常用配置" scheme="http://www.gmlyo.com/tags/Tomcat%E4%B8%ADConnector%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>回到页首按钮显示百分比</title>
    <link href="http://www.gmlyo.com//blog/2018/06/11/%E5%9B%9E%E5%88%B0%E9%A1%B5%E9%A6%96%E6%8C%89%E9%92%AE%E6%98%BE%E7%A4%BA%E7%99%BE%E5%88%86%E6%AF%94/"/>
    <id>http://www.gmlyo.com//blog/2018/06/11/回到页首按钮显示百分比/</id>
    <published>2018-06-11T06:30:33.000Z</published>
    <updated>2018-06-11T06:32:32.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回到页首按钮显示百分比"><a href="#回到页首按钮显示百分比" class="headerlink" title="回到页首按钮显示百分比"></a>回到页首按钮显示百分比</h2><blockquote><p><code>Back-to-top</code> 按钮显示百分比</p></blockquote><a id="more"></a><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><blockquote><p>Next主题配置文件 <code>/hexo/themes/next/_config.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line"><span class="attr">  scrollpercent:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>将 <code>scrollpercen:</code> 的值改为 <code>true</code> 即可</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;回到页首按钮显示百分比&quot;&gt;&lt;a href=&quot;#回到页首按钮显示百分比&quot; class=&quot;headerlink&quot; title=&quot;回到页首按钮显示百分比&quot;&gt;&lt;/a&gt;回到页首按钮显示百分比&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Back-to-top&lt;/code&gt; 按钮显示百分比&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Next笔记" scheme="http://www.gmlyo.com/categories/Next%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="回到页首按钮显示百分比" scheme="http://www.gmlyo.com/tags/%E5%9B%9E%E5%88%B0%E9%A1%B5%E9%A6%96%E6%8C%89%E9%92%AE%E6%98%BE%E7%A4%BA%E7%99%BE%E5%88%86%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加在线联系</title>
    <link href="http://www.gmlyo.com//blog/2018/06/10/Hexo%E6%B7%BB%E5%8A%A0%E5%9C%A8%E7%BA%BF%E8%81%94%E7%B3%BB/"/>
    <id>http://www.gmlyo.com//blog/2018/06/10/Hexo添加在线联系/</id>
    <published>2018-06-10T15:40:25.000Z</published>
    <updated>2018-06-10T15:41:28.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo添加在线联系"><a href="#Hexo添加在线联系" class="headerlink" title="Hexo添加在线联系"></a>Hexo添加在线联系</h2><blockquote><p>当有用户在网页上给你留言后会通过邮件或者微信通知你，可以及时的解答用户的疑问。</p></blockquote><a id="more"></a><h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><blockquote><p>首先到 <code>DaoVoice</code> 上注册一个账号，注册完成后会得到一个 <code>app_id</code><br><a href="http://dashboard.daovoice.io" target="_blank" rel="noopener">http://dashboard.daovoice.io</a></p></blockquote><h3 id="获取-appid-的步骤"><a href="#获取-appid-的步骤" class="headerlink" title="获取 appid 的步骤"></a>获取 <code>appid</code> 的步骤</h3><blockquote><p>在 <code>DaoVoice</code> 的应用设置 -&gt; 安装到网站中的找到自己的 app_id<br>然后在主题 <code>/next/layout/_partials/head.swig</code> 文件中最后添加代码</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.daovoice %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">  (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice")</span></span><br><span class="line"><span class="xml">  daovoice('init', &#123;</span></span><br><span class="line"><span class="xml">      app_id: "</span><span class="template-variable">&#123;&#123;theme.daovoice_app_id&#125;&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">  daovoice('update');</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h3 id="主题配置文件中添加配置"><a href="#主题配置文件中添加配置" class="headerlink" title="主题配置文件中添加配置"></a>主题配置文件中添加配置</h3><blockquote><p>在主题配置文件 <code>/next/_config.yml</code> 中添加相应的配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Online contact</span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">这里输入前面获取的app_id</span></span><br></pre></td></tr></table></figure><h3 id="调整位置"><a href="#调整位置" class="headerlink" title="调整位置"></a>调整位置</h3><blockquote><p>最后聊天图标的位置可能和一些东西重叠<br>这个使用可以在控制面板中应用设置 -&gt; 聊天设置里面设置相对右边和底部的位置</p></blockquote><p>参考文档<br><a href="https://www.ezlippi.com/blog/2018/01/next-chat.html" target="_blank" rel="noopener">https://www.ezlippi.com/blog/2018/01/next-chat.html</a><br><a href="https://meta.tn/a/c40f12eb1b892bbb8cda053c03c688e3f20e4f642164080ef463cd4a7bc3b042" target="_blank" rel="noopener">https://meta.tn/a/c40f12eb1b892bbb8cda053c03c688e3f20e4f642164080ef463cd4a7bc3b042</a><br><a href="http://www.niww.me/2018/03/02/hexo-daovoice/" target="_blank" rel="noopener">http://www.niww.me/2018/03/02/hexo-daovoice/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo添加在线联系&quot;&gt;&lt;a href=&quot;#Hexo添加在线联系&quot; class=&quot;headerlink&quot; title=&quot;Hexo添加在线联系&quot;&gt;&lt;/a&gt;Hexo添加在线联系&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当有用户在网页上给你留言后会通过邮件或者微信通知你，可以及时的解答用户的疑问。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo笔记" scheme="http://www.gmlyo.com/categories/Hexo%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Hexo添加在线联系" scheme="http://www.gmlyo.com/tags/Hexo%E6%B7%BB%E5%8A%A0%E5%9C%A8%E7%BA%BF%E8%81%94%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>Next主题背景</title>
    <link href="http://www.gmlyo.com//blog/2018/06/10/Next%E4%B8%BB%E9%A2%98%E8%83%8C%E6%99%AF/"/>
    <id>http://www.gmlyo.com//blog/2018/06/10/Next主题背景/</id>
    <published>2018-06-10T14:13:23.000Z</published>
    <updated>2018-06-10T14:15:47.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Next主题背景个性化DIY"><a href="#Next主题背景个性化DIY" class="headerlink" title="Next主题背景个性化DIY"></a>Next主题背景个性化DIY</h2><blockquote><p>整理了一下博客，加个背景图片（BackGroundImage）<br>调整一下视觉感官，<code>背景图片</code> 是动态变化的，每次刷新都会更新一张图</p></blockquote><a id="more"></a><h3 id="一个图片网站"><a href="#一个图片网站" class="headerlink" title="一个图片网站"></a>一个图片网站</h3><blockquote><p>分享一个非常 <code>Nice</code> 的图片网站，感觉这个国外的图片社区网站真的秒杀一众图片网站啊，不仅图片质量高，免费，而且还提供了随机拉取图片的服务 <code>API</code>，太赞，对于想实现动态背景，简直是福音<br><a href="https://source.unsplash.com/" target="_blank" rel="noopener">https://source.unsplash.com/</a></p></blockquote><h3 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h3><blockquote><p>修改 <code>\themes\next\source\css\_custom\custom.styl</code> 文件<br>这个是 <code>Next</code> 故意留给用户自己个性化定制一些样式的文件，添加以下代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(https://source.unsplash.com/random/1600x900);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>URL</code> 括号中直接添加图片的地址链接，也可以置换成你所喜欢的任意图片。<br><code>repeat</code>、<code>attachment</code>、<code>position</code> 就是调整图片的位置，不重复出现、不滚动等。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Next主题背景个性化DIY&quot;&gt;&lt;a href=&quot;#Next主题背景个性化DIY&quot; class=&quot;headerlink&quot; title=&quot;Next主题背景个性化DIY&quot;&gt;&lt;/a&gt;Next主题背景个性化DIY&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;整理了一下博客，加个背景图片（BackGroundImage）&lt;br&gt;调整一下视觉感官，&lt;code&gt;背景图片&lt;/code&gt; 是动态变化的，每次刷新都会更新一张图&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Next笔记" scheme="http://www.gmlyo.com/categories/Next%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Next主题背景" scheme="http://www.gmlyo.com/tags/Next%E4%B8%BB%E9%A2%98%E8%83%8C%E6%99%AF/"/>
    
  </entry>
  
  <entry>
    <title>添加看板娘</title>
    <link href="http://www.gmlyo.com//blog/2018/06/10/%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
    <id>http://www.gmlyo.com//blog/2018/06/10/添加看板娘/</id>
    <published>2018-06-10T09:52:57.000Z</published>
    <updated>2018-06-11T06:44:42.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h2><a id="more"></a><p>实现效果</p><blockquote><p>用 <code>Git Bash Here</code> 在站点根目录执行如下代码</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> D:\hexo\</span><br><span class="line">npm install hexo-helper-live2d <span class="params">--save</span></span><br></pre></td></tr></table></figure><p><del>然后打开 <code>/themes/next/layout/_layout.swig</code> 将下面代码放到 <code>&lt;/body&gt;</code> 之前</del><br><del>{ { live2d() } }</del><br><strong>注意：由于官方更新了包，所以画删除线的不用做了</strong></p><blockquote><p>然后在这里可以看到一些已有的模型，记下想要的模型名字，使用安装命令<br><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">https://huaji8.top/post/live2d-plugin-2.0/</a></p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="string">"模型的包名"</span></span><br></pre></td></tr></table></figure><blockquote><p>模型的包名</p></blockquote><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-<span class="keyword">model</span>-chitose</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-epsilon2_1</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-gf</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haru/<span class="number">01</span> (use npm install --save live2d-widget-<span class="keyword">model</span>-haru)</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haru/<span class="number">02</span> (use npm install --save live2d-widget-<span class="keyword">model</span>-haru)</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haruto</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-hibiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-hijiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-izumi</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-koharu</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-miku</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-ni-j</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nico</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nietzsche</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nipsilon</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nito</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-shizuku</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-tororo</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-tsumiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-unitychan</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-wanko</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-z16</span><br></pre></td></tr></table></figure><blockquote><p>以 hijiki 为例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> <span class="string">"live2d-widget-model-hijiki"</span> <span class="comment">--save</span></span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@<span class="number">1.2</span><span class="number">.4</span> (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@<span class="number">1.2</span><span class="number">.4</span>: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (<span class="keyword">current</span>: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span><br><span class="line"></span><br><span class="line">+ live2d-widget-<span class="keyword">model</span>-hijiki@<span class="number">1.0</span><span class="number">.5</span></span><br><span class="line">added <span class="number">1</span> <span class="keyword">package</span> <span class="keyword">and</span> audited <span class="number">3800</span> packages <span class="keyword">in</span> <span class="number">8.046</span>s</span><br><span class="line"><span class="keyword">found</span> <span class="number">2</span> <span class="keyword">low</span> severity vulnerabilities</span><br><span class="line">  run <span class="string">`npm audit fix`</span> <span class="keyword">to</span> fix them, <span class="keyword">or</span> <span class="string">`npm audit`</span> <span class="keyword">for</span> details</span><br><span class="line"></span><br><span class="line">$ npm <span class="keyword">install</span> live2d-widget-<span class="keyword">model</span>-tororo <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="在-配置文件-末尾添加代码"><a href="#在-配置文件-末尾添加代码" class="headerlink" title="在 配置文件 末尾添加代码"></a>在 <code>配置文件</code> 末尾添加代码</h3><blockquote><p>安装完成后，还需要在一些小小的修改<br>在 <code>_config.yml</code>（<code>Hexo站点</code> 或 <code>Next主题</code> 皆可）中，加入以下内容</p><p><code>/blog/_config.yml</code><br>或<br><code>/blog/next/themes/_config.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 看板娘</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">     enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">     scriptFrom:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">     pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line"><span class="attr">     pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line"><span class="attr">     pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line"><span class="attr">     model:</span></span><br><span class="line"><span class="attr">       use:</span> <span class="string">live2d-widget-model-hijiki</span></span><br><span class="line"><span class="attr">     display:</span></span><br><span class="line"><span class="attr">       position:</span> <span class="string">right</span></span><br><span class="line"><span class="attr">       width:</span> <span class="number">150</span></span><br><span class="line"><span class="attr">       height:</span> <span class="number">300</span></span><br><span class="line"><span class="attr">     mobile:</span></span><br><span class="line"><span class="attr">       show:</span> <span class="literal">true</span>    <span class="comment"># false 手机端不显示</span></span><br></pre></td></tr></table></figure><h3 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>              <span class="comment"># 是否开启</span></span><br><span class="line"><span class="attr">  scriptFrom:</span> <span class="string">local</span>         <span class="comment"># 默认</span></span><br><span class="line"><span class="attr">  pluginRootPath:</span> <span class="string">live2dw/</span>  <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line"><span class="attr">  pluginJsPath:</span> <span class="string">lib/</span>        <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line"><span class="attr">  pluginModelPath:</span> <span class="string">assets/</span>  <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr    # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg       # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">live2d-widget-model-wanko</span> <span class="comment"># 调用模型名，必须要先下载</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">right</span>         <span class="comment"># 在博客的左边还是右边显示</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">150</span>              <span class="comment"># 边框宽度</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">300</span>             <span class="comment"># 边框高度</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">true</span>              <span class="comment"># 是否在手机上显示</span></span><br><span class="line">    <span class="comment"># use: wanko            # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko    # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br></pre></td></tr></table></figure><blockquote><p>根据需要可修改use:后的包名；调整长度和宽度；选择是否停用插件等。</p></blockquote><p>参考文档<br><a href="https://wangyuyang.me/2018/04/06/对基于HEXO的NexT主题的美化/" target="_blank" rel="noopener">https://wangyuyang.me/2018/04/06/对基于HEXO的NexT主题的美化/</a><br><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</a><br><a href="https://alvabill.ml/hexo搭建个人博客-NexT主题优化/" target="_blank" rel="noopener">https://alvabill.ml/hexo搭建个人博客-NexT主题优化/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;添加看板娘&quot;&gt;&lt;a href=&quot;#添加看板娘&quot; class=&quot;headerlink&quot; title=&quot;添加看板娘&quot;&gt;&lt;/a&gt;添加看板娘&lt;/h2&gt;
    
    </summary>
    
      <category term="Next笔记" scheme="http://www.gmlyo.com/categories/Next%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="添加看板娘" scheme="http://www.gmlyo.com/tags/%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>Chrome自带的长截屏功能</title>
    <link href="http://www.gmlyo.com//blog/2018/06/10/Chrome%E8%87%AA%E5%B8%A6%E7%9A%84%E9%95%BF%E6%88%AA%E5%B1%8F%E5%8A%9F%E8%83%BD/"/>
    <id>http://www.gmlyo.com//blog/2018/06/10/Chrome自带的长截屏功能/</id>
    <published>2018-06-10T07:22:15.000Z</published>
    <updated>2018-06-10T07:23:58.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chrome自带的长截屏功能"><a href="#Chrome自带的长截屏功能" class="headerlink" title="Chrome自带的长截屏功能"></a>Chrome自带的长截屏功能</h2><blockquote><p>在 <code>Google Chrome</code> 里面，打开开发人员工具 <code>按F12</code><br>或<br>网站上任意空白处右键 – 选择 “检查” 或者“审查元素”</p><p>快捷键 <code>Ctrl + Shift + P</code>，会看到右边的审查元素出现了一个输入框<br>输入 <code>screenshot</code> 然后回车<br>保存图片</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Chrome自带的长截屏功能&quot;&gt;&lt;a href=&quot;#Chrome自带的长截屏功能&quot; class=&quot;headerlink&quot; title=&quot;Chrome自带的长截屏功能&quot;&gt;&lt;/a&gt;Chrome自带的长截屏功能&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在 &lt;code&gt;G
      
    
    </summary>
    
      <category term="Chrome笔记" scheme="http://www.gmlyo.com/categories/Chrome%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Chrome自带的长截屏功能" scheme="http://www.gmlyo.com/tags/Chrome%E8%87%AA%E5%B8%A6%E7%9A%84%E9%95%BF%E6%88%AA%E5%B1%8F%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Chevereto图床</title>
    <link href="http://www.gmlyo.com//blog/2018/06/10/Chevereto%E5%9B%BE%E5%BA%8A/"/>
    <id>http://www.gmlyo.com//blog/2018/06/10/Chevereto图床/</id>
    <published>2018-06-10T06:02:40.000Z</published>
    <updated>2018-06-10T07:03:34.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chevereto图床"><a href="#Chevereto图床" class="headerlink" title="Chevereto图床"></a>Chevereto图床</h2><blockquote><p><code>Chevereto</code> 是一款采用 <code>PHP</code> 语言开发的网络相册脚本程序，支持多语言，提供中文语言包的下载的开源在线图片存储分享服务系统，支持本地上传和在线获取两种图像上传方式，并集成了 <code>TinyURL</code> 网址缩短服务。<br><code>Chevereto</code> 这套程序可以像 <code>Discuz</code> 或 <code>WordPress</code> 一样随意架设在任何空间上。<br>而它的功能除了一般图片空间单纯的从电脑上传图片外，也支援利用网址也可以上传，最屌的是还有 <code>TinyURL</code> 的缩短网址的功能可以使用，因此这套 <code>Chevereto</code> 可以说是比市面上的图片空间好太多了。<br>他是把图片上传到空间的，相信一般大家都一定会使用免费空间，在此建议大家在挑主机时尽可能使用 <code>cPanel</code> 的空间，因为可以使用 <code>cPanel</code> 特有的 <code>「Cron Jobs」</code> 来备份你上传的图片。</p></blockquote><a id="more"></a><blockquote><p><code>Chevereto</code> 是一款分享照片的程序，可以非常轻松得在自己的服务器上搭建照片分享程序，功能强大，外观精美。<br><code>Chevereto</code> 本身是收费使用的，一次性付费，终身使用，但是其开源版本可以免费使用。<br><a href="https://chevereto.com/" target="_blank" rel="noopener">https://chevereto.com/</a><br><a href="https://github.com/Chevereto/Chevereto-Free" target="_blank" rel="noopener">https://github.com/Chevereto/Chevereto-Free</a><br><a href="https://chevereto.com/docs/requirements" target="_blank" rel="noopener">https://chevereto.com/docs/requirements</a></p></blockquote><h3 id="Clevereto-错误-404-解决方法"><a href="#Clevereto-错误-404-解决方法" class="headerlink" title="Clevereto 错误 404 解决方法"></a>Clevereto 错误 <code>404</code> 解决方法</h3><blockquote><p>如果 <code>Web服务</code> 是 <code>Nginx</code>，基本第一步安装好后再次打开网站会出现 <code>404</code> 错误。<br>因为 <code>Chevereto</code> 默认提供基于 <code>Apache</code> 环境的伪静态规则</p></blockquote><blockquote><p>需要设置以下 <code>Rewrite</code> 伪静态规则<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">if</span> (-f <span class="variable">$request_filename</span>/index.html)&#123;</span><br><span class="line">        <span class="attribute">rewrite</span> (.*) <span class="variable">$1</span>/index.html <span class="literal">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">if</span> (-f <span class="variable">$request_filename</span>/index.php)&#123;</span><br><span class="line">        <span class="attribute">rewrite</span> (.*) <span class="variable">$1</span>/index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        <span class="attribute">rewrite</span> (.*) /index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /api.php;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /admin &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> /admin/index.php?<span class="variable">$args</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="官方推荐配置"><a href="#官方推荐配置" class="headerlink" title="官方推荐配置"></a>官方推荐配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disable access to .ht* files</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /\.ht</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable access to sensitive files in app path</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /(app|content|lib)/.*\.(po|php|lock|sql)$</span> &#123;</span><br><span class="line">  <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable log on not found images + image replacement</span></span><br><span class="line"><span class="comment"># Image not found replacement</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* (jpe?g|png|gif)</span> &#123;</span><br><span class="line">    <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> /content/images/system/default/<span class="number">404</span>.gif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable CORS header (avoids font rendering issues)</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.(ttf|ttc|otf|eot|woff|woff2|font.css|css|js)$</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin <span class="string">"*"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Force serve upload path as static content</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /images</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pretty URLs</span></span><br><span class="line"><span class="comment"># Route dynamic request to index.php</span></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文档</p><blockquote><p><a href="https://www.zhujibiji.com/2017/11/install-chevere-to-build-your-image-sharing-website/" target="_blank" rel="noopener">https://www.zhujibiji.com/2017/11/install-chevere-to-build-your-image-sharing-website/</a><br><a href="https://lala.im/2478.html" target="_blank" rel="noopener">https://lala.im/2478.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Chevereto图床&quot;&gt;&lt;a href=&quot;#Chevereto图床&quot; class=&quot;headerlink&quot; title=&quot;Chevereto图床&quot;&gt;&lt;/a&gt;Chevereto图床&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Chevereto&lt;/code&gt; 是一款采用 &lt;code&gt;PHP&lt;/code&gt; 语言开发的网络相册脚本程序，支持多语言，提供中文语言包的下载的开源在线图片存储分享服务系统，支持本地上传和在线获取两种图像上传方式，并集成了 &lt;code&gt;TinyURL&lt;/code&gt; 网址缩短服务。&lt;br&gt;&lt;code&gt;Chevereto&lt;/code&gt; 这套程序可以像 &lt;code&gt;Discuz&lt;/code&gt; 或 &lt;code&gt;WordPress&lt;/code&gt; 一样随意架设在任何空间上。&lt;br&gt;而它的功能除了一般图片空间单纯的从电脑上传图片外，也支援利用网址也可以上传，最屌的是还有 &lt;code&gt;TinyURL&lt;/code&gt; 的缩短网址的功能可以使用，因此这套 &lt;code&gt;Chevereto&lt;/code&gt; 可以说是比市面上的图片空间好太多了。&lt;br&gt;他是把图片上传到空间的，相信一般大家都一定会使用免费空间，在此建议大家在挑主机时尽可能使用 &lt;code&gt;cPanel&lt;/code&gt; 的空间，因为可以使用 &lt;code&gt;cPanel&lt;/code&gt; 特有的 &lt;code&gt;「Cron Jobs」&lt;/code&gt; 来备份你上传的图片。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="图床笔记" scheme="http://www.gmlyo.com/categories/%E5%9B%BE%E5%BA%8A%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Chevereto图床" scheme="http://www.gmlyo.com/tags/Chevereto%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>关于图床的选择</title>
    <link href="http://www.gmlyo.com//blog/2018/06/10/%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%BA%8A%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>http://www.gmlyo.com//blog/2018/06/10/关于图床的选择/</id>
    <published>2018-06-10T04:51:44.000Z</published>
    <updated>2018-06-10T06:35:39.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于图床的选择"><a href="#关于图床的选择" class="headerlink" title="关于图床的选择"></a>关于图床的选择</h2><h3 id="为什么要使用图床？"><a href="#为什么要使用图床？" class="headerlink" title="为什么要使用图床？"></a>为什么要使用图床？</h3><blockquote><p>Hexo 文章中的图片，我们可以放到本地，然后一起部署到 <code>Github</code> 中，这样完全没有问题。<br>然而 github pages 空间毕竟有限（貌似只有 <code>300M</code>）,另外图片的管理太混乱了，一些原创的图片可能被盗链。</p></blockquote><a id="more"></a><blockquote><p>很多技术人写作都用的是 <code>MarkDown</code> 轻量级标记语言进行博客写作，这种写作让我们不用像使用 Word 那样那么麻烦地调整排版和格式，只需专心写作并且照样完成排版的一种方式。<br>但是，基本所有支持 <code>MarkDown</code> 本地写作工具都只能采用导入本地图片引用的方式，对于一篇需要大量图片阐述的文章以及该文章上传至网络图片丢失，这不得不是个很糟糕的问题。<br>那么有什么比较好的解决方式吗？<br>很多人采用的图片寄存于网络，用服务厂商作为图片存储的地方，大家都叫为 <code>「图床」</code> 。</p></blockquote><blockquote><p>那么像 CSDN 博客、简书平台不是都可以吗？<br>是的，它们平台写文章的时候都可以导入图片然后得到一个图片网络地址。<br>但是，图片数量多，一张一张上传，这不是贼烦嘛！<br>那么有专门可以作 <code>「图床」</code> 功能的服务商吗？<br>有的，比如七牛云。</p></blockquote><p><strong>网上谷歌搜下还是能搜到很多图床网站的，先随便列举一些</strong></p><h3 id="公共图床"><a href="#公共图床" class="headerlink" title="公共图床"></a>公共图床</h3><h4 id="SM-MS"><a href="#SM-MS" class="headerlink" title="SM.MS"></a>SM.MS</h4><blockquote><p><a href="https://sm.ms/" target="_blank" rel="noopener">https://sm.ms/</a><br>SM.MS 是由 V2EX @Showfom 自建的，无外链限制，无流量限制的图床，支持 HTTPS，速度不错，已经运行两年多了。</p></blockquote><h4 id="极简图床"><a href="#极简图床" class="headerlink" title="极简图床"></a>极简图床</h4><blockquote><p><a href="https://jiantuku.com/#/" target="_blank" rel="noopener">https://jiantuku.com/#/</a></p></blockquote><h4 id="路过图床"><a href="#路过图床" class="headerlink" title="路过图床"></a>路过图床</h4><blockquote><p><a href="https://imgchr.com/" target="_blank" rel="noopener">https://imgchr.com/</a></p></blockquote><h4 id="Imgur"><a href="#Imgur" class="headerlink" title="Imgur"></a>Imgur</h4><blockquote><p><a href="https://imgur.com/" target="_blank" rel="noopener">https://imgur.com/</a><br>Imgur 是一家国外老牌的图片存储服务商，国外速度很快，口碑不错，支持 HTTPS。<br>但是国内速度很不稳定，所以追求国内速度的同学慎用。</p></blockquote><h4 id="Qchan图床"><a href="#Qchan图床" class="headerlink" title="Qchan图床"></a>Qchan图床</h4><p><a href="http://tuchuang.org/" target="_blank" rel="noopener">http://tuchuang.org/</a></p><h4 id="微博图床"><a href="#微博图床" class="headerlink" title="微博图床"></a>微博图床</h4><blockquote><p>微博图床，可以自定义支持七牛，界面简洁美观，支持 Chrome 插件，注册后还可以同步上传历史。</p></blockquote><h3 id="自建图床"><a href="#自建图床" class="headerlink" title="自建图床"></a>自建图床</h3><blockquote><p>目前自建图床方案有两种</p><ol><li>是利用云服务商提供的存储服务来作为图床，通过 API 来管理图片</li><li>是在 VPS 上安装开源的图片或文件管理程序，只要能提供外链，基本都可以作为图床来用。</li></ol></blockquote><h4 id="建图床（云服务）"><a href="#建图床（云服务）" class="headerlink" title="建图床（云服务）"></a>建图床（云服务）</h4><blockquote><p>七牛云，又拍云，阿里云OSS</p></blockquote><h4 id="自建图床（开源方案）"><a href="#自建图床（开源方案）" class="headerlink" title="自建图床（开源方案）"></a>自建图床（开源方案）</h4><blockquote><p>如果你有 VPS，并且网络速度 OK 的话，自建图床也是一个不错的选择。</p></blockquote><h5 id="Lychee"><a href="#Lychee" class="headerlink" title="Lychee"></a>Lychee</h5><blockquote><p><a href="https://github.com/electerious/Lychee" target="_blank" rel="noopener">https://github.com/electerious/Lychee</a><br>Lychee 是一个开源免费的基于 PHP 的图片管理系统，支持 Docker 部署，<br>可以直接当做图床来用，Lychee 还支持很多扩展。</p></blockquote><h5 id="树洞外链"><a href="#树洞外链" class="headerlink" title="树洞外链"></a>树洞外链</h5><blockquote><p><a href="https://yun.aoaoao.me/" target="_blank" rel="noopener">https://yun.aoaoao.me/</a><br><a href="https://github.com/HFO4/shudong-share" target="_blank" rel="noopener">https://github.com/HFO4/shudong-share</a><br>树洞外链 是一款免费开源的 PHP 外链网盘系统，界面简洁友好，<br>支持七牛、本地、远程、阿里云OSS、又拍云五种储存方式，<br>支持多用户系统，多上传方案策略。</p></blockquote><h5 id="Chevereto"><a href="#Chevereto" class="headerlink" title="Chevereto"></a>Chevereto</h5><blockquote><p><a href="https://chevereto.com/" target="_blank" rel="noopener">https://chevereto.com/</a><br><a href="https://github.com/Chevereto/Chevereto-Free" target="_blank" rel="noopener">https://github.com/Chevereto/Chevereto-Free</a><br><a href="https://chevereto.com/docs/requirements" target="_blank" rel="noopener">https://chevereto.com/docs/requirements</a><br>Chevereto 是一款分享照片的程序，可以非常轻松得在自己的服务器上搭建照片分享程序，功能强大，外观精美。<br>Chevereto 本身是收费使用的，一次性付费，终身使用，但是其开源版本可以免费使用。</p></blockquote><p><strong>使用图床的目的是希望文章的图片资源能有更好的加载速度和稳定的显示效果</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于图床的选择&quot;&gt;&lt;a href=&quot;#关于图床的选择&quot; class=&quot;headerlink&quot; title=&quot;关于图床的选择&quot;&gt;&lt;/a&gt;关于图床的选择&lt;/h2&gt;&lt;h3 id=&quot;为什么要使用图床？&quot;&gt;&lt;a href=&quot;#为什么要使用图床？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用图床？&quot;&gt;&lt;/a&gt;为什么要使用图床？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo 文章中的图片，我们可以放到本地，然后一起部署到 &lt;code&gt;Github&lt;/code&gt; 中，这样完全没有问题。&lt;br&gt;然而 github pages 空间毕竟有限（貌似只有 &lt;code&gt;300M&lt;/code&gt;）,另外图片的管理太混乱了，一些原创的图片可能被盗链。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="图床笔记" scheme="http://www.gmlyo.com/categories/%E5%9B%BE%E5%BA%8A%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="关于图床的选择" scheme="http://www.gmlyo.com/tags/%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%BA%8A%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机之堆溢出处理</title>
    <link href="http://www.gmlyo.com//blog/2018/06/10/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B9%8B%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%84%E7%90%86/"/>
    <id>http://www.gmlyo.com//blog/2018/06/10/Java虚拟机之堆溢出处理/</id>
    <published>2018-06-09T16:13:38.000Z</published>
    <updated>2018-06-09T16:24:52.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-虚拟机之堆溢出处理"><a href="#Java-虚拟机之堆溢出处理" class="headerlink" title="Java 虚拟机之堆溢出处理"></a>Java 虚拟机之堆溢出处理</h2><p>在 Java 程序的运行过程中，如果堆空间不足，则有可能抛出内存溢出错误 <code>(Out Of Memory)</code>，简称为 <code>OOM</code>。</p><a id="more"></a><blockquote><p>如下文字显示了典型的堆内存溢出</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.lang</span><span class="selector-class">.OutOfMemoryError</span>: Java heap space at geym<span class="selector-class">.zbase</span><span class="selector-class">.ch3</span><span class="selector-class">.heap</span><span class="selector-class">.DumpOOM</span><span class="selector-class">.main</span>(DumpOOM<span class="selector-class">.java</span>:<span class="number">20</span>)</span><br></pre></td></tr></table></figure><blockquote><p>一旦发生这类问题，系统就会被迫退出。如果发生在生产环境，可能会引起严重的业务中断。<br>为了能够不断改善系统，避免或减少这类错误的发生，需要在发生错误时，获得尽可能多的现场信息，以帮助研发人员排查现场问题。</p></blockquote><blockquote><p>Java 虚拟机提供了参数 <code>-XX:+HeapDumpOnOutOfMemoryError</code>，使用该参数，可以在内存溢出时导出整个堆信息。<br>和它配合使用的还有 <code>-XX:HeapDumpPath</code>，可以指定导出堆的存放路径。</p></blockquote><blockquote><p>使用如下参数执行上述代码</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms5m -Xmx20m -<span class="string">XX:</span>+HeapDumpOnOutOfMemoryError -<span class="string">XX:</span>HeapDumpPath=<span class="regexp">/data/</span>app<span class="regexp">/tomcat/</span>logs/P02.dump</span><br></pre></td></tr></table></figure><blockquote><p>显然 <code>20M</code> 堆空间不足以容纳 <code>25M</code> 内存，系统比如发生内存溢出，在发生错误后，控制台输出如下 </p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.OutOfMemoryError</span>: Java heap space Dumping heap to /data/app/tomcat/logs/P02<span class="selector-class">.dump</span>... Heap dump file created [<span class="number">23067302</span> bytes <span class="keyword">in</span> <span class="number">0.160</span> secs] Exception <span class="keyword">in</span> thread “main” java<span class="selector-class">.lang</span><span class="selector-class">.OutOfMemoryError</span>: Java heap space at geym<span class="selector-class">.zbase</span><span class="selector-class">.ch3</span><span class="selector-class">.heap</span><span class="selector-class">.DumpOOM</span><span class="selector-class">.main</span>(DumpOOM<span class="selector-class">.java</span>:<span class="number">19</span>)</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，虚拟机将当前的堆导出，并保存到 <code>/data/app/tomcat/logs/P02.dump</code> 文件下<br>启动最小空间 <code>5M</code>，配了 <code>20M</code> 最大空间 ，发生了 <code>内存溢出错误</code>，dump 路径为 <code>/data/app/tomcat/logs/P02.dump</code>  使用 MAT 等工具打开该文件进行分析，可以很容易地找到这些 <code>byte</code> 数组和保存它们的 <code>Vector</code> 对象实例</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java-虚拟机之堆溢出处理&quot;&gt;&lt;a href=&quot;#Java-虚拟机之堆溢出处理&quot; class=&quot;headerlink&quot; title=&quot;Java 虚拟机之堆溢出处理&quot;&gt;&lt;/a&gt;Java 虚拟机之堆溢出处理&lt;/h2&gt;&lt;p&gt;在 Java 程序的运行过程中，如果堆空间不足，则有可能抛出内存溢出错误 &lt;code&gt;(Out Of Memory)&lt;/code&gt;，简称为 &lt;code&gt;OOM&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Java笔记" scheme="http://www.gmlyo.com/categories/Java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java虚拟机之堆溢出处理" scheme="http://www.gmlyo.com/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B9%8B%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
