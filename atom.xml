<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>G加菲</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.gmlyo.com/"/>
  <updated>2019-01-10T18:20:43.500Z</updated>
  <id>http://www.gmlyo.com/</id>
  
  <author>
    <name>G加菲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django 后生成数据库表时的报错</title>
    <link href="http://www.gmlyo.com/2019/01/11/Django-2.x-%E5%90%8E%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E6%97%B6%E7%9A%84%E6%8A%A5%E9%94%99/"/>
    <id>http://www.gmlyo.com/2019/01/11/Django-2.x-后生成数据库表时的报错/</id>
    <published>2019-01-10T18:05:51.000Z</published>
    <updated>2019-01-10T18:20:43.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-2-x-后生成数据库表时的报错"><a href="#Django-2-x-后生成数据库表时的报错" class="headerlink" title="Django 2.x 后生成数据库表时的报错"></a>Django 2.x 后生成数据库表时的报错</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>使用 Ｄjango 2.1.1 的时候发现执行 makemigrations 和 migrate 是会报错，少位置参数 on_delete，查了一下是因为指定外键的方式不对。<br><code>TypeError: __init__() missing 1 required positional argument: &#39;on_delete&#39;</code></p></blockquote><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出版社</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 自增 id 主键</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 创建 varchar(64) 唯一的，不为空的字段</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>, null=<span class="keyword">False</span>, unique=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 书</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 自增 id 主键</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 创建 varchar(64) 唯一的，不为空的字段</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>, null=<span class="keyword">False</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 和出版社关联的的外键字段</span></span><br><span class="line">    publisher_id = models.ForeignKey(to=<span class="string">"Publisher"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在创建模型类关联外键时，报如下错误</p></blockquote><p><img src="https://i.loli.net/2019/01/11/5c378a8f568e0.png" alt="20190111020949.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: __init__() missing <span class="number">1</span> required positional argument: <span class="string">'on_delete'</span></span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将</span><br><span class="line">publisher_id = models.ForeignKey(to=<span class="string">"Publisher"</span>)</span><br><span class="line">改成</span><br><span class="line">publisher_id = models.ForeignKey(to=<span class="string">"Publisher"</span>, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><blockquote><p>即在外键值的后面加上 on_delete=models.CASCADE</p></blockquote><blockquote><p>原因：在 Django 2.0 后，定义外键和一对一关系的时候需要加 on_delete 选项，此参数为了避免两个表里的数据不一致问题。不然会报错</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: __init__() missing <span class="number">1</span> required positional argument: <span class="string">'on_delete'</span></span><br></pre></td></tr></table></figure><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user=models.OneToOneField(User)</span><br><span class="line">owner=models.ForeignKey(UserProfile)</span><br></pre></td></tr></table></figure><blockquote><p>需要改成</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在老版本这个参数（models.CASCADE）是默认值</span></span><br><span class="line">user=models.OneToOneField(User,on_delete=models.CASCADE)</span><br><span class="line"><span class="comment"># 在老版本这个参数（models.CASCADE）是默认值</span></span><br><span class="line">owner=models.ForeignKey(UserProfile,on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">on_delete 有 DO_NOTHING、CASCADE、PROTECT、SET_NULL、SET_DEFAULT、SET() 六个可选择的值</span><br><span class="line">DO_NOTHING   <span class="comment"># 什么都不做</span></span><br><span class="line">CASCADE      <span class="comment"># 此值设置，是级联删除</span></span><br><span class="line">PROTECT      <span class="comment"># 此值设置，是会报完整性错误</span></span><br><span class="line">SET_NULL     <span class="comment"># 此值设置，会把外键设置为null，前提是允许为null</span></span><br><span class="line">SET_DEFAULT  <span class="comment"># 此值设置，会把设置为外键的默认值</span></span><br><span class="line">SET()        <span class="comment"># 此值设置，会调用外面的值，可以是一个函数</span></span><br><span class="line"></span><br><span class="line">一般情况下使用 CASCADE 就可以了</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.cnblogs.com/phyger/p/8035253.html" target="_blank" rel="noopener">https://www.cnblogs.com/phyger/p/8035253.html</a><br><a href="https://blog.csdn.net/m0_38109046/article/details/82660038" target="_blank" rel="noopener">https://blog.csdn.net/m0_38109046/article/details/82660038</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Django-2-x-后生成数据库表时的报错&quot;&gt;&lt;a href=&quot;#Django-2-x-后生成数据库表时的报错&quot; class=&quot;headerlink&quot; title=&quot;Django 2.x 后生成数据库表时的报错&quot;&gt;&lt;/a&gt;Django 2.x 后生成数据库表时的报错&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用 Ｄjango 2.1.1 的时候发现执行 makemigrations 和 migrate 是会报错，少位置参数 on_delete，查了一下是因为指定外键的方式不对。&lt;br&gt;&lt;code&gt;TypeError: __init__() missing 1 required positional argument: &amp;#39;on_delete&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Django笔记" scheme="http://www.gmlyo.com/categories/Django%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Django 后生成数据库表时的报错" scheme="http://www.gmlyo.com/tags/Django-%E5%90%8E%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E6%97%B6%E7%9A%84%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes部署rook+ceph存储系统</title>
    <link href="http://www.gmlyo.com/2019/01/07/Kubernetes%E9%83%A8%E7%BD%B2rook+ceph%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.gmlyo.com/2019/01/07/Kubernetes部署rook+ceph存储系统/</id>
    <published>2019-01-07T05:15:37.000Z</published>
    <updated>2019-01-07T09:17:18.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes部署rook-ceph存储系统"><a href="#Kubernetes部署rook-ceph存储系统" class="headerlink" title="Kubernetes部署rook+ceph存储系统"></a>Kubernetes部署rook+ceph存储系统</h1><a id="more"></a><h2 id="rook简介"><a href="#rook简介" class="headerlink" title="rook简介"></a>rook简介</h2><p>Rook官网：<a href="https://rook.io" target="_blank" rel="noopener">https://rook.io</a></p><h3 id="容器的持久化存储"><a href="#容器的持久化存储" class="headerlink" title="容器的持久化存储"></a>容器的持久化存储</h3><p>容器的持久化存储是保存容器存储状态的重要手段，存储插件会在容器里挂载一个基于网络或者其他机制的远程数据卷，使得在容器里创建的文件，实际上是保存在远程存储服务器上，或者以分布式的方式保存在多个节点上，而与当前宿主机没有任何绑定关系。这样，无论你在其他哪个宿主机上启动新的容器，都可以请求挂载指定的持久化存储卷，从而访问到数据卷里保存的内容。<br>由于 Kubernetes 本身的松耦合设计，绝大多数存储项目，比如 Ceph、GlusterFS、NFS 等，都可以为 Kubernetes 提供持久化存储能力。</p><h3 id="Ceph分布式存储系统"><a href="#Ceph分布式存储系统" class="headerlink" title="Ceph分布式存储系统"></a>Ceph分布式存储系统</h3><p>Ceph是一种高度可扩展的分布式存储解决方案，提供对象、文件和块存储。在每个存储节点上，您将找到Ceph存储对象的文件系统和Ceph OSD（对象存储守护程序）进程。在Ceph集群上，您还可以找到Ceph MON（监控）守护程序，它们确保Ceph集群保持高可用性。</p><h3 id="Rook"><a href="#Rook" class="headerlink" title="Rook"></a>Rook</h3><p>Rook 是一个开源的cloud-native storage编排, 提供平台和框架；为各种存储解决方案提供平台、框架和支持，以便与云原生环境本地集成。<br>Rook 将存储软件转变为自我管理、自我扩展和自我修复的存储服务，它通过自动化部署、引导、配置、置备、扩展、升级、迁移、灾难恢复、监控和资源管理来实现此目的。<br>Rook 使用底层云本机容器管理、调度和编排平台提供的工具来实现它自身的功能。<br>Rook 目前支持Ceph、NFS、Minio Object Store和CockroachDB。</p><p>Rook使用Kubernetes原语使Ceph存储系统能够在Kubernetes上运行。下图说明了Ceph Rook如何与Kubernetes集成：</p><p><img src="https://i.loli.net/2019/01/07/5c33112b3d5d3.png" alt="20190107164302.png"></p><p>随着Rook在Kubernetes集群中运行，Kubernetes应用程序可以挂载由Rook管理的块设备和文件系统，或者可以使用S3 / Swift API提供对象存储。Rook oprerator自动配置存储组件并监控群集，以确保存储处于可用和健康状态。<br>Rook oprerator是一个简单的容器，具有引导和监视存储集群所需的全部功能。oprerator将启动并监控ceph monitor pods和OSDs的守护进程，它提供基本的RADOS存储。oprerator通过初始化运行服务所需的pod和其他组件来管理池，对象存储（S3 / Swift）和文件系统的CRD。<br>oprerator将监视存储后台驻留程序以确保群集正常运行。Ceph mons将在必要时启动或故障转移，并在群集增长或缩小时进行其他调整。oprerator还将监视api服务请求的所需状态更改并应用更改。<br>Rook oprerator还创建了Rook agent。这些agent是在每个Kubernetes节点上部署的pod。每个agent都配置一个Flexvolume插件，该插件与Kubernetes的volume controller集成在一起。处理节点上所需的所有存储操作，例如附加网络存储设备，安装卷和格式化文件系统。</p><p><img src="https://i.loli.net/2019/01/07/5c331183ea477.png" alt="20190107164430.png"></p><p>该rook容器包括所有必需的Ceph守护进程和工具来管理和存储所有数据 - 数据路径没有变化。 rook并没有试图与Ceph保持完全的忠诚度。 许多Ceph概念（如placement groups和crush maps）都是隐藏的，因此您无需担心它们。 相反，Rook为管理员创建了一个简化的用户体验，包括物理资源，池，卷，文件系统和buckets。 同时，可以在需要时使用Ceph工具应用高级配置。<br>Rook在golang中实现。Ceph在C ++中实现，其中数据路径被高度优化。我们相信这种组合可以提供两全其美的效果。</p><h2 id="部署环境准备"><a href="#部署环境准备" class="headerlink" title="部署环境准备"></a>部署环境准备</h2><h3 id="官方参考："><a href="#官方参考：" class="headerlink" title="官方参考："></a>官方参考：</h3><p>root项目地址：<a href="https://github.com/rook/rook" target="_blank" rel="noopener">https://github.com/rook/rook</a><br>rook官方参考文档：<a href="https://rook.github.io/docs/rook/v0.9/ceph-quickstart.html" target="_blank" rel="noopener">https://rook.github.io/docs/rook/v0.9/ceph-quickstart.html</a></p><h3 id="kubernetes集群准备"><a href="#kubernetes集群准备" class="headerlink" title="kubernetes集群准备"></a>kubernetes集群准备</h3><p>kubeadm部署3节点kubernetes1.13.1集群（,master节点x1，node节点x2），集群部署参考：<br><a href="https://blog.csdn.net/networken/article/details/84991940" target="_blank" rel="noopener">https://blog.csdn.net/networken/article/details/84991940</a><br>集群节点信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.92.56 k8s-master</span><br><span class="line">192.168.92.57 k8s-node1</span><br><span class="line">192.168.92.58 k8s-node2</span><br></pre></td></tr></table></figure><p>在集群中至少有三个节点可用，满足ceph高可用要求，这里已配置master节点使其支持运行pod。</p><h3 id="rook使用存储方式"><a href="#rook使用存储方式" class="headerlink" title="rook使用存储方式"></a>rook使用存储方式</h3><p>rook默认使用所有节点的所有资源，rook operator自动在所有节点上启动OSD设备，Rook会用如下标准监控并发现可用设备：</p><ul><li>设备没有分区</li><li>设备没有格式化的文件系统</li></ul><p>Rook不会使用不满足以上标准的设备。另外也可以通过修改配置文件，指定哪些节点或者设备会被使用。</p><h3 id="添加新磁盘"><a href="#添加新磁盘" class="headerlink" title="添加新磁盘"></a>添加新磁盘</h3><p>这里在所有节点添加1块50GB的新磁盘：/dev/sdb，作为OSD盘，提供存储空间，添加完成后扫描磁盘，确保主机能够正常识别到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 扫描 SCSI总线并添加 SCSI 设备</span></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> $(ls /sys/class/scsi_host) ; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"- - -"</span> &gt; /sys/class/scsi_host/<span class="variable">$host</span>/scan; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新扫描 SCSI 总线</span></span><br><span class="line"><span class="keyword">for</span> scsi_device <span class="keyword">in</span> $(ls /sys/class/scsi_device/); <span class="keyword">do</span> <span class="built_in">echo</span> 1 &gt; /sys/class/scsi_device/<span class="variable">$scsi_device</span>/device/rescan; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已添加的磁盘，能够看到sdb说明添加成功</span></span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>本次搭建的基本原理图：</p><p><img src="https://i.loli.net/2019/01/07/5c3316ba01858.png" alt="20190107170635.png"></p><p>无另外说明，以下全部操作都在master节点执行。</p><h2 id="部署Rook-Operator"><a href="#部署Rook-Operator" class="headerlink" title="部署Rook Operator"></a>部署Rook Operator</h2><p>克隆rook github仓库到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rook/rook.git</span><br><span class="line"><span class="built_in">cd</span> rook/cluster/examples/kubernetes/ceph/</span><br></pre></td></tr></table></figure><p>执行yaml文件部署rook系统组件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ceph]$ kubectl apply -f operator.yaml</span><br><span class="line">namespace/rook-ceph-system created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/cephclusters.ceph.rook.io created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/cephfilesystems.ceph.rook.io created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/cephobjectstores.ceph.rook.io created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/cephobjectstoreusers.ceph.rook.io created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/cephblockpools.ceph.rook.io created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/volumes.rook.io created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/rook-ceph-cluster-mgmt created</span><br><span class="line">role.rbac.authorization.k8s.io/rook-ceph-system created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/rook-ceph-global created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/rook-ceph-mgr-cluster created</span><br><span class="line">serviceaccount/rook-ceph-system created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rook-ceph-system created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/rook-ceph-global created</span><br><span class="line">deployment.apps/rook-ceph-operator created</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure></p><p>如上所示，它会创建如下资源：</p><ol><li>namespace：rook-ceph-system，之后的所有rook相关的pod都会创建在该namespace下面</li><li>CRD：创建五个CRDs，.ceph.rook.io</li><li>role &amp; clusterrole：用户资源控制</li><li>serviceaccount：ServiceAccount资源，给Rook创建的Pod使用</li><li>deployment：rook-ceph-operator，部署rook ceph相关的组件</li></ol><p>部署rook-ceph-operator过程中，会触发以DaemonSet的方式在集群部署Agent和Discoverpods。<br>operator会在集群内的每个主机创建两个pod:rook-discover,rook-ceph-agent：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get pod -n rook-ceph-system  -o wide</span><br><span class="line">NAME                                  READY   STATUS    RESTARTS   AGE     IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">rook-ceph-agent-49w7t                 1/1     Running   0          7m48s   192.168.92.57   k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-agent-dpxkq                 1/1     Running   0          111s    192.168.92.58   k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-agent-wb6r8                 1/1     Running   0          7m48s   192.168.92.56   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-operator-85d64cfb99-2c78k   1/1     Running   0          9m3s    10.244.1.2      k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-discover-597sk                   1/1     Running   0          7m48s   10.244.0.4      k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-discover-7h89z                   1/1     Running   0          111s    10.244.2.2      k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-discover-hjdjt                   1/1     Running   0          7m48s   10.244.1.3      k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><h2 id="创建rook-Cluster"><a href="#创建rook-Cluster" class="headerlink" title="创建rook Cluster"></a>创建rook Cluster</h2><p>当检查到Rook operator, agent, and discover pods已经是running状态后，就可以部署roo cluster了。<br>执行yaml文件结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ceph]$ kubectl apply -f cluster.yaml </span><br><span class="line">namespace/rook-ceph created</span><br><span class="line">serviceaccount/rook-ceph-osd created</span><br><span class="line">serviceaccount/rook-ceph-mgr created</span><br><span class="line">role.rbac.authorization.k8s.io/rook-ceph-osd created</span><br><span class="line">role.rbac.authorization.k8s.io/rook-ceph-mgr-system created</span><br><span class="line">role.rbac.authorization.k8s.io/rook-ceph-mgr created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rook-ceph-cluster-mgmt created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rook-ceph-osd created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rook-ceph-mgr created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rook-ceph-mgr-system created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rook-ceph-mgr-cluster created</span><br><span class="line">cephcluster.ceph.rook.io/rook-ceph created</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>如上所示，它会创建如下资源：</p><ol><li>namespace：rook-ceph，之后的所有Ceph集群相关的pod都会创建在该namespace下</li><li>serviceaccount：ServiceAccount资源，给Ceph集群的Pod使用</li><li>role &amp; rolebinding：用户资源控制</li><li>cluster：rook-ceph，创建的Ceph集群</li></ol><p>Ceph集群部署成功后，可以查看到的pods如下，其中osd数量取决于你的节点数量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get pod -n rook-ceph -o wide</span><br><span class="line">NAME                                     READY   STATUS      RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">rook-ceph-mgr<span class="_">-a</span>-8649f78d9b-hlg7t         1/1     Running     0          3h30m   10.244.2.6   k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-mon<span class="_">-a</span>-7c7df4b5bb-984x8         1/1     Running     0          3h31m   10.244.0.5   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-mon-b-7b9bc8b6c4-8trmz         1/1     Running     0          3h31m   10.244.1.4   k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-mon-c-54b5fb5955-5dgr7         1/1     Running     0          3h30m   10.244.2.5   k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-osd-0-b9bb5df49-gt4vs          1/1     Running     0          3h29m   10.244.0.7   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-osd-1-9c6dbf797-2dg8p          1/1     Running     0          3h29m   10.244.2.8   k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-osd-2-867ddc447d-xkh7k         1/1     Running     0          3h29m   10.244.1.6   k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-osd-prepare-k8s-master-m8tvr   0/2     Completed   0          3h29m   10.244.0.6   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-osd-prepare-k8s-node1-jf7qz    0/2     Completed   1          3h29m   10.244.1.5   k8s-node1    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rook-ceph-osd-prepare-k8s-node2-tcqdl    0/2     Completed   0          3h29m   10.244.2.7   k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>可以看出部署的Ceph集群有：</p><ol><li>Ceph Monitors：默认启动三个ceph-mon，可以在cluster.yaml里配置</li><li>Ceph Mgr：默认启动一个，可以在cluster.yaml里配置</li><li>Ceph OSDs：根据cluster.yaml里的配置启动，默认在所有的可用节点上启动<br>上述Ceph组件对应kubernetes的kind是deployment：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl -n rook-ceph get deployment</span><br><span class="line">NAME              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">rook-ceph-mgr<span class="_">-a</span>   1/1     1            1           5h34m</span><br><span class="line">rook-ceph-mon<span class="_">-a</span>   1/1     1            1           5h36m</span><br><span class="line">rook-ceph-mon-b   1/1     1            1           5h35m</span><br><span class="line">rook-ceph-mon-c   1/1     1            1           5h35m</span><br><span class="line">rook-ceph-osd-0   1/1     1            1           5h34m</span><br><span class="line">rook-ceph-osd-1   1/1     1            1           5h34m</span><br><span class="line">rook-ceph-osd-2   1/1     1            1           5h34m</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><h3 id="删除Ceph集群"><a href="#删除Ceph集群" class="headerlink" title="删除Ceph集群"></a>删除Ceph集群</h3><p>如果要删除已创建的Ceph集群，可执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f cluster.yaml</span><br></pre></td></tr></table></figure><p>删除Ceph集群后，在之前部署Ceph组件节点的/var/lib/rook/目录，会遗留下Ceph集群的配置信息。<br>若之后再部署新的Ceph集群，先把之前Ceph集群的这些信息删除，不然启动monitor会失败；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat clean-rook-dir.sh</span><br><span class="line">hosts=(</span><br><span class="line">  k8s-master</span><br><span class="line">  k8s-node1</span><br><span class="line">  k8s-node2</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> <span class="variable">$&#123;hosts[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">  ssh <span class="variable">$host</span> <span class="string">"rm -rf /var/lib/rook/*"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="配置ceph-dashboard"><a href="#配置ceph-dashboard" class="headerlink" title="配置ceph dashboard"></a>配置ceph dashboard</h2><p>在cluster.yaml文件中默认已经启用了ceph dashboard，查看dashboard的service：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get service -n rook-ceph</span><br><span class="line">NAME                                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">rook-ceph-mgr                            ClusterIP   10.107.77.188    &lt;none&gt;        9283/TCP         3h33m</span><br><span class="line">rook-ceph-mgr-dashboard                  ClusterIP   10.96.135.98     &lt;none&gt;        8443/TCP         3h33m</span><br><span class="line">rook-ceph-mon<span class="_">-a</span>                          ClusterIP   10.105.153.93    &lt;none&gt;        6790/TCP         3h35m</span><br><span class="line">rook-ceph-mon-b                          ClusterIP   10.105.107.254   &lt;none&gt;        6790/TCP         3h34m</span><br><span class="line">rook-ceph-mon-c                          ClusterIP   10.104.1.238     &lt;none&gt;        6790/TCP         3h34m</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>rook-ceph-mgr-dashboard监听的端口是8443，创建nodeport类型的service以便集群外部访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f rook/cluster/examples/kubernetes/ceph/dashboard-external-https.yaml</span><br></pre></td></tr></table></figure><p>查看一下nodeport暴露的端口，这里是32483端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get service -n rook-ceph | grep dashboard</span><br><span class="line">rook-ceph-mgr-dashboard                  ClusterIP   10.96.135.98     &lt;none&gt;        8443/TCP         3h37m</span><br><span class="line">rook-ceph-mgr-dashboard-external-https   NodePort    10.97.181.103    &lt;none&gt;        8443:32483/TCP   3h29m</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>获取Dashboard的登陆账号和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ MGR_POD=`kubectl get pod -n rook-ceph | grep mgr | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">[centos@k8s-master ~]$ kubectl -n rook-ceph logs <span class="variable">$MGR_POD</span> | grep password</span><br><span class="line">2019-01-03 05:44:00.585 7fced4782700  0 log_channel(audit) <span class="built_in">log</span> [DBG] : from=<span class="string">'client.4151 10.244.1.2:0/3446600469'</span> entity=<span class="string">'client.admin'</span> cmd=[&#123;<span class="string">"username"</span>: <span class="string">"admin"</span>, <span class="string">"prefix"</span>: <span class="string">"dashboard set-login-credentials"</span>, <span class="string">"password"</span>: <span class="string">"8v2AbqHDj6"</span>, <span class="string">"target"</span>: [<span class="string">"mgr"</span>, <span class="string">""</span>], <span class="string">"format"</span>: <span class="string">"json"</span>&#125;]: dispatch</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>找到username和password字段，我这里是admin，8v2AbqHDj6<br>打开浏览器输入任意一个Node的IP+nodeport端口，这里使用master节点 ip访问：<br><a href="https://192.168.92.56:32483" target="_blank" rel="noopener">https://192.168.92.56:32483</a></p><p><img src="https://i.loli.net/2019/01/07/5c33173371d46.png" alt="20190107170853.png"></p><p>登录后界面如下：</p><p><img src="https://i.loli.net/2019/01/07/5c33177a63986.png" alt="20190107171004.png"></p><p>查看hosts状态：<br>运行了1个mgr、3个mon和3个osd</p><p><img src="https://i.loli.net/2019/01/07/5c3317cb74250.png" alt="20190107171120.png"></p><p>查看monitors状态：</p><p><img src="https://i.loli.net/2019/01/07/5c3317ff6de9c.png" alt="20190107171219.png"></p><p>查看OSD状态<br>3个osd状态正常，每个容量50GB.</p><p><img src="https://i.loli.net/2019/01/07/5c331844071f9.png" alt="20190107171326.png"></p><h2 id="部署Ceph-toolbox"><a href="#部署Ceph-toolbox" class="headerlink" title="部署Ceph toolbox"></a>部署Ceph toolbox</h2><p>默认启动的Ceph集群，是开启Ceph认证的，这样你登陆Ceph组件所在的Pod里，是没法去获取集群状态，以及执行CLI命令，这时需要部署Ceph toolbox，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f rook/cluster/examples/kubernetes/ceph/ toolbox.yaml</span><br></pre></td></tr></table></figure><p>部署成功后，pod如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ceph]$  kubectl -n rook-ceph get pods -o wide | grep ceph-tools</span><br><span class="line">rook-ceph-tools-76c7d559b6-8w7bk         1/1     Running     0          11s     192.168.92.58   k8s-node2    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[centos@k8s-master ceph]$</span><br></pre></td></tr></table></figure><p>然后可以登陆该pod后，执行Ceph CLI命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ceph]$ kubectl -n rook-ceph <span class="built_in">exec</span> -it rook-ceph-tools-76c7d559b6-8w7bk bash</span><br><span class="line">bash: warning: setlocale: LC_CTYPE: cannot change locale (en_US.UTF-8): No such file or directory</span><br><span class="line">bash: warning: setlocale: LC_COLLATE: cannot change locale (en_US.UTF-8): No such file or directory</span><br><span class="line">bash: warning: setlocale: LC_MESSAGES: cannot change locale (en_US.UTF-8): No such file or directory</span><br><span class="line">bash: warning: setlocale: LC_NUMERIC: cannot change locale (en_US.UTF-8): No such file or directory</span><br><span class="line">bash: warning: setlocale: LC_TIME: cannot change locale (en_US.UTF-8): No such file or directory</span><br><span class="line">[root@k8s-node2 /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>查看ceph集群状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node2 /]<span class="comment"># ceph status</span></span><br><span class="line">  cluster:</span><br><span class="line">    id:     abddff95-5fa0-47dc-a001-7fb291a42bc6</span><br><span class="line">    health: HEALTH_OK</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum c,b,a</span><br><span class="line">    mgr: a(active)</span><br><span class="line">    osd: 3 osds: 3 up, 3 <span class="keyword">in</span></span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   1 pools, 100 pgs</span><br><span class="line">    objects: 0  objects, 0 B</span><br><span class="line">    usage:   12 GiB used, 129 GiB / 141 GiB avail</span><br><span class="line">    pgs:     100 active+clean</span><br><span class="line"> </span><br><span class="line">[root@k8s-node2 /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>查看ceph配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node2 /]<span class="comment"># cd /etc/ceph/</span></span><br><span class="line">[root@k8s-node2 ceph]<span class="comment"># ll</span></span><br><span class="line">total 12</span><br><span class="line">-rw-r--r-- 1 root root 121 Jan  3 11:28 ceph.conf</span><br><span class="line">-rw-r--r-- 1 root root  62 Jan  3 11:28 keyring</span><br><span class="line">-rw-r--r-- 1 root root  92 Sep 24 18:15 rbdmap</span><br><span class="line">[root@k8s-node2 ceph]<span class="comment"># cat ceph.conf </span></span><br><span class="line">[global]</span><br><span class="line">mon_host = 10.104.1.238:6790,10.105.153.93:6790,10.105.107.254:6790</span><br><span class="line"></span><br><span class="line">[client.admin]</span><br><span class="line">keyring = /etc/ceph/keyring</span><br><span class="line">[root@k8s-node2 ceph]<span class="comment"># cat keyring</span></span><br><span class="line">[client.admin]</span><br><span class="line">key = AQBjoC1cXKJ7KBAA3ZnhWyxvyGa8+fnLFK7ykw==</span><br><span class="line">[root@k8s-node2 ceph]<span class="comment"># cat rbdmap </span></span><br><span class="line"><span class="comment"># RbdDevice             Parameters</span></span><br><span class="line"><span class="comment">#poolname/imagename     id=client,keyring=/etc/ceph/ceph.client.keyring</span></span><br><span class="line">[root@k8s-node2 ceph]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="rook提供RBD服务"><a href="#rook提供RBD服务" class="headerlink" title="rook提供RBD服务"></a>rook提供RBD服务</h2><p>rook可以提供以下3类型的存储：<br> Block: Create block storage to be consumed by a pod<br> Object: Create an object store that is accessible inside or outside the Kubernetes cluster<br> Shared File System: Create a file system to be shared across multiple pods<br>在提供（Provisioning）块存储之前，需要先创建StorageClass和存储池。K8S需要这两类资源，才能和Rook交互，进而分配持久卷（PV）。<br>在kubernetes集群里，要提供rbd块设备服务，需要有如下步骤：</p><ol><li>创建rbd-provisioner pod</li><li>创建rbd对应的storageclass</li><li>创建pvc，使用rbd对应的storageclass</li><li>创建pod使用rbd pvc</li></ol><p>通过rook创建Ceph Cluster之后，rook自身提供了rbd-provisioner服务，所以我们不需要再部署其provisioner。<br>备注：代码位置pkg/operator/ceph/provisioner/provisioner.go</p><h3 id="创建pool和StorageClass"><a href="#创建pool和StorageClass" class="headerlink" title="创建pool和StorageClass"></a>创建pool和StorageClass</h3><p>查看storageclass.yaml的配置（默认）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ vim rook/cluster/examples/kubernetes/ceph/storageclass.yaml</span><br><span class="line">apiVersion: ceph.rook.io/v1</span><br><span class="line">kind: CephBlockPool</span><br><span class="line">metadata:</span><br><span class="line">  name: replicapool</span><br><span class="line">  namespace: rook-ceph</span><br><span class="line">spec:</span><br><span class="line">  replicated:</span><br><span class="line">    size: 1</span><br><span class="line">---</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">   name: rook-ceph-block</span><br><span class="line">provisioner: ceph.rook.io/block</span><br><span class="line">parameters:</span><br><span class="line">  blockPool: replicapool</span><br><span class="line">  <span class="comment"># Specify the namespace of the rook cluster from which to create volumes.</span></span><br><span class="line">  <span class="comment"># If not specified, it will use `rook` as the default namespace of the cluster.</span></span><br><span class="line">  <span class="comment"># This is also the namespace where the cluster will be</span></span><br><span class="line">  clusterNamespace: rook-ceph</span><br><span class="line">  <span class="comment"># Specify the filesystem type of the volume. If not specified, it will use `ext4`.</span></span><br><span class="line">  fstype: xfs</span><br><span class="line">  <span class="comment"># (Optional) Specify an existing Ceph user that will be used for mounting storage with this StorageClass.</span></span><br><span class="line">  <span class="comment">#mountUser: user1</span></span><br><span class="line">  <span class="comment"># (Optional) Specify an existing Kubernetes secret name containing just one key holding the Ceph user secret.</span></span><br><span class="line">  <span class="comment"># The secret must exist in each namespace(s) where the storage will be consumed.</span></span><br><span class="line">  <span class="comment">#mountSecret: ceph-user1-secret</span></span><br></pre></td></tr></table></figure><p>配置文件中包含了一个名为replicapool的存储池，和名为rook-ceph-block的storageClass。</p><p>运行yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f /rook/cluster/examples/kubernetes/ceph/storageclass.yaml</span><br></pre></td></tr></table></figure><p>查看创建的storageclass：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get storageclass</span><br><span class="line">NAME              PROVISIONER          AGE</span><br><span class="line">rook-ceph-block   ceph.rook.io/block   171m</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure></p><p>登录ceph dashboard查看创建的存储池：</p><p><img src="https://i.loli.net/2019/01/07/5c331875b85d2.png" alt="20190107171417.png"></p><h3 id="使用存储"><a href="#使用存储" class="headerlink" title="使用存储"></a>使用存储</h3><p>以官方wordpress示例为例，创建一个经典的wordpress和mysql应用程序来使用Rook提供的块存储，这两个应用程序都将使用Rook提供的block volumes。<br>查看yaml文件配置，主要看定义的pvc和挂载volume部分，以wordpress.yaml为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ cat rook/cluster/examples/kubernetes/wordpress.yaml </span><br><span class="line">......</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: wp-pv-claim</span><br><span class="line">  labels:</span><br><span class="line">    app: wordpress</span><br><span class="line">spec:</span><br><span class="line">  storageClassName: rook-ceph-block</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 20Gi</span><br><span class="line">---</span><br><span class="line">......</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: wordpress-persistent-storage</span><br><span class="line">          mountPath: /var/www/html</span><br><span class="line">      volumes:</span><br><span class="line">      - name: wordpress-persistent-storage</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: wp-pv-claim</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>yaml文件里定义了一个名为wp-pv-claim的pvc，指定storageClassName为rook-ceph-block，申请的存储空间大小为20Gi。最后一部分创建了一个名为wordpress-persistent-storage的volume，并且指定 claimName为pvc的名称，最后将volume挂载到pod的/var/lib/mysql目录下。<br>启动mysql和wordpress：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f rook/cluster/examples/kubernetes/mysql.yaml</span><br><span class="line">kubectl apply -f rook/cluster/examples/kubernetes/wordpress.yaml</span><br></pre></td></tr></table></figure><p>这2个应用都会创建一个块存储卷，并且挂载到各自的pod中，查看声明的pvc和pv：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get pvc</span><br><span class="line">NAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE</span><br><span class="line">mysql-pv-claim   Bound    pvc-5bfbe28e-0fc9-11e9-b90d-000c291c25f3   20Gi       RWO            rook-ceph-block   32m</span><br><span class="line">wp-pv-claim      Bound    pvc-5f56c6d6-0fc9-11e9-b90d-000c291c25f3   20Gi       RWO            rook-ceph-block   32m</span><br><span class="line">[centos@k8s-master ~]$ kubectl get pv</span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                    STORAGECLASS      REASON   AGE</span><br><span class="line">pvc-5bfbe28e-0fc9-11e9-b90d-000c291c25f3   20Gi       RWO            Delete           Bound    default/mysql-pv-claim   rook-ceph-block            32m</span><br><span class="line">pvc-5f56c6d6-0fc9-11e9-b90d-000c291c25f3   20Gi       RWO            Delete           Bound    default/wp-pv-claim      rook-ceph-block            32m</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>注意：这里的pv会自动创建，当提交了包含 StorageClass 字段的 PVC 之后，Kubernetes 就会根据这个 StorageClass 创建出对应的 PV，这是用到的是Dynamic Provisioning机制来动态创建pv，PV 支持 Static 静态请求，和动态创建两种方式。<br>在Ceph集群端检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ceph]$ kubectl -n rook-ceph <span class="built_in">exec</span> -it rook-ceph-tools-76c7d559b6-8w7bk bash</span><br><span class="line">......</span><br><span class="line">[root@k8s-node2 /]<span class="comment"># rbd info -p replicapool pvc-5bfbe28e-0fc9-11e9-b90d-000c291c25f3 </span></span><br><span class="line">rbd image <span class="string">'pvc-5bfbe28e-0fc9-11e9-b90d-000c291c25f3'</span>:</span><br><span class="line">        size 20 GiB <span class="keyword">in</span> 5120 objects</span><br><span class="line">        order 22 (4 MiB objects)</span><br><span class="line">        id: 88156b8b4567</span><br><span class="line">        block_name_prefix: rbd_data.88156b8b4567</span><br><span class="line">        format: 2</span><br><span class="line">        features: layering</span><br><span class="line">        op_features: </span><br><span class="line">        flags: </span><br><span class="line">        create_timestamp: Fri Jan  4 02:35:12 2019</span><br><span class="line">[root@k8s-node2 /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>登陆 pod 检查 rbd 设备：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get pod -o wide</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE    IP            NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">wordpress-7b6c4c79bb-t5pst         1/1     Running   0          135m   10.244.1.16   k8s-node1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">wordpress-mysql-6887bf844f-9pmg8   1/1     Running   0          135m   10.244.2.14   k8s-node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[centos@k8s-master ~]$ </span><br><span class="line"></span><br><span class="line">[centos@k8s-master ~]$ kubectl <span class="built_in">exec</span> -it wordpress-7b6c4c79bb-t5pst bash</span><br><span class="line">root@wordpress-7b6c4c79bb-t5pst:/var/www/html<span class="comment">#</span></span><br><span class="line">root@wordpress-7b6c4c79bb-t5pst:/var/www/html<span class="comment">#  mount | grep rbd</span></span><br><span class="line">/dev/rbd0 on /var/www/html <span class="built_in">type</span> xfs (rw,relatime,attr2,inode64,sunit=8192,swidth=8192,noquota)</span><br><span class="line">root@wordpress-7b6c4c79bb-t5pst:/var/www/html<span class="comment"># df -h</span></span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">......</span><br><span class="line">/dev/rbd0                 20G   59M   20G   1% /var/www/html</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>登录 ceph dashboard 查看创建的 images</p><p><img src="https://i.loli.net/2019/01/07/5c3318af28906.png" alt="20190107171515.png"></p><p>一旦 Wordpress 和 mysql pods 处于运行状态，获取 Wordpress 应用程序的集群IP并使用浏览器访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[centos@k8s-master ~]$ kubectl get svc wordpress</span><br><span class="line">NAME        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">wordpress   LoadBalancer   10.98.178.189   &lt;pending&gt;     80:30001/TCP   136m</span><br><span class="line">[centos@k8s-master ~]$</span><br></pre></td></tr></table></figure><p>访问Wordpress：</p><p><img src="https://i.loli.net/2019/01/07/5c3318e232c65.png" alt="20190107171606.png"></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://blog.csdn.net/networken/article/details/85772418" target="_blank" rel="noopener">https://blog.csdn.net/networken/article/details/85772418</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Kubernetes部署rook-ceph存储系统&quot;&gt;&lt;a href=&quot;#Kubernetes部署rook-ceph存储系统&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes部署rook+ceph存储系统&quot;&gt;&lt;/a&gt;Kubernetes部署rook+ceph存储系统&lt;/h1&gt;
    
    </summary>
    
      <category term="Kubernetes笔记" scheme="http://www.gmlyo.com/categories/Kubernetes%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Kubernetes部署rook+ceph存储系统" scheme="http://www.gmlyo.com/tags/Kubernetes%E9%83%A8%E7%BD%B2rook-ceph%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 使用 Tomcat APR 模式</title>
    <link href="http://www.gmlyo.com/2019/01/02/SpringBoot%E4%BD%BF%E7%94%A8TomcatAPR%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.gmlyo.com/2019/01/02/SpringBoot使用TomcatAPR模式/</id>
    <published>2019-01-02T03:19:20.000Z</published>
    <updated>2019-01-02T04:12:03.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-使用-Tomcat-APR-模式"><a href="#SpringBoot-使用-Tomcat-APR-模式" class="headerlink" title="SpringBoot 使用 Tomcat APR 模式"></a>SpringBoot 使用 Tomcat APR 模式</h1><a id="more"></a><blockquote><p>SpringBoot 内置的是 Tomcat Embed 容器，就是把 Tomcat 打包成一个 jar包库 来使用，直接运行 Application 就可以启动 Web服务器。本质没有区别，默认独立的 Tomcat 性能高于 SpringBoot 内置的 Tomcat。因为独立的 Tomcat 很多都配置了 APR 模式特性，大多数比较的时候 SpringBoot 内置的 Tomcat 并没有开启这个模式。可以选择自己启动这个特性。</p></blockquote><blockquote><p>从 GitHub 上的讨论看，如果需要 TLS 支持，使用 APR 是比较好的。否则没必要使用 APR，未来 APR 在 Tomcat 10 中可能会被移除。<br><a href="https://github.com/spring-projects/spring-boot/pull/10079" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/pull/10079</a></p></blockquote><h2 id="在-Tomcat-中提供了三种方式：BIO、NIO、APR。"><a href="#在-Tomcat-中提供了三种方式：BIO、NIO、APR。" class="headerlink" title="在 Tomcat 中提供了三种方式：BIO、NIO、APR。"></a>在 Tomcat 中提供了三种方式：BIO、NIO、APR。</h2><h3 id="BIO-模式"><a href="#BIO-模式" class="headerlink" title="BIO 模式"></a>BIO 模式</h3><blockquote><p>采用 Java IO 技术，单线程处理单请求（Tomcat7以下默认）<br>Tomcat 7 以下的版本都是 BIO，就是一个请求是一个独立的线程。不能适用高并发的场景。阻塞式 I/O，采用传统的 java I/O 进行操作，该模式下每个请求都会创建一个线程，适用于并发量小的场景</p></blockquote><h3 id="NIO-模式"><a href="#NIO-模式" class="headerlink" title="NIO 模式"></a>NIO 模式</h3><blockquote><p>采用 Java NIO 技术，少量线程处理大量请求（Tomcat8以上默认）<br>Tomcat 8 以上的版本，默认都是 NIO。同步非阻塞，比传统 BIO 能更好的支持大并发，Tomcat 8.0 后默认采用该模式</p></blockquote><h3 id="APR-模式"><a href="#APR-模式" class="headerlink" title="APR 模式"></a>APR 模式</h3><blockquote><p>APR(Apache Portable Runtime)<br>采用 JNI 技术，从操作层面解决 I/O 阻塞问题，适合高并发场景<br>APR 的整体模式还是非阻塞 I/O，实现的线程模型也是按照 NIO 的标准模型实现的，<br>APR 是一种基于 JNI 形式调用http服务器的核心动态链接库来处理的文件和网络读写模式（文件读取和网络传输操作）。需要预先编译安装 APR库，现在很多高版本的 Tomcat 默认都走它了。在 Tomcat 中配置，很好配置，直接修改 protocol 就可以了。但是在 SpringBoot 中，配置是在 Java 代码中写的。<br>从官方文档 <a href="http://apr.apache.org/docs/apr/1.6/modules.html" target="_blank" rel="noopener">http://apr.apache.org/docs/apr/1.6/modules.html</a><br>可以看到 APR 根据不同操作系统，分别用 C 重写了大部分IO和系统线程操作模块，<br>这就是为什么 APR 在不改动代码的情况下能够提升。</p></blockquote><h2 id="SpringBoot-开启-APR-模式"><a href="#SpringBoot-开启-APR-模式" class="headerlink" title="SpringBoot 开启 APR 模式"></a>SpringBoot 开启 APR 模式</h2><blockquote><p>在 SpringBoot 中内嵌的 Tomcat 默认启动开启的是 NIO 模式，这里如果我们要在 Linux 内核的系统上使用 APR 模式，那么需要安装一些 lib库，可以通过 rpm -q | grep apr 来查看是否安装了 apr，如果安装了则不再需要安装。</p></blockquote><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install apr-devel gcc gcc-devel openssl openssl-devel expat-devel</span><br></pre></td></tr></table></figure><h2 id="OpenSSL-安装"><a href="#OpenSSL-安装" class="headerlink" title="OpenSSL 安装"></a>OpenSSL 安装</h2><blockquote><p>OpenSSL 需要版本大于 1.0.2，如果不使用 https openssl 也可以不安装，就是在启动的时候会报 OpenSSL 的错误，直接忽视就可以了。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OpenSSL 下载地址</span></span><br><span class="line">https://www.openssl.org/<span class="built_in">source</span>/</span><br><span class="line"></span><br><span class="line">wget -c https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1a.tar.gz</span><br></pre></td></tr></table></figure><h3 id="安装-OpenSSL"><a href="#安装-OpenSSL" class="headerlink" title="安装 OpenSSL"></a>安装 OpenSSL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf openssl-1.1.1a.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssl-1.1.1a/</span><br><span class="line">./config --prefix=/usr/<span class="built_in">local</span>/openssl</span><br><span class="line">./config -t</span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="将-openssl-的-lib-加入系统-ldconfig-中"><a href="#将-openssl-的-lib-加入系统-ldconfig-中" class="headerlink" title="将 openssl 的 lib 加入系统 ldconfig 中"></a>将 openssl 的 lib 加入系统 ldconfig 中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ld.so.conf.d/openssl.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/openssl/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载一下</span></span><br><span class="line">ldconfig -v</span><br><span class="line">ldconfig -v | grep libssl</span><br></pre></td></tr></table></figure><h3 id="查看-OpenSSL-版本"><a href="#查看-OpenSSL-版本" class="headerlink" title="查看 OpenSSL 版本"></a>查看 OpenSSL 版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/openssl/</span><br><span class="line">./bin/openssl version -a</span><br><span class="line">OpenSSL 1.1.1a  20 Nov 2018</span><br><span class="line">built on: Wed Jan  2 02:19:47 2019 UTC</span><br><span class="line">platform: linux-x86_64</span><br><span class="line">options:  bn(64,64) rc4(16x,int) des(int) idea(int) blowfish(ptr) </span><br><span class="line">compiler: gcc -fPIC -pthread -m64 -Wa,--noexecstack -Wall -O3 -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DKECCAK1600_ASM -DRC4_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPADLOCK_ASM -DPOLY1305_ASM -DNDEBUG</span><br><span class="line">OPENSSLDIR: <span class="string">"/usr/local/openssl/ssl"</span></span><br><span class="line">ENGINESDIR: <span class="string">"/usr/local/openssl/lib/engines-1.1"</span></span><br><span class="line">Seeding <span class="built_in">source</span>: os-specific</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果遇到以下错误</span></span><br><span class="line">openssl: error <span class="keyword">while</span> loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory</span><br><span class="line">openssl: error <span class="keyword">while</span> loading shared libraries: libcrypto.so.1.1: cannot open shared object file: No such file or directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能是由于 OpenSSL 库的位置不正确造成的</span></span><br><span class="line"><span class="comment"># 做一下软链接，就好了</span></span><br><span class="line">ln -svnf /usr/<span class="built_in">local</span>/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.so.1.1</span><br><span class="line">ln -svnf /usr/<span class="built_in">local</span>/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile.d/openssl.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> OPENSSL_HOME=/usr/<span class="built_in">local</span>/openssl</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$OPENSSL_HOME</span>/bin</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> profile</span><br><span class="line">openssl version -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或把原来的命令备份一下，做个软链接</span></span><br><span class="line">ll -h /usr/bin/openssl</span><br><span class="line">mv /usr/bin/openssl&#123;,_bak&#125;</span><br><span class="line">mv /usr/include/openssl&#123;,openssl_bak&#125;</span><br><span class="line">ln -svnf /usr/<span class="built_in">local</span>/openssl/bin/openssl /usr/bin/openssl</span><br><span class="line">ln -svnf /usr/<span class="built_in">local</span>/openssl/include/openssl /usr/include/openssl</span><br></pre></td></tr></table></figure><h2 id="APR-安装"><a href="#APR-安装" class="headerlink" title="APR 安装"></a>APR 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># APR 下载地址</span></span><br><span class="line">http://apr.apache.org/download.cgi</span><br></pre></td></tr></table></figure><h3 id="安装-apr"><a href="#安装-apr" class="headerlink" title="安装 apr"></a>安装 apr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/tools/</span><br><span class="line">tar -zxvf apr-1.6.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> apr-1.6.5/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否符合安装条件并配置安装参数，检查是否缺失类库，一般来说如果安装的不是精简版系统都是能顺利通过的</span></span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/apr</span><br><span class="line"><span class="comment"># 报错信息</span></span><br><span class="line">config.status: executing libtool commands</span><br><span class="line">rm: cannot remove <span class="string">'libtoolT'</span>: No such file or directory</span><br><span class="line">config.status: executing default commands</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方法</span></span><br><span class="line"><span class="comment"># 编辑 configure 文件</span></span><br><span class="line"><span class="built_in">cd</span> apr-1.6.5/</span><br><span class="line">vim configure</span><br><span class="line">把 <span class="variable">$RM</span> <span class="string">"<span class="variable">$cfgfile</span>"</span> 这行代码注释掉</span><br><span class="line">或 把 <span class="variable">$RM</span> <span class="string">"<span class="variable">$cfgfile</span>"</span> 这行删除掉</span><br><span class="line">或 写成 <span class="variable">$RM</span> -f <span class="string">"<span class="variable">$cfgfile</span>"</span></span><br><span class="line">重新再运行 ./configure 就可以了</span><br><span class="line"></span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br><span class="line"><span class="comment"># 如果不设置安装路径，系统默认安装路径为 /usr/apr/lib</span></span><br></pre></td></tr></table></figure><h3 id="安装-apr-util"><a href="#安装-apr-util" class="headerlink" title="安装 apr-util"></a>安装 apr-util</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/tools/</span><br><span class="line">tar -zxvf apr-util-1.6.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> apr-util-1.6.1/</span><br><span class="line"><span class="comment"># 安装 apr-util 需要配置 apr路径 和 jvm路径，否则会报错找不到apr</span></span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/apr-utils \</span><br><span class="line">--with-apr=/usr/<span class="built_in">local</span>/apr</span><br><span class="line"><span class="comment"># --with-java-home=/data/jdk1.8.0_192</span></span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="安装-apr-iconv"><a href="#安装-apr-iconv" class="headerlink" title="安装 apr-iconv"></a>安装 apr-iconv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 expat 开发库</span></span><br><span class="line">yum -y install expat-devel</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /data/tools/</span><br><span class="line">tar -xvf apr-iconv-1.2.2.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> apr-iconv-1.2.2/</span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/apr-iconv \</span><br><span class="line">--with-apr=/usr/<span class="built_in">local</span>/apr</span><br><span class="line"><span class="comment"># --with-java-home=/data/jdk1.8.0_192</span></span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="安装-tomcat-native"><a href="#安装-tomcat-native" class="headerlink" title="安装 tomcat native"></a>安装 tomcat native</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 libtool 依赖库</span></span><br><span class="line">yum -y install libtool libtool-devel</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /data/tools/</span><br><span class="line">tar -zxvf apache-tomcat-8.5.37.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> apache-tomcat-8.5.37/bin/</span><br><span class="line">tar -zxvf tomcat-native.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> tomcat-native-1.2.19-src/native/</span><br><span class="line">./configure \</span><br><span class="line">--with-apr=/usr/<span class="built_in">local</span>/apr \</span><br><span class="line">--with-java-home=/data/jdk1.8.0_192 \</span><br><span class="line">--with-ssl=/usr/<span class="built_in">local</span>/openssl \</span><br><span class="line">--with-ssl=yes</span><br><span class="line">make -j 4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="配置-Apr"><a href="#配置-Apr" class="headerlink" title="配置 Apr"></a>配置 Apr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/profile</span></span><br><span class="line">vim /etc/profile.d/apr.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/usr/<span class="built_in">local</span>/apr/lib</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h2 id="新增-APRConfig-类"><a href="#新增-APRConfig-类" class="headerlink" title="新增 APRConfig 类"></a>新增 APRConfig 类</h2><blockquote><p>网上大部分讲解配置tomcat apr的文章，都只是讲了如何在独立 Tomcat 服务上如何配置 apr，<br>只需要修改 server.xml 中的 connnector 的 protocol 就可以了，<br>对于 SpringBoot 会稍微复杂些，需要增加一个 apr 配置类在启动的时候修改 Embed 的 tomcat connector 网络接入协议</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">packagecom.ochain.data2chain.gateway.config;</span><br><span class="line"></span><br><span class="line">importorg.apache.catalina.LifecycleListener;</span><br><span class="line">importorg.apache.catalina.core.AprLifecycleListener;</span><br><span class="line">importorg.springframework.beans.factory.annotation.Value;</span><br><span class="line">importorg.springframework.boot.context.embedded.EmbeddedServletContainerFactory;</span><br><span class="line">importorg.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;</span><br><span class="line">importorg.springframework.context.annotation.Bean;</span><br><span class="line">importorg.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APRConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;tomcat.apr:false&#125;"</span>)</span><br><span class="line">    privateboolean enabled;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatEmbeddedServletContainerFactory container = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">        <span class="keyword">if</span>(enabled) &#123;</span><br><span class="line">            LifecycleListener arpLifecycle = <span class="keyword">new</span> AprLifecycleListener();</span><br><span class="line">            container.setProtocol(<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span>);</span><br><span class="line">            container.addContextLifecycleListeners(arpLifecycle);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.catalina.core.AprLifecycleListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APRConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// https://docs.spring.io/spring-boot/docs/1.5.6.RELEASE/reference/htmlsingle/#howto-discover-build-in-options-for-external-properties</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatEmbeddedServletContainerFactory tomcat = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">        tomcat.setProtocol(<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span>);</span><br><span class="line">        tomcat.addContextLifecycleListeners(<span class="keyword">new</span> AprLifecycleListener());</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置完启动，有可能会报错"><a href="#配置完启动，有可能会报错" class="headerlink" title="配置完启动，有可能会报错"></a>配置完启动，有可能会报错</h2><h3 id="错误问题"><a href="#错误问题" class="headerlink" title="错误问题"></a>错误问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-01-02 00:45:55,891 [main] ERROR org.apache.catalina.core.StandardService:181 - Failed to start connector [Connector[org.apache.coyote.http11.Http11AprProtocol-8080]]</span><br><span class="line">org.apache.catalina.LifecycleException: Failed to initialize component [Connector[org.apache.coyote.http11.Http11AprProtocol-8080]]</span><br></pre></td></tr></table></figure><blockquote><p>需要在启动 SpringBoot 的服务器上安装 tomcat-native 和 apr 的模块</p></blockquote><h3 id="启动-SpringBoot-系统找不到-apr-的-lib-库"><a href="#启动-SpringBoot-系统找不到-apr-的-lib-库" class="headerlink" title="启动 SpringBoot 系统找不到 apr 的 lib 库"></a>启动 SpringBoot 系统找不到 apr 的 lib 库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.context.embedded.tomcat.ConnectorStartFailedException: Connector configured tolisten onport 8080 failed tostart</span><br><span class="line">...</span><br><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TOSTART</span><br><span class="line">***************************</span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">The Tomcat connector configured tolisten onport 8080 failed tostart. Theport may already be inuse orthe connector may be misconfigured.</span><br></pre></td></tr></table></figure><h3 id="打开-debug-后查看系统日志发现真正的原因是系统找不到-apr-的-lib库"><a href="#打开-debug-后查看系统日志发现真正的原因是系统找不到-apr-的-lib库" class="headerlink" title="打开 debug 后查看系统日志发现真正的原因是系统找不到 apr 的 lib库"></a>打开 debug 后查看系统日志发现真正的原因是系统找不到 apr 的 lib库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.catalina.LifecycleException: The configured protocol [org.apache.coyote.http11.Http11AprProtocol] requires the APR/native library <span class="built_in">which</span> is not available</span><br></pre></td></tr></table></figure><blockquote><p>解决方法<br>在启动命令行中添加指定 apr库路径</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.library.path=/usr/<span class="built_in">local</span>/apr/lib -jar xxxx-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><h3 id="启动-SpringBoot"><a href="#启动-SpringBoot" class="headerlink" title="启动 SpringBoot"></a>启动 SpringBoot</h3><blockquote><p>启动成功后看到日志中输出以下内容，则表示 apr 模式启动成功</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-01-02 15:31:19,032 - Initializing ProtocolHandler [<span class="string">"http-apr-8080"</span>]</span><br><span class="line">2019-01-02 15:31:19,051 - Starting ProtocolHandler [<span class="string">"http-apr-8080"</span>]</span><br><span class="line">2019-01-02 15:31:19,080 - Tomcat started on port(s): 8080(http)</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.jianshu.com/p/f716726ba340" target="_blank" rel="noopener">https://www.jianshu.com/p/f716726ba340</a><br><a href="https://www.cnblogs.com/yueli/p/9668088.html" target="_blank" rel="noopener">https://www.cnblogs.com/yueli/p/9668088.html</a><br><a href="http://www.cnblogs.com/xing901022/p/9145914.html" target="_blank" rel="noopener">http://www.cnblogs.com/xing901022/p/9145914.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot-使用-Tomcat-APR-模式&quot;&gt;&lt;a href=&quot;#SpringBoot-使用-Tomcat-APR-模式&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot 使用 Tomcat APR 模式&quot;&gt;&lt;/a&gt;SpringBoot 使用 Tomcat APR 模式&lt;/h1&gt;
    
    </summary>
    
      <category term="SpringBoot笔记" scheme="http://www.gmlyo.com/categories/SpringBoot%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SpringBoot 使用 Tomcat APR 模式" scheme="http://www.gmlyo.com/tags/SpringBoot-%E4%BD%BF%E7%94%A8-Tomcat-APR-%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Next 解决 Busuanzi 统计浏览失效</title>
    <link href="http://www.gmlyo.com/2018/12/02/Next-%E8%A7%A3%E5%86%B3-Busuanzi-%E7%BB%9F%E8%AE%A1%E6%B5%8F%E8%A7%88%E5%A4%B1%E6%95%88/"/>
    <id>http://www.gmlyo.com/2018/12/02/Next-解决-Busuanzi-统计浏览失效/</id>
    <published>2018-12-01T17:43:32.000Z</published>
    <updated>2018-12-01T17:46:30.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Next-解决-Busuanzi-统计浏览失效"><a href="#Hexo-Next-解决-Busuanzi-统计浏览失效" class="headerlink" title="Hexo Next 解决 Busuanzi 统计浏览失效"></a>Hexo Next 解决 Busuanzi 统计浏览失效</h1><a id="more"></a><p>由于 busuanzi（不蒜子）的网址更新，导致了使用 Hexo Next 主题时统计浏览数失效。</p><p>不蒜子官网<br><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">http://ibruce.info/2015/04/04/busuanzi/</a></p><p>解决方法<br>到 <code>hexo</code> 的 <code>themes</code> 目录下<br>进入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next/layout/_third-party/analytics/</span><br></pre></td></tr></table></figure><p>打开 <code>busuanzi-counter.swig</code><br>将<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span></span><br></pre></td></tr></table></figure></p><p>修改为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span></span><br></pre></td></tr></table></figure></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://blog.csdn.net/ddydavie/article/details/83020549" target="_blank" rel="noopener">https://blog.csdn.net/ddydavie/article/details/83020549</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-Next-解决-Busuanzi-统计浏览失效&quot;&gt;&lt;a href=&quot;#Hexo-Next-解决-Busuanzi-统计浏览失效&quot; class=&quot;headerlink&quot; title=&quot;Hexo Next 解决 Busuanzi 统计浏览失效&quot;&gt;&lt;/a&gt;Hexo Next 解决 Busuanzi 统计浏览失效&lt;/h1&gt;
    
    </summary>
    
      <category term="Next笔记" scheme="http://www.gmlyo.com/categories/Next%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Next 解决 Busuanzi 统计浏览失效" scheme="http://www.gmlyo.com/tags/Next-%E8%A7%A3%E5%86%B3-Busuanzi-%E7%BB%9F%E8%AE%A1%E6%B5%8F%E8%A7%88%E5%A4%B1%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>日志统计常用技巧</title>
    <link href="http://www.gmlyo.com/2018/10/29/%E6%97%A5%E5%BF%97%E7%BB%9F%E8%AE%A1%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.gmlyo.com/2018/10/29/日志统计常用技巧/</id>
    <published>2018-10-29T13:33:34.000Z</published>
    <updated>2018-10-29T13:42:37.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志统计常用技巧"><a href="#日志统计常用技巧" class="headerlink" title="日志统计常用技巧"></a>日志统计常用技巧</h1><a id="more"></a><h2 id="按时间截取"><a href="#按时间截取" class="headerlink" title="按时间截取"></a>按时间截取</h2><blockquote><p>截取指定时间段日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/^2018-10-29 14:30/,/^2018-10-29 14:32/p'</span> server.log | more</span><br></pre></td></tr></table></figure><h2 id="按标识截取"><a href="#按标识截取" class="headerlink" title="按标识截取"></a>按标识截取</h2><blockquote><p>截取特定标识日志的内容（仅特定标识日志行、或标识附近日志行）<br>过滤包含特定标识（忽略大小写）的日志、并显示前后 10 行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep -i -A 10 -B 10 <span class="string">"error"</span> access.log | more</span><br><span class="line">grep -i -A 10 -B 10 <span class="string">"error"</span> access.log &gt; access_error.txt</span><br><span class="line"></span><br><span class="line">grep -i -C 10 <span class="string">"error"</span> access.log | more</span><br><span class="line">grep -i -C 10 <span class="string">"error"</span> access.log &gt; access_error.txt</span><br></pre></td></tr></table></figure><h2 id="按指定列截取"><a href="#按指定列截取" class="headerlink" title="按指定列截取"></a>按指定列截取</h2><blockquote><p>截取第7列为 ‘/test’ 的行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk <span class="string">'if($7=="/test"&#123;print $0&#125;'</span> | more</span><br></pre></td></tr></table></figure><h2 id="日志统计"><a href="#日志统计" class="headerlink" title="日志统计"></a>日志统计</h2><blockquote><p>分时访问量统计<br>对日志中的时间列进行拆分，根据时间格式取 YYYY-mm-DD HH:MM 部分、进行排序、汇总，即可获得每分钟的访问量统计。</p></blockquote><h3 id="按分钟汇总统计访问量"><a href="#按分钟汇总统计访问量" class="headerlink" title="按分钟汇总统计访问量"></a>按分钟汇总统计访问量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | grep <span class="string">"^2012-"</span> | awk -F\: <span class="string">'&#123;print $1" "$2":"$3&#125;'</span> | sort | uniq -c | more</span><br></pre></td></tr></table></figure><h3 id="按小时汇总统计访问量"><a href="#按小时汇总统计访问量" class="headerlink" title="按小时汇总统计访问量"></a>按小时汇总统计访问量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | grep <span class="string">"^2012-"</span> | awk -F\: <span class="string">'&#123;print $1" "$2"&#125;'</span> | sort | uniq -c | more</span><br></pre></td></tr></table></figure><h2 id="日志中的-IP-地址"><a href="#日志中的-IP-地址" class="headerlink" title="日志中的 IP 地址"></a>日志中的 IP 地址</h2><blockquote><p>Web服务器日志(Nginx)中，通常第一列为客户端IP地址，取该段值进行排序、汇总，即可得到IP:访问次数的统计。</p></blockquote><h3 id="从日志中统计-IP-访问次数"><a href="#从日志中统计-IP-访问次数" class="headerlink" title="从日志中统计 IP 访问次数"></a>从日志中统计 IP 访问次数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk <span class="string">'&#123;print $1&#125;'</span> | sort | uniq -c | more</span><br></pre></td></tr></table></figure><h3 id="统计来访唯一-IP-数"><a href="#统计来访唯一-IP-数" class="headerlink" title="统计来访唯一 IP 数"></a>统计来访唯一 IP 数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk <span class="string">'&#123;print $1&#125;'</span> | sort | uniq | wc -l</span><br></pre></td></tr></table></figure><h2 id="网络连接状态"><a href="#网络连接状态" class="headerlink" title="网络连接状态"></a>网络连接状态</h2><p>netstat 命令可获取系统当前的侦听、连接状态，包括协议、源IP:端口、目标IP:端口、连接状态信息，取关注的列进行排序、汇总，即可获得连接数、状态等统计。</p><h3 id="TCP连接数"><a href="#TCP连接数" class="headerlink" title="TCP连接数"></a>TCP连接数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">netstat -antp | grep ^tcp | awk <span class="string">'&#123;print $5&#125;'</span> | awk -F\: <span class="string">'&#123;print $1&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">      5 0.0.0.0</span><br><span class="line">      2 192.217.199.215</span><br><span class="line">      1 91.189.89.144</span><br><span class="line">      1 172.16.17.4</span><br><span class="line">      1 172.16.17.3</span><br><span class="line">      1 172.16.17.27</span><br></pre></td></tr></table></figure><h3 id="TCP-连接状态"><a href="#TCP-连接状态" class="headerlink" title="TCP 连接状态"></a>TCP 连接状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netstat -antp | grep ^tcp | awk <span class="string">'&#123;print $6&#125;'</span> | sort | uniq -c | sort -nr </span><br><span class="line">     17 ESTABLISHED</span><br><span class="line">      8 LISTEN</span><br><span class="line">      1 CLOSE_WAIT</span><br></pre></td></tr></table></figure><blockquote><p>使用 awk 的正则匹配进行过滤，减少前面的 grep 指令<br>不过 grep 的过滤处理速度似乎比 awk 的正则匹配速度更快，因此对大日志分析时可能还是先用 grep 过滤效率更高</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">time cat netstat.txt | awk <span class="string">'/^tcp/ &#123;print $6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 TIME_WAIT</span><br><span class="line">    203 ESTABLISHED</span><br><span class="line">     29 FIN_WAIT1</span><br><span class="line">     18 LISTEN</span><br><span class="line">     17 FIN_WAIT2</span><br><span class="line"></span><br><span class="line">real    0m0.017s</span><br><span class="line">user    0m0.014s</span><br><span class="line">sys 0m0.002s</span><br><span class="line"></span><br><span class="line">time cat netstat.txt | grep ^tcp | awk <span class="string">'&#123;print $6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 TIME_WAIT</span><br><span class="line">    203 ESTABLISHED</span><br><span class="line">     29 FIN_WAIT1</span><br><span class="line">     18 LISTEN</span><br><span class="line">     17 FIN_WAIT2</span><br><span class="line"></span><br><span class="line">real    0m0.008s</span><br><span class="line">user    0m0.005s</span><br><span class="line">sys 0m0.001s</span><br></pre></td></tr></table></figure><h3 id="其他-awk-匹配方式"><a href="#其他-awk-匹配方式" class="headerlink" title="其他 awk 匹配方式"></a>其他 awk 匹配方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat netstat.txt | awk <span class="string">'&#123;if($1=="tcp")print $6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 TIME_WAIT</span><br><span class="line">    203 ESTABLISHED</span><br><span class="line">     29 FIN_WAIT1</span><br><span class="line">     18 LISTEN</span><br><span class="line">     17 FIN_WAIT2</span><br><span class="line"></span><br><span class="line">cat netstat.txt | awk <span class="string">'$1=="tcp" &#123;print $6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 TIME_WAIT</span><br><span class="line">    203 ESTABLISHED</span><br><span class="line">     29 FIN_WAIT1</span><br><span class="line">     18 LISTEN</span><br><span class="line">     17 FIN_WAIT2</span><br></pre></td></tr></table></figure><h3 id="多条件匹配"><a href="#多条件匹配" class="headerlink" title="多条件匹配"></a>多条件匹配</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cat netstat.txt | awk <span class="string">'/^tcp|^udp/ &#123;print $1"-"$6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 tcp-TIME_WAIT</span><br><span class="line">    203 tcp-ESTABLISHED</span><br><span class="line">     29 tcp-FIN_WAIT1</span><br><span class="line">     18 tcp-LISTEN</span><br><span class="line">     17 tcp-FIN_WAIT2</span><br><span class="line">      4 udp-32366/rpcbind</span><br><span class="line">      4 udp--</span><br><span class="line">      3 udp-32526/rpc.statd</span><br><span class="line">      2 udp-19339/rpc.mountd</span><br><span class="line">      1 udp-ESTABLISHED</span><br><span class="line">      1 udp-38143/gmond</span><br><span class="line">      1 udp-19335/rpc.rquotad</span><br><span class="line">      1 udp-1282/portreserve</span><br><span class="line"></span><br><span class="line">cat netstat.txt | awk <span class="string">'&#123;if($1~"^tcp" || $1~"^udp")print $1"-"$6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 tcp-TIME_WAIT</span><br><span class="line">    203 tcp-ESTABLISHED</span><br><span class="line">     29 tcp-FIN_WAIT1</span><br><span class="line">     18 tcp-LISTEN</span><br><span class="line">     17 tcp-FIN_WAIT2</span><br><span class="line">      4 udp-32366/rpcbind</span><br><span class="line">      4 udp--</span><br><span class="line">      3 udp-32526/rpc.statd</span><br><span class="line">      2 udp-19339/rpc.mountd</span><br><span class="line">      1 udp-ESTABLISHED</span><br><span class="line">      1 udp-38143/gmond</span><br><span class="line">      1 udp-19335/rpc.rquotad</span><br><span class="line">      1 udp-1282/portreserve</span><br><span class="line"></span><br><span class="line">cat netstat.txt | awk <span class="string">'&#123;if($1=="tcp" &amp;&amp; $6!~"ESTABLISHED")print $6&#125;'</span> | sort | uniq -c | sort -nr</span><br><span class="line">   2713 TIME_WAIT</span><br><span class="line">     29 FIN_WAIT1</span><br><span class="line">     18 LISTEN</span><br><span class="line">     17 FIN_WAIT2</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>示例一</strong></p><blockquote><p>扫描 gz 压缩文件，从中寻找带有 dianping_reply 的行，将改行按照[进行拆分，然后直接使用if条件进行判断，比较，最终输出想要的结果。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat access.log.tar.gz | grep <span class="string">'dianping_reply.log'</span> | awk <span class="string">'&#123;split($4,array,"[");if(array[2]&gt;="29/May/2016:00:00:26" &amp;&amp; array[2]&lt;="29/May/2016:00:01:14")&#123;print $0&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>命令解释<br><code>zcat</code>   直接读取压缩文件的内容<br><code>grep</code>   过滤特定字符的行<br><code>awk</code>    用于执行命令<br><code>split</code>  用于切分字符串</p><p><strong>示例二</strong></p><blockquote><p>过滤 <code>22/Feb/2017-18:52:59</code> 之前的日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test.log</span><br><span class="line">[22/Feb/2017-18:51:58]    api.momo.com    /api/feed    HTTP/1.1      121.0.0.1      android1.2</span><br><span class="line">[22/Feb/2017-18:51:59]    api.momo.com    /api/follow    HTTP/1.1      121.0.0.2    iphone1.1</span><br><span class="line">[22/Feb/2017-18:52:58]    api.momo.com    /api/user    HTTP/1.1      121.0.0.3    iphone1.1</span><br><span class="line">[22/Feb/2017-18:52:41]    api.momo.com    /api/feed    HTTP/1.1      121.0.0.4    android1.2</span><br><span class="line">[22/Feb/2017-18:56:30]    api.momo.com    /api/follow    HTTP/1.1      121.0.0.2    android1.2</span><br><span class="line">[22/Feb/2017-18:51:21]    api.momo.com    /api/user    HTTP/1.1      121.0.0.3    iphone1.1</span><br><span class="line">[22/Feb/2017-18:59:58]    api.momo.com    /api/user    HTTP/1.1      121.0.0.3    android1.2</span><br><span class="line">[22/Feb/2017-18:51:21]    api.momo.com    /api/feed    HTTP/1.1      121.0.0.1    iphone1.1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.log | awk <span class="string">'&#123;split($1,array,"[");split(array[2],array2,"]");if(array2[1] &gt;= "22/Feb/2017-18:52:59")&#123;print($0)&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://xstarcd.github.io/wiki/shell/logview_tips.html" target="_blank" rel="noopener">http://xstarcd.github.io/wiki/shell/logview_tips.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;日志统计常用技巧&quot;&gt;&lt;a href=&quot;#日志统计常用技巧&quot; class=&quot;headerlink&quot; title=&quot;日志统计常用技巧&quot;&gt;&lt;/a&gt;日志统计常用技巧&lt;/h1&gt;
    
    </summary>
    
      <category term="Shell笔记" scheme="http://www.gmlyo.com/categories/Shell%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日志统计常用技巧" scheme="http://www.gmlyo.com/tags/%E6%97%A5%E5%BF%97%E7%BB%9F%E8%AE%A1%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Shell 按时间截取日志</title>
    <link href="http://www.gmlyo.com/2018/10/29/Shell-%E6%8C%89%E6%97%B6%E9%97%B4%E6%88%AA%E5%8F%96%E6%97%A5%E5%BF%97/"/>
    <id>http://www.gmlyo.com/2018/10/29/Shell-按时间截取日志/</id>
    <published>2018-10-29T03:24:28.000Z</published>
    <updated>2018-12-01T17:40:14.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell-按时间截取日志"><a href="#Shell-按时间截取日志" class="headerlink" title="Shell 按时间截取日志"></a>Shell 按时间截取日志</h1><p>截取查看某时间段内的日志</p><a id="more"></a><h2 id="sed-截取"><a href="#sed-截取" class="headerlink" title="sed 截取"></a>sed 截取</h2><blockquote><p>精确到 <code>时分秒</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/2018-10-22|10:23:44/,/2018-10-22|11:23:44/'</span> access.log &gt; 10-11_access.log</span><br></pre></td></tr></table></figure><blockquote><p>精确到小时</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/2018-10-22|10/,/2018-10-22|11/'</span> access.log &gt; 10-11_access.log</span><br></pre></td></tr></table></figure><blockquote><p><code>sed -n &#39;/开始时间/,/结束时间/&#39; 被截取日志原文件 &gt; 截取后日志新文件</code><br><code>$p</code> 显示到最后一行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看某时间段到当前的 messages 系统日志</span></span><br><span class="line">sed -n <span class="string">'/May 20 17/,$p'</span> /var/<span class="built_in">log</span>/messages | less</span><br><span class="line"></span><br><span class="line">sed -n <span class="string">'/2018-10-29 09:00:00/,$p'</span> access.log &gt; /tmp/access.log</span><br></pre></td></tr></table></figure><blockquote><p>sed 截取 10:00:00 到 现在的 catalina.out 日志内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/2018-04-11 10:[0-9][0-9]:[0-9][0-9]/,$p'</span> catalina.out | less</span><br></pre></td></tr></table></figure><blockquote><p>sed 截取 2018-04-11 这天 到 现在的 catalina.out 日志内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/2018-04-11 [0-9][0-9]:[0-9][0-9]:[0-9][0-9]/,$p'</span> catalina.out | less</span><br></pre></td></tr></table></figure><blockquote><p>sed 截取 2018-03-14 09:00:00 2018-03-14 12:00:00 的日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/2018-03-14 09:[0][0]:[0][0]/,/2018-03-14 12:[0][0]:[0][0]/p'</span> catalina.out &gt; /tmp/catalina.log</span><br></pre></td></tr></table></figure><hr><h2 id="grep-截取"><a href="#grep-截取" class="headerlink" title="grep 截取"></a>grep 截取</h2><blockquote><p>egrep 截取 13:38 到 14:00 之间的日志内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egrep <span class="string">'13:3[8-9]:[0-9][0-9]|13:[4-5][0-9]:[0-9][0-9]'</span> catalina.out | less</span><br></pre></td></tr></table></figure><blockquote><p>egrep 截取 2018-04-11 到 2018-04-12 之间的日志内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egrep <span class="string">'2018-04-11 [0-9][0-9]:[0-9][0-9]:[0-9][0-9]|2018-04-12 [0-9][0-9]:[0-9][0-9]:[0-9][0-9]'</span> catalina.out | less</span><br></pre></td></tr></table></figure><hr><p><strong>截取 Nginx 访问日志</strong></p><blockquote><p>查看 21/Jul/2014:14:37:50 到 21/Jul/2014:14:38:00 时间段内 access.log 的访问日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk <span class="string">'$4 &gt;="[21/Jul/2014:14:37:50" &amp;&amp; $4 &lt;="[21/Jul/2014:14:38:00"'</span></span><br></pre></td></tr></table></figure><h2 id="时间转换在线工具地址"><a href="#时间转换在线工具地址" class="headerlink" title="时间转换在线工具地址"></a>时间转换在线工具地址</h2><p><a href="https://tool.lu/timestamp/" target="_blank" rel="noopener">https://tool.lu/timestamp/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Shell-按时间截取日志&quot;&gt;&lt;a href=&quot;#Shell-按时间截取日志&quot; class=&quot;headerlink&quot; title=&quot;Shell 按时间截取日志&quot;&gt;&lt;/a&gt;Shell 按时间截取日志&lt;/h1&gt;&lt;p&gt;截取查看某时间段内的日志&lt;/p&gt;
    
    </summary>
    
      <category term="Shell笔记" scheme="http://www.gmlyo.com/categories/Shell%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Shell 按时间截取日志" scheme="http://www.gmlyo.com/tags/Shell-%E6%8C%89%E6%97%B6%E9%97%B4%E6%88%AA%E5%8F%96%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Python 详解time模块中 UTC世界时间、时间戳、字符串三者的转换</title>
    <link href="http://www.gmlyo.com/2018/10/24/Python-%E8%AF%A6%E8%A7%A3time%E6%A8%A1%E5%9D%97%E4%B8%ADUTC%E4%B8%96%E7%95%8C%E6%97%B6%E9%97%B4%E3%80%81%E6%97%B6%E9%97%B4%E6%88%B3%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%89%E8%80%85%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>http://www.gmlyo.com/2018/10/24/Python-详解time模块中UTC世界时间、时间戳、字符串三者的转换/</id>
    <published>2018-10-24T05:57:02.000Z</published>
    <updated>2018-10-24T05:57:04.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-详解time模块中-UTC世界时间、时间戳、字符串三者的转换"><a href="#Python-详解time模块中-UTC世界时间、时间戳、字符串三者的转换" class="headerlink" title="Python 详解time模块中 UTC世界时间、时间戳、字符串三者的转换"></a>Python 详解time模块中 UTC世界时间、时间戳、字符串三者的转换</h1><a id="more"></a><h2 id="本地时间-转换-为时间戳"><a href="#本地时间-转换-为时间戳" class="headerlink" title="本地时间 转换 为时间戳"></a>本地时间 转换 为时间戳</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">date_=datetime.datetime(<span class="number">2018</span>,<span class="number">6</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">55</span>,<span class="number">00</span>)</span><br><span class="line">timestamp2=time.mktime(date_.timetuple())   <span class="comment"># date_.timetuple() 将datetime 格式的转化为 time 模块的 tuple 格式</span></span><br><span class="line">print(timestamp2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳转换为本地时间</span></span><br><span class="line"></span><br><span class="line">ltime=time.localtime(<span class="number">1529112900</span>)  <span class="comment">#time.struct_time(tm_year=2018, tm_mon=6, tm_mday=16, tm_hour=9, tm_min=35, tm_sec=0, tm_wday=5, tm_yday=167, tm_isdst=0)</span></span><br><span class="line">timeStr=time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, ltime)</span><br><span class="line">print(timeStr)</span><br></pre></td></tr></table></figure><h2 id="UTCS-时间转换为时间戳-2018-07-13T16-00-00Z"><a href="#UTCS-时间转换为时间戳-2018-07-13T16-00-00Z" class="headerlink" title="UTCS 时间转换为时间戳 2018-07-13T16:00:00Z"></a>UTCS 时间转换为时间戳 2018-07-13T16:00:00Z</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">utc_to_local</span><span class="params">(utc_time_str, utc_format=<span class="string">'%Y-%m-%dT%H:%M:%SZ'</span>)</span>:</span></span><br><span class="line">    local_tz = pytz.timezone(<span class="string">'Asia/Chongqing'</span>)      <span class="comment"># 定义本地时区</span></span><br><span class="line">    local_format = <span class="string">"%Y-%m-%d %H:%M:%S"</span>              <span class="comment"># 定义本地时间format</span></span><br><span class="line"></span><br><span class="line">    utc_dt = datetime.datetime.strptime(utc_time_str, utc_format)       <span class="comment"># 讲世界时间的格式转化为 datetime.datetime 格式</span></span><br><span class="line">    local_dt = utc_dt.replace(tzinfo=pytz.utc).astimezone(local_tz)     <span class="comment"># 想将 datetime 格式添加上世界时区，然后 astimezone 切换时区：世界时区 ==&gt; 本地时区</span></span><br><span class="line">    <span class="comment"># time_str = local_dt.strftime(local_format)                         # 将 datetime 格式转化为 str—format 格式</span></span><br><span class="line">    <span class="comment"># return int(time.mktime(time.strptime(time_str, local_format)))     # 运用 mktime 方法将 date—tuple 格式的时间转化为时间戳; time.strptime() 可以得到 tuple 的时间格式</span></span><br><span class="line">    <span class="keyword">return</span> int(time.mktime(local_dt.timetuple()))                       <span class="comment"># 返回当地时间戳</span></span><br></pre></td></tr></table></figure><h2 id="本地时间转换为-UTC-传入的本地时间戳-1531411200"><a href="#本地时间转换为-UTC-传入的本地时间戳-1531411200" class="headerlink" title="本地时间转换为 UTC  传入的本地时间戳 1531411200"></a>本地时间转换为 UTC  传入的本地时间戳 1531411200</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">local_to_utc</span><span class="params">(local_ts, utc_format=<span class="string">'%Y-%m-%dT%H:%MZ'</span>)</span>:</span></span><br><span class="line">    local_tz = pytz.timezone(<span class="string">'Asia/Chongqing'</span>)    <span class="comment"># 定义本地时区</span></span><br><span class="line">    local_format = <span class="string">"%Y-%m-%d %H:%M:%S"</span>               <span class="comment"># 定义本地时间 format</span></span><br><span class="line"></span><br><span class="line">    time_str = time.strftime(local_format, time.localtime(local_ts))    <span class="comment"># 首先将本地时间戳转化为时间元组，用 strftime 格式化成字符串</span></span><br><span class="line">    dt = datetime.datetime.strptime(time_str, local_format)             <span class="comment"># 将字符串用 strptime 转为为 datetime 中 datetime 格式</span></span><br><span class="line">    local_dt = local_tz.localize(dt, is_dst=<span class="keyword">None</span>)                       <span class="comment"># 给时间添加时区，等价于 dt.replace(tzinfo=pytz.timezone('Asia/Chongqing'))</span></span><br><span class="line">    utc_dt = local_dt.astimezone(pytz.utc)                              <span class="comment"># astimezone 切换时区</span></span><br><span class="line">    <span class="keyword">return</span> utc_dt.strftime(utc_format)                                  <span class="comment"># 返回世界时间格式</span></span><br><span class="line"></span><br><span class="line">print(utc_to_local(<span class="string">'2018-07-13T16:00:00Z'</span>, utc_format=<span class="string">'%Y-%m-%dT%H:%M:%SZ'</span>))</span><br><span class="line">print(local_to_utc(<span class="number">1531411200</span>, utc_format=<span class="string">'%Y-%m-%dT%H:%MZ'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1529412900.0</span></span><br><span class="line"><span class="string">2018-06-16 09:35:00</span></span><br><span class="line"><span class="string">1531497600</span></span><br><span class="line"><span class="string">2018-07-12T16:00Z</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://blog.csdn.net/brucewong0516/article/details/81100242" target="_blank" rel="noopener">https://blog.csdn.net/brucewong0516/article/details/81100242</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-详解time模块中-UTC世界时间、时间戳、字符串三者的转换&quot;&gt;&lt;a href=&quot;#Python-详解time模块中-UTC世界时间、时间戳、字符串三者的转换&quot; class=&quot;headerlink&quot; title=&quot;Python 详解time模块中 UTC世界时间、时间戳、字符串三者的转换&quot;&gt;&lt;/a&gt;Python 详解time模块中 UTC世界时间、时间戳、字符串三者的转换&lt;/h1&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python 详解time模块中 UTC世界时间、时间戳、字符串三者的转换" scheme="http://www.gmlyo.com/tags/Python-%E8%AF%A6%E8%A7%A3time%E6%A8%A1%E5%9D%97%E4%B8%AD-UTC%E4%B8%96%E7%95%8C%E6%97%B6%E9%97%B4%E3%80%81%E6%97%B6%E9%97%B4%E6%88%B3%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%89%E8%80%85%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Python 软件开发的目录规范</title>
    <link href="http://www.gmlyo.com/2018/09/24/Python-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E7%9B%AE%E5%BD%95%E8%A7%84%E8%8C%83/"/>
    <id>http://www.gmlyo.com/2018/09/24/Python-软件开发的目录规范/</id>
    <published>2018-09-23T17:12:04.000Z</published>
    <updated>2018-09-25T03:19:19.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-软件开发的目录规范"><a href="#Python-软件开发的目录规范" class="headerlink" title="Python 软件开发的目录规范"></a>Python 软件开发的目录规范</h1><a id="more"></a><h2 id="目录规范"><a href="#目录规范" class="headerlink" title="目录规范"></a>目录规范</h2><p><strong>项目目录规范</strong><br><img src="http://pa2bdkuiw.bkt.clouddn.com/%E7%9B%AE%E5%BD%95%E8%A7%84%E8%8C%83.png" alt="目录规范"></p><p><code>bin</code> 存放执行文件，整个程序的入口文件，比如启动功能<br><code>conf</code> 配置文件<br><code>lib</code> 存放自定义的共享库，经常使用的一些功能<br><code>core</code> 存放整个代码程序的核心逻辑<br><code>db</code> 存放数据库相关的<br><code>log</code> 日志相关的<br><code>Readme</code> 记录整个项目的描述信息</p><p><strong>项目文件规范</strong><br><img src="http://pa2bdkuiw.bkt.clouddn.com/%E7%9B%AE%E5%BD%95%E8%A7%84%E8%8C%83%E6%96%87%E4%BB%B6.png" alt="目录规范文件"></p><blockquote><p><code>src.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'注册。。。'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'支付。。。'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'转账。。。'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'提现。。。'</span>)</span><br><span class="line"></span><br><span class="line">func_dic = &#123;</span><br><span class="line">    <span class="string">'1'</span>: register,</span><br><span class="line">    <span class="string">'2'</span>: pay,</span><br><span class="line">    <span class="string">'3'</span>: transfer,</span><br><span class="line">    <span class="string">'4'</span>: withdraw</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 核心功能，和用户交互</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">"""</span></span><br><span class="line"><span class="string">        1 注册</span></span><br><span class="line"><span class="string">        2 支付</span></span><br><span class="line"><span class="string">        3 转账</span></span><br><span class="line"><span class="string">        4 提现</span></span><br><span class="line"><span class="string">        """</span>)</span><br><span class="line"></span><br><span class="line">        choice = input(<span class="string">'&gt;&gt;&gt;: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">in</span> func_dic:</span><br><span class="line">            func_dic[choice]()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'输入错误指令'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="获取项目根路径"><a href="#获取项目根路径" class="headerlink" title="获取项目根路径"></a>获取项目根路径</h2><blockquote><p>强调：只有被导入的模块才能使用 <code>.</code> 或 <code>..</code> 的语法<br>编辑 <code>start.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">r'E:\Project\core'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这样写会有问题，在程序给别人使用时，别人的路径不可能和程序开发者的目录路径一样</p></blockquote><p><strong>改进</strong></p><blockquote><p><code>__file__</code> 表示当前文件的绝对路径<br><code>abspath()</code> 规范路径格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(__file__)</span><br><span class="line">print(os.path.abspath(__file__))</span><br><span class="line"><span class="comment"># sys.path.append(r'E:\Project\core')</span></span><br><span class="line"><span class="comment"># os.path.dirname()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">E:/Project/bin/start.py</span><br><span class="line">E:\Project\bin\start.py</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">print(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">E:\Project\bin</span><br><span class="line">E:\Project</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.append(BASE_DIR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> core <span class="keyword">import</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    src.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br></pre></td></tr></table></figure><h2 id="获取-db-目录文件的路径"><a href="#获取-db-目录文件的路径" class="headerlink" title="获取 db 目录文件的路径"></a>获取 <code>db</code> 目录文件的路径</h2><blockquote><p>编辑 <code>setting.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">DB_PATH = <span class="string">'%s\%s\%s'</span> % (BASE_DIR, <span class="string">'db'</span>, <span class="string">'db.txt'</span>)</span><br><span class="line"></span><br><span class="line">print(DB_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">E:\Project\db\db.txt</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这种拼接方式有缺陷，如果是 Linux 系统，<code>\</code> 右斜杠就不能用了</p></blockquote><h3 id="解决跨平台路径格式的问题"><a href="#解决跨平台路径格式的问题" class="headerlink" title="解决跨平台路径格式的问题"></a>解决跨平台路径格式的问题</h3><blockquote><p>使用 <code>os.path.join</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">DB_PATH = os.path.join(BASE_DIR, <span class="string">'db'</span>, <span class="string">'db.txt'</span>)</span><br><span class="line"></span><br><span class="line">print(DB_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">E:\Project\db\db.txt</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Linux 系统输出格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">DB_PATH = os.path.join(BASE_DIR, <span class="string">'db'</span>, <span class="string">'db.txt'</span>)</span><br><span class="line"></span><br><span class="line">print(DB_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">/data/Project/db/db.txt</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="获取-log-目录路径"><a href="#获取-log-目录路径" class="headerlink" title="获取 log 目录路径"></a>获取 <code>log</code> 目录路径</h3><blockquote><p>编辑 <code>settings.py</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOG_PATH = os.path.join(BASE_DIR, <span class="string">'log'</span>, <span class="string">'access.log'</span>)</span><br><span class="line"></span><br><span class="line">print(LOG_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">E:\Project\log\access.log</span><br></pre></td></tr></table></figure><h2 id="项目目录规范示例"><a href="#项目目录规范示例" class="headerlink" title="项目目录规范示例"></a>项目目录规范示例</h2><h3 id="项目名-core-src-py"><a href="#项目名-core-src-py" class="headerlink" title="项目名/core/src.py"></a>项目名/core/src.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> lib <span class="keyword">import</span> common</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'注册。。。'</span>)</span><br><span class="line">    uname = input(<span class="string">'用户名：'</span>).strip()</span><br><span class="line">    pwd = input(<span class="string">'密码：'</span>).strip()</span><br><span class="line">    <span class="keyword">with</span> open(settings.DB_PATH, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'%s:%s\n'</span> % (uname, pwd))</span><br><span class="line"></span><br><span class="line">    common.logger(uname)</span><br><span class="line">    print(<span class="string">'注册成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'支付。。。'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'转账。。。'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'提现。。。'</span>)</span><br><span class="line"></span><br><span class="line">func_dic = &#123;</span><br><span class="line">    <span class="string">'1'</span>: register,</span><br><span class="line">    <span class="string">'2'</span>: pay,</span><br><span class="line">    <span class="string">'3'</span>: transfer,</span><br><span class="line">    <span class="string">'4'</span>: withdraw</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 核心功能，和用户交互</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">"""</span></span><br><span class="line"><span class="string">        1 注册</span></span><br><span class="line"><span class="string">        2 支付</span></span><br><span class="line"><span class="string">        3 转账</span></span><br><span class="line"><span class="string">        4 提现</span></span><br><span class="line"><span class="string">        按 q 退出</span></span><br><span class="line"><span class="string">        """</span>)</span><br><span class="line"></span><br><span class="line">        choice = input(<span class="string">'请选择相应的操作: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">'q'</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">not</span> <span class="keyword">in</span> func_dic:</span><br><span class="line">            print(<span class="string">'输入错误指令，请重新输入'</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        func_dic[choice]()</span><br></pre></td></tr></table></figure><h3 id="项目名-conf-settings-py"><a href="#项目名-conf-settings-py" class="headerlink" title="项目名/conf/settings.py"></a>项目名/conf/settings.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">DB_PATH = os.path.join(BASE_DIR, <span class="string">'db'</span>, <span class="string">'db.txt'</span>)</span><br><span class="line">LOG_PATH = os.path.join(BASE_DIR, <span class="string">'log'</span>, <span class="string">'access.log'</span>)</span><br></pre></td></tr></table></figure><h3 id="项目名-lib-common-py"><a href="#项目名-lib-common-py" class="headerlink" title="项目名/lib/common.py"></a>项目名/lib/common.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(time.strftime('%Y-%m-%d %X'))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logger</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(settings.LOG_PATH, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'%s, %s, 注册成功\n'</span> % (time.strftime(<span class="string">'%Y-%m-%d %X'</span>, time.localtime()), msg))</span><br></pre></td></tr></table></figure><h3 id="项目名-bin-start-py"><a href="#项目名-bin-start-py" class="headerlink" title="项目名/bin/start.py"></a>项目名/bin/start.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.append(BASE_DIR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> core <span class="keyword">import</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    src.run()</span><br></pre></td></tr></table></figure><h3 id="运行-start-py"><a href="#运行-start-py" class="headerlink" title="运行 start.py"></a>运行 start.py</h3><p><img src="http://pa2bdkuiw.bkt.clouddn.com/20180925111840.png" alt="运行start"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat db.txt</span><br><span class="line">egon:<span class="number">123</span></span><br><span class="line"></span><br><span class="line">tail access.log</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-24</span> <span class="number">01</span>:<span class="number">08</span>:<span class="number">11</span>, egon, 注册成功</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-软件开发的目录规范&quot;&gt;&lt;a href=&quot;#Python-软件开发的目录规范&quot; class=&quot;headerlink&quot; title=&quot;Python 软件开发的目录规范&quot;&gt;&lt;/a&gt;Python 软件开发的目录规范&lt;/h1&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python 软件开发的目录规范" scheme="http://www.gmlyo.com/tags/Python-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E7%9B%AE%E5%BD%95%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Python 模块的使用</title>
    <link href="http://www.gmlyo.com/2018/09/23/Python-%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.gmlyo.com/2018/09/23/Python-模块的使用/</id>
    <published>2018-09-23T04:31:31.000Z</published>
    <updated>2018-09-23T11:35:40.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-模块的使用"><a href="#Python-模块的使用" class="headerlink" title="Python 模块的使用"></a>Python 模块的使用</h1><a id="more"></a><h2 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h2><h3 id="什么是模块？"><a href="#什么是模块？" class="headerlink" title="什么是模块？"></a>什么是模块？</h3><p>模块就是一组功能的集合体，我们的程序可以导入模块来复用模块里的功能。<br>模块分为三大类：</p><blockquote><ol><li>自定义模块</li><li>内置模块：<code>time</code>, <code>sys</code> 等</li><li>第三方模块</li></ol></blockquote><p>常见的场景<br>一个模块就是一个包含了一组功能的 python 文件，比如 spam.py，模块名为 spam，可以通过 import spam 使用。</p><p>模块四种表现形式<br>在 Python 中，模块的使用方式都是一样的，但其实细说的话，模块可以分为四个通用类别</p><blockquote><ol><li>使用 Python 编写的 <code>.py</code> 文件</li><li>已被编译为共享库或 DLL 的 C 或 C++ 扩展</li><li>把一系列模块组织到一起的文件夹（注：文件夹下有一个 <code>__init__.py</code> 文件，该文件夹称之为包）</li><li>使用 C 编写并链接到 python 解释器的内置模块</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time)</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;module <span class="string">'time'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line">&lt;module <span class="string">'sys'</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure><h2 id="为什么要用模块？"><a href="#为什么要用模块？" class="headerlink" title="为什么要用模块？"></a>为什么要用模块？</h2><blockquote><ol><li>可以将程序中频繁使用的一些公共功能<br>可以拿内置的、第三方的模块，然后直接使用，这种拿来主义，可以极大地提高开发效率</li><li>将程序中公用的一些功能组织到一个文件中，然后程序各部分组件可以重用该文件中的功能</li></ol><p>优点：减少代码冗余，增强程序的组织结构性与可维护性</p></blockquote><h2 id="如何使用模块？"><a href="#如何使用模块？" class="headerlink" title="如何使用模块？"></a>如何使用模块？</h2><p><img src="http://pa2bdkuiw.bkt.clouddn.com/%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8.png" alt="1537516081466"></p><blockquote><p>被导入的文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim spam.py</span><br><span class="line">print(<span class="string">'from the spam.py'</span>)</span><br><span class="line"></span><br><span class="line">money = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'spam模块：'</span>, money)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'spam模块'</span>)</span><br><span class="line">    read1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    money = <span class="number">0</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>执行文件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> the spam.py</span><br></pre></td></tr></table></figure><blockquote><p>导入模块：import 模块名<br>首次导入模块都发生了哪些事？</p><ol><li>先产生一个模块的名称空间</li><li>会执行模块文件的代码，将产生的名字放到模块的名称空间中</li><li>会在当前名称空间中拿到一个模块名，该模块名指向模块的名称空间</li></ol></blockquote><p><img src="http://pa2bdkuiw.bkt.clouddn.com/import%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E9%85%8D%E5%9B%BE.png" alt="import导入模块配图"></p><p><strong>示例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何使用模块？</span></span><br><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块名.名字，是在向模块的名称空间中拿名字</span></span><br><span class="line">print(spam.money)</span><br><span class="line">print(spam.read1)</span><br><span class="line">print(spam.read2)</span><br><span class="line">print(spam.change)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> the spam.py</span><br><span class="line"><span class="number">1000</span></span><br><span class="line">&lt;function read1 at <span class="number">0x000002629B29B6A8</span>&gt;</span><br><span class="line">&lt;function read2 at <span class="number">0x000002629B29B620</span>&gt;</span><br><span class="line">&lt;function change at <span class="number">0x000002629B29B840</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line">money = <span class="number">0</span></span><br><span class="line">print(spam.money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> the spam.py</span><br><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim spam.py</span><br><span class="line"><span class="comment"># print('from the spam.py')</span></span><br><span class="line"></span><br><span class="line">money = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'spam模块：'</span>, money)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'spam模块'</span>)</span><br><span class="line">    read1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    money = <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line">spam.read1()</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">spam模块： <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 凡是来自于 spam 名称空间中的功能，执行时都是模块自己的名称空间为准的</span></span><br><span class="line">money = <span class="number">0</span></span><br><span class="line">spam.read1()</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">spam模块： <span class="number">1000</span></span><br></pre></td></tr></table></figure><p><strong>示例3</strong></p><blockquote><p>观察 spam.py 里的 <code>change()</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line">money = <span class="number">1111111111111111111111</span></span><br><span class="line">spam.change()</span><br><span class="line">print(money)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line">money = <span class="number">1111111111111111111111</span></span><br><span class="line">spam.change()</span><br><span class="line">spam.read1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">spam模块： <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>示例4</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line">money = <span class="number">1111111111111111111111</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'run.py read1'</span>)</span><br><span class="line"></span><br><span class="line">spam.read2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">spam模块</span><br><span class="line">spam模块： <span class="number">1000</span></span><br></pre></td></tr></table></figure><blockquote><p>import 导入模块的方式，在引用模块名称空间中改名字时，必须加上前缀：<code>模块名.名字</code><br>优点：指定前缀地访问模块名称空间中的名字，不会与当前名称空间中名字冲突<br>缺点：每次引用模块名称空间中的名字都需要加上前缀，模块名过长时，前缀会显得非常臃肿</p></blockquote><blockquote><p>起别名可以缩短 <code>模块名.名字</code> 的长度<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 起别名方式</span></span><br><span class="line"><span class="keyword">import</span> spam <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line">print(sm.money)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>模块用逗号分隔，一次导入多个模块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam, os, time</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>推荐多行导入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="from-import-导入模块"><a href="#from-import-导入模块" class="headerlink" title="from...import... 导入模块"></a><code>from...import...</code> 导入模块</h2><blockquote><p>可以在调用模块名称空间中的名字时，不需要在名字前加前缀模块名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> money</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> the spam.py</span><br></pre></td></tr></table></figure><blockquote><p><code>from...import...</code>首次导入模块都发生了哪些事？</p><ol><li>先产生一个模块的名称空间</li><li>会执行模块文件的代码，将产生的名字放到模块的名称空间中</li><li>会在当前名称空间中直接拿到一个模块名称空间中的名字</li></ol></blockquote><p><img src="http://pa2bdkuiw.bkt.clouddn.com/from-import%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%9720180922185501.png" alt="from-import导入模块20180922185501"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> money</span><br><span class="line"></span><br><span class="line">print(money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> money, read1, read2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用：可以不用加前缀直接使用</span></span><br><span class="line">print(money)</span><br><span class="line">print(read1)</span><br><span class="line">print(read2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1000</span></span><br><span class="line">&lt;function read1 at <span class="number">0x000002384886B6A8</span>&gt;</span><br><span class="line">&lt;function read2 at <span class="number">0x000002384886B620</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>使用：可以不用加前缀直接使用<br>优点：简洁<br>缺点：容易与当前名称空间中的名字冲突</p></blockquote><p><img src="http://pa2bdkuiw.bkt.clouddn.com/from-import%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%9720180922185516.png" alt="from-import导入模块20180922185516"></p><blockquote><p>强调：来自于模块名称空间中的函数一定是模块的名称空间为准的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> money, read1, read2, change</span><br><span class="line"></span><br><span class="line">money = <span class="number">1</span></span><br><span class="line">change()</span><br><span class="line">print(money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> money, read1, read2, change</span><br><span class="line"></span><br><span class="line">money = <span class="number">1</span></span><br><span class="line">change()</span><br><span class="line">read1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">spam模块： <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>模块名称空间里的名字可以不用一个个导入<br>但是不推荐使用 <code>&#39;*&#39;</code>，因为不知道会导入哪些功能名字，最好需要哪一个导入哪一个，这样比较清楚<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">print(money)</span><br><span class="line">print(read1)</span><br><span class="line">print(read2)</span><br><span class="line">print(change)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1000</span></span><br><span class="line">&lt;function read1 at <span class="number">0x000001F14E00B6A8</span>&gt;</span><br><span class="line">&lt;function read2 at <span class="number">0x000001F14E00B620</span>&gt;</span><br><span class="line">&lt;function change at <span class="number">0x000001F14E00B840</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>起别名<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> money <span class="keyword">as</span> m</span><br><span class="line">print(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>控制 <code>&#39;*&#39;</code> 所导入的名字</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim spam.py</span><br><span class="line">__all__ = [<span class="string">'money'</span>, <span class="string">'read1'</span>]    <span class="comment"># 控制的就是 '*' 所导入的名字</span></span><br><span class="line">...省略...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">print(money, read1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1000</span> &lt;function read1 at <span class="number">0x000002035A6DB8C8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="keyword">from</span> spam <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">print(money, read1)</span><br><span class="line">print(read2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">NameError: name <span class="string">'read2'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><h2 id="模块的嵌套（循环）导入"><a href="#模块的嵌套（循环）导入" class="headerlink" title="模块的嵌套（循环）导入"></a>模块的嵌套（循环）导入</h2><blockquote><p>在 Python 中，一个模块凡是被导入过一次，下一次导入就会直接引用上一次导入的结果，即不会重新执行模块的文件</p></blockquote><p><img src="http://pa2bdkuiw.bkt.clouddn.com/1537626500840.png" alt="1537626500840"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line">print(<span class="string">'正在导入m1'</span>)</span><br><span class="line"><span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">x = <span class="string">'m1'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line">print(<span class="string">'正在导入m2'</span>)</span><br><span class="line"><span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">y = <span class="string">'m2'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">正在导入m1</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">正在导入m2</span><br><span class="line">    <span class="keyword">import</span> m1</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">'x'</span> <span class="keyword">from</span> <span class="string">'m1'</span></span><br></pre></td></tr></table></figure><blockquote><p>以上代码执行过程</p><ol><li>先运行 <code>run.py</code>，产生 <code>run.py</code> 的名称空间，开始运行 <code>run.py</code> 里的代码。</li><li>运行到 <code>import m1</code> 这行代码时，会产生一个 <code>m1</code> 的名称空间，开始运行 <code>m1.py</code> 里的代码。</li><li>运行到 <code>from m2 import y</code> 会发现需要导入 <code>m2</code>，会产生一个 <code>m2</code> 的名称空间，开始运行 <code>m2.py</code> 里的代码，但是 <code>m1.py</code> 里的代码 <code>还没有完全运行完</code>。</li><li><code>m2.py</code> 里需要 <code>from m1 import x</code> 导入 <code>m1</code> 里的 <code>x</code>，需要导入 <code>m1</code>。</li><li>此时会产生一个问题，<code>m1</code> 已经被导入过了，此时不会再执行 <code>m1</code> 里的代码了，它只会直接引用 <code>m1</code> 的名称空间，直接向这个名称空间寻求 <code>x</code>，然而 <code>m1</code> 的名称空间中并没有 <code>x</code>。</li></ol></blockquote><p><strong>解决方法1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line">print(<span class="string">'正在导入m1'</span>)</span><br><span class="line">x = <span class="string">'m1'</span></span><br><span class="line"><span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line">print(<span class="string">'正在导入m2'</span>)</span><br><span class="line">y = <span class="string">'m2'</span></span><br><span class="line"><span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br></pre></td></tr></table></figure><blockquote><p>解决方法：<br>把名字放在导入模块代码的上面，保证在导入之前先产生名字</p><ol><li>先运行 <code>run.py</code>，产生 <code>run.py</code> 的名称空间，开始运行 <code>run.py</code> 里的代码。</li><li>运行到 <code>import m1</code> 代码，产生一个 <code>m1</code> 的名称空间，开始运行 <code>m1.py</code> 里的代码，把 <code>x=&#39;m1&#39;</code> 放进去</li><li>运行到 <code>from m2 import y</code> 代码，需要导入 <code>m2</code>，产生一个 <code>m2</code> 的名称空间<br>，开始运行 <code>m2.py</code> 里的代码，造一个 <code>y=&#39;m2&#39;</code>，然后运行到 <code>from m1 import x</code> 代码，需要导入 <code>m1</code>，<code>m1</code> 名称空间已经存在，寻求 <code>x</code>，此时寻找到了 <code>x</code></li></ol></blockquote><p><img src="http://pa2bdkuiw.bkt.clouddn.com/1537632295691.png" alt="1537632295691"></p><p><strong>解决方法2（推荐）</strong></p><blockquote><p>写代码尽量避免循环导入<br>如果必须面对这种场景，可以使用第三个模块把共享的模块做统一导入</p></blockquote><p><strong>解决方法3</strong></p><ul><li>示例一</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line">print(<span class="string">'正在导入m1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">    print(y)</span><br><span class="line"></span><br><span class="line">x = <span class="string">'m1'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line">print(<span class="string">'正在导入m2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">y = <span class="string">'m2'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line">m1.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br><span class="line">m2</span><br></pre></td></tr></table></figure><blockquote><p>解决思路<br>定义函数时，只检测语法，不执行代码<br>在哪个函数中使用，就在哪个函数当中去 <code>import</code> 导入<br>运行 <code>run.py</code>，产生 <code>run.py</code> 的名称空间，开始运行 <code>run.py</code> 里的代码。<br>运行到 <code>import m1</code> 代码，产生一个 <code>m1</code> 的名称空间，开始运行 <code>m1.py</code> 里的代码，把 <code>f1</code>、<code>x=&#39;m1&#39;</code> 放进去<br>在 <code>run.py</code>，里执行 <code>m1.f1()</code>，调用 <code>m1</code> 里 <code>f1</code> 方法，导入 <code>m2</code>，产生 <code>m2</code> 的名称空间<br>导入 <code>m2</code> 后，运行 <code>m2.py</code> 的代码，<code>m2</code> 里把 <code>f2</code>、<code>y=&#39;m2&#39;</code> 放进去</p></blockquote><p><img src="http://pa2bdkuiw.bkt.clouddn.com/1537633906337.png" alt="1537633906337"></p><ul><li>示例二</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line">print(<span class="string">'正在导入m1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y, f2</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">x = <span class="string">'m1'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line">print(<span class="string">'正在导入m2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">y = <span class="string">'m2'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line">m1.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br><span class="line">m1</span><br></pre></td></tr></table></figure><h2 id="区分Python文件两种用途方式"><a href="#区分Python文件两种用途方式" class="headerlink" title="区分Python文件两种用途方式"></a>区分Python文件两种用途方式</h2><blockquote><ol><li>直接运行，当做运行文件</li><li>被当做模块导入使用</li></ol><p>需求：<br>在文件运行的时候执行一种代码<br>被当做模块导入的时候运行另一种代码</p></blockquote><blockquote><p>当文件被直接执行时 <code>__name__ == &#39;__main__&#39;</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line">print(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">__main__</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>当文件被导入时 <code>__name__ == &#39;模块名&#39;</code><br>模块的使用者<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">m1</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>模块开发者</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f1()</span><br><span class="line">    f2()</span><br><span class="line">    f3()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">f1</span><br><span class="line">f2</span><br><span class="line">f3</span><br></pre></td></tr></table></figure><blockquote><p>该行代码用于区分 Python 文件的两种不同用途，应该写在文件末尾</p></blockquote><blockquote><p>模块的使用者<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"></span><br><span class="line">m1.f1()    <span class="comment"># 使用哪个模块就调用哪个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">f1</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="模块的搜索路径"><a href="#模块的搜索路径" class="headerlink" title="模块的搜索路径"></a>模块的搜索路径</h2><blockquote><p>模块的查找有限顺序：</p><ol><li>内存中已经加载的模块</li><li>内置模块</li><li><code>sys.path</code> 路径中包含的模块</li></ol></blockquote><h3 id="内存中已经加载的模块"><a href="#内存中已经加载的模块" class="headerlink" title="内存中已经加载的模块"></a>内存中已经加载的模块</h3><p><img src="http://pa2bdkuiw.bkt.clouddn.com/%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84%E9%85%8D%E5%9B%BE1.png" alt="模块的搜索路径配图1"></p><blockquote><p>操作方式：在 20秒内 把 spam.py 文件删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim spam.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f1'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> spam</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">import</span> spam</span><br><span class="line">spam.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f1</span><br></pre></td></tr></table></figure><blockquote><p>发现 还是能输出 <code>from f1</code>，说明在删除文件之前，内存已经加载到了 <code>spam.py</code></p></blockquote><h3 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;module <span class="string">'time'</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>PS</code>：我们自定义的模块名不应该与系统内置模块重名。</p></blockquote><h3 id="sys-path-路径中包含的模块"><a href="#sys-path-路径中包含的模块" class="headerlink" title="sys.path 路径中包含的模块"></a><code>sys.path</code> 路径中包含的模块</h3><blockquote><p><code>sys.path</code> 的值是以当前执行文件为准</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'E:\\PycharmProjects\\SH_weekend_s1\\day05\\08 模块的使用\\模块的搜索路径'</span>, <span class="string">'E:\\PycharmProjects\\SH_weekend_s1'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\python37.zip'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\DLLs'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\lib'</span>, <span class="string">'D:\\Program Files (x86)\\Python37'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\lib\\site-packages'</span>, <span class="string">'D:\\Program Files (x86)\\JetBrains\\PyCharm 2018.2.3\\helpers\\pycharm_matplotlib_backend'</span>]</span><br></pre></td></tr></table></figure><p><strong>示例</strong><br><img src="http://pa2bdkuiw.bkt.clouddn.com/%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84%E9%85%8D%E5%9B%BE2.png" alt="模块的搜索路径配图2"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim spam.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from spam'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">r'E:\PycharmProjects\SH_weekend_s1\day05\08 模块的使用\模块的搜索路径\dir'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> spam</span><br><span class="line">spam.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> spam</span><br></pre></td></tr></table></figure><blockquote><p>也可以在当前目录寻找 <code>from ... import ...</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dir <span class="keyword">import</span> spam</span><br><span class="line">spam.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'E:\\PycharmProjects\\SH_weekend_s1\\day05\\08 模块的使用\\模块的搜索路径'</span>, <span class="string">'E:\\PycharmProjects\\SH_weekend_s1'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\python37.zip'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\DLLs'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\lib'</span>, <span class="string">'D:\\Program Files (x86)\\Python37'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\lib\\site-packages'</span>, <span class="string">'D:\\Program Files (x86)\\JetBrains\\PyCharm 2018.2.3\\helpers\\pycharm_matplotlib_backend'</span>]</span><br><span class="line"><span class="keyword">from</span> spam</span><br></pre></td></tr></table></figure><p><strong>示例</strong><br><img src="http://pa2bdkuiw.bkt.clouddn.com/%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84%E9%85%8D%E5%9B%BE3.png" alt="模块的搜索路径配图3"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dir.dir2 <span class="keyword">import</span> spam</span><br><span class="line">spam.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'E:\\PycharmProjects\\SH_weekend_s1\\day05\\08 模块的使用\\模块的搜索路径'</span>, <span class="string">'E:\\PycharmProjects\\SH_weekend_s1'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\python37.zip'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\DLLs'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\lib'</span>, <span class="string">'D:\\Program Files (x86)\\Python37'</span>, <span class="string">'D:\\Program Files (x86)\\Python37\\lib\\site-packages'</span>, <span class="string">'D:\\Program Files (x86)\\JetBrains\\PyCharm 2018.2.3\\helpers\\pycharm_matplotlib_backend'</span>]</span><br><span class="line"><span class="keyword">from</span> spam</span><br></pre></td></tr></table></figure><p><strong>示例</strong><br><img src="http://pa2bdkuiw.bkt.clouddn.com/%E6%A8%A1%E5%9D%97%E7%9A%84%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84%E9%85%8D%E5%9B%BE4.png" alt="模块的搜索路径配图4"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line"><span class="keyword">import</span> m2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'m1.f1'</span>)</span><br><span class="line">    m2.f2()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'m2.f2'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">from</span> dir1 <span class="keyword">import</span> m1</span><br><span class="line">m1.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">    <span class="keyword">from</span> dir1 <span class="keyword">import</span> m1</span><br><span class="line">    <span class="keyword">import</span> m2</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">'m2'</span></span><br></pre></td></tr></table></figure><p><strong>示例修改1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line"><span class="keyword">from</span> dir1 <span class="keyword">import</span> m2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'m1.f1'</span>)</span><br><span class="line">    m2.f2()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'m2.f2'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">from</span> dir1 <span class="keyword">import</span> m1</span><br><span class="line">m1.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">m1.f1</span><br><span class="line">m2.f2</span><br></pre></td></tr></table></figure><p><strong>示例修改2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim m1.py</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> m2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'m1.f1'</span>)</span><br><span class="line">    m2.f2()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim m2.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'m2.f2'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim run.py</span><br><span class="line"><span class="keyword">from</span> dir1 <span class="keyword">import</span> m1</span><br><span class="line">m1.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">m1.f1</span><br><span class="line">m2.f2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-模块的使用&quot;&gt;&lt;a href=&quot;#Python-模块的使用&quot; class=&quot;headerlink&quot; title=&quot;Python 模块的使用&quot;&gt;&lt;/a&gt;Python 模块的使用&lt;/h1&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python 模块的使用" scheme="http://www.gmlyo.com/tags/Python-%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python 函数的递归调用</title>
    <link href="http://www.gmlyo.com/2018/09/20/Python-%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8/"/>
    <id>http://www.gmlyo.com/2018/09/20/Python-函数的递归调用/</id>
    <published>2018-09-20T09:40:36.000Z</published>
    <updated>2018-09-20T11:53:38.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-函数的递归调用"><a href="#Python-函数的递归调用" class="headerlink" title="Python 函数的递归调用"></a>Python 函数的递归调用</h1><a id="more"></a><h2 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from bar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><h2 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h2><blockquote><p>函数的递归调用，就是函数嵌套调用的一种特殊格式<br>函数递归调用，在调用一个函数的过程中又直接或间接地调用了自己<br>本质就是一个重复的过程，递归必须要有一个明确的结束条件，在满足该条件的情况下，会终止递归<br>每一次重复问题的规模都应该有所减少</p></blockquote><p><strong>直接调用</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from bar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line">    foo()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">RecursionError: maximum recursion depth exceeded <span class="keyword">while</span> calling a Python object</span><br></pre></td></tr></table></figure></p><blockquote><p>注：Python 中没有伪递归优化这一说</p></blockquote><p><strong>间接调用</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from bar'</span>)</span><br><span class="line">    foo()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>)</span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">RecursionError: maximum recursion depth exceeded <span class="keyword">while</span> calling a Python object</span><br></pre></td></tr></table></figure></p><blockquote><p>Python 限制递归调用最大层级是多少？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'from foo'</span>, n)</span><br><span class="line">    foo(n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> foo <span class="number">997</span>    <span class="comment"># 这里看到的并不精准</span></span><br><span class="line">RecursionError: maximum recursion depth exceeded <span class="keyword">while</span> calling a Python object</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用 <code>sys.getrecursionlimit()</code> 可以查看到</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.getrecursionlimit())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure><blockquote><p>递归的最大层级这个值是可以修改的，但是没有多大的意义<br><code>sys.setrecursionlimit(10000)</code></p></blockquote><h3 id="递归必须满足两个阶段"><a href="#递归必须满足两个阶段" class="headerlink" title="递归必须满足两个阶段"></a>递归必须满足两个阶段</h3><blockquote><ol><li>回溯：一层一层地递归调用下去</li><li>递推：递归必须要有一个明确的结束条件，在满足该条件的情况下，会终止递归，往回一层一层地结束调用</li></ol></blockquote><p><strong>练习</strong></p><blockquote><p>猜年龄</p><p>第一个人 18 岁<br>第二个人比第一个人大2岁<br>第三个人比第二个人大2岁<br>第四个人比第三个人大2岁<br>第五个人比第四个人大2岁<br>问第五个人的年龄是多少岁？</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age(<span class="number">5</span>) = age(<span class="number">4</span>) + <span class="number">2</span></span><br><span class="line">age(<span class="number">4</span>) = age(<span class="number">3</span>) + <span class="number">2</span></span><br><span class="line">age(<span class="number">3</span>) = age(<span class="number">2</span>) + <span class="number">2</span></span><br><span class="line">age(<span class="number">2</span>) = age(<span class="number">1</span>) + <span class="number">2</span></span><br><span class="line">age(<span class="number">1</span>) = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">age(n) = age(n<span class="number">-1</span>) + <span class="number">2</span>  # n &gt; <span class="number">1</span></span><br><span class="line">age(n) = <span class="number">18</span>            # n = <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">18</span></span><br><span class="line">    <span class="keyword">return</span> age(n<span class="number">-1</span>) + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(age(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">26</span></span><br></pre></td></tr></table></figure><p><img src="http://pa2bdkuiw.bkt.clouddn.com/%E5%9B%9E%E6%BA%AF%E9%80%92%E6%8E%A8.png" alt="回溯递推"></p><blockquote><p>递归是一次重复的过程，每一次重复问题的规模都应该有所减少</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>, [<span class="number">7</span>, [<span class="number">8</span>, [<span class="number">9</span>, ]]]]]]]]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">if</span> type(item) <span class="keyword">is</span> <span class="keyword">not</span> list:</span><br><span class="line">            print(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tell(item)</span><br><span class="line"></span><br><span class="line">tell(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="递归-vs-while循环"><a href="#递归-vs-while循环" class="headerlink" title="递归 vs while循环"></a>递归 vs while循环</h2><blockquote><p>递归只需要把控住结束或进入递归的条件，至于循环次数无需考虑</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>, [<span class="number">7</span>, [<span class="number">8</span>, [<span class="number">9</span>, ]]]]]]]]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">if</span> type(item) <span class="keyword">is</span> list:</span><br><span class="line">            <span class="comment"># item 是列表</span></span><br><span class="line">            <span class="comment"># 再次调用本身的逻辑，传入item</span></span><br><span class="line">            tell(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># item 是单独的元素</span></span><br><span class="line">            print(item)</span><br><span class="line"></span><br><span class="line">tell(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="递归的应用"><a href="#递归的应用" class="headerlink" title="递归的应用"></a>递归的应用</h2><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><blockquote><p>数字列表，数字从小打大排列<br>需求：判断某一个值是否存在于这个列表中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line">find_num = <span class="number">27</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> find_num == num:</span><br><span class="line">        print(<span class="string">'find it'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">find it</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>以上方式效率较低</p></blockquote><blockquote><p>算法：就是高效解决某个问题的方法<br>二分法是算法中的其中之一<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># l1 = [3, 11, 13, 15, 23, 27]</span></span><br><span class="line"><span class="comment"># l2 = [23, 27]</span></span><br><span class="line"><span class="comment"># l3 = [23]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(nums, find_num)</span>:</span></span><br><span class="line">    mid_index = len(nums) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> find_num &gt; nums[mid_index]:</span><br><span class="line">        <span class="comment"># in the right</span></span><br><span class="line">        <span class="comment"># 从一个大列表中取出一个子列表</span></span><br><span class="line">        nums = nums[mid_index+<span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># 重复调用本身的逻辑，传入切分之后的结果</span></span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; nums[mid_index]:</span><br><span class="line">        <span class="comment"># in the left</span></span><br><span class="line">        nums = nums[:mid_index]</span><br><span class="line">        <span class="comment"># 重复调用本身的逻辑，传入切分之后的结果</span></span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'find it'</span>)</span><br><span class="line"></span><br><span class="line">binary_search(nums, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">find it</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(nums, find_num)</span>:</span></span><br><span class="line">    print(nums)    <span class="comment"># 获取查找次数</span></span><br><span class="line">    mid_index = len(nums) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> find_num &gt; nums[mid_index]:</span><br><span class="line">        <span class="comment"># in the right</span></span><br><span class="line">        <span class="comment"># 从一个大列表中取出一个子列表</span></span><br><span class="line">        nums = nums[mid_index+<span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># 重复调用本身的逻辑，传入切分之后的结果</span></span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; nums[mid_index]:</span><br><span class="line">        <span class="comment"># in the left</span></span><br><span class="line">        nums = nums[:mid_index]</span><br><span class="line">        <span class="comment"># 重复调用本身的逻辑，传入切分之后的结果</span></span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'find it'</span>)</span><br><span class="line"></span><br><span class="line">binary_search(nums, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>]</span><br><span class="line">[<span class="number">23</span>, <span class="number">27</span>]</span><br><span class="line">[<span class="number">23</span>]</span><br><span class="line">find it</span><br></pre></td></tr></table></figure><blockquote><p>传入一个不存在的值，会抛超出列表索引超出范围异常</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(nums, find_num)</span>:</span></span><br><span class="line">    print(nums)</span><br><span class="line">    mid_index = len(nums) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> find_num &gt; nums[mid_index]:</span><br><span class="line">        nums = nums[mid_index+<span class="number">1</span>:]</span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; nums[mid_index]:</span><br><span class="line">        nums = nums[:mid_index]</span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'find it'</span>)</span><br><span class="line"></span><br><span class="line">binary_search(nums, <span class="number">94</span>)   <span class="comment"># 传入一个不存在的值，会抛超出列表索引超出范围异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><blockquote><p>改进</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(nums, find_num)</span>:</span></span><br><span class="line">    print(nums)</span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'not exists'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid_index = len(nums) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> find_num &gt; nums[mid_index]:</span><br><span class="line">        nums = nums[mid_index+<span class="number">1</span>:]</span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; nums[mid_index]:</span><br><span class="line">        nums = nums[:mid_index]</span><br><span class="line">        binary_search(nums, find_num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'find it'</span>)</span><br><span class="line"></span><br><span class="line">binary_search(nums, <span class="number">94</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line">[<span class="number">51</span>, <span class="number">72</span>, <span class="number">81</span>, <span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line">[<span class="number">93</span>, <span class="number">101</span>]</span><br><span class="line">[<span class="number">93</span>]</span><br><span class="line">[]</span><br><span class="line"><span class="keyword">not</span> exists</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-函数的递归调用&quot;&gt;&lt;a href=&quot;#Python-函数的递归调用&quot; class=&quot;headerlink&quot; title=&quot;Python 函数的递归调用&quot;&gt;&lt;/a&gt;Python 函数的递归调用&lt;/h1&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python 函数的递归调用" scheme="http://www.gmlyo.com/tags/Python-%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python 匿名函数</title>
    <link href="http://www.gmlyo.com/2018/09/18/Python-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <id>http://www.gmlyo.com/2018/09/18/Python-匿名函数/</id>
    <published>2018-09-17T17:46:16.000Z</published>
    <updated>2018-09-17T17:46:19.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-匿名函数"><a href="#Python-匿名函数" class="headerlink" title="Python 匿名函数"></a>Python 匿名函数</h1><a id="more"></a><h2 id="有名函数"><a href="#有名函数" class="headerlink" title="有名函数"></a>有名函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'from f1'</span>)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">from</span> f1</span><br><span class="line"><span class="keyword">from</span> f1</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">print(func)    <span class="comment"># 通过函数名拿到内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function func at <span class="number">0x000001D493372EA0</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line"><span class="comment"># 通过 函数+() 的方式来调用函数</span></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(func(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>针对这种简单形式的函数，可以用匿名函数简写成一行<br>匿名函数本身自带 return<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="keyword">lambda</span> x, y: x + y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x000001DA1A6A2EA0</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line"><span class="comment"># 以下方式不是正规的匿名函数使用方式</span></span><br><span class="line">res = (<span class="keyword">lambda</span> x, y: x + y)(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line">f = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line">res = f(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><ol><li>不会单独使用，会与其他函数配合使用</li><li>匿名函数在于没有名字，如果没有名字表示用一次就立即回收</li><li>匿名函数的应用场景仅应用于只使用使用一次的场景</li></ol></blockquote><h2 id="匿名函数与其他函数配合使用"><a href="#匿名函数与其他函数配合使用" class="headerlink" title="匿名函数与其他函数配合使用"></a>匿名函数与其他函数配合使用</h2><blockquote><p>配合常用的内置函数：<code>max</code>，<code>min</code>，<code>sorted</code>，<code>map</code>, <code>filter</code></p></blockquote><h3 id="max-函数"><a href="#max-函数" class="headerlink" title="max() 函数"></a>max() 函数</h3><p><strong>获取薪资最高的人名</strong></p><blockquote><p>max 默认比较的是字典的 key<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">salaries = &#123;</span><br><span class="line">    <span class="string">'egon'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'alex'</span>: <span class="number">100000000</span>,</span><br><span class="line">    <span class="string">'wupeiqi'</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'yuanhao'</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line">print(max(salaries))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">yuanhao</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>max() 的结果一定是字典的 key<br>可以更改比较依据<br><code>max(比较对象，key=比较依据)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">salaries = &#123;</span><br><span class="line">    <span class="string">'egon'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'alex'</span>: <span class="number">100000000</span>,</span><br><span class="line">    <span class="string">'wupeiqi'</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'yuanhao'</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(k)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> salaries[k]</span><br><span class="line"></span><br><span class="line">print(max(salaries, key=func))    <span class="comment"># key=指定比较依据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">alex</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>工作原理：<code>max()</code> 拿到 salaries 的 <code>key结果</code>，传给 <code>key=func</code> ，把 <code>func</code> 的返回值当做比较依据</p></blockquote><blockquote><p><code>func</code> 就是一次性的函数，可以用 <code>lambda</code> 替换<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">salaries = &#123;</span><br><span class="line">    <span class="string">'egon'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'alex'</span>: <span class="number">100000000</span>,</span><br><span class="line">    <span class="string">'wupeiqi'</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'yuanhao'</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(max(salaries, key=<span class="keyword">lambda</span> x: salaries[x]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">alex</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>获取薪资最小的人名</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">salaries = &#123;</span><br><span class="line">    <span class="string">'egon'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'alex'</span>: <span class="number">100000000</span>,</span><br><span class="line">    <span class="string">'wupeiqi'</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'yuanhao'</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(min(salaries, key=<span class="keyword">lambda</span> x: salaries[x]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">yuanhao</span><br></pre></td></tr></table></figure><h3 id="sorted-排序"><a href="#sorted-排序" class="headerlink" title="sorted() 排序"></a>sorted() 排序</h3><blockquote><p>默认从小到大排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(sorted([<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>按照薪资排序，从小到大排队</strong></p><blockquote><p>sorted 默认也是比较字典的 key<br>如果不给比较依据的话，就按默认的字典key字符串做比较<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">salaries = &#123;</span><br><span class="line">    <span class="string">'egon'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'alex'</span>: <span class="number">100000000</span>,</span><br><span class="line">    <span class="string">'wupeiqi'</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'yuanhao'</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(sorted(salaries))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex'</span>, <span class="string">'egon'</span>, <span class="string">'wupeiqi'</span>, <span class="string">'yuanhao'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>所以也要通过所获取的字典key，给予 <code>比较依据</code>，然后再做排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">salaries = &#123;</span><br><span class="line">    <span class="string">'egon'</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'alex'</span>: <span class="number">100000000</span>,</span><br><span class="line">    <span class="string">'wupeiqi'</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'yuanhao'</span>: <span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(sorted(salaries, key=<span class="keyword">lambda</span> x: salaries[x]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'yuanhao'</span>, <span class="string">'egon'</span>, <span class="string">'wupeiqi'</span>, <span class="string">'alex'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line"><span class="comment"># 反序排列</span></span><br><span class="line">print(sorted(salaries, key=<span class="keyword">lambda</span> x: salaries[x], reverse=<span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex'</span>, <span class="string">'wupeiqi'</span>, <span class="string">'egon'</span>, <span class="string">'yuanhao'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="map-函数"><a href="#map-函数" class="headerlink" title="map() 函数"></a>map() 函数</h3><blockquote><p>映射：把一个值映射成一个新的值</p></blockquote><blockquote><p>需求：把 人名 都映射成 人名_PY<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex'</span>, <span class="string">'wupeiqi'</span>, <span class="string">'yuanhao'</span>, <span class="string">'liuqingzheng'</span>]</span><br><span class="line">l = [name + <span class="string">"_PY"</span> <span class="keyword">for</span> name <span class="keyword">in</span> names]</span><br><span class="line">print(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex_PY'</span>, <span class="string">'wupeiqi_PY'</span>, <span class="string">'yuanhao_PY'</span>, <span class="string">'liuqingzheng_PY'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>map(映射规则, 可迭代对象)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex'</span>, <span class="string">'wupeiqi'</span>, <span class="string">'yuanhao'</span>, <span class="string">'liuqingzheng'</span>]</span><br><span class="line">obj = map(<span class="keyword">lambda</span> x:x+<span class="string">"_PY"</span>, names)    <span class="comment"># map 的结果其实就是一个迭代器</span></span><br><span class="line">print(obj)</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;map object at <span class="number">0x00000230B9BDCA90</span>&gt;</span><br><span class="line"></span><br><span class="line">print(list(obj))</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex_PY'</span>, <span class="string">'wupeiqi_PY'</span>, <span class="string">'yuanhao_PY'</span>, <span class="string">'liuqingzheng_PY'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>工作原理：会把可迭代对象作为迭代器传给第一个值，作为结果返回出来</p></blockquote><h3 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter() 函数"></a>filter() 函数</h3><blockquote><p>把 人名_sb 结尾的留下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex_sb'</span>, <span class="string">'wupeiqi_sb'</span>, <span class="string">'egon'</span>, <span class="string">'yuanhao_sb'</span>, <span class="string">'liuqingzheng_sb'</span>]</span><br><span class="line">l = [name <span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> name.endswith(<span class="string">'sb'</span>)]</span><br><span class="line">print(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex_sb'</span>, <span class="string">'wupeiqi_sb'</span>, <span class="string">'yuanhao_sb'</span>, <span class="string">'liuqingzheng_sb'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>filter(过滤规则, 可迭代对象)<br>filter 会得到 names 的迭代器对象obj，然后 next(obj)，将得到的值传给函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex_sb'</span>, <span class="string">'wupeiqi_sb'</span>, <span class="string">'egon'</span>, <span class="string">'yuanhao_sb'</span>, <span class="string">'liuqingzheng_sb'</span>]</span><br><span class="line">res = filter(<span class="keyword">lambda</span> x: x.endswith(<span class="string">'sb'</span>), names)    <span class="comment"># filte 将函数返回值为 True 的那个值留下</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;filter object at <span class="number">0x000001867584C9B0</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line">print(list(res))</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex_sb'</span>, <span class="string">'wupeiqi_sb'</span>, <span class="string">'yuanhao_sb'</span>, <span class="string">'liuqingzheng_sb'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>也可以用 <code>生成器表达式</code> 来做<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alex_sb'</span>, <span class="string">'wupeiqi_sb'</span>, <span class="string">'egon'</span>, <span class="string">'yuanhao_sb'</span>, <span class="string">'liuqingzheng_sb'</span>]</span><br><span class="line">l = (name <span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> name.endswith(<span class="string">'sb'</span>))</span><br><span class="line">print(l)</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x00000209162E55C8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line">print(list(l))</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="string">'alex_sb'</span>, <span class="string">'wupeiqi_sb'</span>, <span class="string">'yuanhao_sb'</span>, <span class="string">'liuqingzheng_sb'</span>]</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-匿名函数&quot;&gt;&lt;a href=&quot;#Python-匿名函数&quot; class=&quot;headerlink&quot; title=&quot;Python 匿名函数&quot;&gt;&lt;/a&gt;Python 匿名函数&lt;/h1&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python 匿名函数" scheme="http://www.gmlyo.com/tags/Python-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 生成器表达式</title>
    <link href="http://www.gmlyo.com/2018/09/17/Python-%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://www.gmlyo.com/2018/09/17/Python-生成器表达式/</id>
    <published>2018-09-17T14:15:04.000Z</published>
    <updated>2018-09-17T15:06:33.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-生成器表达式"><a href="#Python-生成器表达式" class="headerlink" title="Python 生成器表达式"></a>Python 生成器表达式</h1><a id="more"></a><blockquote><p><code>()</code> 小括号用来生成 <code>生成器</code><br>把列表推导式的 <code>[]</code> 换成 <code>()</code> 就是生成器表达式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x000001719E5E3EB8</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>用生成器表达式，可以用来造一个无限个值的数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">g = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>生一筐鸡蛋变成给你一只老母鸡，用的时候就下蛋，这也是生成器的特性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">chicken = (<span class="string">'鸡蛋%s'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line">print(chicken)</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x10143f200</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################################################</span></span><br><span class="line">chicken = (<span class="string">'鸡蛋%s'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(next(chicken))</span><br><span class="line">print(next(chicken))</span><br><span class="line">print(next(chicken))</span><br><span class="line">print(next(chicken))</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">鸡蛋<span class="number">0</span></span><br><span class="line">鸡蛋<span class="number">1</span></span><br><span class="line">鸡蛋<span class="number">2</span></span><br><span class="line">鸡蛋<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################################################</span></span><br><span class="line">chicken = (<span class="string">'鸡蛋%s'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line">print(list(chicken))    <span class="comment"># 因 chicken 可迭代，因而可以转成列表</span></span><br><span class="line">[<span class="string">'鸡蛋0'</span>, <span class="string">'鸡蛋1'</span>, <span class="string">'鸡蛋2'</span>, <span class="string">'鸡蛋3'</span>, <span class="string">'鸡蛋4'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>优点：省内存，一次只产生一个值在内存中</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chicken = (<span class="string">'egg%s'</span> % <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>))</span><br><span class="line">print(next(chicken))</span><br><span class="line">print(next(chicken))</span><br><span class="line">print(next(chicken))</span><br><span class="line">print(next(chicken))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">egg0</span><br><span class="line">egg1</span><br><span class="line">egg2</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p><strong>小练习</strong></p><blockquote><p>求文件 a.txt 中最长的行的长度（长度按字符个数算，需要使用 max 函数）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取文件内每一行的字符长度</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    nums = [len(line) <span class="keyword">for</span> line <span class="keyword">in</span> f]</span><br><span class="line">    print(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">66</span>, <span class="number">54</span>, <span class="number">54</span>, <span class="number">54</span>, <span class="number">54</span>, <span class="number">53</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################################################</span></span><br><span class="line"><span class="comment"># 获取最长那一行的长度</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    nums = [len(line) <span class="keyword">for</span> line <span class="keyword">in</span> f]    <span class="comment"># 这里用列表生成器会有问题，如果文件内容非常多，这个列表会变得非常大，我们可以换成生成器表达式</span></span><br><span class="line">    print(max(nums))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">66</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################################################</span></span><br><span class="line"><span class="comment"># 获取最长那一行的长度</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    nums = (len(line) <span class="keyword">for</span> line <span class="keyword">in</span> f)</span><br><span class="line">    print(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x00000153AFF855C8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################################################</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    nums = (len(line) <span class="keyword">for</span> line <span class="keyword">in</span> f)</span><br><span class="line">    print(max(nums))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">66</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-生成器表达式&quot;&gt;&lt;a href=&quot;#Python-生成器表达式&quot; class=&quot;headerlink&quot; title=&quot;Python 生成器表达式&quot;&gt;&lt;/a&gt;Python 生成器表达式&lt;/h1&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python 生成器表达式" scheme="http://www.gmlyo.com/tags/Python-%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python 面向过程编程</title>
    <link href="http://www.gmlyo.com/2018/09/15/Python-%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.gmlyo.com/2018/09/15/Python-面向过程编程/</id>
    <published>2018-09-15T14:32:35.000Z</published>
    <updated>2018-09-17T15:05:17.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-面向过程编程"><a href="#Python-面向过程编程" class="headerlink" title="Python 面向过程编程"></a>Python 面向过程编程</h1><a id="more"></a><ol><li>首先强调：面向过程编程绝对不是用函数编程这么简单，面向过程是一种编程思路、思想，而编程思路是不依赖于具体的语言或语法的。言外之意是即使我们不依赖于函数，也可以基于面向过程的思想编写程序</li><li>定义<br>面向过程的核心是过程二字，过程指的是解决问题的步骤，即先干什么再干什么<br>基于面向过程设计程序就好比在设计一条流水线，是一种机械式的思维方式</li><li>优点：复杂的问题流程化，进而简单化</li><li>缺点：可扩展性差，修改流水线的任意一个阶段，都会牵一发而动全身</li><li>应用：扩展性要求不高的场景，典型案例如 Linux 内核，git，httpd</li><li>举例<br>流水线1：用户输入用户名、密码 —&gt; 用户验证—&gt;欢迎界面<br>流水线2：用户输入sql —&gt; sql解析 —&gt; 执行功能</li></ol><p>PS：函数的参数传入，是函数吃进去的食物，而函数 return 的返回值，是函数拉出来的结果，面向过程的思路就是，把程序的执行当做一串首尾相连的功能，该功能可以是函数的形式，然后一个函数吃，拉出的东西给另外一个函数吃，另外一个函数吃了再继续拉给下一个函数吃。。。</p><h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阶段1: 接收用户输入账号与密码,完成合法性校验</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        username = input(<span class="string">'请输入你的用户名: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> username.isalpha():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'用户必须为字母'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        password1 = input(<span class="string">'请输入你的密码: '</span>).strip()</span><br><span class="line">        password2 = input(<span class="string">'请再次输入你的密码: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> password1 == password2:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'两次输入的密码不一致'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> username,password1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阶段2: 将账号密码拼成固定的格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_interface</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    format_str = <span class="string">'%s:%s\n'</span> %(username, password)</span><br><span class="line">    <span class="keyword">return</span> format_str</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阶段3: 将拼好的格式写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_file</span><span class="params">(format_str, filepath)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r'%s'</span> % filepath, <span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(format_str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    user, pwd = talk()</span><br><span class="line">    format_str = register_interface(user, pwd)</span><br><span class="line">    handle_file(format_str, <span class="string">'user.txt'</span>)</span><br><span class="line"></span><br><span class="line">register()</span><br></pre></td></tr></table></figure><p><strong>扩展功能麻烦</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阶段1: 接收用户输入账号与密码，完成合法性校验</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        username = input(<span class="string">'请输入你的用户名: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> username.isalpha():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'用户必须为字母'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        password1 = input(<span class="string">'请输入你的密码: '</span>).strip()</span><br><span class="line">        password2 = input(<span class="string">'请再次输入你的密码: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> password1 == password2:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'两次输入的密码不一致'</span>)</span><br><span class="line"></span><br><span class="line">    role_dic = &#123;</span><br><span class="line">        <span class="string">'1'</span>:<span class="string">'user'</span>,</span><br><span class="line">        <span class="string">'2'</span>:<span class="string">'admin'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> role_dic:</span><br><span class="line">            print(k,role_dic[k])</span><br><span class="line"></span><br><span class="line">        choice = input(<span class="string">'请输入您的身份&gt;&gt;: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">not</span> <span class="keyword">in</span> role_dic:</span><br><span class="line">            print(<span class="string">'输入的身份不存在'</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        role = role_dic[choice]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> username, password1, role</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阶段2: 将账号密码拼成固定的格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_interface</span><span class="params">(username, password, role)</span>:</span></span><br><span class="line">    format_str = <span class="string">'%s:%s:%s\n'</span> % (username, password, role)</span><br><span class="line">    <span class="keyword">return</span> format_str</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阶段3: 将拼好的格式写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_file</span><span class="params">(format_str, filepath)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r'%s'</span> % filepath, <span class="string">'at'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(format_str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    user, pwd, role = talk()</span><br><span class="line">    format_str = register_interface(user, pwd, role)</span><br><span class="line">    handle_file(format_str, <span class="string">'user.txt'</span>)</span><br><span class="line"></span><br><span class="line">register()</span><br></pre></td></tr></table></figure><blockquote><p>PS：talk 内对 用户名 \ 密码 \ 角色 的合法性校验也可以摘出来做成单独的功能，但本例就写到一个函数内了，力求用更少的逻辑来为大家说明过程式编程的思路</p></blockquote><h2 id="认证功能"><a href="#认证功能" class="headerlink" title="认证功能"></a>认证功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interactive</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""接收用户输入的用户名、密码"""</span></span><br><span class="line">    uname = input(<span class="string">'username: '</span>).strip()</span><br><span class="line">    pwd = input(<span class="string">'password: '</span>).strip()</span><br><span class="line">    <span class="keyword">return</span> uname, group, pwd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(uname, group, pwd)</span>:</span></span><br><span class="line">    <span class="string">"""认证用户名与密码是否正确"""</span></span><br><span class="line">    <span class="keyword">if</span> uname == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>, uname</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>, uname</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(res)</span>:</span></span><br><span class="line">    <span class="string">"""如果认证成功，则打印欢迎界面"""</span></span><br><span class="line">    <span class="keyword">if</span> res[<span class="number">0</span>]:</span><br><span class="line">        print(<span class="string">'%s 登录成功'</span> % res[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'%s 登录失败'</span> % res[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">uname, pwd = interactive()</span><br><span class="line">res = auth(uname, pwd)</span><br><span class="line">index(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">username: egon</span><br><span class="line">password: <span class="number">123</span></span><br><span class="line">egon 登录成功</span><br></pre></td></tr></table></figure><p><strong>扩展功能麻烦</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interactive</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""接收用户输入的用户名、密码"""</span></span><br><span class="line">    uname = input(<span class="string">'username: '</span>).strip()</span><br><span class="line">    group = input(<span class="string">'group: '</span>).strip()</span><br><span class="line">    pwd = input(<span class="string">'password: '</span>).strip()</span><br><span class="line">    <span class="keyword">return</span> uname, group, pwd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(uname, group, pwd)</span>:</span></span><br><span class="line">    <span class="string">"""认证用户名与密码是否正确"""</span></span><br><span class="line">    <span class="keyword">if</span> uname == <span class="string">'egon'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span> <span class="keyword">and</span> group == <span class="string">'group1'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>, uname, group</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span>, uname, group</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(res)</span>:</span></span><br><span class="line">    <span class="string">"""如果认证成功，则打印欢迎界面"""</span></span><br><span class="line">    <span class="keyword">if</span> res[<span class="number">0</span>]:</span><br><span class="line">        print(<span class="string">'部门：%s 员工：%s 登录成功'</span> % (res[<span class="number">2</span>], res[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'部门：%s 员工：%s 登录失败'</span> % (res[<span class="number">2</span>], res[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">uname, group, pwd = interactive()</span><br><span class="line">res = auth(uname, group, pwd)</span><br><span class="line">index(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">username: egon</span><br><span class="line">group: group1</span><br><span class="line">password: <span class="number">123</span></span><br><span class="line">部门：group1 员工：egon 登录成功</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-面向过程编程&quot;&gt;&lt;a href=&quot;#Python-面向过程编程&quot; class=&quot;headerlink&quot; title=&quot;Python 面向过程编程&quot;&gt;&lt;/a&gt;Python 面向过程编程&lt;/h1&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python 面向过程编程" scheme="http://www.gmlyo.com/tags/Python-%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python 生成器</title>
    <link href="http://www.gmlyo.com/2018/09/12/Python-%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>http://www.gmlyo.com/2018/09/12/Python-生成器/</id>
    <published>2018-09-12T06:53:52.000Z</published>
    <updated>2018-09-15T14:25:34.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-生成器"><a href="#Python-生成器" class="headerlink" title="Python 生成器"></a>Python 生成器</h1><a id="more"></a><h2 id="什么是生成器？"><a href="#什么是生成器？" class="headerlink" title="什么是生成器？"></a>什么是生成器？</h2><blockquote><p>在函数体内凡是有 yield 关键字，再调用函数就不会执行函数体代码，得到的返回值就是一个生成器对象。</p></blockquote><h2 id="为什么要用生成器？"><a href="#为什么要用生成器？" class="headerlink" title="为什么要用生成器？"></a>为什么要用生成器？</h2><blockquote><p>为了掌握一种自定义迭代器的方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'first'</span>)</span><br><span class="line">    print(<span class="string">'second'</span>)</span><br><span class="line">    print(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">first</span><br><span class="line">second</span><br><span class="line">third</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在函数体内凡是有 <code>yield</code> 关键字，再调用函数就不会执行函数体代码，得到的返回值是一个生成器对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'first'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">'second'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    print(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line">g = func()</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object func at <span class="number">0x000002C5C3A05EB8</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>用 <code>yield</code> 的目的就是为了使用自定义迭代器<br>为什么要自定义迭代器？<br>优点：更加节省内存，可以生成一个无限大的迭代器</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'first'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">'second'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    print(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line">g = func()</span><br><span class="line">next(g)    <span class="comment"># 等于 g.__next__()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">first</span><br></pre></td></tr></table></figure><blockquote><p><code>next(g)</code> 会去执行一次，才会去执行 g 所对应的函数体内的代码运行<br>过程：会触发生成器 <code>g</code> 所对应函数的执行，直到遇到 <code>yield</code> 才停止，然后把 <code>yield</code> 后的返回值当做本次 <code>next</code> 操作的结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'first'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>    <span class="comment"># 暂停</span></span><br><span class="line">    print(<span class="string">'second'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>    <span class="comment"># 暂停</span></span><br><span class="line">    print(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line">g = func()</span><br><span class="line">res1 = next(g)    <span class="comment"># g.__next__()</span></span><br><span class="line">print(res1)</span><br><span class="line"></span><br><span class="line">res2 = next(g)    <span class="comment"># g.__next__()</span></span><br><span class="line">print(res2)</span><br><span class="line"></span><br><span class="line">res3 = next(g)    <span class="comment"># g.__next__()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">first</span><br><span class="line"><span class="number">1</span></span><br><span class="line">second</span><br><span class="line"><span class="number">2</span></span><br><span class="line">third</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    res3 = next(g)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'first'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>    <span class="comment"># 暂停</span></span><br><span class="line">    print(<span class="string">'second'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>    <span class="comment"># 暂停</span></span><br><span class="line">    print(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># g = func()</span></span><br><span class="line"><span class="comment"># for item in g:</span></span><br><span class="line"><span class="comment">#    print(item)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> func():</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">first</span><br><span class="line"><span class="number">1</span></span><br><span class="line">second</span><br><span class="line"><span class="number">2</span></span><br><span class="line">third</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><blockquote><p>模拟 <code>range()</code> 函数功能<br>自定义一个 <code>range()</code> 函数<br><code>range(1, 100, 2)</code></p></blockquote><blockquote><p>Python2 的做法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        res.append(start)</span><br><span class="line">        start += step</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">res = my_range(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">33</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">45</span>, <span class="number">47</span>, <span class="number">49</span>, <span class="number">51</span>, <span class="number">53</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">63</span>, <span class="number">65</span>, <span class="number">67</span>, <span class="number">69</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">79</span>, <span class="number">81</span>, <span class="number">83</span>, <span class="number">85</span>, <span class="number">87</span>, <span class="number">89</span>, <span class="number">91</span>, <span class="number">93</span>, <span class="number">95</span>, <span class="number">97</span>, <span class="number">99</span>]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Python3 的做法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line"></span><br><span class="line">res = my_range(<span class="number">1</span>, <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object my_range at <span class="number">0x00000294DBE75EB8</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>只要函数体内出现 <code>yield</code> 再去调函数，就不会运行函数体代码<br>再调用函数会得到一个返回值，这个返回值就是我们所需要的生成器对象（迭代器对象）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'开始运行'</span>)</span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line">    print(<span class="string">'结束运行'</span>)</span><br><span class="line"></span><br><span class="line">obj = my_range(<span class="number">1</span>, <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">print(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object my_range at <span class="number">0x00000294DBE75EB8</span>&gt;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'开始运行'</span>)</span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line">    print(<span class="string">'结束运行'</span>)</span><br><span class="line"></span><br><span class="line">obj = my_range(<span class="number">1</span>, <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">res1 = next(obj)</span><br><span class="line">print(res1)</span><br><span class="line"></span><br><span class="line">res2 = next(obj)</span><br><span class="line">print(res2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">开始运行</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'开始运行'</span>)</span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line">    print(<span class="string">'结束运行'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">开始运行</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">结束运行</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(start, stop, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p><code>yield</code> 提供了一种自定义迭代器的方式。<br>与 <code>return</code> 对比，都能返回值，都能返回多个值，都没有类型限制。<br><code>return</code> 只能返回一次值，<code>yield</code> 能暂停住函数，把函数体暂停在某一个位置，可以返回多次值。<code>yield</code> 可以帮我们保存函数的执行状态。</p></blockquote><h2 id="yield-表达式形式应用"><a href="#yield-表达式形式应用" class="headerlink" title="yield 表达式形式应用"></a>yield 表达式形式应用</h2><p><strong>示例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span></span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;generator object dog at <span class="number">0x000001A607255F68</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span></span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">next(g)    <span class="comment"># 让来福准备好，即让生成器对象先暂停到一个位置，准备接收</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">来福 准备开吃</span><br></pre></td></tr></table></figure><p><strong>示例3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span>    <span class="comment"># 暂停 food = yield = None</span></span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">next(g)    <span class="comment"># 让来福准备好，即让生成器对象先暂停到一个位置，准备接收</span></span><br><span class="line">next(g)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">来福 准备开吃</span><br><span class="line">来福 吃了 <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p><strong>示例4</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span>    <span class="comment"># 暂停 food = yield = '骨头'</span></span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">next(g)    <span class="comment"># 让来福准备好，即让生成器对象先暂停到一个位置，准备接收</span></span><br><span class="line">g.send(<span class="string">'骨头'</span>)</span><br><span class="line">g.send(<span class="string">'肉'</span>)</span><br><span class="line">g.send(<span class="string">'包子'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">来福 准备开吃</span><br><span class="line">来福 吃了 骨头</span><br><span class="line">来福 吃了 肉</span><br><span class="line">来福 吃了 包子</span><br></pre></td></tr></table></figure><blockquote><p>上面方式是只调用了一次函数</p></blockquote><blockquote><p>下面方式是每次都要调用一次函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(food)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 吃了 %s'</span> % (food))</span><br><span class="line"></span><br><span class="line">dog(<span class="string">'来福1'</span>)</span><br><span class="line">dog(<span class="string">'来福2'</span>)</span><br><span class="line">dog(<span class="string">'来福3'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>两者的区别<br>执行函数体代码，会产生一个内存空间<br>每调用一次函数，就要申请一次内存空间</p></blockquote><p><strong>示例5</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span> <span class="number">123123</span>   <span class="comment"># 暂停 food = yield = None</span></span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">res1 = next(g)</span><br><span class="line">print(res1)</span><br><span class="line"></span><br><span class="line">res2 = g.send(<span class="string">'骨头'</span>)    <span class="comment"># food = yield 123123 &lt;== 暂停 food = yield = '骨头'</span></span><br><span class="line">print(res2)</span><br><span class="line"></span><br><span class="line">res3 = g.send(<span class="string">'骨头1'</span>)    <span class="comment"># food = yield 123123 &lt;== 暂停 food = yield = '骨头1'</span></span><br><span class="line">print(res3)</span><br><span class="line"></span><br><span class="line">res4 = next(g)    <span class="comment"># food = yield 123123 &lt;== 暂停 food = yield = None</span></span><br><span class="line">print(res4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">来福 准备开吃</span><br><span class="line"><span class="number">123123</span></span><br><span class="line">来福 吃了 骨头</span><br><span class="line"><span class="number">123123</span></span><br><span class="line">来福 吃了 骨头<span class="number">1</span></span><br><span class="line"><span class="number">123123</span></span><br><span class="line">来福 吃了 <span class="keyword">None</span></span><br><span class="line"><span class="number">123123</span></span><br></pre></td></tr></table></figure></p><p><strong>示例7</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    food_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span> food_list</span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line">        food_list.append(food)</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">res1 = next(g)</span><br><span class="line">print(res1)</span><br><span class="line"></span><br><span class="line">res2 = g.send(<span class="string">'骨头'</span>)</span><br><span class="line">print(res2)</span><br><span class="line"></span><br><span class="line">res3 = g.send(<span class="string">'骨头1'</span>)</span><br><span class="line">print(res3)</span><br><span class="line"></span><br><span class="line">res4 = g.send(<span class="string">'骨头2'</span>)</span><br><span class="line">print(res4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">来福 准备开吃</span><br><span class="line">[]</span><br><span class="line">来福 吃了 骨头</span><br><span class="line">[<span class="string">'骨头'</span>]</span><br><span class="line">来福 吃了 骨头<span class="number">1</span></span><br><span class="line">[<span class="string">'骨头'</span>, <span class="string">'骨头1'</span>]</span><br><span class="line">来福 吃了 骨头<span class="number">2</span></span><br><span class="line">[<span class="string">'骨头'</span>, <span class="string">'骨头1'</span>, <span class="string">'骨头2'</span>]</span><br></pre></td></tr></table></figure><h2 id="不能-send-一个不为-None-的值，-给一个刚刚开始的-生成器"><a href="#不能-send-一个不为-None-的值，-给一个刚刚开始的-生成器" class="headerlink" title="不能 send 一个不为 None 的值， 给一个刚刚开始的 生成器"></a>不能 send 一个不为 None 的值， 给一个刚刚开始的 生成器</h2><blockquote><p><code>TypeError: can&#39;t send non-None value to a just-started generator</code><br>不能 <code>send</code> 一个不为 None 的值， 给一个刚刚开始的 <code>生成器</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    food_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span> food_list</span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % name)</span><br><span class="line">        food_list.append(food)</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">g.send(<span class="string">'包子'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    g.send(<span class="string">'包子'</span>)</span><br><span class="line">TypeError: can<span class="string">'t send non-None value to a just-started generator</span></span><br></pre></td></tr></table></figure><blockquote><p><code>g.send(None)</code> 等同于 <code>next(g)</code><br>强调：对于表达式形式 yield 的生成器，在使用前必须先用 <code>next(g)</code> 或 <code>g.send(None)</code> 初始化一次<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开吃'</span> % name)</span><br><span class="line">    food_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span> food_list</span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line">        food_list.append(food)</span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">'来福'</span>)</span><br><span class="line">next(g)</span><br><span class="line"><span class="comment"># g.send(None)</span></span><br><span class="line">g.send(<span class="string">'包子'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">来福 准备开吃</span><br><span class="line">来福 吃了 包子</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><blockquote><p>编写装饰器，实现初始化协程函数的功能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        g = func(*args, **kwargs)</span><br><span class="line">        next(g)</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eater</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s 准备开始吃饭啦'</span> % name)</span><br><span class="line">    food_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        food = <span class="keyword">yield</span> food_list</span><br><span class="line">        print(<span class="string">'%s 吃了 %s'</span> % (name, food))</span><br><span class="line">        food_list.append(food)</span><br><span class="line"></span><br><span class="line">g = eater(<span class="string">'张三'</span>)</span><br><span class="line">g.send(<span class="string">'蒸羊羔'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">张三 准备开始吃饭啦</span><br><span class="line">张三 吃了 蒸羊羔</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现功能：<code>grep  -rl  &#39;python&#39;  /etc</code><br>注意：<code>target.send(...)</code> 在拿到 target 的返回值后才算执行结束</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        g=func(*args,**kwargs)</span><br><span class="line">        next(g)</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(target)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        filepath=<span class="keyword">yield</span></span><br><span class="line">        g=os.walk(filepath)</span><br><span class="line">        <span class="keyword">for</span> dirname,_,files <span class="keyword">in</span> g:</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                abs_path=<span class="string">r'%s\%s'</span> %(dirname,file)</span><br><span class="line">                target.send(abs_path)</span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">opener</span><span class="params">(target)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        abs_path=<span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">with</span> open(abs_path,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            target.send((f,abs_path))</span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cat</span><span class="params">(target)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        f,abs_path=<span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            res=target.send((line,abs_path))</span><br><span class="line">            <span class="keyword">if</span> res:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grep</span><span class="params">(pattern,target)</span>:</span></span><br><span class="line">    tag=<span class="keyword">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        line,abs_path=<span class="keyword">yield</span> tag</span><br><span class="line">        tag=<span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> pattern.encode(<span class="string">'utf-8'</span>) <span class="keyword">in</span> line:</span><br><span class="line">            target.send(abs_path)</span><br><span class="line">            tag=<span class="keyword">True</span></span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        abs_path=<span class="keyword">yield</span></span><br><span class="line">        print(abs_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g=search(opener(cat(grep(<span class="string">'你好'</span>,printer()))))</span><br><span class="line"><span class="comment"># g.send(r'E:\CMS\aaa\db')</span></span><br><span class="line">g=search(opener(cat(grep(<span class="string">'python'</span>,printer()))))</span><br><span class="line">g.send(<span class="string">r'E:\CMS\aaa\db'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-生成器&quot;&gt;&lt;a href=&quot;#Python-生成器&quot; class=&quot;headerlink&quot; title=&quot;Python 生成器&quot;&gt;&lt;/a&gt;Python 生成器&lt;/h1&gt;
    
    </summary>
    
      <category term="Python笔记" scheme="http://www.gmlyo.com/categories/Python%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python 生成器" scheme="http://www.gmlyo.com/tags/Python-%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus Operator</title>
    <link href="http://www.gmlyo.com/2018/09/10/Prometheus-Operator/"/>
    <id>http://www.gmlyo.com/2018/09/10/Prometheus-Operator/</id>
    <published>2018-09-10T09:55:41.000Z</published>
    <updated>2018-09-10T10:21:08.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prometheus-Operator"><a href="#Prometheus-Operator" class="headerlink" title="Prometheus Operator"></a>Prometheus Operator</h1><a id="more"></a><h2 id="Prometheus介绍"><a href="#Prometheus介绍" class="headerlink" title="Prometheus介绍"></a>Prometheus介绍</h2><p>Prometheus是继Kubernetes之后CNCF基金会的第二个项目，最早也是孵化于Google内部的Brogmon监控系统，后来由前Google工程师在SoundCloud开源，现在已经成为云原生生态的标准监控系统。</p><p>Prometheus是一个开源的完整监控解决方案，涵盖数据采集、查询、告警、展示整个监控流程，下图是Prometheus的架构图：<br><a href="http://pacnmwckn.bkt.clouddn.com/prometheus1.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/prometheus1.png" alt="prometheus"></a></p><p><strong>Prometheus Server</strong><br>Prometheus server是整个方案的核心组件，负责监控数据的获取、存储和查询，它本身就是一个时序数据库，将采集到的监控数据按照时间序列的方式存储在本地，Prometheus Server对外提供了自定义的PromQL语言，实现对数据的查询以及分析。</p><p>Prometheus server可以通过静态配置监控目标，也可以通过服务发现的方式动态监控目标，Prometheus server采用pull的方式到target暴露出的对应http接口获取监控数据。</p><p><strong>Exporters</strong><br>Exporters将数据采集的target通过http的形式暴露给Prometheus server，Prometheus server通过访问该exporter提供的endpoints端点，获取到需要采集的监控数据。</p><p>Exporters分为两类：</p><ol><li>直接采集：这类的exporters内置在了相应的应用中，能够直接提供target端点，比如etcd、kubernetes组件，都直接内置了用于向Prometheus暴露监控数据的端点。</li><li>间接采集：原有的监控目标不支持prometheus，需要通过prometheus提供的Client Library编写该监控目标的监控采集程序，比如redis、tomcat、mysql等应用，需要有外置的exporters先采集应用的监控项，再通过exporters的http接口把metrics暴露给prometheus server</li></ol><p><strong>PushGateway</strong><br>因为prometheus数据采集采用pull模式，需要prometheus server能直接访问到exporters，当网络环境无法满足时，需要通过PushGateway中转，内部网络的监控数据主动pushl到Gateway当中，而Prometheus Server则可以采用同样Pull的方式从PushGateway中获取到监控数据。</p><p><strong>AlertManager</strong><br>在prometheus server的配置文件中可以配置相应的告警规则，一旦达到告警规则，就会触发AlertManager，至于之后的操作由AlertManager自定义，可以是邮箱、微信、钉钉或webhook等。</p><p>promethus的告警被分成两个部分：</p><ol><li>通过在Prometheus中定义告警触发条件规则，并向Alertmanager发送告警信息</li><li>Alertmanager作为一个独立的组件，负责接收并处理来自Prometheus Server(也可以是其它的客户端程序)的告警信息</li></ol><p>在Prometheus全局配置文件中<code>prometheus.yml</code>通过<code>rule_files</code>指定一组告警规则文件的访问路径。Prometheus启动后会自动扫描这些路径下规则文件中定义的内容，并且根据这些规则计算是否向外部发送通知</p><p>在<code>prometheus.yml</code>中添加监控告警文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">rule_files:</span></span><br><span class="line">  - <span class="meta-keyword">/etc/</span>prometheus<span class="meta-keyword">/rules/</span>*.rules</span><br></pre></td></tr></table></figure><p>在目录<code>/etc/prometheus/rules/</code>下创建告警文件<code>hoststats-alert.rules</code>，重启promethus后这个告警文件就能被promethus读取。</p><p>在<code>promethus.yml</code>中添加关联alertmanager配置：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">alerting</span>:</span><br><span class="line">  <span class="attribute">alertmanagers</span>:</span><br><span class="line">    - <span class="attribute">static_configs</span>:</span><br><span class="line">        <span class="attribute">targets</span>: [<span class="string">'localhost:9093'</span>]</span><br></pre></td></tr></table></figure><p>成功后就可以在alertmanager中查看promethus中触发的告警，之后的操作可以由alertmanager自定义</p><p>alertmanager是独立的服务，配置文件默认在<code>/etc/prometheus/alertmanager.yml</code>，配置文件中目前只写入基础配置：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">route:</span></span><br><span class="line"><span class="symbol">  receiver:</span> <span class="string">'default-receiver'</span></span><br><span class="line"><span class="string">receivers:</span></span><br><span class="line">  - <span class="string">name:</span> <span class="keyword">default</span>-receiver</span><br></pre></td></tr></table></figure><ol><li>route：所有的告警信息都会从配置中的顶级路由(route)进入路由树，根据路由规则将告警信息发送给相应的接收器</li><li>receivers：告警信息会根据路由发送给对应receivers，接收器可以关联邮件，Slack以及其它方式接收告警信息</li></ol><hr><h2 id="Prometheus-Operator-1"><a href="#Prometheus-Operator-1" class="headerlink" title="Prometheus Operator"></a>Prometheus Operator</h2><p>对于云原生基础的Kubernetes，Prometheus对其有着代码级别的支持，Kubernetes中的组件原生支持Prometheus的metrics路径，而且能够通过服务发现的形式自动监控集群。在Kubernetes中部署Prometheus可以通过operator的框架，下图是prometheus-operator的架构：<br><a href="http://pacnmwckn.bkt.clouddn.com/prometheus-operator1.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/prometheus-operator1.png" alt="prometheus-operator"></a></p><p>其中operator是其核心，作为一个控制器，operator首先会创建Prometheus、ServiceMonitor、AlertManager三个CRD资源对象，并且监控并维持这三种资源对象的状态。</p><p>创建的Prometheus资源对象就是作为Prometheus server，ServiceMonitor就是exporters的抽象，通过ServiceMonitor，Prometheus server能够pull到对应target的监控metrics。</p><p>在prometheus的yaml文件中会指定需要采集的ServiceMonitor：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">serviceMonitorSelector</span>:</span><br><span class="line">  <span class="selector-tag">matchExpressions</span>:</span><br><span class="line">  <span class="selector-tag">-</span> &#123;<span class="attribute">key</span>: k8s-app, operator: Exists&#125;</span><br></pre></td></tr></table></figure><p>只有在ServiceMonitor的yaml文件中匹配上了<code>k8s-app</code>的ServiceMonitor才能被Prometheus server采集：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-controller-manager</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-controller-manager</span>    <span class="comment">##Prometheus中的ServiceMonitor选择器</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  jobLabel:</span> <span class="string">k8s-app</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="string">http-metrics</span>    <span class="comment">##对应service的端口名</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">30</span><span class="string">s</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      k8s-app:</span> <span class="string">kube-controller-manager</span>    <span class="comment">##选择对应label的service</span></span><br><span class="line"><span class="attr">  namespaceSelector:</span></span><br><span class="line"><span class="attr">    matchNames:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">kube-system</span>     <span class="comment">##选择对应namespace</span></span><br></pre></td></tr></table></figure><p>也就是Prometheus server选取对应的ServiceMonitor进行监控，而ServiceMonitor会对应到相应的service，service会对应到endpoints，Prometheus server通过选择ServiceMonitor就能访问到最终的监控目标。</p><hr><h2 id="在Kubernetes中部署Prometheus-Operator"><a href="#在Kubernetes中部署Prometheus-Operator" class="headerlink" title="在Kubernetes中部署Prometheus Operator"></a>在Kubernetes中部署Prometheus Operator</h2><p>因为这是部署在非原生的k8s集群，所以需要做一些额外操作才能监控整个集群</p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://codeload.github.com/coreos/prometheus-operator/tar.gz/v0.16.0 -O prometheus-operator-0.16.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf prometheus-operator-0.16.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> prometheus-operator-0.16.0/contrib/kube-prometheus</span></span><br></pre></td></tr></table></figure><p>创建单独的namespace：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create ns monitoring</span></span><br></pre></td></tr></table></figure><h3 id="安装-Prometheus-Operator"><a href="#安装-Prometheus-Operator" class="headerlink" title="安装 Prometheus Operator"></a>安装 Prometheus Operator</h3><p>删除RBAC相关配置：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/prometheus-<span class="keyword">operator</span></span><br><span class="line">manifests/prometheus-<span class="keyword">operator</span></span><br><span class="line">├── prometheus-<span class="keyword">operator</span>-cluster-role-binding.yaml</span><br><span class="line">├── prometheus-<span class="keyword">operator</span>-cluster-role.yaml</span><br><span class="line">├── prometheus-<span class="keyword">operator</span>-service-account.yaml</span><br><span class="line">├── prometheus-<span class="keyword">operator</span>-service.yaml</span><br><span class="line">└── prometheus-<span class="keyword">operator</span>.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">5</span> files</span><br><span class="line">$ rm -rf manifests/prometheus-<span class="keyword">operator</span>/prometheus-<span class="keyword">operator</span>-cluster-role*</span><br><span class="line">$ rm -rf manifests/prometheus-<span class="keyword">operator</span>/prometheus-<span class="keyword">operator</span>-service-account.yaml</span><br></pre></td></tr></table></figure><p>删除 prometheus-operator.yaml 中的 serviceAccountName: prometheus-operator：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> extensions/v1beta1</span><br><span class="line"><span class="symbol">kind:</span> Deployment</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line">...</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line"><span class="symbol">      containers:</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="meta"># serviceAccountName: prometheus-operator # 将这一行删除</span></span><br></pre></td></tr></table></figure><p>部署Prometheus Operator</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/prometheus-operator/</span><br><span class="line">manifests/prometheus-operator</span><br><span class="line">├── prometheus-operator-service.yaml</span><br><span class="line">└── prometheus-operator.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">2</span> files</span><br><span class="line">$ kubectl apply -f manifests/prometheus-operator/ -n monitoring</span><br><span class="line">prometheus-operator<span class="number">-599487016</span><span class="number">-39</span>w9m   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">1</span>d</span><br></pre></td></tr></table></figure><p>部署完成后，operator会自动创建三个CRD：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get crd</span><br><span class="line">NAME                                    KIND</span><br><span class="line">alertmanagers<span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span>     CustomResourceDefinition<span class="selector-class">.v1beta1</span><span class="selector-class">.apiextensions</span><span class="selector-class">.k8s</span><span class="selector-class">.io</span></span><br><span class="line">prometheuses<span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span>      CustomResourceDefinition<span class="selector-class">.v1beta1</span><span class="selector-class">.apiextensions</span><span class="selector-class">.k8s</span><span class="selector-class">.io</span></span><br><span class="line">servicemonitors<span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span>   CustomResourceDefinition<span class="selector-class">.v1beta1</span><span class="selector-class">.apiextensions</span><span class="selector-class">.k8s</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure><h3 id="安装Node-Exporter"><a href="#安装Node-Exporter" class="headerlink" title="安装Node Exporter"></a>安装Node Exporter</h3><p>Prometheus监控主机需要Node Exporter提供相应的target<br>删除与 RBAC 相关的 yaml 文件：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/<span class="keyword">node</span><span class="title">-exporter</span></span><br><span class="line">manifests/<span class="keyword">node</span><span class="title">-exporter</span></span><br><span class="line">├── <span class="keyword">node</span><span class="title">-exporter-cluster-role-binding</span>.yaml</span><br><span class="line">├── <span class="keyword">node</span><span class="title">-exporter-cluster-role</span>.yaml</span><br><span class="line">├── <span class="keyword">node</span><span class="title">-exporter-daemonset</span>.yaml</span><br><span class="line">├── <span class="keyword">node</span><span class="title">-exporter-service-account</span>.yaml</span><br><span class="line">└── <span class="keyword">node</span><span class="title">-exporter-service</span>.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">5</span> files</span><br><span class="line">$ rm -rf manifests/<span class="keyword">node</span><span class="title">-exporter</span>/<span class="keyword">node</span><span class="title">-exporter-cluster-role</span>*</span><br><span class="line">$ rm -rf manifests/<span class="keyword">node</span><span class="title">-exporter</span>/<span class="keyword">node</span><span class="title">-exporter-service-account</span>.yaml</span><br></pre></td></tr></table></figure><p>删除<code>node-exporter-daemonset.yaml</code>中的<code>serviceAccountName: node-exporter</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> extensions/v1beta1</span><br><span class="line"><span class="symbol">kind:</span> DaemonSet</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line">...</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line">  ...</span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line">  <span class="meta"># serviceAccountName: node-exporter # 将这一行删除</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>部署 node-exporter</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/<span class="keyword">node</span><span class="title">-exporter</span></span><br><span class="line">manifests/<span class="keyword">node</span><span class="title">-exporter</span></span><br><span class="line">├── <span class="keyword">node</span><span class="title">-exporter-daemonset</span>.yaml</span><br><span class="line">└── <span class="keyword">node</span><span class="title">-exporter-service</span>.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">2</span> files</span><br><span class="line">$ kubectl apply -f manifests/<span class="keyword">node</span><span class="title">-exporter</span> -n monitoring</span><br><span class="line">$ kubectl -n monitoring get pods -l <span class="attr">app=</span><span class="keyword">node</span><span class="title">-exporter</span></span><br><span class="line">NAME                  READY     STATUS    RESTARTS   AGE</span><br><span class="line"><span class="keyword">node</span><span class="title">-exporter-3mnvn</span>   <span class="number">2</span>/<span class="number">2</span>       Running   <span class="number">0</span>          <span class="number">1</span>d</span><br><span class="line"><span class="keyword">node</span><span class="title">-exporter-lwbjm</span>   <span class="number">2</span>/<span class="number">2</span>       Running   <span class="number">0</span>          <span class="number">1</span>d</span><br><span class="line"><span class="keyword">node</span><span class="title">-exporter-p2bw5</span>   <span class="number">2</span>/<span class="number">2</span>       Running   <span class="number">0</span>          <span class="number">1</span>d</span><br></pre></td></tr></table></figure><h3 id="安装-Kube-state-metrics"><a href="#安装-Kube-state-metrics" class="headerlink" title="安装 Kube-state-metrics"></a>安装 Kube-state-metrics</h3><p>删除与 RBAC 相关的 yaml 文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/kube-state-metrics</span><br><span class="line">manifests/kube-state-metrics</span><br><span class="line">├── kube-state-metrics-cluster-role-binding.yaml</span><br><span class="line">├── kube-state-metrics-cluster-role.yaml</span><br><span class="line">├── kube-state-metrics-deployment.yaml</span><br><span class="line">├── kube-state-metrics-role-binding.yaml</span><br><span class="line">├── kube-state-metrics-role.yaml</span><br><span class="line">├── kube-state-metrics-service-account.yaml</span><br><span class="line">└── kube-state-metrics-service.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">7</span> files</span><br><span class="line">$ rm -rf manifests/kube-state-metrics<span class="comment">/*role*</span></span><br><span class="line"><span class="comment">$ rm -rf manifests/kube-state-metrics/kube-state-metrics-service-account.yaml</span></span><br></pre></td></tr></table></figure><p>删除<code>kube-state-metrics-deployment.yaml</code>中的<code>serviceAccountName: kube-state-metrics</code>。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> extensions/v1beta1</span><br><span class="line"><span class="symbol">kind:</span> Deployment</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line">...</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line">  ...</span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line">  <span class="meta"># serviceAccountName: kube-state-metrics # 将这一行删除</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>部署 kube-state-metrics：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/kube-<span class="section">state</span>-metrics</span><br><span class="line">manifests/kube-<span class="section">state</span>-metrics</span><br><span class="line">├── kube-<span class="section">state</span>-metrics-deployment.yaml</span><br><span class="line">└── kube-<span class="section">state</span>-metrics-service.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">2</span> files</span><br><span class="line">$ kubectl apply -f manifests/kube-<span class="section">state</span>-metrics -n monitoring</span><br><span class="line">$ kubectl -n monitoring get pods -l app=kube-<span class="section">state</span>-metrics</span><br><span class="line">NAME                                  READY     STATUS    RESTARTS   AGE</span><br><span class="line">kube-<span class="section">state</span>-metrics<span class="number">-3424261376</span>-hcvd5   <span class="number">4</span>/<span class="number">4</span>       Running   <span class="number">0</span>          <span class="number">1</span>d</span><br></pre></td></tr></table></figure><h3 id="安装-Prometheus-和-ServiceMonitor"><a href="#安装-Prometheus-和-ServiceMonitor" class="headerlink" title="安装 Prometheus 和 ServiceMonitor"></a>安装 Prometheus 和 ServiceMonitor</h3><p>删除与 RBAC 相关的 yaml 文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ tree manifests/prometheus</span><br><span class="line">manifests/prometheus</span><br><span class="line">├── prometheus-k8s-role-bindings.yaml</span><br><span class="line">├── prometheus-k8s-roles.yaml</span><br><span class="line">├── prometheus-k8s-rules.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-alertmanager.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-apiserver.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-kube-controller-manager.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-kubelet.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-kube-scheduler.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-kube-state-metrics.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-node-exporter.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-prometheus-operator.yaml</span><br><span class="line">├── prometheus-k8s-service-monitor-prometheus.yaml</span><br><span class="line">├── prometheus-k8s-service.yaml</span><br><span class="line">└── prometheus-k8s.yaml</span><br><span class="line"><span class="number">0</span> directories, <span class="number">14</span> files</span><br><span class="line">$ rm -rf manifests/prometheus<span class="comment">/*role*</span></span><br></pre></td></tr></table></figure><p>删除 prometheus-k8s.yaml 中的 serviceAccountName: prometheus-k8s：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> monitoring.coreos.com/v1</span><br><span class="line"><span class="symbol">kind:</span> Prometheus</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> k8s</span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    prometheus:</span> k8s</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">  version:</span> v2<span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="meta"># serviceAccountName: prometheus-k8s # 将这一行删除</span></span><br></pre></td></tr></table></figure><p>部署 Prometheus 和 ServiceMonitor：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n monitoring apply -f manifests/prometheus/</span><br><span class="line"></span><br><span class="line">$ kubectl -n monitoring get prometheuses</span><br><span class="line">NAME      KIND</span><br><span class="line">k8s       Prometheus<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">$ kubectl -n monitoring get servicemonitor</span><br><span class="line">NAME                      KIND</span><br><span class="line">alertmanager              ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">etcd-k8s                  ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">kube-apiserver            ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">kube-controller-manager   ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">kube-scheduler            ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">kube-state-metrics        ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">kubelet                   ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">node-exporter             ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">prometheus                ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br><span class="line">prometheus-operator       ServiceMonitor<span class="selector-class">.v1</span><span class="selector-class">.monitoring</span><span class="selector-class">.coreos</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><h3 id="监控kube-controller-manager-kube-scheduler"><a href="#监控kube-controller-manager-kube-scheduler" class="headerlink" title="监控kube-controller-manager kube-scheduler"></a>监控kube-controller-manager kube-scheduler</h3><p>查看的kube-controller-manager的ServiceMonitor的yaml文件：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span>: monitoring.coreos.com/v1</span><br><span class="line"><span class="attribute">kind</span>: ServiceMonitor</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">name</span>: kube-controller-manager</span><br><span class="line">  <span class="attribute">labels</span>:</span><br><span class="line">    <span class="attribute">k8s-app</span>: kube-controller-manager</span><br><span class="line"><span class="attribute">spec</span>:</span><br><span class="line">  <span class="attribute">jobLabel</span>: k8s-app</span><br><span class="line">  <span class="attribute">endpoints</span>:</span><br><span class="line">  - <span class="attribute">port</span>: http-metrics</span><br><span class="line">    <span class="attribute">interval</span>: <span class="number">30s</span></span><br><span class="line">  <span class="attribute">selector</span>:</span><br><span class="line">    <span class="attribute">matchLabels</span>:</span><br><span class="line">      <span class="attribute">k8s-app</span>: kube-controller-manager</span><br><span class="line">  <span class="attribute">namespaceSelector</span>:</span><br><span class="line">    <span class="attribute">matchNames</span>:</span><br><span class="line">    - kube-system</span><br></pre></td></tr></table></figure><p>这个ServiceMonitor对应指定的是kube-system命名空间的打了<code>k8s-app: kube-controller-manager</code>标签的service，不是对应的endpoint的标签，对应endpoint端口名是<code>http-metrics</code></p><p>因为kube-controller-manager和kube-scheduler在kube-system的命名空间中没有相应的service和endpoints，所以需要手动创建：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kube-controller-manager</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-controller-manager-prometheus-discovery</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-controller-manager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http-metrics</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10252</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">10252</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-controller-manager-prometheus-discovery</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-controller-manager</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="attr">- addresses:</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.191</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.194</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.183</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http-metrics</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10252</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#kube-scheduler</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-scheduler-prometheus-discovery</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http-metrics</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10251</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">10251</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-scheduler-prometheus-discovery</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="attr">- addresses:</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.191</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.194</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.183</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http-metrics</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10251</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><h3 id="监控api-server"><a href="#监控api-server" class="headerlink" title="监控api-server"></a>监控api-server</h3><p>在原生的k8s集群中，是可以直接监控api-server的，但是在dce集群中，部署多个控制节点后kubernetes的endpoint对应的ip会一直在各个主机ip中变化，所以新建api-server的service和endpoints。<br>在prometheus的配置文件中，通过label来过滤api-server的target：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">relabel_configs:</span></span><br><span class="line"><span class="attr">- source_labels:</span> <span class="string">[__meta_kubernetes_service_label_component]</span></span><br><span class="line"><span class="attr">  separator:</span> <span class="string">;</span></span><br><span class="line"><span class="attr">  regex:</span> <span class="string">apiserver</span></span><br><span class="line"><span class="attr">  replacement:</span> <span class="string">$1</span></span><br><span class="line"><span class="attr">  action:</span> <span class="string">keep</span></span><br><span class="line"><span class="attr">- source_labels:</span> <span class="string">[__meta_kubernetes_service_label_provider]</span></span><br><span class="line"><span class="attr">  separator:</span> <span class="string">;</span></span><br><span class="line"><span class="attr">  regex:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">  replacement:</span> <span class="string">$1</span></span><br><span class="line"><span class="attr">  action:</span> <span class="string">keep</span></span><br></pre></td></tr></table></figure><p>能看到service的label的值只能是apiserver和kubernetes，所以新建api-server的service和endpoint如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    component:</span> <span class="string">apiserver</span></span><br><span class="line"><span class="attr">    provider:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dce</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">16443</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dce</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="attr">- addresses:</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.191</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.194</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.183</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">16443</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><h3 id="监控ETCD"><a href="#监控ETCD" class="headerlink" title="监控ETCD"></a>监控ETCD</h3><p>ETCD作为kubernetes集群的数据持久化的后端，是集群所有数据的存储点，也需要对其有相应监控。CoreOS给出了监控ETCD的方法<a href="https://github.com/coreos/prometheus-operator/blob/master/contrib/kube-prometheus/docs/monitoring-external-etcd.md" target="_blank" rel="noopener">监控ETCD</a></p><p><strong>创建ETCD对应访问证书</strong><br>因为监控ETCD不像监控kubernetes组件是通过api-server或直接使用http访问组件的target，需要使用https双向证书验证，所以要先创建可访问ETCD的secret，供prometheus server使用：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n monitoring create<span class="built_in"> secret </span>generic etcd-certs <span class="attribute">--from-file</span>=/etc/cni/net.d/calico-tls/etcd-cert <span class="attribute">--from-file</span>=/etc/cni/net.d/calico-tls/etcd-key <span class="attribute">--from-file</span>=/etc/cni/net.d/calico-tls/etcd-ca</span><br></pre></td></tr></table></figure><p>证书、私钥及ca证书是可访问ETCD的，路径是主机本地存储证书的目录。<br>在prometheus的yaml文件中挂载证书：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> monitoring.coreos.com/v1</span><br><span class="line"><span class="symbol">kind:</span> Prometheus</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> k8s</span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line"><span class="symbol">    prometheus:</span> k8s</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">  secrets:</span> </span><br><span class="line">  - etcd-certs</span><br><span class="line"><span class="symbol">  version:</span> v1<span class="number">.7</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>如果已创建，可以直接edit该对象.</p><p><strong>创建ETCD的ServiceMonitor</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> monitoring.coreos.com/v1</span><br><span class="line"><span class="symbol">kind:</span> ServiceMonitor</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> etcd-k8s</span><br><span class="line"><span class="symbol">  labels:</span></span><br><span class="line">    k8s-app: etcd-k8s</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  jobLabel:</span> k8s-app</span><br><span class="line"><span class="symbol">  endpoints:</span></span><br><span class="line">  - port: api</span><br><span class="line"><span class="symbol">    interval:</span> <span class="number">30</span>s</span><br><span class="line"><span class="symbol">    scheme:</span> https</span><br><span class="line"><span class="symbol">    tlsConfig:</span></span><br><span class="line"><span class="symbol">      caFile:</span> <span class="meta-keyword">/etc/</span>prometheus<span class="meta-keyword">/secrets/</span>etcd-certs/etcd-ca</span><br><span class="line"><span class="symbol">      certFile:</span> <span class="meta-keyword">/etc/</span>prometheus<span class="meta-keyword">/secrets/</span>etcd-certs/etcd-cert</span><br><span class="line"><span class="symbol">      keyFile:</span> <span class="meta-keyword">/etc/</span>prometheus<span class="meta-keyword">/secrets/</span>etcd-certs/etcd-key</span><br><span class="line">      <span class="meta">#use insecureSkipVerify only <span class="meta-keyword">if</span> you cannot use a Subject Alternative Name</span></span><br><span class="line"><span class="symbol">      insecureSkipVerify:</span> true</span><br><span class="line">      <span class="meta">#serverName: ETCD_DNS_OR_ALTERNAME_</span></span><br><span class="line"><span class="symbol">  selector:</span></span><br><span class="line"><span class="symbol">    matchLabels:</span></span><br><span class="line">      k8s-app: etcd</span><br><span class="line"><span class="symbol">  namespaceSelector:</span></span><br><span class="line"><span class="symbol">    matchNames:</span></span><br><span class="line">    - monitoring</span><br></pre></td></tr></table></figure><p>其中<code>tlsConfig</code>的文件位置是prometheus容器里面挂载证书的位置，不确定的话可以进入容器内部验证一下<br>当证书<code>serverName</code>和etcd中签发的不匹配可以使用<code>insecureSkipVerify: true</code></p><p><strong>创建ETCD对应的service和endpoints</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">etcd-k8s</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">etcd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">api</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">12379</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">etcd-k8s</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">etcd</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="attr">- addresses:</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.191</span></span><br><span class="line"><span class="attr">    nodeName:</span> <span class="string">dcemaster1</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.194</span></span><br><span class="line"><span class="attr">    nodeName:</span> <span class="string">dcemaster2</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.183</span></span><br><span class="line"><span class="attr">    nodeName:</span> <span class="string">dcemaster3</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">api</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">12379</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><p>登录prometheus的UI查看对应target是不是都是up状态，up状态说明数据pull正常<br><a href="http://pacnmwckn.bkt.clouddn.com/target1.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/target1.png" alt="target1"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/target2.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/target2.png" alt="target2"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/target3.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/target3.png" alt="target3"></a></p><h3 id="安装Grafana"><a href="#安装Grafana" class="headerlink" title="安装Grafana"></a>安装Grafana</h3><p>作为prometheus前端展示页面，Grafana提供了强大的数据聚合和展示的功能，可以通过自定义前端配置修改dashboard，官方社区有很多<a href="https://grafana.com/dashboards?search=kubernetes" target="_blank" rel="noopener">kubernetes的前端json文件</a>供使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls manifests/grafana/</span><br><span class="line">grafana-credentials<span class="selector-class">.yaml</span>  grafana-dashboards<span class="selector-class">.yaml</span>  grafana-deployment<span class="selector-class">.yaml</span>  grafana-service.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl -n monitoring apply -f manifests/grafana/</span><br></pre></td></tr></table></figure><p>部署后就能通过Grafana监控整个kubernetes集群<br><a href="http://pacnmwckn.bkt.clouddn.com/grafana1.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana1.png" alt="grafana1"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/grafana2.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana2.png" alt="grafana2"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/grafana3.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana3.png" alt="grafana3"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/grafana4.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana4.png" alt="grafana4"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/grafana5.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana5.png" alt="grafana5"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/grafana6.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana6.png" alt="grafana6"></a><br><a href="http://pacnmwckn.bkt.clouddn.com/grafana7.png" target="_blank" rel="noopener"><img src="http://pacnmwckn.bkt.clouddn.com/grafana7.png" alt="grafana7"></a></p><h3 id="配置AlertManager"><a href="#配置AlertManager" class="headerlink" title="配置AlertManager"></a>配置AlertManager</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls manifests/alertmanager/</span><br><span class="line">alertmanager-config<span class="selector-class">.yaml</span>  alertmanager-service<span class="selector-class">.yaml</span>  alertmanager.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl -n monitoring apply -f manifests/alertmanager/</span><br></pre></td></tr></table></figure><p>告警接收器可以通过以下形式进行配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">receivers:</span></span><br><span class="line">  - <span class="params">&lt;receiver&gt;</span> ...</span><br></pre></td></tr></table></figure><p>每一个receiver具有一个全局唯一的名称，并且对应一个或者多个通知方式：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">name:</span> <span class="params">&lt;string&gt;</span></span><br><span class="line"><span class="symbol">email_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;email_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">hipchat_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;hipchat_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">pagerduty_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;pagerduty_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">pushover_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;pushover_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">slack_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;slack_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">opsgenie_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;opsgenie_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">webhook_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;webhook_config&gt;</span>, ... ]</span><br><span class="line"><span class="symbol">victorops_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;victorops_config&gt;</span>, ... ]</span><br></pre></td></tr></table></figure><p>目前官方内置的第三方通知集成包括：邮件、 即时通讯软件（如Slack、Hipchat）、移动应用消息推送(如Pushover)和自动化运维工具（例如：Pagerduty、Opsgenie、Victorops）。Alertmanager的通知方式中还可以支持Webhook，通过这种方式开发者可以实现更多个性化的扩展支持。</p><p><strong>以下是集成SMTP邮件的示例</strong><br>每一个receiver可以对应一组邮件通知配置email_configs，如下所示：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">name:</span> <span class="params">&lt;string&gt;</span></span><br><span class="line"><span class="symbol">email_configs:</span></span><br><span class="line">  [ - <span class="params">&lt;email_config&gt;</span>, ... ]</span><br></pre></td></tr></table></figure><p>email_config配置：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Whether or not to notify about resolved alerts.</span></span><br><span class="line">[ send_resolved: <span class="variable">&lt;boolean&gt;</span> | <span class="keyword">default</span> = false ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># The email address to send notifications to.</span></span><br><span class="line"><span class="keyword">to</span>: <span class="variable">&lt;tmpl_string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The sender address.</span></span><br><span class="line">[ <span class="keyword">from</span>: <span class="variable">&lt;tmpl_string&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_from ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># The SMTP host through which emails are sent.</span></span><br><span class="line">[ smarthost: <span class="variable">&lt;string&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_smarthost ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># SMTP authentication information.</span></span><br><span class="line">[ auth_username: <span class="variable">&lt;string&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_auth_username ]</span><br><span class="line">[ auth_password: <span class="variable">&lt;secret&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_auth_password ]</span><br><span class="line">[ auth_secret: <span class="variable">&lt;secret&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_auth_secret ]</span><br><span class="line">[ auth_identity: <span class="variable">&lt;string&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_auth_identity ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># The SMTP TLS requirement.</span></span><br><span class="line">[ require_tls: <span class="variable">&lt;bool&gt;</span> | <span class="keyword">default</span> = <span class="keyword">global</span>.smtp_require_tls ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># The HTML body of the email notification.</span></span><br><span class="line">[ html: <span class="variable">&lt;tmpl_string&gt;</span> | <span class="keyword">default</span> = '&#123;&#123; template <span class="string">"email.default.html"</span> . &#125;&#125;' ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Further headers email header key/value pairs. Overrides any headers</span></span><br><span class="line"><span class="comment"># previously set by the notification implementation.</span></span><br><span class="line">[ headers: &#123; <span class="variable">&lt;string&gt;</span>: <span class="variable">&lt;tmpl_string&gt;</span>, ... &#125; ]</span><br></pre></td></tr></table></figure><p>如果所有的邮件配置使用了相同的SMTP配置，则可以直接定义全局的SMTP配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  [ smtp_from: &lt;tmpl_string&gt; ]</span><br><span class="line">  [ smtp_smarthost: &lt;string&gt; ]</span><br><span class="line">  [ smtp_auth_username: &lt;string&gt; ]</span><br><span class="line">  [ smtp_auth_password: &lt;secret&gt; ]</span><br><span class="line">  [ smtp_auth_secret: &lt;secret&gt; ]</span><br><span class="line">  [ smtp_auth_identity: &lt;string&gt; ]</span><br><span class="line">  [ smtp_require_tls: &lt;bool&gt; |<span class="built_in"> default </span>= <span class="literal">true</span> ]</span><br></pre></td></tr></table></figure><p>以Gmail邮箱为例:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">global:</span></span><br><span class="line"><span class="symbol">  smtp_smarthost:</span> smtp.gmail.com:<span class="number">587</span></span><br><span class="line"><span class="symbol">  smtp_from:</span> <span class="params">&lt;smtp mail from&gt;</span></span><br><span class="line"><span class="symbol">  smtp_auth_username:</span> <span class="params">&lt;usernae&gt;</span></span><br><span class="line"><span class="symbol">  smtp_auth_identity:</span> <span class="params">&lt;username&gt;</span></span><br><span class="line"><span class="symbol">  smtp_auth_password:</span> <span class="params">&lt;password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">receivers:</span></span><br><span class="line">  - name: default-receiver</span><br><span class="line"><span class="symbol">    email_configs:</span></span><br><span class="line">      - to: <span class="params">&lt;mail to address&gt;</span></span><br></pre></td></tr></table></figure><p>手动拉高CPU使用量后会触发告警并发送告警邮件：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/dev/</span>zero&gt;<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.troyying.xyz/index.php/operate/15.html" target="_blank" rel="noopener">https://www.troyying.xyz/index.php/operate/15.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Prometheus-Operator&quot;&gt;&lt;a href=&quot;#Prometheus-Operator&quot; class=&quot;headerlink&quot; title=&quot;Prometheus Operator&quot;&gt;&lt;/a&gt;Prometheus Operator&lt;/h1&gt;
    
    </summary>
    
      <category term="Kubernetes笔记" scheme="http://www.gmlyo.com/categories/Kubernetes%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Prometheus Operator" scheme="http://www.gmlyo.com/tags/Prometheus-Operator/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack 帮助查看</title>
    <link href="http://www.gmlyo.com/2018/09/10/SaltStack-%E6%9F%A5%E7%9C%8B%E5%B8%AE%E5%8A%A9/"/>
    <id>http://www.gmlyo.com/2018/09/10/SaltStack-查看帮助/</id>
    <published>2018-09-10T07:51:15.000Z</published>
    <updated>2018-09-10T12:47:07.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SaltStack-查看帮助"><a href="#SaltStack-查看帮助" class="headerlink" title="SaltStack 查看帮助"></a>SaltStack 查看帮助</h1><a id="more"></a><h2 id="查看所有-module-列表"><a href="#查看所有-module-列表" class="headerlink" title="查看所有 module 列表"></a>查看所有 module 列表</h2><h3 id="查看-Minion端-支持的所有-module-列表"><a href="#查看-Minion端-支持的所有-module-列表" class="headerlink" title="查看 Minion端 支持的所有 module 列表"></a>查看 Minion端 支持的所有 module 列表</h3><figure class="highlight plain"><figcaption><span>&#39;*&#39; sys.list.module</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt &apos;*&apos; sys.list.module</span><br></pre></td></tr></table></figure><h2 id="查看指定-module-的所有-function"><a href="#查看指定-module-的所有-function" class="headerlink" title="查看指定 module 的所有 function"></a>查看指定 module 的所有 function</h2><h3 id="查看-cmd-module-的所有-function-的命令"><a href="#查看-cmd-module-的所有-function-的命令" class="headerlink" title="查看 cmd module 的所有 function 的命令"></a>查看 cmd module 的所有 function 的命令</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> sys.list_functions <span class="keyword">cmd</span><span class="bash"></span></span><br></pre></td></tr></table></figure><h2 id="查看-所有-模块函数帮助信息"><a href="#查看-所有-模块函数帮助信息" class="headerlink" title="查看 所有 模块函数帮助信息"></a>查看 所有 模块函数帮助信息</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt '*' sys.doc <span class="string">| less</span></span><br></pre></td></tr></table></figure><h2 id="查看指定-module-用法"><a href="#查看指定-module-用法" class="headerlink" title="查看指定 module 用法"></a>查看指定 module 用法</h2><h3 id="查看-cmd-module-的详细用法与示例"><a href="#查看-cmd-module-的详细用法与示例" class="headerlink" title="查看 cmd module 的详细用法与示例"></a>查看 cmd module 的详细用法与示例</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> sys.doc <span class="keyword">cmd</span><span class="bash"></span></span><br></pre></td></tr></table></figure><h2 id="查看所有-states-列表"><a href="#查看所有-states-列表" class="headerlink" title="查看所有 states 列表"></a>查看所有 states 列表</h2><h3 id="查看-Minion端-支持的所有-states-列表"><a href="#查看-Minion端-支持的所有-states-列表" class="headerlink" title="查看 Minion端 支持的所有 states 列表"></a>查看 Minion端 支持的所有 states 列表</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">salt</span> <span class="string">'*'</span> sys.list_state_modules</span><br></pre></td></tr></table></figure><h2 id="查看指定-states-的所有-function"><a href="#查看指定-states-的所有-function" class="headerlink" title="查看指定 states 的所有 function"></a>查看指定 states 的所有 function</h2><h3 id="查看-file-states-的所有-function"><a href="#查看-file-states-的所有-function" class="headerlink" title="查看 file.states 的所有 function"></a>查看 file.states 的所有 function</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> sys<span class="selector-class">.list_state_functions</span> file</span><br></pre></td></tr></table></figure><h2 id="查看指定-states-用法"><a href="#查看指定-states-用法" class="headerlink" title="查看指定 states 用法"></a>查看指定 states 用法</h2><h3 id="查看-file-states-的详细用法与示例"><a href="#查看-file-states-的详细用法与示例" class="headerlink" title="查看 file.states 的详细用法与示例"></a>查看 file.states 的详细用法与示例</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> sys<span class="selector-class">.state_doc</span> file</span><br></pre></td></tr></table></figure><h2 id="查看指定-states-指定-function-用法"><a href="#查看指定-states-指定-function-用法" class="headerlink" title="查看指定 states 指定 function 用法"></a>查看指定 states 指定 function 用法</h2><h3 id="查看-file-managed-states-的详细用法与示例"><a href="#查看-file-managed-states-的详细用法与示例" class="headerlink" title="查看 file.managed states 的详细用法与示例"></a>查看 file.managed states 的详细用法与示例</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> sys<span class="selector-class">.state_doc</span> file.managed</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SaltStack-查看帮助&quot;&gt;&lt;a href=&quot;#SaltStack-查看帮助&quot; class=&quot;headerlink&quot; title=&quot;SaltStack 查看帮助&quot;&gt;&lt;/a&gt;SaltStack 查看帮助&lt;/h1&gt;
    
    </summary>
    
      <category term="SaltStack笔记" scheme="http://www.gmlyo.com/categories/SaltStack%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SaltStack 帮助查看" scheme="http://www.gmlyo.com/tags/SaltStack-%E5%B8%AE%E5%8A%A9%E6%9F%A5%E7%9C%8B/"/>
    
  </entry>
  
  <entry>
    <title>GitLab持续集成-(.gitlab-ci.yml)</title>
    <link href="http://www.gmlyo.com/2018/09/08/GitLab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-(.gitlab-ci.yml)/"/>
    <id>http://www.gmlyo.com/2018/09/08/GitLab持续集成-(.gitlab-ci.yml)/</id>
    <published>2018-09-08T03:31:06.000Z</published>
    <updated>2018-09-08T03:31:32.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitLab持续集成-gitlab-ci-yml"><a href="#GitLab持续集成-gitlab-ci-yml" class="headerlink" title="GitLab持续集成-(.gitlab-ci.yml)"></a>GitLab持续集成-(.gitlab-ci.yml)</h1><a id="more"></a><blockquote><p>从7.12版本开始，GitLab CI使用YAML文件(.gitlab-ci.yml)来管理项目配置。该文件存放于项目仓库的根目录，它定义该项目如何构建。</p></blockquote><h2 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h2><blockquote><p><code>stages</code>用来定义可以被job调用的stages。stages的规范允许有灵活的多级pipelines。stages中元素的顺序决定了对应job的执行顺序：</p></blockquote><ul><li>相同stage的job是并行执行的；</li><li>下一个stage的job在前一个stage的job成功完成后才开始执行；</li><li>如果.gitlab-ci.yml中没有定义stages，那么stages默认定义为build、test和deploy；</li><li>如果一个job没有指定stage，那么这个任务会分配到test stage。</li></ul><h2 id="variables"><a href="#variables" class="headerlink" title="variables"></a>variables</h2><blockquote><p><code>variables</code>用来定义变量，全局变量作用于所有job，也可以在指定的job中定义变量（优先级高于全局变量）<br>如果在job中想禁用全局定义的变量，可通过<code>variables: {}</code>定义一个空的哈希值。</p></blockquote><h3 id="GitLab-CI-CD内置变量"><a href="#GitLab-CI-CD内置变量" class="headerlink" title="GitLab CI/CD内置变量"></a><a href="https://docs.gitlab.com/ce/ci/variables/README.html" target="_blank" rel="noopener">GitLab CI/CD内置变量</a></h3><table><thead><tr><th>variables</th><th>变量值</th></tr></thead><tbody><tr><td>CI_JOB_NAME</td><td>对应的job_name</td></tr><tr><td>GIT_STRATEGY</td><td>指定git获取代码的方式（clone,fetch,none）</td></tr></tbody></table><h2 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h2><blockquote><p><code>jobs</code>用来定义了一组作业，其中必须包含<code>script</code>语句。</p></blockquote><h3 id="job-stage（默认：test）"><a href="#job-stage（默认：test）" class="headerlink" title="job.stage（默认：test）"></a>job.stage（默认：<code>test</code>）</h3><blockquote><p>job中指定的stage必须是stages中存在的元素</p></blockquote><h3 id="job-tags"><a href="#job-tags" class="headerlink" title="job.tags"></a>job.tags</h3><blockquote><p>指定该job所允许运行的Runner，必须在注册Runner时设置Runner的tag</p></blockquote><h3 id="job-allow-failure"><a href="#job-allow-failure" class="headerlink" title="job.allow_failure"></a>job.allow_failure</h3><blockquote><p>用于指定该job允许执行失败，则如果执行失败也不会影响下一个stage的执行。</p></blockquote><h3 id="job-script"><a href="#job-script" class="headerlink" title="job.script"></a>job.script</h3><blockquote><p><code>script</code>是job中必须指定的语句，指定Runner所要执行的命令</p></blockquote><h3 id="job-before-script、job-after-script"><a href="#job-before-script、job-after-script" class="headerlink" title="job.before_script、job.after_script"></a>job.before_script、job.after_script</h3><blockquote><p>指定script执行前/后所执行的命令，也可定义在全局模式，则在所有job中的script执行前/后都会执行。</p></blockquote><h3 id="job-artifacts"><a href="#job-artifacts" class="headerlink" title="job.artifacts"></a>job.artifacts</h3><blockquote><p>用于指定job执行成功后，将会被发送到Gitlab中的文件，且默认情况下job之间会根据stage的优先级自动下载之前所有stage中的artifacts。</p></blockquote><ul><li><code>artifacts.paths</code>：必选</li><li><code>artifacts.name</code>：指定artifact的名称，同时Gitlab上下载的文件名即为artifact_name.zip</li><li><code>artifacts.when</code>：指定artifact上传到Gitlab的条件（on_success[默认],on_failure,always）</li><li><code>artifacts.expire_in</code>：指定artifact的过期时间（默认为30天），使用<code>keep</code>可永久保存</li></ul><h3 id="job-dependencies"><a href="#job-dependencies" class="headerlink" title="job.dependencies"></a>job.dependencies</h3><blockquote><p><code>dependencies</code>用于在不同的job之间指定在不同的job之间传递artifacts，<code>dependencies: []</code>可禁止该job下载artifacts</p></blockquote><h3 id="job-only、job-except"><a href="#job-only、job-except" class="headerlink" title="job.only、job.except"></a>job.only、job.except</h3><blockquote><p><code>only</code>和<code>except</code>是两个参数用分支策略来限制jobs构建</p></blockquote><ul><li><code>only</code>和<code>except</code>可同时使用。如果在一个job配置中同时存在，则同时有效；</li><li><code>only</code>和<code>except</code>可以使用正则表达式；</li><li><code>only</code>和<code>except</code>允许使用特殊的关键字：<code>branches</code>，<code>tags</code>和<code>triggers</code>；</li></ul><h3 id="job-environment"><a href="#job-environment" class="headerlink" title="job.environment"></a>job.environment</h3><blockquote><p><code>environment</code>用于定义job部署到指定的运行环境中。</p></blockquote><ul><li>environment.name：必选，指定environment名称</li><li>environment.url：可选，指定environment对应的URL，将在指定的environment页面中添加一个链接按钮指向该URL</li></ul><hr><h2 id="特殊的YAML特性"><a href="#特殊的YAML特性" class="headerlink" title="特殊的YAML特性"></a>特殊的YAML特性</h2><h3 id="Hidden-keys（jobs）"><a href="#Hidden-keys（jobs）" class="headerlink" title=" Hidden keys（jobs）"></a><span id="jump"> Hidden keys（jobs）</span></h3><blockquote><p>如果想临时disable某个job，不必注释整个job定义的行，只需在job name前加一个<code>.</code>即可</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.compile_cento<span class="variable">s:</span></span><br><span class="line">  stage: build_centos</span><br><span class="line">  <span class="keyword">tag</span><span class="variable">s:</span></span><br><span class="line">    - centos</span><br><span class="line">  <span class="keyword">scrip</span><span class="variable">t:</span></span><br><span class="line">    - <span class="keyword">echo</span> <span class="string">"##### build library"</span></span><br></pre></td></tr></table></figure><h3 id="Anchors"><a href="#Anchors" class="headerlink" title="Anchors"></a>Anchors</h3><blockquote><p>锚点可用于在文件中复制或继承配置，一般与<a href="http://blog.51cto.com/vnimos/2122951#jump" target="_blank" rel="noopener">Hidden keys（jobs）</a>提供的job模版搭配使用。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.job_template:</span> <span class="meta">&amp;job_definition</span>  <span class="comment">#job中定义一个anchor:job_definition</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">ruby:2.1</span></span><br><span class="line"><span class="attr">  services:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">postgres</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">test1:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*job_definition</span>           <span class="comment">#合并anchor:job_definition中的模版内容</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test1</span> <span class="string">project</span></span><br><span class="line"><span class="attr">test2:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*job_definition</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test2</span> <span class="string">project</span></span><br></pre></td></tr></table></figure><p>最终实现的效果如下：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.job_template:</span><br><span class="line">  image: ruby:2.1</span><br><span class="line">  services:</span><br><span class="line">    -<span class="ruby"> postgres</span></span><br><span class="line"><span class="ruby">    - redis</span></span><br><span class="line"><span class="ruby"><span class="symbol">test1:</span></span></span><br><span class="line"><span class="ruby">  <span class="symbol">image:</span> <span class="symbol">ruby:</span><span class="number">2.1</span></span></span><br><span class="line"><span class="ruby">  <span class="symbol">services:</span></span></span><br><span class="line"><span class="ruby">    - postgres</span></span><br><span class="line"><span class="ruby">    - redis</span></span><br><span class="line"><span class="ruby">  <span class="symbol">script:</span></span></span><br><span class="line"><span class="ruby">    - test1 project</span></span><br><span class="line"><span class="ruby"><span class="symbol">test2:</span></span></span><br><span class="line"><span class="ruby">  <span class="symbol">image:</span> <span class="symbol">ruby:</span><span class="number">2.1</span></span></span><br><span class="line"><span class="ruby">  <span class="symbol">services:</span></span></span><br><span class="line"><span class="ruby">    - postgres</span></span><br><span class="line"><span class="ruby">    - redis</span></span><br><span class="line"><span class="ruby">  <span class="symbol">script:</span></span></span><br><span class="line"><span class="ruby">    - test2 project</span></span><br></pre></td></tr></table></figure><h2 id="Skipping-jobs"><a href="#Skipping-jobs" class="headerlink" title="Skipping jobs"></a>Skipping jobs</h2><blockquote><p>如果你的commit信息中包含<code>[ci skip]</code>或者<code>[skip ci]</code>，不论大小写，那么这个commit将会创建但是jobs也会跳过。</p></blockquote><hr><h3 id="example"><a href="#example" class="headerlink" title="example:"></a>example:</h3><blockquote><p>以下示例为编译nginx的上传模块nginx-upload并测试验证上传功能，验证成功后将自动将编译好的文件打包通过curl上传到指定的文件服务器。其中只有在非master的branches中提交代码才会执行build和test的stage，只有在打tag后才会执行deploy，且需要手动在gitlab上执行。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line"><span class="attr">  DIR:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  TOPNODE:</span> <span class="string">package</span></span><br><span class="line"></span><br><span class="line"><span class="string">.function:</span> <span class="meta">&amp;function</span> <span class="string">|</span></span><br><span class="line"><span class="string">  function build() &#123;</span></span><br><span class="line"><span class="string">    echo "execute function:build"</span></span><br><span class="line"><span class="string">    chmod +x auto/configure</span></span><br><span class="line"><span class="string">    sh build.sh</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function changelog() &#123;</span></span><br><span class="line"><span class="string">    echo "execute function:changelog"</span></span><br><span class="line"><span class="string">    git log --graph -n 3  --name-status --pretty="%h -[%cd] - &lt;%an&gt; %s" &gt; CHANGELOG</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function test() &#123;</span></span><br><span class="line"><span class="string">    echo "execute function:test"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    sudo \cp modules/nginx-upload-module-master/nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="string">    sudo sed -i '/error_log/,/working_directory/d' /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="string">    if [ -f /run/nginx.pid ];then sudo nginx -s reload;else sudo nginx;fi</span></span><br><span class="line"><span class="string">    sudo rm -rf /tmp/&#123;0,1,2,3,4,5,6,7,8,9&#125; &amp;&amp; sudo mkdir /tmp/&#123;0,1,2,3,4,5,6,7,8,9&#125; &amp;&amp; sudo chown -R nginx. /tmp/&#123;0,1,2,3,4,5,6,7,8,9&#125;</span></span><br><span class="line"><span class="string">    sudo echo nginx_upload &gt; test &amp;&amp; curl -F "filename=@test" http://localhost/upload</span></span><br><span class="line"><span class="string">    sudo find /tmp/&#123;0,1,2,3,4,5,6,7,8,9&#125; -type f -exec grep nginx_upload &#123;&#125; \; </span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function artifacts() &#123;</span></span><br><span class="line"><span class="string">    echo "execute function:artifacts"</span></span><br><span class="line"><span class="string">    URL="https://xxx.com/upload?dir=$&#123;DIR&#125;/$&#123;VERSION&#125;&amp;override=1&amp;topNode=$&#123;TOPNODE&#125;"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    echo "push the artifacts:nginx_$&#123;VERSION&#125;.tar.gz to $URL"</span></span><br><span class="line"><span class="string">    tar zcf /tmp/nginx_$&#123;VERSION&#125;.tar.gz --exclude=".git*" --exclude=build .</span></span><br><span class="line"><span class="string">    curl -F "filename=@/tmp/$&#123;DIR&#125;_$&#123;VERSION&#125;.tar.gz" "$URL"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    echo "push the CHANGELOG to $URL"</span></span><br><span class="line"><span class="string">    curl -F "filename=@CHANGELOG" "$URL"</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function deploy() &#123;</span></span><br><span class="line"><span class="string">    echo "execute function:deploy"</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function clean() &#123;</span></span><br><span class="line"><span class="string">    echo "execute function:clean"</span></span><br><span class="line"><span class="string">    if [ -f /run/nginx.pid ];then sudo kill `cat /run/nginx.pid`;fi</span></span><br><span class="line"><span class="string">    sudo rm -rf /tmp/&#123;0,1,2,3,4,5,6,7,8,9&#125; /tmp/nginx_$&#123;version&#125;.tar.gz</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#########only the section above need to be modify #################</span></span><br><span class="line"><span class="string"></span><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">VERSION=`head</span> <span class="bullet">-n1</span> <span class="string">version`</span></span><br><span class="line"><span class="bullet">  -</span> <span class="meta">*function</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">test</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">branches</span></span><br><span class="line"><span class="attr">  except:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">changelog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  variables:</span></span><br><span class="line"><span class="attr">    GIT_STRATEGY:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">branches</span></span><br><span class="line"><span class="attr">  except:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">artifacts</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">clean</span></span><br><span class="line"></span><br><span class="line"><span class="string">.job_template:</span> <span class="meta">&amp;deploy_template</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  variables:</span></span><br><span class="line"><span class="attr">    GIT_STRATEGY:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">deploy</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">delete</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">manual</span></span><br><span class="line"></span><br><span class="line"><span class="attr">staging:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*deploy_template</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">staging</span></span><br><span class="line"></span><br><span class="line"><span class="attr">production:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*deploy_template</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">production</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://blog.51cto.com/vnimos/2122951" target="_blank" rel="noopener">http://blog.51cto.com/vnimos/2122951</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GitLab持续集成-gitlab-ci-yml&quot;&gt;&lt;a href=&quot;#GitLab持续集成-gitlab-ci-yml&quot; class=&quot;headerlink&quot; title=&quot;GitLab持续集成-(.gitlab-ci.yml)&quot;&gt;&lt;/a&gt;GitLab持续集成-(.gitlab-ci.yml)&lt;/h1&gt;
    
    </summary>
    
      <category term="Git笔记" scheme="http://www.gmlyo.com/categories/Git%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="GitLab持续集成-(.gitlab-ci.yml)" scheme="http://www.gmlyo.com/tags/GitLab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-gitlab-ci-yml/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-CI 与 GitLab-Runner</title>
    <link href="http://www.gmlyo.com/2018/09/08/GitLab-CI-%E4%B8%8E-GitLab-Runner/"/>
    <id>http://www.gmlyo.com/2018/09/08/GitLab-CI-与-GitLab-Runner/</id>
    <published>2018-09-08T03:30:05.000Z</published>
    <updated>2018-09-08T03:31:43.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitLab-CI-与-GitLab-Runner"><a href="#GitLab-CI-与-GitLab-Runner" class="headerlink" title="GitLab-CI 与 GitLab-Runner"></a>GitLab-CI 与 GitLab-Runner</h1><a id="more"></a><h2 id="持续集成（Continuous-Integration）"><a href="#持续集成（Continuous-Integration）" class="headerlink" title="持续集成（Continuous Integration）"></a>持续集成（Continuous Integration）</h2><p>要了解 GitLab-CI 与 GitLab Runner，我们得先了解持续集成是什么。</p><blockquote><p>持续集成是一种<strong>软件开发实践</strong>，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。</p></blockquote><p>看完这段话，估计还是有点懵。怎么理解呢？我是这样理解的：</p><p><strong>软件集成</strong> 是软件开发过程中的一个环节，这个环节的工作一般会包括以下流程：<em>合并代码 —-&gt; 安装依赖 —-&gt; 编译 —-&gt; 测试 —-&gt; 发布</em>。软件集成的工作一般会比较细碎繁琐，为了不影响开发效率，以前软件集成这个环节一般不会经常进行或者只会等到项目后期再进行。但是有些问题，如果等到后期才发现，解决问题的代价很大，有可能导致项目延期或者失败。因此，为了尽早发现软件集成错误，鼓励团队成员应该经常集成他们的工作，通常每个成员每天应该至少集成一次。这就是所说的 <strong>持续集成</strong>。所以说，持续集成是一种软件开发实践。</p><p>软件集成的工作细碎繁琐，以前是由人工完成的。但是现在鼓励持续集成，那岂不是要累死人，还影响开发效率。所以，应该考虑将软件集成这个工作自动化，这就出现了所谓的 <strong>持续集成系统</strong>。</p><p>持续集成详情见<a href="https://baike.baidu.com/item/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90" target="_blank" rel="noopener">百度百科-持续集成</a></p><h2 id="GitLab-CI"><a href="#GitLab-CI" class="headerlink" title="GitLab-CI"></a>GitLab-CI</h2><p>GitLab-CI 就是一套配合 GitLab 使用的持续集成系统（当然，还有其它的持续集成系统，同样可以配合 GitLab 使用，比如 Jenkins）。而且 GitLab8.0 以后的版本是默认集成了 GitLab-CI 并且默认启用的。</p><h2 id="GitLab-Runner"><a href="#GitLab-Runner" class="headerlink" title="GitLab-Runner"></a>GitLab-Runner</h2><p>那 GitLab-Runner 又是什么？和 GitLab-CI 有什么关系？</p><p>GitLab-Runner 是配合 GitLab-CI 进行使用的。一般地，GitLab 里面的每一个工程都会定义一个属于这个工程的软件集成脚本，用来自动化地完成一些软件集成工作。当这个工程的仓库代码发生变动时，比如有人 push 了代码，GitLab 就会将这个变动通知 GitLab-CI。这时 GitLab-CI 会找出与这个工程相关联的 Runner，并通知这些 Runner 把代码更新到本地并执行预定义好的执行脚本。</p><p>所以，GitLab-Runner 就是一个用来执行软件集成脚本的东西。可以想象一下：Runner 就像一个个的工人，而 GitLab-CI就是这些工人的一个管理中心，所有工人都要在 GitLab-CI 里面登记注册，并且表明自己是为哪个工程服务的。当相应的工程发生变化时，GitLab-CI 就会通知相应的工人执行软件集成脚本。如下图所示：</p><p><img src="https:////upload-images.jianshu.io/upload_images/525728-4339103186d2b1c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/550/format/webp" alt="img"></p><center><u>GitLab-CI 与 GitLab-Runner 关系示意图</u></center><p>Runner 可以分布在不同的主机上，同一个主机上也可以有多个Runner。</p><h3 id="Runner类型"><a href="#Runner类型" class="headerlink" title="Runner类型"></a>Runner类型</h3><p>GitLab-Runner 可以分类两种类型：<strong>Shared Runner（共享型）</strong> 和 <strong>Specific Runner（指定型）</strong>。<br><strong>Shared Runner：</strong> 这种 Runner（工人）是所有工程都能够用的。只有系统管理员能够创建Shared Runner。<br><strong>Specific Runner：</strong> 这种 Runner（工人）只能为指定的工程服务。拥有该工程访问权限的人都能够为该工程创建 Shared Runner。</p><h2 id="GitLab-Runner-的安装与使用"><a href="#GitLab-Runner-的安装与使用" class="headerlink" title="GitLab-Runner 的安装与使用"></a>GitLab-Runner 的安装与使用</h2><p>操作系统：Centos 7.0 64位</p><h3 id="安装-gitlab-ci-multi-runner"><a href="#安装-gitlab-ci-multi-runner" class="headerlink" title="安装 gitlab-ci-multi-runner"></a>安装 gitlab-ci-multi-runner</h3><ul><li><p>添加 yum 源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https:<span class="regexp">//</span>packages.gitlab.com<span class="regexp">/install/</span>repositories<span class="regexp">/runner/gi</span>tlab-ci-multi-runner<span class="regexp">/script.rpm.sh | sudo bash</span></span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure></li></ul><p>这里是官网的安装教程，其它操作系统的请参考<br> <a href="https://link.jianshu.com?t=https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" target="_blank" rel="noopener">https://gitlab.com/gitlab-org/gitlab-ci-multi-runner</a></p><h3 id="使用-gitlab-ci-multi-runner-注册-Runner"><a href="#使用-gitlab-ci-multi-runner-注册-Runner" class="headerlink" title="使用 gitlab-ci-multi-runner 注册 Runner"></a>使用 gitlab-ci-multi-runner 注册 Runner</h3><p>安装好 gitlab-ci-multi-runner 这个软件之后，我们就可以用它向 GitLab-CI 注册 Runner 了。</p><p>向 GitLab-CI 注册一个 Runner 需要两样东西：<strong>GitLab-CI的url</strong> 和 <strong>注册token</strong>。<br>其中，token 是为了确定你这个 Runner 是所有工程都能够使用的 Shared Runner 还是具体某一个工程才能使用的Specific Runner。</p><p>如果要注册 Shared Runner，你需要到管理界面的 Runners 页面里面去找注册 token。如下图所示：</p><p><img src="https:////upload-images.jianshu.io/upload_images/525728-e4141cc2a2d4f986.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><center><u>Shared Runner</u></center><p>如果要注册 Specific Runner，你需要到项目的设置的 Runner 页面里面去找注册 token。如下图所示：</p><p><img src="https:////upload-images.jianshu.io/upload_images/525728-bc5f1e385c2beb45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><center><u>Specific Runner</u></center><p>找到 token 之后，运行下面这条命令注册 Runner（当然，除了 url 和 token 之外，还需要其他的信息，比如执行器 <code>executor</code>、构建目录 <code>builds_dir</code> 等）。<br> <code>gitlab-ci-multi-runner register</code><br> 注册完成之后，GitLab-CI 就会多出一条 Runner 记录，如下图所示：</p><p><img src="https:////upload-images.jianshu.io/upload_images/525728-d4b450bb1ea0e31d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><center><u>GitLab-CI Runner</u></center><p>GitLab-CI 会为这个 Runner 生成一个唯一的 token，以后 Runner 就通过这个 token 与 GitLab-CI 进行通信。</p><p>那么，问题来了。注册好了的 Runner 的信息存放在哪儿了呢？<br>原来，Runner 的信息是存放在一个配置文件里面的，配置文件的格式一般是 <code>.toml</code>。这个配置文件的存放位置有以下几种情况：</p><ul><li>在类Unix操作系统下（0.5.0之后版本）</li></ul><ol><li>如果是以 root 用户身份运行 <code>gitlab-ci-multi-runner register</code>，那么配置文件默认是 <code>/etc/gitlab-runner/config.toml</code> </li><li>如果是以非 root 用户身份运行 <code>gitlab-ci-multi-runner register</code>，那么配置文件默认是 <code>~/.gitlab-runner/config.toml</code> </li></ol><ul><li>在其他操作系统下以及 0.5.0 之前版本<br>配置文件默认在当前工作目录下<code>./config.toml</code> </li></ul><p>一般情况下，使用默认的配置文件存放 Runner 的配置信息就可以了。当然，如果你有更细化的分类需求，你也可以在注册的时候通过 <code>-c</code> 或 <code>--config</code> 选项指定配置文件的位置。具体查看register 命令的使用方法：<code>gitlab-ci-multi-runner register --help</code>。</p><p><strong>问题：</strong> 如果不运行 <code>gitlab-ci-multi-runner register</code> 命令，直接在配置文件里面添加 Runner 的配置信息可以吗？<br><strong>回答：</strong> 当然不可以。因为 <code>gitlab-ci-multi-runner register</code> 的作用除了把 Runner 的信息保存到配置文件以外，还有一个很重要的作用，那就是向 GitLab-CI 发出请求，在 GitLab-CI 中登记这个 Runner 的信息并且获取后续通信所需要的 token。</p><h3 id="让注册好的-Runner-运行起来"><a href="#让注册好的-Runner-运行起来" class="headerlink" title="让注册好的 Runner 运行起来"></a>让注册好的 Runner 运行起来</h3><p>Runner 注册完成之后还不行，还必须让它运行起来，否则它无法接收到 GitLab-CI 的通知并且执行软件集成脚本。怎么让 Runner 运行起来呢？<code>gitlab-ci-multi-runner</code> 提供了这样一条命令<code>gitlab-ci-multi-runner run-single</code>，详情如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# gitlab-ci-multi-runner run-single --help</span><br><span class="line">NAME:</span><br><span class="line">   run-single - start single runner</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   command run-single [command options] [arguments<span class="built_in">..</span>.]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   --name, --description   Runner name [<span class="variable">$RUNNER_NAME</span>]</span><br><span class="line">   --limit     Maximum number of builds processed by this runner [<span class="variable">$RUNNER_LIMIT</span>]</span><br><span class="line">   --ouput-limit    Maximum build trace size [<span class="variable">$RUNNER_OUTPUT_LIMIT</span>]</span><br><span class="line">   -u, --url     Runner URL [<span class="variable">$CI_SERVER_URL</span>]</span><br><span class="line">   -t, --token     Runner token [<span class="variable">$CI_SERVER_TOKEN</span>]</span><br><span class="line">   --tls-ca-file    File containing the certificates <span class="keyword">to</span> verify the<span class="built_in"> peer </span>when using HTTPS [<span class="variable">$CI_SERVER_TLS_CA_FILE</span>]</span><br><span class="line">   --executor     Select executor, eg. shell, docker, etc. [<span class="variable">$RUNNER_EXECUTOR</span>]</span><br><span class="line">   --builds-dir    Directory where builds are stored [<span class="variable">$RUNNER_BUILDS_DIR</span>]</span><br><span class="line">   --cache-dir     Directory where build cache is stored [<span class="variable">$RUNNER_CACHE_DIR</span>]</span><br><span class="line">   --env     Custom environment variables injected <span class="keyword">to</span> build environment [<span class="variable">$RUNNER_ENV</span>]</span><br><span class="line">   --shell     Select bash, cmd <span class="keyword">or</span> powershell [<span class="variable">$RUNNER_SHELL</span>]</span><br><span class="line">   --ssh-user    <span class="built_in"> User </span>name [<span class="variable">$SSH_USER</span>]</span><br><span class="line">   --ssh-password   <span class="built_in"> User </span>password [<span class="variable">$SSH_PASSWORD</span>]</span><br><span class="line">   --ssh-host     Remote host [<span class="variable">$SSH_HOST</span>]</span><br><span class="line">   --ssh-port     Remote host<span class="built_in"> port </span>[<span class="variable">$SSH_PORT</span>]</span><br><span class="line">   --ssh-identity-file   <span class="built_in"> Identity </span>file <span class="keyword">to</span> be used [<span class="variable">$SSH_IDENTITY_FILE</span>]</span><br><span class="line">   --docker-host    Docker daemon<span class="built_in"> address </span>[<span class="variable">$DOCKER_HOST</span>]</span><br><span class="line">   --docker-cert-path    Certificate path [<span class="variable">$DOCKER_CERT_PATH</span>]</span><br><span class="line">   --docker-tlsverify    Use TLS <span class="keyword">and</span> verify the remote [<span class="variable">$DOCKER_TLS_VERIFY</span>]</span><br><span class="line">   --docker-hostname    Custom container hostname [<span class="variable">$DOCKER_HOSTNAME</span>]</span><br><span class="line">   --docker-image    Docker image <span class="keyword">to</span> be used [<span class="variable">$DOCKER_IMAGE</span>]</span><br><span class="line">   --docker-privileged   Give extended privileges <span class="keyword">to</span> container [<span class="variable">$DOCKER_PRIVILEGED</span>]</span><br><span class="line">   --docker-disable-cache   <span class="builtin-name">Disable</span> all container caching [<span class="variable">$DOCKER_DISABLE_CACHE</span>]</span><br><span class="line">   --docker-volumes    Bind mount a volumes [<span class="variable">$DOCKER_VOLUMES</span>]</span><br><span class="line">   --docker-cache-dir    Directory where <span class="keyword">to</span> store caches [<span class="variable">$DOCKER_CACHE_DIR</span>]</span><br><span class="line">   --docker-extra-hosts   <span class="builtin-name">Add</span> a custom host-to-IP mapping [<span class="variable">$DOCKER_EXTRA_HOSTS</span>]</span><br><span class="line">   --docker-links    <span class="builtin-name">Add</span> link <span class="keyword">to</span> another container [<span class="variable">$DOCKER_LINKS</span>]</span><br><span class="line">   --docker-services    <span class="builtin-name">Add</span><span class="built_in"> service </span>that is started with container [<span class="variable">$DOCKER_SERVICES</span>]</span><br><span class="line">   --docker-wait-for-services-timeout  How long <span class="keyword">to</span> wait <span class="keyword">for</span><span class="built_in"> service </span>startup [<span class="variable">$DOCKER_WAIT_FOR_SERVICES_TIMEOUT</span>]</span><br><span class="line">   --docker-allowed-images   Whitelist allowed images [<span class="variable">$DOCKER_ALLOWED_IMAGES</span>]</span><br><span class="line">   --docker-allowed-services   Whitelist allowed services [<span class="variable">$DOCKER_ALLOWED_SERVICES</span>]</span><br><span class="line">   --docker-image-ttl     [<span class="variable">$DOCKER_IMAGE_TTL</span>]</span><br><span class="line">   --parallels-base-name   VM name <span class="keyword">to</span> be used [<span class="variable">$PARALLELS_BASE_NAME</span>]</span><br><span class="line">   --parallels-template-name   VM template <span class="keyword">to</span> be created [<span class="variable">$PARALLELS_TEMPLATE_NAME</span>]</span><br><span class="line">   --parallels-disable-snapshots  <span class="builtin-name">Disable</span> snapshoting <span class="keyword">to</span> speedup VM creation [<span class="variable">$PARALLELS_DISABLE_SNAPSHOTS</span>]</span><br><span class="line">   --virtualbox-base-name   VM name <span class="keyword">to</span> be used [<span class="variable">$VIRTUALBOX_BASE_NAME</span>]</span><br><span class="line">   --virtualbox-disable-snapshots  <span class="builtin-name">Disable</span> snapshoting <span class="keyword">to</span> speedup VM creation [<span class="variable">$VIRTUALBOX_DISABLE_SNAPSHOTS</span>]</span><br></pre></td></tr></table></figure><p>要让一个 Runner 运行起来，<code>--url</code>、<code>--token</code> 和 <code>--executor</code> 选项是必要的。其他选项可根据具体情况和需求进行设置。我们可以看出来，这个命令里面的选项跟配置文件中 Runner 的配置项基本上是一样的。那这个命令的运行和配置文件有没有什么关系呢？从我的试验和思考来看，应该是没有什么关系的。因为：</p><ol><li>这个命令里面并没有指定配置文件位置的选项，如果读取配置文件难道去读取默认位置吗？但是配置文件的位置是可以指定的，不一定在默认位置，这不符合逻辑，所以它应该不会去读配置文件。</li><li>我删掉配置文件，这个命令依然能够运行</li></ol><p>所以，这个命令应该只是一个能让 Runner 运行起来的基础命令。但这个命令运行起来的前提是，GitLab-CI 中必须事先注册有这个 Runner。</p><p>那配置文件有毛用？配置文件的作用在后面，但是从这里我们知道一点：<strong>配置文件里面有 Runner运行时所需要的信息</strong>。</p><p>可能你还有一个问题：我用 root 的用户注册 Runner 时，注册完 Runner 就可以用了，并没有手动地去运行 Runner 啊？这个后面讲。</p><h3 id="批量地运行-Runner"><a href="#批量地运行-Runner" class="headerlink" title="批量地运行 Runner"></a>批量地运行 Runner</h3><p>正常情况下，如果我有多个 Runner，我并不想手动一个个地运行，要是能一次运行多个 Runner 多爽啊！嗯哼，<code>gitlab-ci-multi-runner</code> 就提供了这样一个命令 <code>gitlab-ci-multi-runner run</code>，详情如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost gitlab-runner]# gitlab-ci-multi-runner <span class="builtin-name">run</span> --help</span><br><span class="line">NAME:</span><br><span class="line">   <span class="builtin-name">run</span> - <span class="builtin-name">run</span> multi runner service</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   command <span class="builtin-name">run</span> [command options] [arguments<span class="built_in">..</span>.]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   -c, --config <span class="string">"/etc/gitlab-runner/config.toml"</span><span class="built_in"> Config </span>file [<span class="variable">$CONFIG_FILE</span>]</span><br><span class="line">   -n, --service <span class="string">"gitlab-runner"</span>   Use different names <span class="keyword">for</span> different services</span><br><span class="line">   -d, --working-directory     Specify custom working directory</span><br><span class="line">   -u, --user       Use specific<span class="built_in"> user </span><span class="keyword">to</span> execute shell scripts</span><br><span class="line">   --syslog      Log <span class="keyword">to</span> syslog</span><br></pre></td></tr></table></figure><p>这个命令总共有 5 个选项，让我们从选项来理解一下这个命令：</p><ul><li><code>-c, --config</code> 选项<br>这个选项是用来指定配置文件路径的。如果你想同时运行多个 Runner，你必须得知道你要运行哪些 Runner 以及这些 Runner 运行时所需要的信息。而前面我们说过，配置文件里面就存放着 Runner 运行时所需要的信息。而且一个配置文件是可以存放多个 Runner 的信息的。如果不指定这个选项，就会使用默认的配置文件。</li><li><code>-n, --service</code> 选项<br>这个选项是用来指定服务的别名的。为什么要有这个选项呢？指定别名有什么意义呢？我们从上一个选项可以看出来，一次只能运行一批 Runner，因为一次只能指定一个配置文件。那如果我有多个配置文件，我要运行多批 Runner，那是不是给每一次批量运行服务取不同的别名来区分更好一点呢。</li><li><code>-d, --working-directory</code> 选项<br>这个选项是用来指定此次批量运行服务的工作目录的。如果自己没有指定 <code>builds_dir</code> 的话，此次运行起来的 Runner 会把 <code>builds_dir</code> 放到这个目录里面。</li><li><code>-u, --user</code> 选项<br>这个选项很重要，它指定了该以什么用户权限来运行 Runner。为了安全，我认为不应该给运行 Runner 的用户过高的权限，更不应该以 root 用户来运行 Runner。</li><li><code>--syslog</code> 选项<br>如果指定了这个选项，则把日志记录到系统日志。</li></ul><h3 id="使用服务"><a href="#使用服务" class="headerlink" title="使用服务"></a>使用服务</h3><p>能够批量地运行 Runner 已经很好了，但是还不够好，为什么呢？</p><p>首先，<code>gitlab-ci-multi-runner run</code> 默认是前台运行的，使用体验不好；<br>其次，当 <code>gitlab-ci-multi-runner run</code> 在后台运行的时候，要查看其运行状态不方便，而且也没有提供停止 <code>gitlab-ci-multi-runner run</code> 的命令。<br> 所以，要是能将批量运行Runner这个功能安装为一项服务，就更爽了！</p><p><code>gitlab-ci-multi-runner</code> 确实就提供了这样的功能。<br><code>install</code>、<code>uninstall</code>、<code>start</code>、<code>stop</code>、<code>restart</code>、<code>status</code> 这 6 个命令就是和服务相关的。<br>我一开始对 <code>gitlab-ci-multi-runner</code> 的服务概念感觉比较懵，让我们来看看安装服务 <code>install</code> 这个命令到底干了一件什么事情。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# gitlab-ci-multi-runner install --help</span><br><span class="line">NAME:</span><br><span class="line">   install - install service</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   command install [command options] [arguments<span class="built_in">..</span>.]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   --service, -n <span class="string">"gitlab-runner"</span>   Specify<span class="built_in"> service </span>name <span class="keyword">to</span> use</span><br><span class="line">   --working-directory, -d <span class="string">"/root"</span>   Specify custom root directory where all data are stored</span><br><span class="line">   --config, -c <span class="string">"/etc/gitlab-runner/config.toml"</span> Specify custom<span class="built_in"> config </span>file</span><br><span class="line">   --user, -u       Specify user-name <span class="keyword">to</span> secure the runner</span><br></pre></td></tr></table></figure><p>从选项可以看出，一项服务的信息有 4 个：服务名、工作目录、配置文件和用户。这个命令的选项和 <code>gitlab-ci-multi-runner run</code> 的选项基本一样。可见，批量运行 Runner 和服务之间的关系暧昧。至于是什么关系，往下看 <code>gitlab-ci-multi-runner start</code> 这个命令。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# gitlab-ci-multi-runner start --help</span><br><span class="line">NAME:</span><br><span class="line">   start - start service</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   command start [command options] [arguments<span class="built_in">..</span>.]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">   --service, -n <span class="string">"gitlab-runner"</span> Specify<span class="built_in"> service </span>name <span class="keyword">to</span> use</span><br></pre></td></tr></table></figure><p>启动一项服务，只要指定服务的名称就行了（默认服务名称是 gitlab-runner）。启动服务后，运行命令 <code>ps -aux | grep gitlab-runner</code> 查看后台程序，发现启动服务其实就是在后台执行了一个批量运行Runner的任务，所以服务安装命令的选项才会和批量运行 Runner 命令的选项基本一样。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root     18219  0.0  0.1 331872  5332 ?        Ssl  00<span class="function">:06</span>   0<span class="function">:00</span> <span class="string">/usr/bin/gitlab-ci-multi-runner</span> run <span class="params">--working-directory</span> <span class="string">/home/gitlab-runner</span> <span class="params">--config</span> <span class="string">/etc/gitlab-runner/config.toml</span> <span class="params">--service</span> gitlab-runner <span class="params">--user</span> gitlab-runner <span class="params">--syslog</span></span><br></pre></td></tr></table></figure><p>还有 <code>stop</code> 命令用于停止服务，<code>restart</code> 命令用于重启服务，<code>status</code> 用于查看服务状态。这三个命令的使用方法和 <code>start</code> 类似，就不一一介绍了。</p><h2 id="其他一些思考"><a href="#其他一些思考" class="headerlink" title="其他一些思考"></a>其他一些思考</h2><ol><li>什么情况下需要注册 Shared Runner？<br>比如，GitLab 上面所有的工程都有可能需要在公司的服务器上进行编译、测试、部署等工作，这个时候注册一个Shared Runner 供所有工程使用就很合适。</li><li>什么情况下需要注册 Specific Runner？<br>比如，我可能需要在我个人的电脑或者服务器上自动构建我参与的某个工程，这个时候注册一个 Specific Runner 就很合适。</li><li>什么情况下需要在同一台机器上注册多个 Runner？<br>比如，我是 GitLab 的普通用户，没有管理员权限，我同时参与多个项目，那我就需要为我的所有项目都注册一个 Specific Runner，这个时候就需要在同一台机器上注册多个 Runner。</li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.jianshu.com/p/2b43151fb92e" target="_blank" rel="noopener">https://www.jianshu.com/p/2b43151fb92e</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GitLab-CI-与-GitLab-Runner&quot;&gt;&lt;a href=&quot;#GitLab-CI-与-GitLab-Runner&quot; class=&quot;headerlink&quot; title=&quot;GitLab-CI 与 GitLab-Runner&quot;&gt;&lt;/a&gt;GitLab-CI 与 GitLab-Runner&lt;/h1&gt;
    
    </summary>
    
      <category term="Git笔记" scheme="http://www.gmlyo.com/categories/Git%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="GitLab-CI 与 GitLab-Runner" scheme="http://www.gmlyo.com/tags/GitLab-CI-%E4%B8%8E-GitLab-Runner/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack 数据系统 Pillar</title>
    <link href="http://www.gmlyo.com/2018/09/06/SaltStack-%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F-Pillar/"/>
    <id>http://www.gmlyo.com/2018/09/06/SaltStack-数据系统-Pillar/</id>
    <published>2018-09-05T17:58:05.000Z</published>
    <updated>2018-09-08T18:24:28.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SaltStack-数据系统-Pillar"><a href="#SaltStack-数据系统-Pillar" class="headerlink" title="SaltStack 数据系统 Pillar"></a>SaltStack 数据系统 Pillar</h1><a id="more"></a><table><thead><tr><th>名称</th><th>存储位置</th><th>数据类型</th><th>数据采集更新方式</th><th>应用</th></tr></thead><tbody><tr><td>Grains</td><td>Minion端</td><td>静态数据</td><td>Minion启动时收集，也可以使用 saltutil.sync_grains 进行刷新</td><td>存储 Minion 基本数据，比如用于匹配 Minion，自身数据可以用来作资产管理等。</td></tr><tr><td>Pillar</td><td>Master端</td><td>动态数据</td><td>在Master端定义，指定给对应的Minion。可以使用 saltutil.refresh_pillar 刷新</td><td>存储 Master 指定的数据，只有指定的 Minion 可以看到。用于敏感数据保存。</td></tr></tbody></table><p>Pillar 是在 Master端 设置的<br>Pillar 给 Minion端 指定它想要的数据<br>安全性比较高</p><blockquote><p>查看 <code>Pillar</code> 信息<br>默认是 <code>False</code> 状态<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="meta"># salt <span class="string">'*'</span> pillar.items</span></span><br><span class="line"><span class="symbol">dbfw01:</span></span><br><span class="line">    ----------</span><br><span class="line"><span class="symbol">minion01:</span></span><br><span class="line">    ----------</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>开启查看 <code>Pillar</code> 状态，一般不用打开</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# cd /etc/salt/</span><br><span class="line">[root@master01 ~]# vim /etc/salt/master</span><br><span class="line">...省略...</span><br><span class="line">#pillar_opts: <span class="literal">False</span></span><br><span class="line">改成</span><br><span class="line">pillar_opts: <span class="literal">True</span></span><br><span class="line">...省略...</span><br><span class="line">:wq保存退出</span><br><span class="line"></span><br><span class="line"># 重启 salt-master 服务</span><br><span class="line">systemctl restart salt-master</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master01</span> <span class="string">salt]#</span> <span class="string">salt</span> <span class="string">'minion01'</span> <span class="string">pillar.items</span></span><br><span class="line"><span class="attr">minion01:</span></span><br><span class="line"><span class="bullet">    -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">    master:</span></span><br><span class="line"><span class="bullet">        -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        __role:</span></span><br><span class="line">            <span class="string">master</span></span><br><span class="line"><span class="attr">        auth_mode:</span></span><br><span class="line">            <span class="number">1</span></span><br><span class="line"><span class="attr">        auto_accept:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        cache_sreqs:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        cachedir:</span></span><br><span class="line">            <span class="string">/var/cache/salt/master</span></span><br><span class="line"><span class="attr">        cli_summary:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        client_acl:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        client_acl_blacklist:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        cluster_masters:</span></span><br><span class="line"><span class="attr">        cluster_mode:</span></span><br><span class="line">            <span class="string">paranoid</span></span><br><span class="line"><span class="attr">        con_cache:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        conf_file:</span></span><br><span class="line">            <span class="string">/etc/salt/master</span></span><br><span class="line"><span class="attr">        config_dir:</span></span><br><span class="line">            <span class="string">/etc/salt</span></span><br><span class="line"><span class="attr">        cython_enable:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        daemon:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        default_include:</span></span><br><span class="line">            <span class="string">master.d/*.conf</span></span><br><span class="line"><span class="attr">        enable_gpu_grains:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        enforce_mine_cache:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        enumerate_proxy_minions:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line">            <span class="string">None</span></span><br><span class="line"><span class="attr">        event_return:</span></span><br><span class="line"><span class="attr">        event_return_blacklist:</span></span><br><span class="line"><span class="attr">        event_return_queue:</span></span><br><span class="line">            <span class="number">0</span></span><br><span class="line"><span class="attr">        event_return_whitelist:</span></span><br><span class="line"><span class="attr">        ext_job_cache:</span></span><br><span class="line"><span class="attr">        ext_pillar:</span></span><br><span class="line"><span class="attr">        extension_modules:</span></span><br><span class="line">            <span class="string">/var/cache/salt/extmods</span></span><br><span class="line"><span class="attr">        external_auth:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        failhard:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        file_buffer_size:</span></span><br><span class="line">            <span class="number">1048576</span></span><br><span class="line"><span class="attr">        file_client:</span></span><br><span class="line">            <span class="string">local</span></span><br><span class="line"><span class="attr">        file_ignore_glob:</span></span><br><span class="line">            <span class="string">None</span></span><br><span class="line"><span class="attr">        file_ignore_regex:</span></span><br><span class="line">            <span class="string">None</span></span><br><span class="line"><span class="attr">        file_recv:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        file_recv_max_size:</span></span><br><span class="line">            <span class="number">100</span></span><br><span class="line"><span class="attr">        file_roots:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">            base:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">/srv/salt</span></span><br><span class="line"><span class="attr">        fileserver_backend:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">roots</span></span><br><span class="line"><span class="attr">        fileserver_followsymlinks:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        fileserver_ignoresymlinks:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        fileserver_limit_traversal:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        gather_job_timeout:</span></span><br><span class="line">            <span class="number">10</span></span><br><span class="line"><span class="attr">        gitfs_base:</span></span><br><span class="line">            <span class="string">master</span></span><br><span class="line"><span class="attr">        gitfs_env_blacklist:</span></span><br><span class="line"><span class="attr">        gitfs_env_whitelist:</span></span><br><span class="line"><span class="attr">        gitfs_insecure_auth:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        gitfs_mountpoint:</span></span><br><span class="line"><span class="attr">        gitfs_passphrase:</span></span><br><span class="line"><span class="attr">        gitfs_password:</span></span><br><span class="line"><span class="attr">        gitfs_privkey:</span></span><br><span class="line"><span class="attr">        gitfs_pubkey:</span></span><br><span class="line"><span class="attr">        gitfs_remotes:</span></span><br><span class="line"><span class="attr">        gitfs_root:</span></span><br><span class="line"><span class="attr">        gitfs_user:</span></span><br><span class="line"><span class="attr">        hash_type:</span></span><br><span class="line">            <span class="string">md5</span></span><br><span class="line"><span class="attr">        hgfs_base:</span></span><br><span class="line">            <span class="string">default</span></span><br><span class="line"><span class="attr">        hgfs_branch_method:</span></span><br><span class="line">            <span class="string">branches</span></span><br><span class="line"><span class="attr">        hgfs_env_blacklist:</span></span><br><span class="line"><span class="attr">        hgfs_env_whitelist:</span></span><br><span class="line"><span class="attr">        hgfs_mountpoint:</span></span><br><span class="line"><span class="attr">        hgfs_remotes:</span></span><br><span class="line"><span class="attr">        hgfs_root:</span></span><br><span class="line"><span class="attr">        id:</span></span><br><span class="line">            <span class="string">minion01</span></span><br><span class="line"><span class="attr">        interface:</span></span><br><span class="line">            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">        ioflo_console_logdir:</span></span><br><span class="line"><span class="attr">        ioflo_period:</span></span><br><span class="line">            <span class="number">0.01</span></span><br><span class="line"><span class="attr">        ioflo_realtime:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        ioflo_verbose:</span></span><br><span class="line">            <span class="number">0</span></span><br><span class="line"><span class="attr">        ipv6:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        jinja_lstrip_blocks:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        jinja_trim_blocks:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        job_cache:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        keep_jobs:</span></span><br><span class="line">            <span class="number">24</span></span><br><span class="line"><span class="attr">        key_logfile:</span></span><br><span class="line">            <span class="string">/var/log/salt/key</span></span><br><span class="line"><span class="attr">        keysize:</span></span><br><span class="line">            <span class="number">2048</span></span><br><span class="line"><span class="attr">        log_datefmt:</span></span><br><span class="line">            <span class="string">%H:%M:%S</span></span><br><span class="line"><span class="attr">        log_datefmt_logfile:</span></span><br><span class="line">            <span class="string">%Y-%m-%d</span> <span class="string">%H:%M:%S</span></span><br><span class="line"><span class="attr">        log_file:</span></span><br><span class="line">            <span class="string">/var/log/salt/master</span></span><br><span class="line"><span class="attr">        log_fmt_console:</span></span><br><span class="line">            <span class="string">[%(levelname)-8s]</span> <span class="string">%(message)s</span></span><br><span class="line"><span class="attr">        log_fmt_logfile:</span></span><br><span class="line">            <span class="string">%(asctime)s,%(msecs)03.0f</span> <span class="string">[%(name)-17s][%(levelname)-8s][%(process)d]</span> <span class="string">%(message)s</span></span><br><span class="line"><span class="attr">        log_granular_levels:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        log_level:</span></span><br><span class="line">            <span class="string">warning</span></span><br><span class="line"><span class="attr">        loop_interval:</span></span><br><span class="line">            <span class="number">60</span></span><br><span class="line"><span class="attr">        maintenance_floscript:</span></span><br><span class="line">            <span class="string">/usr/lib/python2.7/site-packages/salt/daemons/flo/maint.flo</span></span><br><span class="line"><span class="attr">        master_floscript:</span></span><br><span class="line">            <span class="string">/usr/lib/python2.7/site-packages/salt/daemons/flo/master.flo</span></span><br><span class="line"><span class="attr">        master_job_cache:</span></span><br><span class="line">            <span class="string">local_cache</span></span><br><span class="line"><span class="attr">        master_pubkey_signature:</span></span><br><span class="line">            <span class="string">master_pubkey_signature</span></span><br><span class="line"><span class="attr">        master_roots:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">            base:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">/srv/salt-master</span></span><br><span class="line"><span class="attr">        master_sign_key_name:</span></span><br><span class="line">            <span class="string">master_sign</span></span><br><span class="line"><span class="attr">        master_sign_pubkey:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        master_tops:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        master_use_pubkey_signature:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        max_event_size:</span></span><br><span class="line">            <span class="number">1048576</span></span><br><span class="line"><span class="attr">        max_minions:</span></span><br><span class="line">            <span class="number">0</span></span><br><span class="line"><span class="attr">        max_open_files:</span></span><br><span class="line">            <span class="number">100000</span></span><br><span class="line"><span class="attr">        minion_data_cache:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        minionfs_blacklist:</span></span><br><span class="line"><span class="attr">        minionfs_env:</span></span><br><span class="line">            <span class="string">base</span></span><br><span class="line"><span class="attr">        minionfs_mountpoint:</span></span><br><span class="line"><span class="attr">        minionfs_whitelist:</span></span><br><span class="line"><span class="attr">        nodegroups:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        open_mode:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        order_masters:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        outputter_dirs:</span></span><br><span class="line"><span class="attr">        peer:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">        permissive_pki_access:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        pidfile:</span></span><br><span class="line">            <span class="string">/var/run/salt-master.pid</span></span><br><span class="line"><span class="attr">        pillar_opts:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        pillar_roots:</span></span><br><span class="line"><span class="bullet">            -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">            base:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">/srv/pillar</span></span><br><span class="line"><span class="attr">        pillar_safe_render_error:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        pillar_source_merging_strategy:</span></span><br><span class="line">            <span class="string">smart</span></span><br><span class="line"><span class="attr">        pillar_version:</span></span><br><span class="line">            <span class="number">2</span></span><br><span class="line"><span class="attr">        pillarenv:</span></span><br><span class="line">            <span class="string">None</span></span><br><span class="line"><span class="attr">        ping_on_rotate:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        pki_dir:</span></span><br><span class="line">            <span class="string">/etc/salt/pki/master</span></span><br><span class="line"><span class="attr">        preserve_minion_cache:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        pub_hwm:</span></span><br><span class="line">            <span class="number">1000</span></span><br><span class="line"><span class="attr">        publish_port:</span></span><br><span class="line">            <span class="number">4505</span></span><br><span class="line"><span class="attr">        publish_session:</span></span><br><span class="line">            <span class="number">86400</span></span><br><span class="line"><span class="attr">        queue_dirs:</span></span><br><span class="line"><span class="attr">        raet_alt_port:</span></span><br><span class="line">            <span class="number">4511</span></span><br><span class="line"><span class="attr">        raet_clear_remotes:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        raet_main:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        raet_mutable:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        raet_port:</span></span><br><span class="line">            <span class="number">4506</span></span><br><span class="line"><span class="attr">        range_server:</span></span><br><span class="line"><span class="attr">            range:</span><span class="number">80</span></span><br><span class="line"><span class="attr">        reactor:</span></span><br><span class="line"><span class="attr">        reactor_refresh_interval:</span></span><br><span class="line">            <span class="number">60</span></span><br><span class="line"><span class="attr">        reactor_worker_hwm:</span></span><br><span class="line">            <span class="number">10000</span></span><br><span class="line"><span class="attr">        reactor_worker_threads:</span></span><br><span class="line">            <span class="number">10</span></span><br><span class="line"><span class="attr">        renderer:</span></span><br><span class="line">            <span class="string">yaml_jinja</span></span><br><span class="line"><span class="attr">        ret_port:</span></span><br><span class="line">            <span class="number">4506</span></span><br><span class="line"><span class="attr">        root_dir:</span></span><br><span class="line">            <span class="string">/</span></span><br><span class="line"><span class="attr">        rotate_aes_key:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        runner_dirs:</span></span><br><span class="line"><span class="attr">        saltversion:</span></span><br><span class="line">            <span class="number">2015.5</span><span class="number">.10</span></span><br><span class="line"><span class="attr">        search:</span></span><br><span class="line"><span class="attr">        search_index_interval:</span></span><br><span class="line">            <span class="number">3600</span></span><br><span class="line"><span class="attr">        serial:</span></span><br><span class="line">            <span class="string">msgpack</span></span><br><span class="line"><span class="attr">        show_jid:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        show_timeout:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        sign_pub_messages:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        sock_dir:</span></span><br><span class="line">            <span class="string">/var/run/salt/master</span></span><br><span class="line"><span class="attr">        sqlite_queue_dir:</span></span><br><span class="line">            <span class="string">/var/cache/salt/master/queues</span></span><br><span class="line"><span class="attr">        ssh_passwd:</span></span><br><span class="line"><span class="attr">        ssh_port:</span></span><br><span class="line">            <span class="number">22</span></span><br><span class="line"><span class="attr">        ssh_scan_ports:</span></span><br><span class="line">            <span class="number">22</span></span><br><span class="line"><span class="attr">        ssh_scan_timeout:</span></span><br><span class="line">            <span class="number">0.01</span></span><br><span class="line"><span class="attr">        ssh_sudo:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        ssh_timeout:</span></span><br><span class="line">            <span class="number">60</span></span><br><span class="line"><span class="attr">        ssh_user:</span></span><br><span class="line">            <span class="string">root</span></span><br><span class="line"><span class="attr">        state_aggregate:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        state_auto_order:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        state_events:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        state_output:</span></span><br><span class="line">            <span class="string">full</span></span><br><span class="line"><span class="attr">        state_top:</span></span><br><span class="line"><span class="attr">            salt:</span><span class="string">//top.sls</span></span><br><span class="line"><span class="attr">        state_top_saltenv:</span></span><br><span class="line">            <span class="string">None</span></span><br><span class="line"><span class="attr">        state_verbose:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        sudo_acl:</span></span><br><span class="line">            <span class="literal">False</span></span><br><span class="line"><span class="attr">        svnfs_branches:</span></span><br><span class="line">            <span class="string">branches</span></span><br><span class="line"><span class="attr">        svnfs_env_blacklist:</span></span><br><span class="line"><span class="attr">        svnfs_env_whitelist:</span></span><br><span class="line"><span class="attr">        svnfs_mountpoint:</span></span><br><span class="line"><span class="attr">        svnfs_remotes:</span></span><br><span class="line"><span class="attr">        svnfs_root:</span></span><br><span class="line"><span class="attr">        svnfs_tags:</span></span><br><span class="line">            <span class="string">tags</span></span><br><span class="line"><span class="attr">        svnfs_trunk:</span></span><br><span class="line">            <span class="string">trunk</span></span><br><span class="line"><span class="attr">        syndic_dir:</span></span><br><span class="line">            <span class="string">/var/cache/salt/master/syndics</span></span><br><span class="line"><span class="attr">        syndic_event_forward_timeout:</span></span><br><span class="line">            <span class="number">0.5</span></span><br><span class="line"><span class="attr">        syndic_jid_forward_cache_hwm:</span></span><br><span class="line">            <span class="number">100</span></span><br><span class="line"><span class="attr">        syndic_master:</span></span><br><span class="line"><span class="attr">        syndic_max_event_process_time:</span></span><br><span class="line">            <span class="number">0.5</span></span><br><span class="line"><span class="attr">        syndic_wait:</span></span><br><span class="line">            <span class="number">5</span></span><br><span class="line"><span class="attr">        timeout:</span></span><br><span class="line">            <span class="number">5</span></span><br><span class="line"><span class="attr">        token_dir:</span></span><br><span class="line">            <span class="string">/var/cache/salt/master/tokens</span></span><br><span class="line"><span class="attr">        token_expire:</span></span><br><span class="line">            <span class="number">43200</span></span><br><span class="line"><span class="attr">        transport:</span></span><br><span class="line">            <span class="string">zeromq</span></span><br><span class="line"><span class="attr">        user:</span></span><br><span class="line">            <span class="string">root</span></span><br><span class="line"><span class="attr">        verify_env:</span></span><br><span class="line">            <span class="literal">True</span></span><br><span class="line"><span class="attr">        win_gitrepos:</span></span><br><span class="line"><span class="attr">            - https:</span><span class="string">//github.com/saltstack/salt-winrepo.git</span></span><br><span class="line"><span class="attr">        win_repo:</span></span><br><span class="line">            <span class="string">/srv/salt/win/repo</span></span><br><span class="line"><span class="attr">        win_repo_mastercachefile:</span></span><br><span class="line">            <span class="string">/srv/salt/win/repo/winrepo.p</span></span><br><span class="line"><span class="attr">        worker_floscript:</span></span><br><span class="line">            <span class="string">/usr/lib/python2.7/site-packages/salt/daemons/flo/worker.flo</span></span><br><span class="line"><span class="attr">        worker_threads:</span></span><br><span class="line">            <span class="number">5</span></span><br><span class="line"><span class="attr">        zmq_filtering:</span></span><br><span class="line">            <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="Pillar-应用场景"><a href="#Pillar-应用场景" class="headerlink" title="Pillar 应用场景"></a>Pillar 应用场景</h2><p>用于敏感数据，给某一个配置文件设置一个密码，这个密码只希望指定 minion 能看到<br>使用 Pillar 来处理变量差异性</p><h2 id="定义-Pillar-数据"><a href="#定义-Pillar-数据" class="headerlink" title="定义 Pillar 数据"></a>定义 Pillar 数据</h2><blockquote><p>打开 <code>pillar_roots</code> 配置<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="comment"># vim /etc/salt/master</span></span><br><span class="line"><span class="string">...</span>省略<span class="string">...</span></span><br><span class="line">pillar_roots:</span><br><span class="line">  base:</span><br><span class="line">    - <span class="string">/srv/pillar</span></span><br><span class="line"><span class="string">...</span>省略<span class="string">...</span></span><br><span class="line"><span class="function">:wq</span> 保存退出</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 salt-master 服务</span></span><br><span class="line">systemctl restart salt-master</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注意：<code>base</code> 环境是必须有的基础环境，和 <code>topfile</code> 里是对应的<br>可以配置多个环境<br>存放在 <code>/srv/pillar</code> 目录下<br><code>Pillar</code> 也有 <code>topfile</code>，可以指定哪个 <code>Minion</code> 能看到哪一个<br><code>topfile</code> 必须放在 <code>base</code> 环境下</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># mkdir -pv /srv/pillar</span></span><br><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># cd /srv/pillar/</span></span><br><span class="line">[root<span class="symbol">@master01</span> pillar]<span class="meta"># vim /srv/pillar/apache.sls</span></span><br><span class="line">&#123;% <span class="keyword">if</span> grains[<span class="string">'os'</span>] == <span class="string">'CentOS'</span> %&#125;</span><br><span class="line">apache: httpd</span><br><span class="line">&#123;% elif grains[<span class="string">'os'</span>] == <span class="string">'Debian'</span> %&#125;</span><br><span class="line">apache: apache2</span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br><span class="line">:wq 保存退出</span><br></pre></td></tr></table></figure><blockquote><p>将 apache.sls 指定哪个 Minion 能看到<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@master01 ~</span>]<span class="meta"># cd /srv/pillar/</span></span><br><span class="line">[<span class="meta">root@master01 pillar</span>]<span class="meta"># vim /srv/pillar/top.sls</span></span><br><span class="line"><span class="keyword">base</span>:</span><br><span class="line">  <span class="string">'*'</span>:</span><br><span class="line">    - apache</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>让所有机器都能看到这个 apache.sls 的 Pillar</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 pillar]<span class="meta"># salt <span class="string">'*'</span> pillar.items</span></span><br><span class="line"><span class="symbol">dbfw01:</span></span><br><span class="line">    ----------</span><br><span class="line"><span class="symbol">    apache:</span></span><br><span class="line">        httpd</span><br><span class="line"><span class="symbol">minion01:</span></span><br><span class="line">    ----------</span><br><span class="line"><span class="symbol">    apache:</span></span><br><span class="line">        httpd</span><br></pre></td></tr></table></figure><blockquote><p>获取到了 apache 的 pillar，值都是 httpd，因为都是 CentOS 的机器，如果是 Ubuntu 的机器就会显示 apache2</p></blockquote><p><strong>Pillar 主要用于做配置管理，用来定义一些变量和参数，比如：主机名，IP</strong></p><h2 id="Pillar-定位主机"><a href="#Pillar-定位主机" class="headerlink" title="Pillar 定位主机"></a>Pillar 定位主机</h2><blockquote><p><code>-I, --pillar</code> 表示使用 Pillar 来匹配<br>设置完 Pillar 后，需要刷新 Pillar 数据信息，使其生效<br><code>salt &#39;*&#39; saltutil.refresh_pillar</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master01</span> <span class="string">pillar]#</span> <span class="string">salt</span> <span class="string">'*'</span> <span class="string">saltutil.refresh_pillar</span></span><br><span class="line"><span class="attr">dbfw01:</span></span><br><span class="line">    <span class="literal">True</span></span><br><span class="line"><span class="attr">minion01:</span></span><br><span class="line">    <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">[root@master01</span> <span class="string">pillar]#</span> <span class="string">salt</span> <span class="bullet">-I</span> <span class="string">'apache:httpd'</span> <span class="string">test.ping</span></span><br><span class="line"><span class="attr">dbfw01:</span></span><br><span class="line">    <span class="literal">True</span></span><br><span class="line"><span class="attr">minion01:</span></span><br><span class="line">    <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SaltStack-数据系统-Pillar&quot;&gt;&lt;a href=&quot;#SaltStack-数据系统-Pillar&quot; class=&quot;headerlink&quot; title=&quot;SaltStack 数据系统 Pillar&quot;&gt;&lt;/a&gt;SaltStack 数据系统 Pillar&lt;/h1&gt;
    
    </summary>
    
      <category term="SaltStack笔记" scheme="http://www.gmlyo.com/categories/SaltStack%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SaltStack 数据系统 Pillar" scheme="http://www.gmlyo.com/tags/SaltStack-%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F-Pillar/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack states sls 状态管理</title>
    <link href="http://www.gmlyo.com/2018/09/06/SaltStack-states-sls-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    <id>http://www.gmlyo.com/2018/09/06/SaltStack-states-sls-状态管理/</id>
    <published>2018-09-05T17:58:05.000Z</published>
    <updated>2018-09-09T15:29:22.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SaltStack-states-sls-状态管理"><a href="#SaltStack-states-sls-状态管理" class="headerlink" title="SaltStack states sls 状态管理"></a>SaltStack states sls 状态管理</h2><a id="more"></a><h3 id="开启-file-roots-状态管理"><a href="#开启-file-roots-状态管理" class="headerlink" title="开启 file_roots 状态管理"></a>开启 file_roots 状态管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]# cd /etc/salt/</span><br><span class="line">[root@master01 salt]# vim /etc/salt/master</span><br><span class="line">...省略...</span><br><span class="line"><span class="meta">#</span><span class="bash"> file_roots:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   base:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     - /srv/salt/</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   dev:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     - /srv/salt/dev/services</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     - /srv/salt/dev/states</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   prod:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     - /srv/salt/prod/services</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     - /srv/salt/prod/states</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">file_roots:        # 打开这段注释</span><br><span class="line">  base:</span><br><span class="line">    - /srv/salt</span><br><span class="line">...省略...</span><br><span class="line">:wq保存退出</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 mkdir -pv /srv/salt 目录</span></span><br><span class="line">[root@master01 ~]# mkdir -pv /srv/salt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 Master端服务</span></span><br><span class="line">systemctl restart salt-master</span><br></pre></td></tr></table></figure><blockquote><p>默认必须有一个 base 环境<br>可以指定多个环境：基准环境(base)，开发环境(dev)，生产环境(prod)</p></blockquote><h3 id="编辑-sls-状态配置"><a href="#编辑-sls-状态配置" class="headerlink" title="编辑 sls 状态配置"></a>编辑 sls 状态配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master01</span> <span class="string">~]#</span> <span class="string">cd</span> <span class="string">/srv/salt/</span></span><br><span class="line"><span class="string">[root@master01</span> <span class="string">salt]#</span> <span class="string">vim</span> <span class="string">/srv/salt/nginx.sls</span></span><br><span class="line"><span class="attr">nginx-install:</span>       <span class="comment"># 自定义名称</span></span><br><span class="line">  <span class="string">pkg.installed:</span>     <span class="comment"># 模块.方法</span></span><br><span class="line"><span class="attr">    - names:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nginx-servcice:</span>      <span class="comment"># 自定义名称</span></span><br><span class="line">  <span class="string">service.running:</span>   <span class="comment"># 模块.方法</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">nginx</span>    <span class="comment"># nginx 服务名</span></span><br><span class="line"><span class="attr">    - enable:</span> <span class="literal">True</span>   <span class="comment"># 开机自启</span></span><br><span class="line"><span class="attr">    - reload:</span> <span class="literal">True</span>   <span class="comment"># 开启重新加载</span></span><br></pre></td></tr></table></figure><blockquote><p>执行<br><code>salt &#39;*&#39; 模块.方法 sls文件</code><br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># salt <span class="string">'*'</span> state.sls nginx</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>salt ‘*’ 意思是在所有机器上执行  nginx 这个状态(sls)</p></blockquote><blockquote><p>如果没有指定 <code>-name: nginx</code> 服务名，会报 Result 失败<br>命名服务 <code>nginx-service</code> 不可用，因为会把 <code>nginx-service</code> 当成服务名<br>另一个办法是把 <code>nginx-service</code> 改成 <code>nginx</code>，<code>-name: nginx</code> 就不用写了<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">----------</span><br><span class="line">          ID: nginx-service</span><br><span class="line">    Function: service.running</span><br><span class="line">      Result: <span class="literal">False</span></span><br><span class="line">     Comment: The named<span class="built_in"> service </span>nginx-service is <span class="keyword">not</span> available</span><br><span class="line">     Started: 01:38:22.609850</span><br><span class="line">    Duration: 108.528 ms</span><br><span class="line">     Changes:</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>salt ‘minion01’ 指定在 minion01 机器上执行  nginx 这个状态(sls)<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@master01</span> <span class="string">~]#</span> <span class="string">salt</span> <span class="string">'minion01'</span> <span class="string">state.sls</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">minion01:</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">          ID:</span> <span class="string">nginx-install</span></span><br><span class="line"><span class="attr">    Function:</span> <span class="string">pkg.installed</span></span><br><span class="line"><span class="attr">        Name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">      Result:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">     Comment:</span> <span class="string">The</span> <span class="string">following</span> <span class="string">packages</span> <span class="string">were</span> <span class="string">installed/updated:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">     Started:</span> <span class="number">01</span><span class="string">:40:29.448702</span></span><br><span class="line"><span class="attr">    Duration:</span> <span class="number">8950.813</span> <span class="string">ms</span></span><br><span class="line"><span class="attr">     Changes:</span>   </span><br><span class="line"><span class="bullet">              -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">              nginx:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-all-modules:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-mod-http-geoip:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-mod-http-image-filter:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-mod-http-perl:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-mod-http-xslt-filter:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-mod-mail:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="attr">              nginx-mod-stream:</span></span><br><span class="line"><span class="bullet">                  -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">                  new:</span></span><br><span class="line">                      <span class="number">1</span><span class="string">:1.12.2-2.el7</span></span><br><span class="line"><span class="attr">                  old:</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">          ID:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    Function:</span> <span class="string">service.running</span></span><br><span class="line"><span class="attr">      Result:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">     Comment:</span> <span class="string">Service</span> <span class="string">nginx</span> <span class="string">has</span> <span class="string">been</span> <span class="string">enabled,</span> <span class="string">and</span> <span class="string">is</span> <span class="string">running</span></span><br><span class="line"><span class="attr">     Started:</span> <span class="number">01</span><span class="string">:40:38.412396</span></span><br><span class="line"><span class="attr">    Duration:</span> <span class="number">732.741</span> <span class="string">ms</span></span><br><span class="line"><span class="attr">     Changes:</span>   </span><br><span class="line"><span class="bullet">              -</span><span class="bullet">---------</span></span><br><span class="line"><span class="attr">              nginx:</span></span><br><span class="line">                  <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">Summary</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-----------</span></span><br><span class="line"><span class="attr">Succeeded:</span> <span class="number">2</span> <span class="string">(changed=2)</span></span><br><span class="line"><span class="attr">Failed:</span>    <span class="number">0</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-----------</span></span><br><span class="line"><span class="string">Total</span> <span class="string">states</span> <span class="attr">run:</span>     <span class="number">2</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在 Minion 端查看</p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@minion01</span> ~]<span class="meta"># watch <span class="string">'ps -ef | grep yum'</span></span></span><br><span class="line">[root<span class="symbol">@minion01</span> ~]<span class="meta"># lsof -i:80</span></span><br></pre></td></tr></table></figure><blockquote><p>一台机器可能不止一种状态(sls)配置，可能有多个状态(sls)配置<br>可以使用高级状态(sls)配置<br>写一个入口文件 topfile<br>一般入口文件名为 top.sls<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># vim /srv/salt/top.sls</span></span><br><span class="line">base:           <span class="meta"># 在 base 下</span></span><br><span class="line">  <span class="string">'*'</span>:          <span class="meta"># 在 <span class="string">'*'</span> 所有主机上</span></span><br><span class="line">    - nginx     <span class="meta"># 执行 nginx 这个 sls</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">root@master01 ~</span>]<span class="meta"># vim /srv/salt/top.sls</span></span><br><span class="line"><span class="keyword">base</span>:            <span class="meta"># 在 base 下</span></span><br><span class="line">  <span class="string">'minion01'</span>:   <span class="meta"># 在 minion01 主机上</span></span><br><span class="line">    - nginx      <span class="meta"># 执行 nginx 这个 sls</span></span><br></pre></td></tr></table></figure><blockquote><p>执行<br><code>salt &#39;*&#39; 模块.高级状态</code></p></blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@master01</span> ~]<span class="meta"># salt <span class="string">'*'</span> state.highstate</span></span><br></pre></td></tr></table></figure><blockquote><p>从入口文件开始读，从 topfile 开始读<br>topfile 里包含了哪些普通状态(sls)，就执行哪些状态(sls)<br>远程执行，状态管理</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SaltStack-states-sls-状态管理&quot;&gt;&lt;a href=&quot;#SaltStack-states-sls-状态管理&quot; class=&quot;headerlink&quot; title=&quot;SaltStack states sls 状态管理&quot;&gt;&lt;/a&gt;SaltStack states sls 状态管理&lt;/h2&gt;
    
    </summary>
    
      <category term="SaltStack笔记" scheme="http://www.gmlyo.com/categories/SaltStack%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SaltStack states sls 状态管理" scheme="http://www.gmlyo.com/tags/SaltStack-states-sls-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
